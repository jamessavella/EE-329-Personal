/*
 * UART.c
 *
 *  Created on: May 31, 2023
 *      Author: james
 */

#include "main.h"
#include "uart.h"

//---------------------NEED TO VERIFY THAT THIS WORKS: There are differences
//References: pg1386 flags for registers
//James Function
//Initializes UART for bus A
//This communication protocol is for the finger print scanner
void UART2_init(void) {
	// Enable GPIOA and USART2 clocks
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;

	// Configure USART2 pins for alternate function
	GPIOA->MODER &= ~(GPIO_MODER_MODE2_Msk | GPIO_MODER_MODE3_Msk);
	GPIOA->MODER |= (GPIO_MODER_MODE2_1 | GPIO_MODER_MODE3_1);
	GPIOA->AFR[0] |= (UART4_AF_MODE << GPIO_AFRL_AFSEL2_Pos)
			| (UART4_AF_MODE << GPIO_AFRL_AFSEL3_Pos);

	USART2->BRR = 69;

	USART2->CR1 |=
			USART_CR1_TE | USART_CR1_RE | USART_CR1_RXNEIE | USART_CR1_UE;
	NVIC_EnableIRQ(USART2_IRQn);
}

void UART4_IRQHandler(void) {
	if (UART4->ISR & USART_ISR_RXNE) {
		char charRecv = UART4->RDR;
		while (!(UART4->ISR & USART_ISR_TXE))
			;
		UART4->TDR = charRecv;
	}
}

//Wilson Functions
void LPUART_init() {
	PWR->CR2 |= (PWR_CR2_IOSV);             // power avail on PG[15:2] (LPUART1)
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOGEN);   // enable GPIOG clock
	RCC->APB1ENR2 |= RCC_APB1ENR2_LPUART1EN; // enable LPUART clock bridge
	GPIOG->MODER &= ~(GPIO_MODER_MODE5 | GPIO_MODER_MODE6 | GPIO_MODER_MODE7
			| GPIO_MODER_MODE8); //clear bits
	GPIOG->MODER |= (GPIO_MODER_MODE5_1 | GPIO_MODER_MODE6_1
			| GPIO_MODER_MODE7_1 | GPIO_MODER_MODE8_1); //set bits AF mode
	GPIOG->AFR[0] &= ~((0x000F << GPIO_AFRL_AFSEL5_Pos)
			| (0x000F << GPIO_AFRL_AFSEL6_Pos)
			| (0x000F << GPIO_AFRL_AFSEL7_Pos));
	GPIOG->AFR[1] &= ~(0x000F << GPIO_AFRH_AFSEL8_Pos); //clear AF

	GPIOG->AFR[0] |= ((0x0008 << GPIO_AFRL_AFSEL5_Pos)
			| (0x0008 << GPIO_AFRL_AFSEL6_Pos)
			| (0x0008 << GPIO_AFRL_AFSEL7_Pos));	//set bits AF 8

	GPIOG->AFR[1] |= (0x0008 << GPIO_AFRH_AFSEL8_Pos);
	/* USER: configure GPIOG registers MODER/PUPDR/OTYPER/OSPEEDR then
	 select AF mode and specify which function with AFR[0] and AFR[1] */
	LPUART1->CR1 &= ~(USART_CR1_M1 | USART_CR1_M0); // 8-bit data
	LPUART1->CR1 |= USART_CR1_UE;                   // enable LPUART1
	LPUART1->CR1 |= (USART_CR1_TE | USART_CR1_RE);  // enable xmit & recv
	LPUART1->CR1 |= USART_CR1_RXNEIE;        // enable LPUART1 recv interrupt
	LPUART1->ISR &= ~(USART_ISR_RXNE);       // clear Recv-Not-Empty flag
	LPUART1->BRR = 106666;
	NVIC->ISER[2] = (1 << (LPUART1_IRQn & 0x1F));   // enable LPUART1 ISR
	__enable_irq();                          // enable global interrupts
}

void LPUART_Print_Char(char ch) {
	while (!(LPUART1->ISR & USART_ISR_TXE))
		;   // wait for empty transmit buffer
	LPUART1->TDR = ch;                        // send the character
}

void LPUART_Print(const char *message) {
	uint16_t iStrIdx = 0;
	while (message[iStrIdx] != '\0') {
		LPUART_Print_Char(message[iStrIdx]);
		iStrIdx++;
	}
}

void LPUART_ESC_Print(const char *message) {
	uint16_t iStrIdx = 0;
	while (message[iStrIdx] != 0) {
		while (!(LPUART1->ISR & USART_ISR_TXE))
			;   // wait for empty transmit buffer
		LPUART1->TDR = message[iStrIdx];        // send this character
		iStrIdx++;                      // advance index to next char.
	}
}
