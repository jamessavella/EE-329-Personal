
A6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001660  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  0800180c  0800180c  0001180c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080018cc  080018cc  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080018cc  080018cc  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080018cc  080018cc  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080018cc  080018cc  000118cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080018d0  080018d0  000118d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080018d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000014  080018e8  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000034  080018e8  00020034  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004a2f  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000fd2  00000000  00000000  00024a73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000578  00000000  00000000  00025a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004e0  00000000  00000000  00025fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027da9  00000000  00000000  000264a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000057f5  00000000  00000000  0004e249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2adf  00000000  00000000  00053a3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014651d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000013e0  00000000  00000000  00146570  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000014 	.word	0x20000014
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080017f4 	.word	0x080017f4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000018 	.word	0x20000018
 80001e8:	080017f4 	.word	0x080017f4

080001ec <SysTick_Init>:
#include "stm32l4xx_hal.h"


// configure SysTick timer for use with delay_us(). This will break
// warning: breaks HAL_delay() by disabling interrupts for shorter delay timing.
void SysTick_Init(void){
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0
    SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |	       // enable SysTick Timer
 80001f0:	4b08      	ldr	r3, [pc, #32]	; (8000214 <SysTick_Init+0x28>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a07      	ldr	r2, [pc, #28]	; (8000214 <SysTick_Init+0x28>)
 80001f6:	f043 0305 	orr.w	r3, r3, #5
 80001fa:	6013      	str	r3, [r2, #0]
                      SysTick_CTRL_CLKSOURCE_Msk);     // select CPU clock
    SysTick->CTRL &= ~(SysTick_CTRL_TICKINT_Msk);      // disable interrupt
 80001fc:	4b05      	ldr	r3, [pc, #20]	; (8000214 <SysTick_Init+0x28>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a04      	ldr	r2, [pc, #16]	; (8000214 <SysTick_Init+0x28>)
 8000202:	f023 0302 	bic.w	r3, r3, #2
 8000206:	6013      	str	r3, [r2, #0]
}
 8000208:	bf00      	nop
 800020a:	46bd      	mov	sp, r7
 800020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	e000e010 	.word	0xe000e010

08000218 <delay_us>:

// delay in microseconds using SysTick timer to count CPU clock cycles
// do not call with 0 : error, maximum delay.
// careful calling with small nums : result in longer delays than specified:
//    e.g. @4MHz, delay_us(1) = 10=15 us delay.
void delay_us(const uint32_t time_us) {  // time_us = target delay, microseconds
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
    SysTick->LOAD = (uint32_t)((time_us * (SystemCoreClock / 1000000)) - 1);
 8000220:	4b11      	ldr	r3, [pc, #68]	; (8000268 <delay_us+0x50>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a11      	ldr	r2, [pc, #68]	; (800026c <delay_us+0x54>)
 8000226:	fba2 2303 	umull	r2, r3, r2, r3
 800022a:	0c9b      	lsrs	r3, r3, #18
 800022c:	687a      	ldr	r2, [r7, #4]
 800022e:	fb02 f303 	mul.w	r3, r2, r3
 8000232:	4a0f      	ldr	r2, [pc, #60]	; (8000270 <delay_us+0x58>)
 8000234:	3b01      	subs	r3, #1
 8000236:	6053      	str	r3, [r2, #4]
    SysTick->VAL = 0;                                      // clear the timer count
 8000238:	4b0d      	ldr	r3, [pc, #52]	; (8000270 <delay_us+0x58>)
 800023a:	2200      	movs	r2, #0
 800023c:	609a      	str	r2, [r3, #8]
    SysTick->CTRL &= ~(SysTick_CTRL_COUNTFLAG_Msk);        // clear the count flag
 800023e:	4b0c      	ldr	r3, [pc, #48]	; (8000270 <delay_us+0x58>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	4a0b      	ldr	r2, [pc, #44]	; (8000270 <delay_us+0x58>)
 8000244:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000248:	6013      	str	r3, [r2, #0]
    while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)); // wait for the flag
 800024a:	bf00      	nop
 800024c:	4b08      	ldr	r3, [pc, #32]	; (8000270 <delay_us+0x58>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000254:	2b00      	cmp	r3, #0
 8000256:	d0f9      	beq.n	800024c <delay_us+0x34>
}
 8000258:	bf00      	nop
 800025a:	bf00      	nop
 800025c:	370c      	adds	r7, #12
 800025e:	46bd      	mov	sp, r7
 8000260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop
 8000268:	20000008 	.word	0x20000008
 800026c:	431bde83 	.word	0x431bde83
 8000270:	e000e010 	.word	0xe000e010

08000274 <main>:

//cursor position center
int row = 20;
int col = 40;

int main(void) {
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0

	HAL_Init();
 8000278:	f000 facb 	bl	8000812 <HAL_Init>
	SystemClock_Config();
 800027c:	f000 f9f4 	bl	8000668 <SystemClock_Config>
	SysTick_Init();
 8000280:	f7ff ffb4 	bl	80001ec <SysTick_Init>
	LPUAR_init();
 8000284:	f000 f83e 	bl	8000304 <LPUAR_init>
	LPUART_ESC_Print("[2J");	//clear all
 8000288:	4812      	ldr	r0, [pc, #72]	; (80002d4 <main+0x60>)
 800028a:	f000 f8c9 	bl	8000420 <LPUART_ESC_Print>
	LPUART_ESC_Print("[37m");	//makes text white
 800028e:	4812      	ldr	r0, [pc, #72]	; (80002d8 <main+0x64>)
 8000290:	f000 f8c6 	bl	8000420 <LPUART_ESC_Print>

	LPUART_ESC_Print("[3B");	//3 down
 8000294:	4811      	ldr	r0, [pc, #68]	; (80002dc <main+0x68>)
 8000296:	f000 f8c3 	bl	8000420 <LPUART_ESC_Print>
	LPUART_ESC_Print("[5C");	//5 right
 800029a:	4811      	ldr	r0, [pc, #68]	; (80002e0 <main+0x6c>)
 800029c:	f000 f8c0 	bl	8000420 <LPUART_ESC_Print>
	LPUART_Print("All good students read the");
 80002a0:	4810      	ldr	r0, [pc, #64]	; (80002e4 <main+0x70>)
 80002a2:	f000 f891 	bl	80003c8 <LPUART_Print>
	LPUART_ESC_Print("[1B");	// 1 down
 80002a6:	4810      	ldr	r0, [pc, #64]	; (80002e8 <main+0x74>)
 80002a8:	f000 f8ba 	bl	8000420 <LPUART_ESC_Print>
	LPUART_ESC_Print("[21D");	//21 left
 80002ac:	480f      	ldr	r0, [pc, #60]	; (80002ec <main+0x78>)
 80002ae:	f000 f8b7 	bl	8000420 <LPUART_ESC_Print>
	LPUART_ESC_Print("[5m");	//blinking mode
 80002b2:	480f      	ldr	r0, [pc, #60]	; (80002f0 <main+0x7c>)
 80002b4:	f000 f8b4 	bl	8000420 <LPUART_ESC_Print>
	LPUART_Print("Reference Manual");
 80002b8:	480e      	ldr	r0, [pc, #56]	; (80002f4 <main+0x80>)
 80002ba:	f000 f885 	bl	80003c8 <LPUART_Print>
	LPUART_ESC_Print("[1;0H");	//put cursor top left
 80002be:	480e      	ldr	r0, [pc, #56]	; (80002f8 <main+0x84>)
 80002c0:	f000 f8ae 	bl	8000420 <LPUART_ESC_Print>
	LPUART_ESC_Print("[0m");	//remove character attributes
 80002c4:	480d      	ldr	r0, [pc, #52]	; (80002fc <main+0x88>)
 80002c6:	f000 f8ab 	bl	8000420 <LPUART_ESC_Print>
	LPUART_Print("Input:");
 80002ca:	480d      	ldr	r0, [pc, #52]	; (8000300 <main+0x8c>)
 80002cc:	f000 f87c 	bl	80003c8 <LPUART_Print>
//	LPUART_ESC_Print("[2J");
//	//splash_screen();
//	delay_us(2000000);
//	LPUART_ESC_Print("[0m");    // remove attributes
//	update_position();
	while (1) {
 80002d0:	e7fe      	b.n	80002d0 <main+0x5c>
 80002d2:	bf00      	nop
 80002d4:	0800180c 	.word	0x0800180c
 80002d8:	08001810 	.word	0x08001810
 80002dc:	08001818 	.word	0x08001818
 80002e0:	0800181c 	.word	0x0800181c
 80002e4:	08001820 	.word	0x08001820
 80002e8:	0800183c 	.word	0x0800183c
 80002ec:	08001840 	.word	0x08001840
 80002f0:	08001848 	.word	0x08001848
 80002f4:	0800184c 	.word	0x0800184c
 80002f8:	08001860 	.word	0x08001860
 80002fc:	08001868 	.word	0x08001868
 8000300:	0800186c 	.word	0x0800186c

08000304 <LPUAR_init>:
	}
}

void LPUAR_init(void) {
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
	PWR->CR2 |= (PWR_CR2_IOSV);             // power avail on PG[15:2] (LPUART1)
 8000308:	4b2a      	ldr	r3, [pc, #168]	; (80003b4 <LPUAR_init+0xb0>)
 800030a:	685b      	ldr	r3, [r3, #4]
 800030c:	4a29      	ldr	r2, [pc, #164]	; (80003b4 <LPUAR_init+0xb0>)
 800030e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000312:	6053      	str	r3, [r2, #4]
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOGEN);   // enable GPIOG clock
 8000314:	4b28      	ldr	r3, [pc, #160]	; (80003b8 <LPUAR_init+0xb4>)
 8000316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000318:	4a27      	ldr	r2, [pc, #156]	; (80003b8 <LPUAR_init+0xb4>)
 800031a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800031e:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC->APB1ENR2 |= RCC_APB1ENR2_LPUART1EN; // enable LPUART clock bridge
 8000320:	4b25      	ldr	r3, [pc, #148]	; (80003b8 <LPUAR_init+0xb4>)
 8000322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000324:	4a24      	ldr	r2, [pc, #144]	; (80003b8 <LPUAR_init+0xb4>)
 8000326:	f043 0301 	orr.w	r3, r3, #1
 800032a:	65d3      	str	r3, [r2, #92]	; 0x5c

	//Initialize Pins for USART
	// Pin 7 = tx, pin 8 = rx,
	GPIOG->MODER &= ~(GPIO_MODER_MODE7 | GPIO_MODER_MODE8);	//clear bits
 800032c:	4b23      	ldr	r3, [pc, #140]	; (80003bc <LPUAR_init+0xb8>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4a22      	ldr	r2, [pc, #136]	; (80003bc <LPUAR_init+0xb8>)
 8000332:	f423 3370 	bic.w	r3, r3, #245760	; 0x3c000
 8000336:	6013      	str	r3, [r2, #0]
	GPIOG->MODER |= (GPIO_MODER_MODE7_1 | GPIO_MODER_MODE8_1);//set to AFR mode
 8000338:	4b20      	ldr	r3, [pc, #128]	; (80003bc <LPUAR_init+0xb8>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a1f      	ldr	r2, [pc, #124]	; (80003bc <LPUAR_init+0xb8>)
 800033e:	f443 3320 	orr.w	r3, r3, #163840	; 0x28000
 8000342:	6013      	str	r3, [r2, #0]
	GPIOG->AFR[0] |= (8 << GPIO_AFRL_AFSEL7_Pos);
 8000344:	4b1d      	ldr	r3, [pc, #116]	; (80003bc <LPUAR_init+0xb8>)
 8000346:	6a1b      	ldr	r3, [r3, #32]
 8000348:	4a1c      	ldr	r2, [pc, #112]	; (80003bc <LPUAR_init+0xb8>)
 800034a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800034e:	6213      	str	r3, [r2, #32]
	GPIOG->AFR[1] |= (8 << GPIO_AFRH_AFSEL8_Pos); //set to AF8 (USART)
 8000350:	4b1a      	ldr	r3, [pc, #104]	; (80003bc <LPUAR_init+0xb8>)
 8000352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000354:	4a19      	ldr	r2, [pc, #100]	; (80003bc <LPUAR_init+0xb8>)
 8000356:	f043 0308 	orr.w	r3, r3, #8
 800035a:	6253      	str	r3, [r2, #36]	; 0x24

	LPUART1->CR1 &= ~(USART_CR1_M1 | USART_CR1_M0); // 8-bit data
 800035c:	4b18      	ldr	r3, [pc, #96]	; (80003c0 <LPUAR_init+0xbc>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a17      	ldr	r2, [pc, #92]	; (80003c0 <LPUAR_init+0xbc>)
 8000362:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 8000366:	6013      	str	r3, [r2, #0]
	LPUART1->CR1 |= USART_CR1_UE;                   // enable LPUART1
 8000368:	4b15      	ldr	r3, [pc, #84]	; (80003c0 <LPUAR_init+0xbc>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	4a14      	ldr	r2, [pc, #80]	; (80003c0 <LPUAR_init+0xbc>)
 800036e:	f043 0301 	orr.w	r3, r3, #1
 8000372:	6013      	str	r3, [r2, #0]
	LPUART1->CR1 |= (USART_CR1_TE | USART_CR1_RE);  // enable xmit & recv
 8000374:	4b12      	ldr	r3, [pc, #72]	; (80003c0 <LPUAR_init+0xbc>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4a11      	ldr	r2, [pc, #68]	; (80003c0 <LPUAR_init+0xbc>)
 800037a:	f043 030c 	orr.w	r3, r3, #12
 800037e:	6013      	str	r3, [r2, #0]
	LPUART1->CR1 |= USART_CR1_RXNEIE;        // enable LPUART1 recv interrupt
 8000380:	4b0f      	ldr	r3, [pc, #60]	; (80003c0 <LPUAR_init+0xbc>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	4a0e      	ldr	r2, [pc, #56]	; (80003c0 <LPUAR_init+0xbc>)
 8000386:	f043 0320 	orr.w	r3, r3, #32
 800038a:	6013      	str	r3, [r2, #0]
	LPUART1->ISR &= ~(USART_ISR_RXNE);       // clear Recv-Not-Empty flag
 800038c:	4b0c      	ldr	r3, [pc, #48]	; (80003c0 <LPUAR_init+0xbc>)
 800038e:	69db      	ldr	r3, [r3, #28]
 8000390:	4a0b      	ldr	r2, [pc, #44]	; (80003c0 <LPUAR_init+0xbc>)
 8000392:	f023 0320 	bic.w	r3, r3, #32
 8000396:	61d3      	str	r3, [r2, #28]

	LPUART1->BRR = 0x22B8;			//sets baud rate
 8000398:	4b09      	ldr	r3, [pc, #36]	; (80003c0 <LPUAR_init+0xbc>)
 800039a:	f242 22b8 	movw	r2, #8888	; 0x22b8
 800039e:	60da      	str	r2, [r3, #12]

	NVIC->ISER[2] = (1 << (LPUART1_IRQn & 0x1F));   // enable LPUART1 ISR
 80003a0:	4b08      	ldr	r3, [pc, #32]	; (80003c4 <LPUAR_init+0xc0>)
 80003a2:	2240      	movs	r2, #64	; 0x40
 80003a4:	609a      	str	r2, [r3, #8]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80003a6:	b662      	cpsie	i
}
 80003a8:	bf00      	nop
	__enable_irq();                          // enable global interrupts
}
 80003aa:	bf00      	nop
 80003ac:	46bd      	mov	sp, r7
 80003ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b2:	4770      	bx	lr
 80003b4:	40007000 	.word	0x40007000
 80003b8:	40021000 	.word	0x40021000
 80003bc:	48001800 	.word	0x48001800
 80003c0:	40008000 	.word	0x40008000
 80003c4:	e000e100 	.word	0xe000e100

080003c8 <LPUART_Print>:

void LPUART_Print(const char *message) {
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b084      	sub	sp, #16
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
	uint16_t iStrIdx = 0;
 80003d0:	2300      	movs	r3, #0
 80003d2:	81fb      	strh	r3, [r7, #14]
	while (message[iStrIdx] != 0) {
 80003d4:	e013      	b.n	80003fe <LPUART_Print+0x36>
		while (!(LPUART1->ISR & USART_ISR_TXE)); // wait for empty xmit buffer
 80003d6:	bf00      	nop
 80003d8:	4b10      	ldr	r3, [pc, #64]	; (800041c <LPUART_Print+0x54>)
 80003da:	69db      	ldr	r3, [r3, #28]
 80003dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d0f9      	beq.n	80003d8 <LPUART_Print+0x10>
		LPUART1->TDR = message[iStrIdx];       // send this character
 80003e4:	89fb      	ldrh	r3, [r7, #14]
 80003e6:	687a      	ldr	r2, [r7, #4]
 80003e8:	4413      	add	r3, r2
 80003ea:	781a      	ldrb	r2, [r3, #0]
 80003ec:	4b0b      	ldr	r3, [pc, #44]	; (800041c <LPUART_Print+0x54>)
 80003ee:	b292      	uxth	r2, r2
 80003f0:	851a      	strh	r2, [r3, #40]	; 0x28
		iStrIdx++;                             // advaasZSAWEQnce index to next char
 80003f2:	89fb      	ldrh	r3, [r7, #14]
 80003f4:	3301      	adds	r3, #1
 80003f6:	81fb      	strh	r3, [r7, #14]
		delay_us(200);
 80003f8:	20c8      	movs	r0, #200	; 0xc8
 80003fa:	f7ff ff0d 	bl	8000218 <delay_us>
	while (message[iStrIdx] != 0) {
 80003fe:	89fb      	ldrh	r3, [r7, #14]
 8000400:	687a      	ldr	r2, [r7, #4]
 8000402:	4413      	add	r3, r2
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	2b00      	cmp	r3, #0
 8000408:	d1e5      	bne.n	80003d6 <LPUART_Print+0xe>
	}
	delay_us(1000);
 800040a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800040e:	f7ff ff03 	bl	8000218 <delay_us>
}
 8000412:	bf00      	nop
 8000414:	3710      	adds	r7, #16
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	40008000 	.word	0x40008000

08000420 <LPUART_ESC_Print>:

void LPUART_ESC_Print(const char *message) {
 8000420:	b580      	push	{r7, lr}
 8000422:	b084      	sub	sp, #16
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
	uint16_t iStrIdx = 0;
 8000428:	2300      	movs	r3, #0
 800042a:	81fb      	strh	r3, [r7, #14]
	while (!(LPUART1->ISR & USART_ISR_TXE));
 800042c:	bf00      	nop
 800042e:	4b16      	ldr	r3, [pc, #88]	; (8000488 <LPUART_ESC_Print+0x68>)
 8000430:	69db      	ldr	r3, [r3, #28]
 8000432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000436:	2b00      	cmp	r3, #0
 8000438:	d0f9      	beq.n	800042e <LPUART_ESC_Print+0xe>
	LPUART1->TDR = 0x1b;
 800043a:	4b13      	ldr	r3, [pc, #76]	; (8000488 <LPUART_ESC_Print+0x68>)
 800043c:	221b      	movs	r2, #27
 800043e:	851a      	strh	r2, [r3, #40]	; 0x28
	while (message[iStrIdx] != 0) {
 8000440:	e013      	b.n	800046a <LPUART_ESC_Print+0x4a>
		while (!(LPUART1->ISR & USART_ISR_TXE)); // wait for empty xmit buffer
 8000442:	bf00      	nop
 8000444:	4b10      	ldr	r3, [pc, #64]	; (8000488 <LPUART_ESC_Print+0x68>)
 8000446:	69db      	ldr	r3, [r3, #28]
 8000448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800044c:	2b00      	cmp	r3, #0
 800044e:	d0f9      	beq.n	8000444 <LPUART_ESC_Print+0x24>
		LPUART1->TDR = message[iStrIdx];       // send this character
 8000450:	89fb      	ldrh	r3, [r7, #14]
 8000452:	687a      	ldr	r2, [r7, #4]
 8000454:	4413      	add	r3, r2
 8000456:	781a      	ldrb	r2, [r3, #0]
 8000458:	4b0b      	ldr	r3, [pc, #44]	; (8000488 <LPUART_ESC_Print+0x68>)
 800045a:	b292      	uxth	r2, r2
 800045c:	851a      	strh	r2, [r3, #40]	; 0x28
		iStrIdx++;
 800045e:	89fb      	ldrh	r3, [r7, #14]
 8000460:	3301      	adds	r3, #1
 8000462:	81fb      	strh	r3, [r7, #14]
		delay_us(200);       // advance index to next char
 8000464:	20c8      	movs	r0, #200	; 0xc8
 8000466:	f7ff fed7 	bl	8000218 <delay_us>
	while (message[iStrIdx] != 0) {
 800046a:	89fb      	ldrh	r3, [r7, #14]
 800046c:	687a      	ldr	r2, [r7, #4]
 800046e:	4413      	add	r3, r2
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b00      	cmp	r3, #0
 8000474:	d1e5      	bne.n	8000442 <LPUART_ESC_Print+0x22>
	}
	delay_us(1000);
 8000476:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800047a:	f7ff fecd 	bl	8000218 <delay_us>
}
 800047e:	bf00      	nop
 8000480:	3710      	adds	r7, #16
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	40008000 	.word	0x40008000

0800048c <LPUART1_IRQHandler>:
//	LPUART_Print("X");
//
//}


void LPUART1_IRQHandler(void) {
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
	uint8_t charRecv;
	if (LPUART1->ISR & USART_ISR_RXNE) {
 8000492:	4b6e      	ldr	r3, [pc, #440]	; (800064c <LPUART1_IRQHandler+0x1c0>)
 8000494:	69db      	ldr	r3, [r3, #28]
 8000496:	f003 0320 	and.w	r3, r3, #32
 800049a:	2b00      	cmp	r3, #0
 800049c:	f000 80c8 	beq.w	8000630 <LPUART1_IRQHandler+0x1a4>
		charRecv = LPUART1->RDR;
 80004a0:	4b6a      	ldr	r3, [pc, #424]	; (800064c <LPUART1_IRQHandler+0x1c0>)
 80004a2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80004a4:	b29b      	uxth	r3, r3
 80004a6:	71fb      	strb	r3, [r7, #7]
		switch (charRecv) {
 80004a8:	79fb      	ldrb	r3, [r7, #7]
 80004aa:	3b42      	subs	r3, #66	; 0x42
 80004ac:	2b35      	cmp	r3, #53	; 0x35
 80004ae:	f200 80b3 	bhi.w	8000618 <LPUART1_IRQHandler+0x18c>
 80004b2:	a201      	add	r2, pc, #4	; (adr r2, 80004b8 <LPUART1_IRQHandler+0x2c>)
 80004b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004b8:	080005a1 	.word	0x080005a1
 80004bc:	08000619 	.word	0x08000619
 80004c0:	08000619 	.word	0x08000619
 80004c4:	08000619 	.word	0x08000619
 80004c8:	08000619 	.word	0x08000619
 80004cc:	08000599 	.word	0x08000599
 80004d0:	08000619 	.word	0x08000619
 80004d4:	08000619 	.word	0x08000619
 80004d8:	08000619 	.word	0x08000619
 80004dc:	08000619 	.word	0x08000619
 80004e0:	08000619 	.word	0x08000619
 80004e4:	08000619 	.word	0x08000619
 80004e8:	08000619 	.word	0x08000619
 80004ec:	08000619 	.word	0x08000619
 80004f0:	08000619 	.word	0x08000619
 80004f4:	08000619 	.word	0x08000619
 80004f8:	08000591 	.word	0x08000591
 80004fc:	08000619 	.word	0x08000619
 8000500:	08000619 	.word	0x08000619
 8000504:	08000619 	.word	0x08000619
 8000508:	08000619 	.word	0x08000619
 800050c:	080005a9 	.word	0x080005a9
 8000510:	08000619 	.word	0x08000619
 8000514:	08000619 	.word	0x08000619
 8000518:	08000619 	.word	0x08000619
 800051c:	08000619 	.word	0x08000619
 8000520:	08000619 	.word	0x08000619
 8000524:	08000619 	.word	0x08000619
 8000528:	08000619 	.word	0x08000619
 800052c:	08000619 	.word	0x08000619
 8000530:	08000619 	.word	0x08000619
 8000534:	080005e5 	.word	0x080005e5
 8000538:	08000619 	.word	0x08000619
 800053c:	08000619 	.word	0x08000619
 8000540:	080005ff 	.word	0x080005ff
 8000544:	08000619 	.word	0x08000619
 8000548:	08000619 	.word	0x08000619
 800054c:	08000619 	.word	0x08000619
 8000550:	08000619 	.word	0x08000619
 8000554:	08000619 	.word	0x08000619
 8000558:	08000619 	.word	0x08000619
 800055c:	08000619 	.word	0x08000619
 8000560:	08000619 	.word	0x08000619
 8000564:	08000619 	.word	0x08000619
 8000568:	08000619 	.word	0x08000619
 800056c:	08000619 	.word	0x08000619
 8000570:	08000619 	.word	0x08000619
 8000574:	08000619 	.word	0x08000619
 8000578:	08000619 	.word	0x08000619
 800057c:	080005cb 	.word	0x080005cb
 8000580:	08000619 	.word	0x08000619
 8000584:	08000619 	.word	0x08000619
 8000588:	08000619 	.word	0x08000619
 800058c:	080005b1 	.word	0x080005b1
		case 'R':
			LPUART_ESC_Print("[31m"); //change cursor red
 8000590:	482f      	ldr	r0, [pc, #188]	; (8000650 <LPUART1_IRQHandler+0x1c4>)
 8000592:	f7ff ff45 	bl	8000420 <LPUART_ESC_Print>
			break;
 8000596:	e054      	b.n	8000642 <LPUART1_IRQHandler+0x1b6>
		case 'G':
			LPUART_ESC_Print("[32m"); //change cursor red
 8000598:	482e      	ldr	r0, [pc, #184]	; (8000654 <LPUART1_IRQHandler+0x1c8>)
 800059a:	f7ff ff41 	bl	8000420 <LPUART_ESC_Print>
			break;
 800059e:	e050      	b.n	8000642 <LPUART1_IRQHandler+0x1b6>
		case 'B':
			LPUART_ESC_Print("[34m"); //change cursor red
 80005a0:	482d      	ldr	r0, [pc, #180]	; (8000658 <LPUART1_IRQHandler+0x1cc>)
 80005a2:	f7ff ff3d 	bl	8000420 <LPUART_ESC_Print>
			break;
 80005a6:	e04c      	b.n	8000642 <LPUART1_IRQHandler+0x1b6>
		case 'W':
			LPUART_ESC_Print("[37m"); //change cursor red
 80005a8:	482c      	ldr	r0, [pc, #176]	; (800065c <LPUART1_IRQHandler+0x1d0>)
 80005aa:	f7ff ff39 	bl	8000420 <LPUART_ESC_Print>
			break;
 80005ae:	e048      	b.n	8000642 <LPUART1_IRQHandler+0x1b6>

		case 'w':	//up
			row -= 1;
 80005b0:	4b2b      	ldr	r3, [pc, #172]	; (8000660 <LPUART1_IRQHandler+0x1d4>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	3b01      	subs	r3, #1
 80005b6:	4a2a      	ldr	r2, [pc, #168]	; (8000660 <LPUART1_IRQHandler+0x1d4>)
 80005b8:	6013      	str	r3, [r2, #0]
			if (row < 1) row = 40;
 80005ba:	4b29      	ldr	r3, [pc, #164]	; (8000660 <LPUART1_IRQHandler+0x1d4>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	dc38      	bgt.n	8000634 <LPUART1_IRQHandler+0x1a8>
 80005c2:	4b27      	ldr	r3, [pc, #156]	; (8000660 <LPUART1_IRQHandler+0x1d4>)
 80005c4:	2228      	movs	r2, #40	; 0x28
 80005c6:	601a      	str	r2, [r3, #0]
			break;
 80005c8:	e034      	b.n	8000634 <LPUART1_IRQHandler+0x1a8>
		case 's'://down
			row += 1;
 80005ca:	4b25      	ldr	r3, [pc, #148]	; (8000660 <LPUART1_IRQHandler+0x1d4>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	3301      	adds	r3, #1
 80005d0:	4a23      	ldr	r2, [pc, #140]	; (8000660 <LPUART1_IRQHandler+0x1d4>)
 80005d2:	6013      	str	r3, [r2, #0]
			if (row > 40) row = 1;
 80005d4:	4b22      	ldr	r3, [pc, #136]	; (8000660 <LPUART1_IRQHandler+0x1d4>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	2b28      	cmp	r3, #40	; 0x28
 80005da:	dd2d      	ble.n	8000638 <LPUART1_IRQHandler+0x1ac>
 80005dc:	4b20      	ldr	r3, [pc, #128]	; (8000660 <LPUART1_IRQHandler+0x1d4>)
 80005de:	2201      	movs	r2, #1
 80005e0:	601a      	str	r2, [r3, #0]
			break;
 80005e2:	e029      	b.n	8000638 <LPUART1_IRQHandler+0x1ac>
		case 'a'://left
			col -= 1;
 80005e4:	4b1f      	ldr	r3, [pc, #124]	; (8000664 <LPUART1_IRQHandler+0x1d8>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	3b01      	subs	r3, #1
 80005ea:	4a1e      	ldr	r2, [pc, #120]	; (8000664 <LPUART1_IRQHandler+0x1d8>)
 80005ec:	6013      	str	r3, [r2, #0]
			if (col < 1) col = 80;
 80005ee:	4b1d      	ldr	r3, [pc, #116]	; (8000664 <LPUART1_IRQHandler+0x1d8>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	dc22      	bgt.n	800063c <LPUART1_IRQHandler+0x1b0>
 80005f6:	4b1b      	ldr	r3, [pc, #108]	; (8000664 <LPUART1_IRQHandler+0x1d8>)
 80005f8:	2250      	movs	r2, #80	; 0x50
 80005fa:	601a      	str	r2, [r3, #0]
			break;
 80005fc:	e01e      	b.n	800063c <LPUART1_IRQHandler+0x1b0>
		case 'd'://right
			col += 1;
 80005fe:	4b19      	ldr	r3, [pc, #100]	; (8000664 <LPUART1_IRQHandler+0x1d8>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	3301      	adds	r3, #1
 8000604:	4a17      	ldr	r2, [pc, #92]	; (8000664 <LPUART1_IRQHandler+0x1d8>)
 8000606:	6013      	str	r3, [r2, #0]
			if (col > 80) col = 1;
 8000608:	4b16      	ldr	r3, [pc, #88]	; (8000664 <LPUART1_IRQHandler+0x1d8>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2b50      	cmp	r3, #80	; 0x50
 800060e:	dd17      	ble.n	8000640 <LPUART1_IRQHandler+0x1b4>
 8000610:	4b14      	ldr	r3, [pc, #80]	; (8000664 <LPUART1_IRQHandler+0x1d8>)
 8000612:	2201      	movs	r2, #1
 8000614:	601a      	str	r2, [r3, #0]
			break;
 8000616:	e013      	b.n	8000640 <LPUART1_IRQHandler+0x1b4>
		default:
			while (!(LPUART1->ISR & USART_ISR_TXE))
 8000618:	bf00      	nop
 800061a:	4b0c      	ldr	r3, [pc, #48]	; (800064c <LPUART1_IRQHandler+0x1c0>)
 800061c:	69db      	ldr	r3, [r3, #28]
 800061e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000622:	2b00      	cmp	r3, #0
 8000624:	d0f9      	beq.n	800061a <LPUART1_IRQHandler+0x18e>
				;    // wait for empty TX buffer
			LPUART1->TDR = charRecv;  // echo char to terminal
 8000626:	4b09      	ldr	r3, [pc, #36]	; (800064c <LPUART1_IRQHandler+0x1c0>)
 8000628:	79fa      	ldrb	r2, [r7, #7]
 800062a:	b292      	uxth	r2, r2
 800062c:	851a      	strh	r2, [r3, #40]	; 0x28
		}  // end switch
	}
	//update_position();
}
 800062e:	e008      	b.n	8000642 <LPUART1_IRQHandler+0x1b6>
	}
 8000630:	bf00      	nop
 8000632:	e006      	b.n	8000642 <LPUART1_IRQHandler+0x1b6>
			break;
 8000634:	bf00      	nop
 8000636:	e004      	b.n	8000642 <LPUART1_IRQHandler+0x1b6>
			break;
 8000638:	bf00      	nop
 800063a:	e002      	b.n	8000642 <LPUART1_IRQHandler+0x1b6>
			break;
 800063c:	bf00      	nop
 800063e:	e000      	b.n	8000642 <LPUART1_IRQHandler+0x1b6>
			break;
 8000640:	bf00      	nop
}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40008000 	.word	0x40008000
 8000650:	08001874 	.word	0x08001874
 8000654:	0800187c 	.word	0x0800187c
 8000658:	08001884 	.word	0x08001884
 800065c:	08001810 	.word	0x08001810
 8000660:	20000000 	.word	0x20000000
 8000664:	20000004 	.word	0x20000004

08000668 <SystemClock_Config>:

void SystemClock_Config(void) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b096      	sub	sp, #88	; 0x58
 800066c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	2244      	movs	r2, #68	; 0x44
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f001 f8b4 	bl	80017e4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800067c:	463b      	mov	r3, r7
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
 8000688:	611a      	str	r2, [r3, #16]

	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 800068a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800068e:	f000 fa29 	bl	8000ae4 <HAL_PWREx_ControlVoltageScaling>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8000698:	f000 f82c 	bl	80006f4 <Error_Handler>
	}

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800069c:	2310      	movs	r3, #16
 800069e:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006a0:	2301      	movs	r3, #1
 80006a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006a8:	2360      	movs	r3, #96	; 0x60
 80006aa:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006b0:	f107 0314 	add.w	r3, r7, #20
 80006b4:	4618      	mov	r0, r3
 80006b6:	f000 fa6b 	bl	8000b90 <HAL_RCC_OscConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0x5c>
		Error_Handler();
 80006c0:	f000 f818 	bl	80006f4 <Error_Handler>
	}

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80006c4:	230f      	movs	r3, #15
 80006c6:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80006c8:	2300      	movs	r3, #0
 80006ca:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80006d8:	463b      	mov	r3, r7
 80006da:	2100      	movs	r1, #0
 80006dc:	4618      	mov	r0, r3
 80006de:	f000 fe71 	bl	80013c4 <HAL_RCC_ClockConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0x84>
		Error_Handler();
 80006e8:	f000 f804 	bl	80006f4 <Error_Handler>
	}
}
 80006ec:	bf00      	nop
 80006ee:	3758      	adds	r7, #88	; 0x58
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <Error_Handler>:

void Error_Handler(void) {
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f8:	b672      	cpsid	i
}
 80006fa:	bf00      	nop

	__disable_irq();
	while (1) {
 80006fc:	e7fe      	b.n	80006fc <Error_Handler+0x8>
	...

08000700 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000706:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <HAL_MspInit+0x44>)
 8000708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800070a:	4a0e      	ldr	r2, [pc, #56]	; (8000744 <HAL_MspInit+0x44>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	6613      	str	r3, [r2, #96]	; 0x60
 8000712:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <HAL_MspInit+0x44>)
 8000714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <HAL_MspInit+0x44>)
 8000720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000722:	4a08      	ldr	r2, [pc, #32]	; (8000744 <HAL_MspInit+0x44>)
 8000724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000728:	6593      	str	r3, [r2, #88]	; 0x58
 800072a:	4b06      	ldr	r3, [pc, #24]	; (8000744 <HAL_MspInit+0x44>)
 800072c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800072e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000732:	603b      	str	r3, [r7, #0]
 8000734:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000736:	bf00      	nop
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	40021000 	.word	0x40021000

08000748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800074c:	e7fe      	b.n	800074c <NMI_Handler+0x4>

0800074e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800074e:	b480      	push	{r7}
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000752:	e7fe      	b.n	8000752 <HardFault_Handler+0x4>

08000754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000758:	e7fe      	b.n	8000758 <MemManage_Handler+0x4>

0800075a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800075e:	e7fe      	b.n	800075e <BusFault_Handler+0x4>

08000760 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000764:	e7fe      	b.n	8000764 <UsageFault_Handler+0x4>

08000766 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800076a:	bf00      	nop
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr

08000774 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000778:	bf00      	nop
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr

08000782 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000782:	b480      	push	{r7}
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr

08000790 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000794:	f000 f892 	bl	80008bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}

0800079c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <SystemInit+0x20>)
 80007a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007a6:	4a05      	ldr	r2, [pc, #20]	; (80007bc <SystemInit+0x20>)
 80007a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	e000ed00 	.word	0xe000ed00

080007c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80007c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007f8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007c4:	f7ff ffea 	bl	800079c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007c8:	480c      	ldr	r0, [pc, #48]	; (80007fc <LoopForever+0x6>)
  ldr r1, =_edata
 80007ca:	490d      	ldr	r1, [pc, #52]	; (8000800 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007cc:	4a0d      	ldr	r2, [pc, #52]	; (8000804 <LoopForever+0xe>)
  movs r3, #0
 80007ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007d0:	e002      	b.n	80007d8 <LoopCopyDataInit>

080007d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007d6:	3304      	adds	r3, #4

080007d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007dc:	d3f9      	bcc.n	80007d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007de:	4a0a      	ldr	r2, [pc, #40]	; (8000808 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007e0:	4c0a      	ldr	r4, [pc, #40]	; (800080c <LoopForever+0x16>)
  movs r3, #0
 80007e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007e4:	e001      	b.n	80007ea <LoopFillZerobss>

080007e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007e8:	3204      	adds	r2, #4

080007ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007ec:	d3fb      	bcc.n	80007e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007ee:	f000 ffd5 	bl	800179c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007f2:	f7ff fd3f 	bl	8000274 <main>

080007f6 <LoopForever>:

LoopForever:
    b LoopForever
 80007f6:	e7fe      	b.n	80007f6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80007f8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80007fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000800:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000804:	080018d4 	.word	0x080018d4
  ldr r2, =_sbss
 8000808:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800080c:	20000034 	.word	0x20000034

08000810 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000810:	e7fe      	b.n	8000810 <ADC1_2_IRQHandler>

08000812 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	b082      	sub	sp, #8
 8000816:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000818:	2300      	movs	r3, #0
 800081a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800081c:	2003      	movs	r0, #3
 800081e:	f000 f91f 	bl	8000a60 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000822:	200f      	movs	r0, #15
 8000824:	f000 f80e 	bl	8000844 <HAL_InitTick>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d002      	beq.n	8000834 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800082e:	2301      	movs	r3, #1
 8000830:	71fb      	strb	r3, [r7, #7]
 8000832:	e001      	b.n	8000838 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000834:	f7ff ff64 	bl	8000700 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000838:	79fb      	ldrb	r3, [r7, #7]
}
 800083a:	4618      	mov	r0, r3
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800084c:	2300      	movs	r3, #0
 800084e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000850:	4b17      	ldr	r3, [pc, #92]	; (80008b0 <HAL_InitTick+0x6c>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d023      	beq.n	80008a0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000858:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <HAL_InitTick+0x70>)
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <HAL_InitTick+0x6c>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	4619      	mov	r1, r3
 8000862:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000866:	fbb3 f3f1 	udiv	r3, r3, r1
 800086a:	fbb2 f3f3 	udiv	r3, r2, r3
 800086e:	4618      	mov	r0, r3
 8000870:	f000 f91d 	bl	8000aae <HAL_SYSTICK_Config>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d10f      	bne.n	800089a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	2b0f      	cmp	r3, #15
 800087e:	d809      	bhi.n	8000894 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000880:	2200      	movs	r2, #0
 8000882:	6879      	ldr	r1, [r7, #4]
 8000884:	f04f 30ff 	mov.w	r0, #4294967295
 8000888:	f000 f8f5 	bl	8000a76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800088c:	4a0a      	ldr	r2, [pc, #40]	; (80008b8 <HAL_InitTick+0x74>)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	6013      	str	r3, [r2, #0]
 8000892:	e007      	b.n	80008a4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000894:	2301      	movs	r3, #1
 8000896:	73fb      	strb	r3, [r7, #15]
 8000898:	e004      	b.n	80008a4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800089a:	2301      	movs	r3, #1
 800089c:	73fb      	strb	r3, [r7, #15]
 800089e:	e001      	b.n	80008a4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008a0:	2301      	movs	r3, #1
 80008a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80008a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3710      	adds	r7, #16
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	20000010 	.word	0x20000010
 80008b4:	20000008 	.word	0x20000008
 80008b8:	2000000c 	.word	0x2000000c

080008bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <HAL_IncTick+0x20>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	461a      	mov	r2, r3
 80008c6:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <HAL_IncTick+0x24>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4413      	add	r3, r2
 80008cc:	4a04      	ldr	r2, [pc, #16]	; (80008e0 <HAL_IncTick+0x24>)
 80008ce:	6013      	str	r3, [r2, #0]
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	20000010 	.word	0x20000010
 80008e0:	20000030 	.word	0x20000030

080008e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  return uwTick;
 80008e8:	4b03      	ldr	r3, [pc, #12]	; (80008f8 <HAL_GetTick+0x14>)
 80008ea:	681b      	ldr	r3, [r3, #0]
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	20000030 	.word	0x20000030

080008fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b085      	sub	sp, #20
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	f003 0307 	and.w	r3, r3, #7
 800090a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <__NVIC_SetPriorityGrouping+0x44>)
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000912:	68ba      	ldr	r2, [r7, #8]
 8000914:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000918:	4013      	ands	r3, r2
 800091a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000924:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800092c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800092e:	4a04      	ldr	r2, [pc, #16]	; (8000940 <__NVIC_SetPriorityGrouping+0x44>)
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	60d3      	str	r3, [r2, #12]
}
 8000934:	bf00      	nop
 8000936:	3714      	adds	r7, #20
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	e000ed00 	.word	0xe000ed00

08000944 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000948:	4b04      	ldr	r3, [pc, #16]	; (800095c <__NVIC_GetPriorityGrouping+0x18>)
 800094a:	68db      	ldr	r3, [r3, #12]
 800094c:	0a1b      	lsrs	r3, r3, #8
 800094e:	f003 0307 	and.w	r3, r3, #7
}
 8000952:	4618      	mov	r0, r3
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr
 800095c:	e000ed00 	.word	0xe000ed00

08000960 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	6039      	str	r1, [r7, #0]
 800096a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800096c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000970:	2b00      	cmp	r3, #0
 8000972:	db0a      	blt.n	800098a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	b2da      	uxtb	r2, r3
 8000978:	490c      	ldr	r1, [pc, #48]	; (80009ac <__NVIC_SetPriority+0x4c>)
 800097a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097e:	0112      	lsls	r2, r2, #4
 8000980:	b2d2      	uxtb	r2, r2
 8000982:	440b      	add	r3, r1
 8000984:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000988:	e00a      	b.n	80009a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	b2da      	uxtb	r2, r3
 800098e:	4908      	ldr	r1, [pc, #32]	; (80009b0 <__NVIC_SetPriority+0x50>)
 8000990:	79fb      	ldrb	r3, [r7, #7]
 8000992:	f003 030f 	and.w	r3, r3, #15
 8000996:	3b04      	subs	r3, #4
 8000998:	0112      	lsls	r2, r2, #4
 800099a:	b2d2      	uxtb	r2, r2
 800099c:	440b      	add	r3, r1
 800099e:	761a      	strb	r2, [r3, #24]
}
 80009a0:	bf00      	nop
 80009a2:	370c      	adds	r7, #12
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr
 80009ac:	e000e100 	.word	0xe000e100
 80009b0:	e000ed00 	.word	0xe000ed00

080009b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b089      	sub	sp, #36	; 0x24
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	60f8      	str	r0, [r7, #12]
 80009bc:	60b9      	str	r1, [r7, #8]
 80009be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	f003 0307 	and.w	r3, r3, #7
 80009c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009c8:	69fb      	ldr	r3, [r7, #28]
 80009ca:	f1c3 0307 	rsb	r3, r3, #7
 80009ce:	2b04      	cmp	r3, #4
 80009d0:	bf28      	it	cs
 80009d2:	2304      	movcs	r3, #4
 80009d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009d6:	69fb      	ldr	r3, [r7, #28]
 80009d8:	3304      	adds	r3, #4
 80009da:	2b06      	cmp	r3, #6
 80009dc:	d902      	bls.n	80009e4 <NVIC_EncodePriority+0x30>
 80009de:	69fb      	ldr	r3, [r7, #28]
 80009e0:	3b03      	subs	r3, #3
 80009e2:	e000      	b.n	80009e6 <NVIC_EncodePriority+0x32>
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e8:	f04f 32ff 	mov.w	r2, #4294967295
 80009ec:	69bb      	ldr	r3, [r7, #24]
 80009ee:	fa02 f303 	lsl.w	r3, r2, r3
 80009f2:	43da      	mvns	r2, r3
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	401a      	ands	r2, r3
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009fc:	f04f 31ff 	mov.w	r1, #4294967295
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	fa01 f303 	lsl.w	r3, r1, r3
 8000a06:	43d9      	mvns	r1, r3
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a0c:	4313      	orrs	r3, r2
         );
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3724      	adds	r7, #36	; 0x24
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
	...

08000a1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	3b01      	subs	r3, #1
 8000a28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a2c:	d301      	bcc.n	8000a32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a2e:	2301      	movs	r3, #1
 8000a30:	e00f      	b.n	8000a52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a32:	4a0a      	ldr	r2, [pc, #40]	; (8000a5c <SysTick_Config+0x40>)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	3b01      	subs	r3, #1
 8000a38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a3a:	210f      	movs	r1, #15
 8000a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a40:	f7ff ff8e 	bl	8000960 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a44:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <SysTick_Config+0x40>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a4a:	4b04      	ldr	r3, [pc, #16]	; (8000a5c <SysTick_Config+0x40>)
 8000a4c:	2207      	movs	r2, #7
 8000a4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a50:	2300      	movs	r3, #0
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	e000e010 	.word	0xe000e010

08000a60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f7ff ff47 	bl	80008fc <__NVIC_SetPriorityGrouping>
}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b086      	sub	sp, #24
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	60b9      	str	r1, [r7, #8]
 8000a80:	607a      	str	r2, [r7, #4]
 8000a82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a84:	2300      	movs	r3, #0
 8000a86:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a88:	f7ff ff5c 	bl	8000944 <__NVIC_GetPriorityGrouping>
 8000a8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	68b9      	ldr	r1, [r7, #8]
 8000a92:	6978      	ldr	r0, [r7, #20]
 8000a94:	f7ff ff8e 	bl	80009b4 <NVIC_EncodePriority>
 8000a98:	4602      	mov	r2, r0
 8000a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a9e:	4611      	mov	r1, r2
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff ff5d 	bl	8000960 <__NVIC_SetPriority>
}
 8000aa6:	bf00      	nop
 8000aa8:	3718      	adds	r7, #24
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}

08000aae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b082      	sub	sp, #8
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f7ff ffb0 	bl	8000a1c <SysTick_Config>
 8000abc:	4603      	mov	r3, r0
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
	...

08000ac8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000acc:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <HAL_PWREx_GetVoltageRange+0x18>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	40007000 	.word	0x40007000

08000ae4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000af2:	d130      	bne.n	8000b56 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000af4:	4b23      	ldr	r3, [pc, #140]	; (8000b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000afc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b00:	d038      	beq.n	8000b74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b02:	4b20      	ldr	r3, [pc, #128]	; (8000b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000b0a:	4a1e      	ldr	r2, [pc, #120]	; (8000b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b10:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000b12:	4b1d      	ldr	r3, [pc, #116]	; (8000b88 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	2232      	movs	r2, #50	; 0x32
 8000b18:	fb02 f303 	mul.w	r3, r2, r3
 8000b1c:	4a1b      	ldr	r2, [pc, #108]	; (8000b8c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b22:	0c9b      	lsrs	r3, r3, #18
 8000b24:	3301      	adds	r3, #1
 8000b26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000b28:	e002      	b.n	8000b30 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	3b01      	subs	r3, #1
 8000b2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000b30:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b32:	695b      	ldr	r3, [r3, #20]
 8000b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b3c:	d102      	bne.n	8000b44 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d1f2      	bne.n	8000b2a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000b44:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b46:	695b      	ldr	r3, [r3, #20]
 8000b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b50:	d110      	bne.n	8000b74 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000b52:	2303      	movs	r3, #3
 8000b54:	e00f      	b.n	8000b76 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000b56:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000b5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b62:	d007      	beq.n	8000b74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b64:	4b07      	ldr	r3, [pc, #28]	; (8000b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000b6c:	4a05      	ldr	r2, [pc, #20]	; (8000b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b72:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000b74:	2300      	movs	r3, #0
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3714      	adds	r7, #20
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	40007000 	.word	0x40007000
 8000b88:	20000008 	.word	0x20000008
 8000b8c:	431bde83 	.word	0x431bde83

08000b90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b088      	sub	sp, #32
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d102      	bne.n	8000ba4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	f000 bc08 	b.w	80013b4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ba4:	4b96      	ldr	r3, [pc, #600]	; (8000e00 <HAL_RCC_OscConfig+0x270>)
 8000ba6:	689b      	ldr	r3, [r3, #8]
 8000ba8:	f003 030c 	and.w	r3, r3, #12
 8000bac:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000bae:	4b94      	ldr	r3, [pc, #592]	; (8000e00 <HAL_RCC_OscConfig+0x270>)
 8000bb0:	68db      	ldr	r3, [r3, #12]
 8000bb2:	f003 0303 	and.w	r3, r3, #3
 8000bb6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f003 0310 	and.w	r3, r3, #16
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	f000 80e4 	beq.w	8000d8e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000bc6:	69bb      	ldr	r3, [r7, #24]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d007      	beq.n	8000bdc <HAL_RCC_OscConfig+0x4c>
 8000bcc:	69bb      	ldr	r3, [r7, #24]
 8000bce:	2b0c      	cmp	r3, #12
 8000bd0:	f040 808b 	bne.w	8000cea <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	f040 8087 	bne.w	8000cea <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000bdc:	4b88      	ldr	r3, [pc, #544]	; (8000e00 <HAL_RCC_OscConfig+0x270>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f003 0302 	and.w	r3, r3, #2
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d005      	beq.n	8000bf4 <HAL_RCC_OscConfig+0x64>
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d101      	bne.n	8000bf4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	e3df      	b.n	80013b4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6a1a      	ldr	r2, [r3, #32]
 8000bf8:	4b81      	ldr	r3, [pc, #516]	; (8000e00 <HAL_RCC_OscConfig+0x270>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f003 0308 	and.w	r3, r3, #8
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d004      	beq.n	8000c0e <HAL_RCC_OscConfig+0x7e>
 8000c04:	4b7e      	ldr	r3, [pc, #504]	; (8000e00 <HAL_RCC_OscConfig+0x270>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000c0c:	e005      	b.n	8000c1a <HAL_RCC_OscConfig+0x8a>
 8000c0e:	4b7c      	ldr	r3, [pc, #496]	; (8000e00 <HAL_RCC_OscConfig+0x270>)
 8000c10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000c14:	091b      	lsrs	r3, r3, #4
 8000c16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d223      	bcs.n	8000c66 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6a1b      	ldr	r3, [r3, #32]
 8000c22:	4618      	mov	r0, r3
 8000c24:	f000 fd5a 	bl	80016dc <RCC_SetFlashLatencyFromMSIRange>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e3c0      	b.n	80013b4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000c32:	4b73      	ldr	r3, [pc, #460]	; (8000e00 <HAL_RCC_OscConfig+0x270>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a72      	ldr	r2, [pc, #456]	; (8000e00 <HAL_RCC_OscConfig+0x270>)
 8000c38:	f043 0308 	orr.w	r3, r3, #8
 8000c3c:	6013      	str	r3, [r2, #0]
 8000c3e:	4b70      	ldr	r3, [pc, #448]	; (8000e00 <HAL_RCC_OscConfig+0x270>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6a1b      	ldr	r3, [r3, #32]
 8000c4a:	496d      	ldr	r1, [pc, #436]	; (8000e00 <HAL_RCC_OscConfig+0x270>)
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c50:	4b6b      	ldr	r3, [pc, #428]	; (8000e00 <HAL_RCC_OscConfig+0x270>)
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	69db      	ldr	r3, [r3, #28]
 8000c5c:	021b      	lsls	r3, r3, #8
 8000c5e:	4968      	ldr	r1, [pc, #416]	; (8000e00 <HAL_RCC_OscConfig+0x270>)
 8000c60:	4313      	orrs	r3, r2
 8000c62:	604b      	str	r3, [r1, #4]
 8000c64:	e025      	b.n	8000cb2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000c66:	4b66      	ldr	r3, [pc, #408]	; (8000e00 <HAL_RCC_OscConfig+0x270>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a65      	ldr	r2, [pc, #404]	; (8000e00 <HAL_RCC_OscConfig+0x270>)
 8000c6c:	f043 0308 	orr.w	r3, r3, #8
 8000c70:	6013      	str	r3, [r2, #0]
 8000c72:	4b63      	ldr	r3, [pc, #396]	; (8000e00 <HAL_RCC_OscConfig+0x270>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6a1b      	ldr	r3, [r3, #32]
 8000c7e:	4960      	ldr	r1, [pc, #384]	; (8000e00 <HAL_RCC_OscConfig+0x270>)
 8000c80:	4313      	orrs	r3, r2
 8000c82:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c84:	4b5e      	ldr	r3, [pc, #376]	; (8000e00 <HAL_RCC_OscConfig+0x270>)
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	69db      	ldr	r3, [r3, #28]
 8000c90:	021b      	lsls	r3, r3, #8
 8000c92:	495b      	ldr	r1, [pc, #364]	; (8000e00 <HAL_RCC_OscConfig+0x270>)
 8000c94:	4313      	orrs	r3, r2
 8000c96:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d109      	bne.n	8000cb2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6a1b      	ldr	r3, [r3, #32]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f000 fd1a 	bl	80016dc <RCC_SetFlashLatencyFromMSIRange>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e380      	b.n	80013b4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000cb2:	f000 fc87 	bl	80015c4 <HAL_RCC_GetSysClockFreq>
 8000cb6:	4602      	mov	r2, r0
 8000cb8:	4b51      	ldr	r3, [pc, #324]	; (8000e00 <HAL_RCC_OscConfig+0x270>)
 8000cba:	689b      	ldr	r3, [r3, #8]
 8000cbc:	091b      	lsrs	r3, r3, #4
 8000cbe:	f003 030f 	and.w	r3, r3, #15
 8000cc2:	4950      	ldr	r1, [pc, #320]	; (8000e04 <HAL_RCC_OscConfig+0x274>)
 8000cc4:	5ccb      	ldrb	r3, [r1, r3]
 8000cc6:	f003 031f 	and.w	r3, r3, #31
 8000cca:	fa22 f303 	lsr.w	r3, r2, r3
 8000cce:	4a4e      	ldr	r2, [pc, #312]	; (8000e08 <HAL_RCC_OscConfig+0x278>)
 8000cd0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000cd2:	4b4e      	ldr	r3, [pc, #312]	; (8000e0c <HAL_RCC_OscConfig+0x27c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff fdb4 	bl	8000844 <HAL_InitTick>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000ce0:	7bfb      	ldrb	r3, [r7, #15]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d052      	beq.n	8000d8c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000ce6:	7bfb      	ldrb	r3, [r7, #15]
 8000ce8:	e364      	b.n	80013b4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	699b      	ldr	r3, [r3, #24]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d032      	beq.n	8000d58 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000cf2:	4b43      	ldr	r3, [pc, #268]	; (8000e00 <HAL_RCC_OscConfig+0x270>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a42      	ldr	r2, [pc, #264]	; (8000e00 <HAL_RCC_OscConfig+0x270>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000cfe:	f7ff fdf1 	bl	80008e4 <HAL_GetTick>
 8000d02:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000d04:	e008      	b.n	8000d18 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000d06:	f7ff fded 	bl	80008e4 <HAL_GetTick>
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	1ad3      	subs	r3, r2, r3
 8000d10:	2b02      	cmp	r3, #2
 8000d12:	d901      	bls.n	8000d18 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000d14:	2303      	movs	r3, #3
 8000d16:	e34d      	b.n	80013b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000d18:	4b39      	ldr	r3, [pc, #228]	; (8000e00 <HAL_RCC_OscConfig+0x270>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f003 0302 	and.w	r3, r3, #2
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d0f0      	beq.n	8000d06 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d24:	4b36      	ldr	r3, [pc, #216]	; (8000e00 <HAL_RCC_OscConfig+0x270>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a35      	ldr	r2, [pc, #212]	; (8000e00 <HAL_RCC_OscConfig+0x270>)
 8000d2a:	f043 0308 	orr.w	r3, r3, #8
 8000d2e:	6013      	str	r3, [r2, #0]
 8000d30:	4b33      	ldr	r3, [pc, #204]	; (8000e00 <HAL_RCC_OscConfig+0x270>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6a1b      	ldr	r3, [r3, #32]
 8000d3c:	4930      	ldr	r1, [pc, #192]	; (8000e00 <HAL_RCC_OscConfig+0x270>)
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d42:	4b2f      	ldr	r3, [pc, #188]	; (8000e00 <HAL_RCC_OscConfig+0x270>)
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	69db      	ldr	r3, [r3, #28]
 8000d4e:	021b      	lsls	r3, r3, #8
 8000d50:	492b      	ldr	r1, [pc, #172]	; (8000e00 <HAL_RCC_OscConfig+0x270>)
 8000d52:	4313      	orrs	r3, r2
 8000d54:	604b      	str	r3, [r1, #4]
 8000d56:	e01a      	b.n	8000d8e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000d58:	4b29      	ldr	r3, [pc, #164]	; (8000e00 <HAL_RCC_OscConfig+0x270>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a28      	ldr	r2, [pc, #160]	; (8000e00 <HAL_RCC_OscConfig+0x270>)
 8000d5e:	f023 0301 	bic.w	r3, r3, #1
 8000d62:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000d64:	f7ff fdbe 	bl	80008e4 <HAL_GetTick>
 8000d68:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000d6a:	e008      	b.n	8000d7e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000d6c:	f7ff fdba 	bl	80008e4 <HAL_GetTick>
 8000d70:	4602      	mov	r2, r0
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	d901      	bls.n	8000d7e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	e31a      	b.n	80013b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000d7e:	4b20      	ldr	r3, [pc, #128]	; (8000e00 <HAL_RCC_OscConfig+0x270>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f003 0302 	and.w	r3, r3, #2
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d1f0      	bne.n	8000d6c <HAL_RCC_OscConfig+0x1dc>
 8000d8a:	e000      	b.n	8000d8e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d8c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d073      	beq.n	8000e82 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000d9a:	69bb      	ldr	r3, [r7, #24]
 8000d9c:	2b08      	cmp	r3, #8
 8000d9e:	d005      	beq.n	8000dac <HAL_RCC_OscConfig+0x21c>
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	2b0c      	cmp	r3, #12
 8000da4:	d10e      	bne.n	8000dc4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	2b03      	cmp	r3, #3
 8000daa:	d10b      	bne.n	8000dc4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dac:	4b14      	ldr	r3, [pc, #80]	; (8000e00 <HAL_RCC_OscConfig+0x270>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d063      	beq.n	8000e80 <HAL_RCC_OscConfig+0x2f0>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d15f      	bne.n	8000e80 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	e2f7      	b.n	80013b4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dcc:	d106      	bne.n	8000ddc <HAL_RCC_OscConfig+0x24c>
 8000dce:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <HAL_RCC_OscConfig+0x270>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a0b      	ldr	r2, [pc, #44]	; (8000e00 <HAL_RCC_OscConfig+0x270>)
 8000dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dd8:	6013      	str	r3, [r2, #0]
 8000dda:	e025      	b.n	8000e28 <HAL_RCC_OscConfig+0x298>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000de4:	d114      	bne.n	8000e10 <HAL_RCC_OscConfig+0x280>
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <HAL_RCC_OscConfig+0x270>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a05      	ldr	r2, [pc, #20]	; (8000e00 <HAL_RCC_OscConfig+0x270>)
 8000dec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000df0:	6013      	str	r3, [r2, #0]
 8000df2:	4b03      	ldr	r3, [pc, #12]	; (8000e00 <HAL_RCC_OscConfig+0x270>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a02      	ldr	r2, [pc, #8]	; (8000e00 <HAL_RCC_OscConfig+0x270>)
 8000df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dfc:	6013      	str	r3, [r2, #0]
 8000dfe:	e013      	b.n	8000e28 <HAL_RCC_OscConfig+0x298>
 8000e00:	40021000 	.word	0x40021000
 8000e04:	0800188c 	.word	0x0800188c
 8000e08:	20000008 	.word	0x20000008
 8000e0c:	2000000c 	.word	0x2000000c
 8000e10:	4ba0      	ldr	r3, [pc, #640]	; (8001094 <HAL_RCC_OscConfig+0x504>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a9f      	ldr	r2, [pc, #636]	; (8001094 <HAL_RCC_OscConfig+0x504>)
 8000e16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e1a:	6013      	str	r3, [r2, #0]
 8000e1c:	4b9d      	ldr	r3, [pc, #628]	; (8001094 <HAL_RCC_OscConfig+0x504>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a9c      	ldr	r2, [pc, #624]	; (8001094 <HAL_RCC_OscConfig+0x504>)
 8000e22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d013      	beq.n	8000e58 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e30:	f7ff fd58 	bl	80008e4 <HAL_GetTick>
 8000e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e36:	e008      	b.n	8000e4a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e38:	f7ff fd54 	bl	80008e4 <HAL_GetTick>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	2b64      	cmp	r3, #100	; 0x64
 8000e44:	d901      	bls.n	8000e4a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000e46:	2303      	movs	r3, #3
 8000e48:	e2b4      	b.n	80013b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e4a:	4b92      	ldr	r3, [pc, #584]	; (8001094 <HAL_RCC_OscConfig+0x504>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d0f0      	beq.n	8000e38 <HAL_RCC_OscConfig+0x2a8>
 8000e56:	e014      	b.n	8000e82 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e58:	f7ff fd44 	bl	80008e4 <HAL_GetTick>
 8000e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e5e:	e008      	b.n	8000e72 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e60:	f7ff fd40 	bl	80008e4 <HAL_GetTick>
 8000e64:	4602      	mov	r2, r0
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	2b64      	cmp	r3, #100	; 0x64
 8000e6c:	d901      	bls.n	8000e72 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	e2a0      	b.n	80013b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e72:	4b88      	ldr	r3, [pc, #544]	; (8001094 <HAL_RCC_OscConfig+0x504>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d1f0      	bne.n	8000e60 <HAL_RCC_OscConfig+0x2d0>
 8000e7e:	e000      	b.n	8000e82 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f003 0302 	and.w	r3, r3, #2
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d060      	beq.n	8000f50 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	2b04      	cmp	r3, #4
 8000e92:	d005      	beq.n	8000ea0 <HAL_RCC_OscConfig+0x310>
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	2b0c      	cmp	r3, #12
 8000e98:	d119      	bne.n	8000ece <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	d116      	bne.n	8000ece <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ea0:	4b7c      	ldr	r3, [pc, #496]	; (8001094 <HAL_RCC_OscConfig+0x504>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d005      	beq.n	8000eb8 <HAL_RCC_OscConfig+0x328>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d101      	bne.n	8000eb8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	e27d      	b.n	80013b4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eb8:	4b76      	ldr	r3, [pc, #472]	; (8001094 <HAL_RCC_OscConfig+0x504>)
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	691b      	ldr	r3, [r3, #16]
 8000ec4:	061b      	lsls	r3, r3, #24
 8000ec6:	4973      	ldr	r1, [pc, #460]	; (8001094 <HAL_RCC_OscConfig+0x504>)
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ecc:	e040      	b.n	8000f50 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	68db      	ldr	r3, [r3, #12]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d023      	beq.n	8000f1e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ed6:	4b6f      	ldr	r3, [pc, #444]	; (8001094 <HAL_RCC_OscConfig+0x504>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a6e      	ldr	r2, [pc, #440]	; (8001094 <HAL_RCC_OscConfig+0x504>)
 8000edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ee2:	f7ff fcff 	bl	80008e4 <HAL_GetTick>
 8000ee6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000ee8:	e008      	b.n	8000efc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eea:	f7ff fcfb 	bl	80008e4 <HAL_GetTick>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	d901      	bls.n	8000efc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	e25b      	b.n	80013b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000efc:	4b65      	ldr	r3, [pc, #404]	; (8001094 <HAL_RCC_OscConfig+0x504>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d0f0      	beq.n	8000eea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f08:	4b62      	ldr	r3, [pc, #392]	; (8001094 <HAL_RCC_OscConfig+0x504>)
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	691b      	ldr	r3, [r3, #16]
 8000f14:	061b      	lsls	r3, r3, #24
 8000f16:	495f      	ldr	r1, [pc, #380]	; (8001094 <HAL_RCC_OscConfig+0x504>)
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	604b      	str	r3, [r1, #4]
 8000f1c:	e018      	b.n	8000f50 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f1e:	4b5d      	ldr	r3, [pc, #372]	; (8001094 <HAL_RCC_OscConfig+0x504>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a5c      	ldr	r2, [pc, #368]	; (8001094 <HAL_RCC_OscConfig+0x504>)
 8000f24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f2a:	f7ff fcdb 	bl	80008e4 <HAL_GetTick>
 8000f2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f30:	e008      	b.n	8000f44 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f32:	f7ff fcd7 	bl	80008e4 <HAL_GetTick>
 8000f36:	4602      	mov	r2, r0
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d901      	bls.n	8000f44 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000f40:	2303      	movs	r3, #3
 8000f42:	e237      	b.n	80013b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f44:	4b53      	ldr	r3, [pc, #332]	; (8001094 <HAL_RCC_OscConfig+0x504>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d1f0      	bne.n	8000f32 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f003 0308 	and.w	r3, r3, #8
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d03c      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	695b      	ldr	r3, [r3, #20]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d01c      	beq.n	8000f9e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f64:	4b4b      	ldr	r3, [pc, #300]	; (8001094 <HAL_RCC_OscConfig+0x504>)
 8000f66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f6a:	4a4a      	ldr	r2, [pc, #296]	; (8001094 <HAL_RCC_OscConfig+0x504>)
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f74:	f7ff fcb6 	bl	80008e4 <HAL_GetTick>
 8000f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f7a:	e008      	b.n	8000f8e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f7c:	f7ff fcb2 	bl	80008e4 <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d901      	bls.n	8000f8e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e212      	b.n	80013b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f8e:	4b41      	ldr	r3, [pc, #260]	; (8001094 <HAL_RCC_OscConfig+0x504>)
 8000f90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f94:	f003 0302 	and.w	r3, r3, #2
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d0ef      	beq.n	8000f7c <HAL_RCC_OscConfig+0x3ec>
 8000f9c:	e01b      	b.n	8000fd6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f9e:	4b3d      	ldr	r3, [pc, #244]	; (8001094 <HAL_RCC_OscConfig+0x504>)
 8000fa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fa4:	4a3b      	ldr	r2, [pc, #236]	; (8001094 <HAL_RCC_OscConfig+0x504>)
 8000fa6:	f023 0301 	bic.w	r3, r3, #1
 8000faa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fae:	f7ff fc99 	bl	80008e4 <HAL_GetTick>
 8000fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000fb4:	e008      	b.n	8000fc8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fb6:	f7ff fc95 	bl	80008e4 <HAL_GetTick>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d901      	bls.n	8000fc8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	e1f5      	b.n	80013b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000fc8:	4b32      	ldr	r3, [pc, #200]	; (8001094 <HAL_RCC_OscConfig+0x504>)
 8000fca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fce:	f003 0302 	and.w	r3, r3, #2
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d1ef      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f003 0304 	and.w	r3, r3, #4
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	f000 80a6 	beq.w	8001130 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000fe8:	4b2a      	ldr	r3, [pc, #168]	; (8001094 <HAL_RCC_OscConfig+0x504>)
 8000fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d10d      	bne.n	8001010 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ff4:	4b27      	ldr	r3, [pc, #156]	; (8001094 <HAL_RCC_OscConfig+0x504>)
 8000ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff8:	4a26      	ldr	r2, [pc, #152]	; (8001094 <HAL_RCC_OscConfig+0x504>)
 8000ffa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ffe:	6593      	str	r3, [r2, #88]	; 0x58
 8001000:	4b24      	ldr	r3, [pc, #144]	; (8001094 <HAL_RCC_OscConfig+0x504>)
 8001002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001008:	60bb      	str	r3, [r7, #8]
 800100a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800100c:	2301      	movs	r3, #1
 800100e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001010:	4b21      	ldr	r3, [pc, #132]	; (8001098 <HAL_RCC_OscConfig+0x508>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001018:	2b00      	cmp	r3, #0
 800101a:	d118      	bne.n	800104e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800101c:	4b1e      	ldr	r3, [pc, #120]	; (8001098 <HAL_RCC_OscConfig+0x508>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a1d      	ldr	r2, [pc, #116]	; (8001098 <HAL_RCC_OscConfig+0x508>)
 8001022:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001026:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001028:	f7ff fc5c 	bl	80008e4 <HAL_GetTick>
 800102c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800102e:	e008      	b.n	8001042 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001030:	f7ff fc58 	bl	80008e4 <HAL_GetTick>
 8001034:	4602      	mov	r2, r0
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	2b02      	cmp	r3, #2
 800103c:	d901      	bls.n	8001042 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800103e:	2303      	movs	r3, #3
 8001040:	e1b8      	b.n	80013b4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001042:	4b15      	ldr	r3, [pc, #84]	; (8001098 <HAL_RCC_OscConfig+0x508>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800104a:	2b00      	cmp	r3, #0
 800104c:	d0f0      	beq.n	8001030 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	2b01      	cmp	r3, #1
 8001054:	d108      	bne.n	8001068 <HAL_RCC_OscConfig+0x4d8>
 8001056:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <HAL_RCC_OscConfig+0x504>)
 8001058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800105c:	4a0d      	ldr	r2, [pc, #52]	; (8001094 <HAL_RCC_OscConfig+0x504>)
 800105e:	f043 0301 	orr.w	r3, r3, #1
 8001062:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001066:	e029      	b.n	80010bc <HAL_RCC_OscConfig+0x52c>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	2b05      	cmp	r3, #5
 800106e:	d115      	bne.n	800109c <HAL_RCC_OscConfig+0x50c>
 8001070:	4b08      	ldr	r3, [pc, #32]	; (8001094 <HAL_RCC_OscConfig+0x504>)
 8001072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001076:	4a07      	ldr	r2, [pc, #28]	; (8001094 <HAL_RCC_OscConfig+0x504>)
 8001078:	f043 0304 	orr.w	r3, r3, #4
 800107c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001080:	4b04      	ldr	r3, [pc, #16]	; (8001094 <HAL_RCC_OscConfig+0x504>)
 8001082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001086:	4a03      	ldr	r2, [pc, #12]	; (8001094 <HAL_RCC_OscConfig+0x504>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001090:	e014      	b.n	80010bc <HAL_RCC_OscConfig+0x52c>
 8001092:	bf00      	nop
 8001094:	40021000 	.word	0x40021000
 8001098:	40007000 	.word	0x40007000
 800109c:	4b9d      	ldr	r3, [pc, #628]	; (8001314 <HAL_RCC_OscConfig+0x784>)
 800109e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010a2:	4a9c      	ldr	r2, [pc, #624]	; (8001314 <HAL_RCC_OscConfig+0x784>)
 80010a4:	f023 0301 	bic.w	r3, r3, #1
 80010a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80010ac:	4b99      	ldr	r3, [pc, #612]	; (8001314 <HAL_RCC_OscConfig+0x784>)
 80010ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010b2:	4a98      	ldr	r2, [pc, #608]	; (8001314 <HAL_RCC_OscConfig+0x784>)
 80010b4:	f023 0304 	bic.w	r3, r3, #4
 80010b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d016      	beq.n	80010f2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010c4:	f7ff fc0e 	bl	80008e4 <HAL_GetTick>
 80010c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80010ca:	e00a      	b.n	80010e2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010cc:	f7ff fc0a 	bl	80008e4 <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80010da:	4293      	cmp	r3, r2
 80010dc:	d901      	bls.n	80010e2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80010de:	2303      	movs	r3, #3
 80010e0:	e168      	b.n	80013b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80010e2:	4b8c      	ldr	r3, [pc, #560]	; (8001314 <HAL_RCC_OscConfig+0x784>)
 80010e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010e8:	f003 0302 	and.w	r3, r3, #2
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d0ed      	beq.n	80010cc <HAL_RCC_OscConfig+0x53c>
 80010f0:	e015      	b.n	800111e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010f2:	f7ff fbf7 	bl	80008e4 <HAL_GetTick>
 80010f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80010f8:	e00a      	b.n	8001110 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010fa:	f7ff fbf3 	bl	80008e4 <HAL_GetTick>
 80010fe:	4602      	mov	r2, r0
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	f241 3288 	movw	r2, #5000	; 0x1388
 8001108:	4293      	cmp	r3, r2
 800110a:	d901      	bls.n	8001110 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800110c:	2303      	movs	r3, #3
 800110e:	e151      	b.n	80013b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001110:	4b80      	ldr	r3, [pc, #512]	; (8001314 <HAL_RCC_OscConfig+0x784>)
 8001112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	2b00      	cmp	r3, #0
 800111c:	d1ed      	bne.n	80010fa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800111e:	7ffb      	ldrb	r3, [r7, #31]
 8001120:	2b01      	cmp	r3, #1
 8001122:	d105      	bne.n	8001130 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001124:	4b7b      	ldr	r3, [pc, #492]	; (8001314 <HAL_RCC_OscConfig+0x784>)
 8001126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001128:	4a7a      	ldr	r2, [pc, #488]	; (8001314 <HAL_RCC_OscConfig+0x784>)
 800112a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800112e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 0320 	and.w	r3, r3, #32
 8001138:	2b00      	cmp	r3, #0
 800113a:	d03c      	beq.n	80011b6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001140:	2b00      	cmp	r3, #0
 8001142:	d01c      	beq.n	800117e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001144:	4b73      	ldr	r3, [pc, #460]	; (8001314 <HAL_RCC_OscConfig+0x784>)
 8001146:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800114a:	4a72      	ldr	r2, [pc, #456]	; (8001314 <HAL_RCC_OscConfig+0x784>)
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001154:	f7ff fbc6 	bl	80008e4 <HAL_GetTick>
 8001158:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800115a:	e008      	b.n	800116e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800115c:	f7ff fbc2 	bl	80008e4 <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	2b02      	cmp	r3, #2
 8001168:	d901      	bls.n	800116e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e122      	b.n	80013b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800116e:	4b69      	ldr	r3, [pc, #420]	; (8001314 <HAL_RCC_OscConfig+0x784>)
 8001170:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001174:	f003 0302 	and.w	r3, r3, #2
 8001178:	2b00      	cmp	r3, #0
 800117a:	d0ef      	beq.n	800115c <HAL_RCC_OscConfig+0x5cc>
 800117c:	e01b      	b.n	80011b6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800117e:	4b65      	ldr	r3, [pc, #404]	; (8001314 <HAL_RCC_OscConfig+0x784>)
 8001180:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001184:	4a63      	ldr	r2, [pc, #396]	; (8001314 <HAL_RCC_OscConfig+0x784>)
 8001186:	f023 0301 	bic.w	r3, r3, #1
 800118a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800118e:	f7ff fba9 	bl	80008e4 <HAL_GetTick>
 8001192:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001194:	e008      	b.n	80011a8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001196:	f7ff fba5 	bl	80008e4 <HAL_GetTick>
 800119a:	4602      	mov	r2, r0
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d901      	bls.n	80011a8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80011a4:	2303      	movs	r3, #3
 80011a6:	e105      	b.n	80013b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80011a8:	4b5a      	ldr	r3, [pc, #360]	; (8001314 <HAL_RCC_OscConfig+0x784>)
 80011aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d1ef      	bne.n	8001196 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	f000 80f9 	beq.w	80013b2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	f040 80cf 	bne.w	8001368 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80011ca:	4b52      	ldr	r3, [pc, #328]	; (8001314 <HAL_RCC_OscConfig+0x784>)
 80011cc:	68db      	ldr	r3, [r3, #12]
 80011ce:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	f003 0203 	and.w	r2, r3, #3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011da:	429a      	cmp	r2, r3
 80011dc:	d12c      	bne.n	8001238 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e8:	3b01      	subs	r3, #1
 80011ea:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d123      	bne.n	8001238 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011fa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d11b      	bne.n	8001238 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800120a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800120c:	429a      	cmp	r2, r3
 800120e:	d113      	bne.n	8001238 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800121a:	085b      	lsrs	r3, r3, #1
 800121c:	3b01      	subs	r3, #1
 800121e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001220:	429a      	cmp	r2, r3
 8001222:	d109      	bne.n	8001238 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	085b      	lsrs	r3, r3, #1
 8001230:	3b01      	subs	r3, #1
 8001232:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001234:	429a      	cmp	r2, r3
 8001236:	d071      	beq.n	800131c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	2b0c      	cmp	r3, #12
 800123c:	d068      	beq.n	8001310 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800123e:	4b35      	ldr	r3, [pc, #212]	; (8001314 <HAL_RCC_OscConfig+0x784>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d105      	bne.n	8001256 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800124a:	4b32      	ldr	r3, [pc, #200]	; (8001314 <HAL_RCC_OscConfig+0x784>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e0ac      	b.n	80013b4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800125a:	4b2e      	ldr	r3, [pc, #184]	; (8001314 <HAL_RCC_OscConfig+0x784>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a2d      	ldr	r2, [pc, #180]	; (8001314 <HAL_RCC_OscConfig+0x784>)
 8001260:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001264:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001266:	f7ff fb3d 	bl	80008e4 <HAL_GetTick>
 800126a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800126c:	e008      	b.n	8001280 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800126e:	f7ff fb39 	bl	80008e4 <HAL_GetTick>
 8001272:	4602      	mov	r2, r0
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	2b02      	cmp	r3, #2
 800127a:	d901      	bls.n	8001280 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800127c:	2303      	movs	r3, #3
 800127e:	e099      	b.n	80013b4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001280:	4b24      	ldr	r3, [pc, #144]	; (8001314 <HAL_RCC_OscConfig+0x784>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d1f0      	bne.n	800126e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800128c:	4b21      	ldr	r3, [pc, #132]	; (8001314 <HAL_RCC_OscConfig+0x784>)
 800128e:	68da      	ldr	r2, [r3, #12]
 8001290:	4b21      	ldr	r3, [pc, #132]	; (8001318 <HAL_RCC_OscConfig+0x788>)
 8001292:	4013      	ands	r3, r2
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800129c:	3a01      	subs	r2, #1
 800129e:	0112      	lsls	r2, r2, #4
 80012a0:	4311      	orrs	r1, r2
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80012a6:	0212      	lsls	r2, r2, #8
 80012a8:	4311      	orrs	r1, r2
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80012ae:	0852      	lsrs	r2, r2, #1
 80012b0:	3a01      	subs	r2, #1
 80012b2:	0552      	lsls	r2, r2, #21
 80012b4:	4311      	orrs	r1, r2
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80012ba:	0852      	lsrs	r2, r2, #1
 80012bc:	3a01      	subs	r2, #1
 80012be:	0652      	lsls	r2, r2, #25
 80012c0:	4311      	orrs	r1, r2
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80012c6:	06d2      	lsls	r2, r2, #27
 80012c8:	430a      	orrs	r2, r1
 80012ca:	4912      	ldr	r1, [pc, #72]	; (8001314 <HAL_RCC_OscConfig+0x784>)
 80012cc:	4313      	orrs	r3, r2
 80012ce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80012d0:	4b10      	ldr	r3, [pc, #64]	; (8001314 <HAL_RCC_OscConfig+0x784>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a0f      	ldr	r2, [pc, #60]	; (8001314 <HAL_RCC_OscConfig+0x784>)
 80012d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012da:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80012dc:	4b0d      	ldr	r3, [pc, #52]	; (8001314 <HAL_RCC_OscConfig+0x784>)
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	4a0c      	ldr	r2, [pc, #48]	; (8001314 <HAL_RCC_OscConfig+0x784>)
 80012e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80012e8:	f7ff fafc 	bl	80008e4 <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012f0:	f7ff faf8 	bl	80008e4 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e058      	b.n	80013b4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001302:	4b04      	ldr	r3, [pc, #16]	; (8001314 <HAL_RCC_OscConfig+0x784>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d0f0      	beq.n	80012f0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800130e:	e050      	b.n	80013b2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e04f      	b.n	80013b4 <HAL_RCC_OscConfig+0x824>
 8001314:	40021000 	.word	0x40021000
 8001318:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800131c:	4b27      	ldr	r3, [pc, #156]	; (80013bc <HAL_RCC_OscConfig+0x82c>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d144      	bne.n	80013b2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001328:	4b24      	ldr	r3, [pc, #144]	; (80013bc <HAL_RCC_OscConfig+0x82c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a23      	ldr	r2, [pc, #140]	; (80013bc <HAL_RCC_OscConfig+0x82c>)
 800132e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001332:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001334:	4b21      	ldr	r3, [pc, #132]	; (80013bc <HAL_RCC_OscConfig+0x82c>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	4a20      	ldr	r2, [pc, #128]	; (80013bc <HAL_RCC_OscConfig+0x82c>)
 800133a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800133e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001340:	f7ff fad0 	bl	80008e4 <HAL_GetTick>
 8001344:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001348:	f7ff facc 	bl	80008e4 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b02      	cmp	r3, #2
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e02c      	b.n	80013b4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800135a:	4b18      	ldr	r3, [pc, #96]	; (80013bc <HAL_RCC_OscConfig+0x82c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d0f0      	beq.n	8001348 <HAL_RCC_OscConfig+0x7b8>
 8001366:	e024      	b.n	80013b2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	2b0c      	cmp	r3, #12
 800136c:	d01f      	beq.n	80013ae <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800136e:	4b13      	ldr	r3, [pc, #76]	; (80013bc <HAL_RCC_OscConfig+0x82c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a12      	ldr	r2, [pc, #72]	; (80013bc <HAL_RCC_OscConfig+0x82c>)
 8001374:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001378:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800137a:	f7ff fab3 	bl	80008e4 <HAL_GetTick>
 800137e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001380:	e008      	b.n	8001394 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001382:	f7ff faaf 	bl	80008e4 <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	2b02      	cmp	r3, #2
 800138e:	d901      	bls.n	8001394 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001390:	2303      	movs	r3, #3
 8001392:	e00f      	b.n	80013b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001394:	4b09      	ldr	r3, [pc, #36]	; (80013bc <HAL_RCC_OscConfig+0x82c>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d1f0      	bne.n	8001382 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80013a0:	4b06      	ldr	r3, [pc, #24]	; (80013bc <HAL_RCC_OscConfig+0x82c>)
 80013a2:	68da      	ldr	r2, [r3, #12]
 80013a4:	4905      	ldr	r1, [pc, #20]	; (80013bc <HAL_RCC_OscConfig+0x82c>)
 80013a6:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <HAL_RCC_OscConfig+0x830>)
 80013a8:	4013      	ands	r3, r2
 80013aa:	60cb      	str	r3, [r1, #12]
 80013ac:	e001      	b.n	80013b2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e000      	b.n	80013b4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80013b2:	2300      	movs	r3, #0
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3720      	adds	r7, #32
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40021000 	.word	0x40021000
 80013c0:	feeefffc 	.word	0xfeeefffc

080013c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d101      	bne.n	80013d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e0e7      	b.n	80015a8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013d8:	4b75      	ldr	r3, [pc, #468]	; (80015b0 <HAL_RCC_ClockConfig+0x1ec>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f003 0307 	and.w	r3, r3, #7
 80013e0:	683a      	ldr	r2, [r7, #0]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d910      	bls.n	8001408 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013e6:	4b72      	ldr	r3, [pc, #456]	; (80015b0 <HAL_RCC_ClockConfig+0x1ec>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f023 0207 	bic.w	r2, r3, #7
 80013ee:	4970      	ldr	r1, [pc, #448]	; (80015b0 <HAL_RCC_ClockConfig+0x1ec>)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013f6:	4b6e      	ldr	r3, [pc, #440]	; (80015b0 <HAL_RCC_ClockConfig+0x1ec>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0307 	and.w	r3, r3, #7
 80013fe:	683a      	ldr	r2, [r7, #0]
 8001400:	429a      	cmp	r2, r3
 8001402:	d001      	beq.n	8001408 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e0cf      	b.n	80015a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0302 	and.w	r3, r3, #2
 8001410:	2b00      	cmp	r3, #0
 8001412:	d010      	beq.n	8001436 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689a      	ldr	r2, [r3, #8]
 8001418:	4b66      	ldr	r3, [pc, #408]	; (80015b4 <HAL_RCC_ClockConfig+0x1f0>)
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001420:	429a      	cmp	r2, r3
 8001422:	d908      	bls.n	8001436 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001424:	4b63      	ldr	r3, [pc, #396]	; (80015b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	4960      	ldr	r1, [pc, #384]	; (80015b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001432:	4313      	orrs	r3, r2
 8001434:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	2b00      	cmp	r3, #0
 8001440:	d04c      	beq.n	80014dc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	2b03      	cmp	r3, #3
 8001448:	d107      	bne.n	800145a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800144a:	4b5a      	ldr	r3, [pc, #360]	; (80015b4 <HAL_RCC_ClockConfig+0x1f0>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d121      	bne.n	800149a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e0a6      	b.n	80015a8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	2b02      	cmp	r3, #2
 8001460:	d107      	bne.n	8001472 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001462:	4b54      	ldr	r3, [pc, #336]	; (80015b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d115      	bne.n	800149a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e09a      	b.n	80015a8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d107      	bne.n	800148a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800147a:	4b4e      	ldr	r3, [pc, #312]	; (80015b4 <HAL_RCC_ClockConfig+0x1f0>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d109      	bne.n	800149a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e08e      	b.n	80015a8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800148a:	4b4a      	ldr	r3, [pc, #296]	; (80015b4 <HAL_RCC_ClockConfig+0x1f0>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001492:	2b00      	cmp	r3, #0
 8001494:	d101      	bne.n	800149a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e086      	b.n	80015a8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800149a:	4b46      	ldr	r3, [pc, #280]	; (80015b4 <HAL_RCC_ClockConfig+0x1f0>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	f023 0203 	bic.w	r2, r3, #3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	4943      	ldr	r1, [pc, #268]	; (80015b4 <HAL_RCC_ClockConfig+0x1f0>)
 80014a8:	4313      	orrs	r3, r2
 80014aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80014ac:	f7ff fa1a 	bl	80008e4 <HAL_GetTick>
 80014b0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014b2:	e00a      	b.n	80014ca <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014b4:	f7ff fa16 	bl	80008e4 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	f241 3288 	movw	r2, #5000	; 0x1388
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e06e      	b.n	80015a8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ca:	4b3a      	ldr	r3, [pc, #232]	; (80015b4 <HAL_RCC_ClockConfig+0x1f0>)
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f003 020c 	and.w	r2, r3, #12
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	429a      	cmp	r2, r3
 80014da:	d1eb      	bne.n	80014b4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0302 	and.w	r3, r3, #2
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d010      	beq.n	800150a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689a      	ldr	r2, [r3, #8]
 80014ec:	4b31      	ldr	r3, [pc, #196]	; (80015b4 <HAL_RCC_ClockConfig+0x1f0>)
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d208      	bcs.n	800150a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014f8:	4b2e      	ldr	r3, [pc, #184]	; (80015b4 <HAL_RCC_ClockConfig+0x1f0>)
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	492b      	ldr	r1, [pc, #172]	; (80015b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001506:	4313      	orrs	r3, r2
 8001508:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800150a:	4b29      	ldr	r3, [pc, #164]	; (80015b0 <HAL_RCC_ClockConfig+0x1ec>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	683a      	ldr	r2, [r7, #0]
 8001514:	429a      	cmp	r2, r3
 8001516:	d210      	bcs.n	800153a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001518:	4b25      	ldr	r3, [pc, #148]	; (80015b0 <HAL_RCC_ClockConfig+0x1ec>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f023 0207 	bic.w	r2, r3, #7
 8001520:	4923      	ldr	r1, [pc, #140]	; (80015b0 <HAL_RCC_ClockConfig+0x1ec>)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	4313      	orrs	r3, r2
 8001526:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001528:	4b21      	ldr	r3, [pc, #132]	; (80015b0 <HAL_RCC_ClockConfig+0x1ec>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0307 	and.w	r3, r3, #7
 8001530:	683a      	ldr	r2, [r7, #0]
 8001532:	429a      	cmp	r2, r3
 8001534:	d001      	beq.n	800153a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e036      	b.n	80015a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0304 	and.w	r3, r3, #4
 8001542:	2b00      	cmp	r3, #0
 8001544:	d008      	beq.n	8001558 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001546:	4b1b      	ldr	r3, [pc, #108]	; (80015b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	4918      	ldr	r1, [pc, #96]	; (80015b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001554:	4313      	orrs	r3, r2
 8001556:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0308 	and.w	r3, r3, #8
 8001560:	2b00      	cmp	r3, #0
 8001562:	d009      	beq.n	8001578 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001564:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	691b      	ldr	r3, [r3, #16]
 8001570:	00db      	lsls	r3, r3, #3
 8001572:	4910      	ldr	r1, [pc, #64]	; (80015b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001574:	4313      	orrs	r3, r2
 8001576:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001578:	f000 f824 	bl	80015c4 <HAL_RCC_GetSysClockFreq>
 800157c:	4602      	mov	r2, r0
 800157e:	4b0d      	ldr	r3, [pc, #52]	; (80015b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	091b      	lsrs	r3, r3, #4
 8001584:	f003 030f 	and.w	r3, r3, #15
 8001588:	490b      	ldr	r1, [pc, #44]	; (80015b8 <HAL_RCC_ClockConfig+0x1f4>)
 800158a:	5ccb      	ldrb	r3, [r1, r3]
 800158c:	f003 031f 	and.w	r3, r3, #31
 8001590:	fa22 f303 	lsr.w	r3, r2, r3
 8001594:	4a09      	ldr	r2, [pc, #36]	; (80015bc <HAL_RCC_ClockConfig+0x1f8>)
 8001596:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001598:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <HAL_RCC_ClockConfig+0x1fc>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff f951 	bl	8000844 <HAL_InitTick>
 80015a2:	4603      	mov	r3, r0
 80015a4:	72fb      	strb	r3, [r7, #11]

  return status;
 80015a6:	7afb      	ldrb	r3, [r7, #11]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3710      	adds	r7, #16
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40022000 	.word	0x40022000
 80015b4:	40021000 	.word	0x40021000
 80015b8:	0800188c 	.word	0x0800188c
 80015bc:	20000008 	.word	0x20000008
 80015c0:	2000000c 	.word	0x2000000c

080015c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b089      	sub	sp, #36	; 0x24
 80015c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61fb      	str	r3, [r7, #28]
 80015ce:	2300      	movs	r3, #0
 80015d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015d2:	4b3e      	ldr	r3, [pc, #248]	; (80016cc <HAL_RCC_GetSysClockFreq+0x108>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f003 030c 	and.w	r3, r3, #12
 80015da:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015dc:	4b3b      	ldr	r3, [pc, #236]	; (80016cc <HAL_RCC_GetSysClockFreq+0x108>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	f003 0303 	and.w	r3, r3, #3
 80015e4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d005      	beq.n	80015f8 <HAL_RCC_GetSysClockFreq+0x34>
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	2b0c      	cmp	r3, #12
 80015f0:	d121      	bne.n	8001636 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d11e      	bne.n	8001636 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80015f8:	4b34      	ldr	r3, [pc, #208]	; (80016cc <HAL_RCC_GetSysClockFreq+0x108>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0308 	and.w	r3, r3, #8
 8001600:	2b00      	cmp	r3, #0
 8001602:	d107      	bne.n	8001614 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001604:	4b31      	ldr	r3, [pc, #196]	; (80016cc <HAL_RCC_GetSysClockFreq+0x108>)
 8001606:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800160a:	0a1b      	lsrs	r3, r3, #8
 800160c:	f003 030f 	and.w	r3, r3, #15
 8001610:	61fb      	str	r3, [r7, #28]
 8001612:	e005      	b.n	8001620 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001614:	4b2d      	ldr	r3, [pc, #180]	; (80016cc <HAL_RCC_GetSysClockFreq+0x108>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	091b      	lsrs	r3, r3, #4
 800161a:	f003 030f 	and.w	r3, r3, #15
 800161e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001620:	4a2b      	ldr	r2, [pc, #172]	; (80016d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001628:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d10d      	bne.n	800164c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001634:	e00a      	b.n	800164c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	2b04      	cmp	r3, #4
 800163a:	d102      	bne.n	8001642 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800163c:	4b25      	ldr	r3, [pc, #148]	; (80016d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800163e:	61bb      	str	r3, [r7, #24]
 8001640:	e004      	b.n	800164c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	2b08      	cmp	r3, #8
 8001646:	d101      	bne.n	800164c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001648:	4b23      	ldr	r3, [pc, #140]	; (80016d8 <HAL_RCC_GetSysClockFreq+0x114>)
 800164a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	2b0c      	cmp	r3, #12
 8001650:	d134      	bne.n	80016bc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001652:	4b1e      	ldr	r3, [pc, #120]	; (80016cc <HAL_RCC_GetSysClockFreq+0x108>)
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	f003 0303 	and.w	r3, r3, #3
 800165a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	2b02      	cmp	r3, #2
 8001660:	d003      	beq.n	800166a <HAL_RCC_GetSysClockFreq+0xa6>
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	2b03      	cmp	r3, #3
 8001666:	d003      	beq.n	8001670 <HAL_RCC_GetSysClockFreq+0xac>
 8001668:	e005      	b.n	8001676 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800166a:	4b1a      	ldr	r3, [pc, #104]	; (80016d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800166c:	617b      	str	r3, [r7, #20]
      break;
 800166e:	e005      	b.n	800167c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001670:	4b19      	ldr	r3, [pc, #100]	; (80016d8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001672:	617b      	str	r3, [r7, #20]
      break;
 8001674:	e002      	b.n	800167c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	617b      	str	r3, [r7, #20]
      break;
 800167a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800167c:	4b13      	ldr	r3, [pc, #76]	; (80016cc <HAL_RCC_GetSysClockFreq+0x108>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	091b      	lsrs	r3, r3, #4
 8001682:	f003 0307 	and.w	r3, r3, #7
 8001686:	3301      	adds	r3, #1
 8001688:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800168a:	4b10      	ldr	r3, [pc, #64]	; (80016cc <HAL_RCC_GetSysClockFreq+0x108>)
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	0a1b      	lsrs	r3, r3, #8
 8001690:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001694:	697a      	ldr	r2, [r7, #20]
 8001696:	fb03 f202 	mul.w	r2, r3, r2
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80016a2:	4b0a      	ldr	r3, [pc, #40]	; (80016cc <HAL_RCC_GetSysClockFreq+0x108>)
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	0e5b      	lsrs	r3, r3, #25
 80016a8:	f003 0303 	and.w	r3, r3, #3
 80016ac:	3301      	adds	r3, #1
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80016b2:	697a      	ldr	r2, [r7, #20]
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80016bc:	69bb      	ldr	r3, [r7, #24]
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3724      	adds	r7, #36	; 0x24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	40021000 	.word	0x40021000
 80016d0:	0800189c 	.word	0x0800189c
 80016d4:	00f42400 	.word	0x00f42400
 80016d8:	007a1200 	.word	0x007a1200

080016dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80016e4:	2300      	movs	r3, #0
 80016e6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80016e8:	4b2a      	ldr	r3, [pc, #168]	; (8001794 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d003      	beq.n	80016fc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80016f4:	f7ff f9e8 	bl	8000ac8 <HAL_PWREx_GetVoltageRange>
 80016f8:	6178      	str	r0, [r7, #20]
 80016fa:	e014      	b.n	8001726 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80016fc:	4b25      	ldr	r3, [pc, #148]	; (8001794 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001700:	4a24      	ldr	r2, [pc, #144]	; (8001794 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001706:	6593      	str	r3, [r2, #88]	; 0x58
 8001708:	4b22      	ldr	r3, [pc, #136]	; (8001794 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800170a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001714:	f7ff f9d8 	bl	8000ac8 <HAL_PWREx_GetVoltageRange>
 8001718:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800171a:	4b1e      	ldr	r3, [pc, #120]	; (8001794 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800171c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800171e:	4a1d      	ldr	r2, [pc, #116]	; (8001794 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001720:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001724:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800172c:	d10b      	bne.n	8001746 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2b80      	cmp	r3, #128	; 0x80
 8001732:	d919      	bls.n	8001768 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2ba0      	cmp	r3, #160	; 0xa0
 8001738:	d902      	bls.n	8001740 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800173a:	2302      	movs	r3, #2
 800173c:	613b      	str	r3, [r7, #16]
 800173e:	e013      	b.n	8001768 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001740:	2301      	movs	r3, #1
 8001742:	613b      	str	r3, [r7, #16]
 8001744:	e010      	b.n	8001768 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2b80      	cmp	r3, #128	; 0x80
 800174a:	d902      	bls.n	8001752 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800174c:	2303      	movs	r3, #3
 800174e:	613b      	str	r3, [r7, #16]
 8001750:	e00a      	b.n	8001768 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2b80      	cmp	r3, #128	; 0x80
 8001756:	d102      	bne.n	800175e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001758:	2302      	movs	r3, #2
 800175a:	613b      	str	r3, [r7, #16]
 800175c:	e004      	b.n	8001768 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2b70      	cmp	r3, #112	; 0x70
 8001762:	d101      	bne.n	8001768 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001764:	2301      	movs	r3, #1
 8001766:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001768:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f023 0207 	bic.w	r2, r3, #7
 8001770:	4909      	ldr	r1, [pc, #36]	; (8001798 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	4313      	orrs	r3, r2
 8001776:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001778:	4b07      	ldr	r3, [pc, #28]	; (8001798 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0307 	and.w	r3, r3, #7
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	429a      	cmp	r2, r3
 8001784:	d001      	beq.n	800178a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e000      	b.n	800178c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800178a:	2300      	movs	r3, #0
}
 800178c:	4618      	mov	r0, r3
 800178e:	3718      	adds	r7, #24
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40021000 	.word	0x40021000
 8001798:	40022000 	.word	0x40022000

0800179c <__libc_init_array>:
 800179c:	b570      	push	{r4, r5, r6, lr}
 800179e:	4d0d      	ldr	r5, [pc, #52]	; (80017d4 <__libc_init_array+0x38>)
 80017a0:	4c0d      	ldr	r4, [pc, #52]	; (80017d8 <__libc_init_array+0x3c>)
 80017a2:	1b64      	subs	r4, r4, r5
 80017a4:	10a4      	asrs	r4, r4, #2
 80017a6:	2600      	movs	r6, #0
 80017a8:	42a6      	cmp	r6, r4
 80017aa:	d109      	bne.n	80017c0 <__libc_init_array+0x24>
 80017ac:	4d0b      	ldr	r5, [pc, #44]	; (80017dc <__libc_init_array+0x40>)
 80017ae:	4c0c      	ldr	r4, [pc, #48]	; (80017e0 <__libc_init_array+0x44>)
 80017b0:	f000 f820 	bl	80017f4 <_init>
 80017b4:	1b64      	subs	r4, r4, r5
 80017b6:	10a4      	asrs	r4, r4, #2
 80017b8:	2600      	movs	r6, #0
 80017ba:	42a6      	cmp	r6, r4
 80017bc:	d105      	bne.n	80017ca <__libc_init_array+0x2e>
 80017be:	bd70      	pop	{r4, r5, r6, pc}
 80017c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80017c4:	4798      	blx	r3
 80017c6:	3601      	adds	r6, #1
 80017c8:	e7ee      	b.n	80017a8 <__libc_init_array+0xc>
 80017ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80017ce:	4798      	blx	r3
 80017d0:	3601      	adds	r6, #1
 80017d2:	e7f2      	b.n	80017ba <__libc_init_array+0x1e>
 80017d4:	080018cc 	.word	0x080018cc
 80017d8:	080018cc 	.word	0x080018cc
 80017dc:	080018cc 	.word	0x080018cc
 80017e0:	080018d0 	.word	0x080018d0

080017e4 <memset>:
 80017e4:	4402      	add	r2, r0
 80017e6:	4603      	mov	r3, r0
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d100      	bne.n	80017ee <memset+0xa>
 80017ec:	4770      	bx	lr
 80017ee:	f803 1b01 	strb.w	r1, [r3], #1
 80017f2:	e7f9      	b.n	80017e8 <memset+0x4>

080017f4 <_init>:
 80017f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017f6:	bf00      	nop
 80017f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017fa:	bc08      	pop	{r3}
 80017fc:	469e      	mov	lr, r3
 80017fe:	4770      	bx	lr

08001800 <_fini>:
 8001800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001802:	bf00      	nop
 8001804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001806:	bc08      	pop	{r3}
 8001808:	469e      	mov	lr, r3
 800180a:	4770      	bx	lr
