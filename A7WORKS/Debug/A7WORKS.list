
A7WORKS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000215c  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  0800230c  0800230c  0001230c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023e0  080023e0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080023e0  080023e0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080023e0  080023e0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023e0  080023e0  000123e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080023e4  080023e4  000123e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080023e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000010  080023f8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  080023f8  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000541c  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001133  00000000  00000000  0002545c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005d8  00000000  00000000  00026590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000530  00000000  00000000  00026b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002712a  00000000  00000000  00027098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005e9c  00000000  00000000  0004e1c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee676  00000000  00000000  0005405e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001426d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001630  00000000  00000000  00142724  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080022f4 	.word	0x080022f4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	080022f4 	.word	0x080022f4

080001f0 <__aeabi_dmul>:
 80001f0:	b570      	push	{r4, r5, r6, lr}
 80001f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001fe:	bf1d      	ittte	ne
 8000200:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000204:	ea94 0f0c 	teqne	r4, ip
 8000208:	ea95 0f0c 	teqne	r5, ip
 800020c:	f000 f8de 	bleq	80003cc <__aeabi_dmul+0x1dc>
 8000210:	442c      	add	r4, r5
 8000212:	ea81 0603 	eor.w	r6, r1, r3
 8000216:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800021a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800021e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000222:	bf18      	it	ne
 8000224:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000228:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800022c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000230:	d038      	beq.n	80002a4 <__aeabi_dmul+0xb4>
 8000232:	fba0 ce02 	umull	ip, lr, r0, r2
 8000236:	f04f 0500 	mov.w	r5, #0
 800023a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800023e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000242:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000246:	f04f 0600 	mov.w	r6, #0
 800024a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800024e:	f09c 0f00 	teq	ip, #0
 8000252:	bf18      	it	ne
 8000254:	f04e 0e01 	orrne.w	lr, lr, #1
 8000258:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800025c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000260:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000264:	d204      	bcs.n	8000270 <__aeabi_dmul+0x80>
 8000266:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800026a:	416d      	adcs	r5, r5
 800026c:	eb46 0606 	adc.w	r6, r6, r6
 8000270:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000274:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000278:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800027c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000280:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000284:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000288:	bf88      	it	hi
 800028a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800028e:	d81e      	bhi.n	80002ce <__aeabi_dmul+0xde>
 8000290:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000294:	bf08      	it	eq
 8000296:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800029a:	f150 0000 	adcs.w	r0, r0, #0
 800029e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002a2:	bd70      	pop	{r4, r5, r6, pc}
 80002a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002a8:	ea46 0101 	orr.w	r1, r6, r1
 80002ac:	ea40 0002 	orr.w	r0, r0, r2
 80002b0:	ea81 0103 	eor.w	r1, r1, r3
 80002b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002b8:	bfc2      	ittt	gt
 80002ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002c2:	bd70      	popgt	{r4, r5, r6, pc}
 80002c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002c8:	f04f 0e00 	mov.w	lr, #0
 80002cc:	3c01      	subs	r4, #1
 80002ce:	f300 80ab 	bgt.w	8000428 <__aeabi_dmul+0x238>
 80002d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002d6:	bfde      	ittt	le
 80002d8:	2000      	movle	r0, #0
 80002da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002de:	bd70      	pople	{r4, r5, r6, pc}
 80002e0:	f1c4 0400 	rsb	r4, r4, #0
 80002e4:	3c20      	subs	r4, #32
 80002e6:	da35      	bge.n	8000354 <__aeabi_dmul+0x164>
 80002e8:	340c      	adds	r4, #12
 80002ea:	dc1b      	bgt.n	8000324 <__aeabi_dmul+0x134>
 80002ec:	f104 0414 	add.w	r4, r4, #20
 80002f0:	f1c4 0520 	rsb	r5, r4, #32
 80002f4:	fa00 f305 	lsl.w	r3, r0, r5
 80002f8:	fa20 f004 	lsr.w	r0, r0, r4
 80002fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000300:	ea40 0002 	orr.w	r0, r0, r2
 8000304:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000308:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800030c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000310:	fa21 f604 	lsr.w	r6, r1, r4
 8000314:	eb42 0106 	adc.w	r1, r2, r6
 8000318:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800031c:	bf08      	it	eq
 800031e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f1c4 040c 	rsb	r4, r4, #12
 8000328:	f1c4 0520 	rsb	r5, r4, #32
 800032c:	fa00 f304 	lsl.w	r3, r0, r4
 8000330:	fa20 f005 	lsr.w	r0, r0, r5
 8000334:	fa01 f204 	lsl.w	r2, r1, r4
 8000338:	ea40 0002 	orr.w	r0, r0, r2
 800033c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000340:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000344:	f141 0100 	adc.w	r1, r1, #0
 8000348:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800034c:	bf08      	it	eq
 800034e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f1c4 0520 	rsb	r5, r4, #32
 8000358:	fa00 f205 	lsl.w	r2, r0, r5
 800035c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000360:	fa20 f304 	lsr.w	r3, r0, r4
 8000364:	fa01 f205 	lsl.w	r2, r1, r5
 8000368:	ea43 0302 	orr.w	r3, r3, r2
 800036c:	fa21 f004 	lsr.w	r0, r1, r4
 8000370:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000374:	fa21 f204 	lsr.w	r2, r1, r4
 8000378:	ea20 0002 	bic.w	r0, r0, r2
 800037c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000380:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000384:	bf08      	it	eq
 8000386:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f094 0f00 	teq	r4, #0
 8000390:	d10f      	bne.n	80003b2 <__aeabi_dmul+0x1c2>
 8000392:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000396:	0040      	lsls	r0, r0, #1
 8000398:	eb41 0101 	adc.w	r1, r1, r1
 800039c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003a0:	bf08      	it	eq
 80003a2:	3c01      	subeq	r4, #1
 80003a4:	d0f7      	beq.n	8000396 <__aeabi_dmul+0x1a6>
 80003a6:	ea41 0106 	orr.w	r1, r1, r6
 80003aa:	f095 0f00 	teq	r5, #0
 80003ae:	bf18      	it	ne
 80003b0:	4770      	bxne	lr
 80003b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003b6:	0052      	lsls	r2, r2, #1
 80003b8:	eb43 0303 	adc.w	r3, r3, r3
 80003bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003c0:	bf08      	it	eq
 80003c2:	3d01      	subeq	r5, #1
 80003c4:	d0f7      	beq.n	80003b6 <__aeabi_dmul+0x1c6>
 80003c6:	ea43 0306 	orr.w	r3, r3, r6
 80003ca:	4770      	bx	lr
 80003cc:	ea94 0f0c 	teq	r4, ip
 80003d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003d4:	bf18      	it	ne
 80003d6:	ea95 0f0c 	teqne	r5, ip
 80003da:	d00c      	beq.n	80003f6 <__aeabi_dmul+0x206>
 80003dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e0:	bf18      	it	ne
 80003e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e6:	d1d1      	bne.n	800038c <__aeabi_dmul+0x19c>
 80003e8:	ea81 0103 	eor.w	r1, r1, r3
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f0:	f04f 0000 	mov.w	r0, #0
 80003f4:	bd70      	pop	{r4, r5, r6, pc}
 80003f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003fa:	bf06      	itte	eq
 80003fc:	4610      	moveq	r0, r2
 80003fe:	4619      	moveq	r1, r3
 8000400:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000404:	d019      	beq.n	800043a <__aeabi_dmul+0x24a>
 8000406:	ea94 0f0c 	teq	r4, ip
 800040a:	d102      	bne.n	8000412 <__aeabi_dmul+0x222>
 800040c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000410:	d113      	bne.n	800043a <__aeabi_dmul+0x24a>
 8000412:	ea95 0f0c 	teq	r5, ip
 8000416:	d105      	bne.n	8000424 <__aeabi_dmul+0x234>
 8000418:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800041c:	bf1c      	itt	ne
 800041e:	4610      	movne	r0, r2
 8000420:	4619      	movne	r1, r3
 8000422:	d10a      	bne.n	800043a <__aeabi_dmul+0x24a>
 8000424:	ea81 0103 	eor.w	r1, r1, r3
 8000428:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800042c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd70      	pop	{r4, r5, r6, pc}
 800043a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800043e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000442:	bd70      	pop	{r4, r5, r6, pc}

08000444 <__aeabi_drsub>:
 8000444:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000448:	e002      	b.n	8000450 <__adddf3>
 800044a:	bf00      	nop

0800044c <__aeabi_dsub>:
 800044c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000450 <__adddf3>:
 8000450:	b530      	push	{r4, r5, lr}
 8000452:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000456:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800045a:	ea94 0f05 	teq	r4, r5
 800045e:	bf08      	it	eq
 8000460:	ea90 0f02 	teqeq	r0, r2
 8000464:	bf1f      	itttt	ne
 8000466:	ea54 0c00 	orrsne.w	ip, r4, r0
 800046a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800046e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000472:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000476:	f000 80e2 	beq.w	800063e <__adddf3+0x1ee>
 800047a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800047e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000482:	bfb8      	it	lt
 8000484:	426d      	neglt	r5, r5
 8000486:	dd0c      	ble.n	80004a2 <__adddf3+0x52>
 8000488:	442c      	add	r4, r5
 800048a:	ea80 0202 	eor.w	r2, r0, r2
 800048e:	ea81 0303 	eor.w	r3, r1, r3
 8000492:	ea82 0000 	eor.w	r0, r2, r0
 8000496:	ea83 0101 	eor.w	r1, r3, r1
 800049a:	ea80 0202 	eor.w	r2, r0, r2
 800049e:	ea81 0303 	eor.w	r3, r1, r3
 80004a2:	2d36      	cmp	r5, #54	; 0x36
 80004a4:	bf88      	it	hi
 80004a6:	bd30      	pophi	{r4, r5, pc}
 80004a8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004b0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004b4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004b8:	d002      	beq.n	80004c0 <__adddf3+0x70>
 80004ba:	4240      	negs	r0, r0
 80004bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004c8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004cc:	d002      	beq.n	80004d4 <__adddf3+0x84>
 80004ce:	4252      	negs	r2, r2
 80004d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004d4:	ea94 0f05 	teq	r4, r5
 80004d8:	f000 80a7 	beq.w	800062a <__adddf3+0x1da>
 80004dc:	f1a4 0401 	sub.w	r4, r4, #1
 80004e0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004e4:	db0d      	blt.n	8000502 <__adddf3+0xb2>
 80004e6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004ea:	fa22 f205 	lsr.w	r2, r2, r5
 80004ee:	1880      	adds	r0, r0, r2
 80004f0:	f141 0100 	adc.w	r1, r1, #0
 80004f4:	fa03 f20e 	lsl.w	r2, r3, lr
 80004f8:	1880      	adds	r0, r0, r2
 80004fa:	fa43 f305 	asr.w	r3, r3, r5
 80004fe:	4159      	adcs	r1, r3
 8000500:	e00e      	b.n	8000520 <__adddf3+0xd0>
 8000502:	f1a5 0520 	sub.w	r5, r5, #32
 8000506:	f10e 0e20 	add.w	lr, lr, #32
 800050a:	2a01      	cmp	r2, #1
 800050c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000510:	bf28      	it	cs
 8000512:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000516:	fa43 f305 	asr.w	r3, r3, r5
 800051a:	18c0      	adds	r0, r0, r3
 800051c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	d507      	bpl.n	8000536 <__adddf3+0xe6>
 8000526:	f04f 0e00 	mov.w	lr, #0
 800052a:	f1dc 0c00 	rsbs	ip, ip, #0
 800052e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000532:	eb6e 0101 	sbc.w	r1, lr, r1
 8000536:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800053a:	d31b      	bcc.n	8000574 <__adddf3+0x124>
 800053c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000540:	d30c      	bcc.n	800055c <__adddf3+0x10c>
 8000542:	0849      	lsrs	r1, r1, #1
 8000544:	ea5f 0030 	movs.w	r0, r0, rrx
 8000548:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800054c:	f104 0401 	add.w	r4, r4, #1
 8000550:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000554:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000558:	f080 809a 	bcs.w	8000690 <__adddf3+0x240>
 800055c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000560:	bf08      	it	eq
 8000562:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000566:	f150 0000 	adcs.w	r0, r0, #0
 800056a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800056e:	ea41 0105 	orr.w	r1, r1, r5
 8000572:	bd30      	pop	{r4, r5, pc}
 8000574:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000578:	4140      	adcs	r0, r0
 800057a:	eb41 0101 	adc.w	r1, r1, r1
 800057e:	3c01      	subs	r4, #1
 8000580:	bf28      	it	cs
 8000582:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000586:	d2e9      	bcs.n	800055c <__adddf3+0x10c>
 8000588:	f091 0f00 	teq	r1, #0
 800058c:	bf04      	itt	eq
 800058e:	4601      	moveq	r1, r0
 8000590:	2000      	moveq	r0, #0
 8000592:	fab1 f381 	clz	r3, r1
 8000596:	bf08      	it	eq
 8000598:	3320      	addeq	r3, #32
 800059a:	f1a3 030b 	sub.w	r3, r3, #11
 800059e:	f1b3 0220 	subs.w	r2, r3, #32
 80005a2:	da0c      	bge.n	80005be <__adddf3+0x16e>
 80005a4:	320c      	adds	r2, #12
 80005a6:	dd08      	ble.n	80005ba <__adddf3+0x16a>
 80005a8:	f102 0c14 	add.w	ip, r2, #20
 80005ac:	f1c2 020c 	rsb	r2, r2, #12
 80005b0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005b4:	fa21 f102 	lsr.w	r1, r1, r2
 80005b8:	e00c      	b.n	80005d4 <__adddf3+0x184>
 80005ba:	f102 0214 	add.w	r2, r2, #20
 80005be:	bfd8      	it	le
 80005c0:	f1c2 0c20 	rsble	ip, r2, #32
 80005c4:	fa01 f102 	lsl.w	r1, r1, r2
 80005c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005cc:	bfdc      	itt	le
 80005ce:	ea41 010c 	orrle.w	r1, r1, ip
 80005d2:	4090      	lslle	r0, r2
 80005d4:	1ae4      	subs	r4, r4, r3
 80005d6:	bfa2      	ittt	ge
 80005d8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005dc:	4329      	orrge	r1, r5
 80005de:	bd30      	popge	{r4, r5, pc}
 80005e0:	ea6f 0404 	mvn.w	r4, r4
 80005e4:	3c1f      	subs	r4, #31
 80005e6:	da1c      	bge.n	8000622 <__adddf3+0x1d2>
 80005e8:	340c      	adds	r4, #12
 80005ea:	dc0e      	bgt.n	800060a <__adddf3+0x1ba>
 80005ec:	f104 0414 	add.w	r4, r4, #20
 80005f0:	f1c4 0220 	rsb	r2, r4, #32
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f302 	lsl.w	r3, r1, r2
 80005fc:	ea40 0003 	orr.w	r0, r0, r3
 8000600:	fa21 f304 	lsr.w	r3, r1, r4
 8000604:	ea45 0103 	orr.w	r1, r5, r3
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	f1c4 040c 	rsb	r4, r4, #12
 800060e:	f1c4 0220 	rsb	r2, r4, #32
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 f304 	lsl.w	r3, r1, r4
 800061a:	ea40 0003 	orr.w	r0, r0, r3
 800061e:	4629      	mov	r1, r5
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	fa21 f004 	lsr.w	r0, r1, r4
 8000626:	4629      	mov	r1, r5
 8000628:	bd30      	pop	{r4, r5, pc}
 800062a:	f094 0f00 	teq	r4, #0
 800062e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000632:	bf06      	itte	eq
 8000634:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000638:	3401      	addeq	r4, #1
 800063a:	3d01      	subne	r5, #1
 800063c:	e74e      	b.n	80004dc <__adddf3+0x8c>
 800063e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000642:	bf18      	it	ne
 8000644:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000648:	d029      	beq.n	800069e <__adddf3+0x24e>
 800064a:	ea94 0f05 	teq	r4, r5
 800064e:	bf08      	it	eq
 8000650:	ea90 0f02 	teqeq	r0, r2
 8000654:	d005      	beq.n	8000662 <__adddf3+0x212>
 8000656:	ea54 0c00 	orrs.w	ip, r4, r0
 800065a:	bf04      	itt	eq
 800065c:	4619      	moveq	r1, r3
 800065e:	4610      	moveq	r0, r2
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	ea91 0f03 	teq	r1, r3
 8000666:	bf1e      	ittt	ne
 8000668:	2100      	movne	r1, #0
 800066a:	2000      	movne	r0, #0
 800066c:	bd30      	popne	{r4, r5, pc}
 800066e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000672:	d105      	bne.n	8000680 <__adddf3+0x230>
 8000674:	0040      	lsls	r0, r0, #1
 8000676:	4149      	adcs	r1, r1
 8000678:	bf28      	it	cs
 800067a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd30      	pop	{r4, r5, pc}
 8000680:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000684:	bf3c      	itt	cc
 8000686:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800068a:	bd30      	popcc	{r4, r5, pc}
 800068c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000690:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000694:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000698:	f04f 0000 	mov.w	r0, #0
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006a2:	bf1a      	itte	ne
 80006a4:	4619      	movne	r1, r3
 80006a6:	4610      	movne	r0, r2
 80006a8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006ac:	bf1c      	itt	ne
 80006ae:	460b      	movne	r3, r1
 80006b0:	4602      	movne	r2, r0
 80006b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006b6:	bf06      	itte	eq
 80006b8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006bc:	ea91 0f03 	teqeq	r1, r3
 80006c0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	bf00      	nop

080006c8 <__aeabi_ui2d>:
 80006c8:	f090 0f00 	teq	r0, #0
 80006cc:	bf04      	itt	eq
 80006ce:	2100      	moveq	r1, #0
 80006d0:	4770      	bxeq	lr
 80006d2:	b530      	push	{r4, r5, lr}
 80006d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006dc:	f04f 0500 	mov.w	r5, #0
 80006e0:	f04f 0100 	mov.w	r1, #0
 80006e4:	e750      	b.n	8000588 <__adddf3+0x138>
 80006e6:	bf00      	nop

080006e8 <__aeabi_i2d>:
 80006e8:	f090 0f00 	teq	r0, #0
 80006ec:	bf04      	itt	eq
 80006ee:	2100      	moveq	r1, #0
 80006f0:	4770      	bxeq	lr
 80006f2:	b530      	push	{r4, r5, lr}
 80006f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006fc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000700:	bf48      	it	mi
 8000702:	4240      	negmi	r0, r0
 8000704:	f04f 0100 	mov.w	r1, #0
 8000708:	e73e      	b.n	8000588 <__adddf3+0x138>
 800070a:	bf00      	nop

0800070c <__aeabi_f2d>:
 800070c:	0042      	lsls	r2, r0, #1
 800070e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000712:	ea4f 0131 	mov.w	r1, r1, rrx
 8000716:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800071a:	bf1f      	itttt	ne
 800071c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000720:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000724:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000728:	4770      	bxne	lr
 800072a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800072e:	bf08      	it	eq
 8000730:	4770      	bxeq	lr
 8000732:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000736:	bf04      	itt	eq
 8000738:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800073c:	4770      	bxeq	lr
 800073e:	b530      	push	{r4, r5, lr}
 8000740:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000744:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	e71c      	b.n	8000588 <__adddf3+0x138>
 800074e:	bf00      	nop

08000750 <__aeabi_ul2d>:
 8000750:	ea50 0201 	orrs.w	r2, r0, r1
 8000754:	bf08      	it	eq
 8000756:	4770      	bxeq	lr
 8000758:	b530      	push	{r4, r5, lr}
 800075a:	f04f 0500 	mov.w	r5, #0
 800075e:	e00a      	b.n	8000776 <__aeabi_l2d+0x16>

08000760 <__aeabi_l2d>:
 8000760:	ea50 0201 	orrs.w	r2, r0, r1
 8000764:	bf08      	it	eq
 8000766:	4770      	bxeq	lr
 8000768:	b530      	push	{r4, r5, lr}
 800076a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800076e:	d502      	bpl.n	8000776 <__aeabi_l2d+0x16>
 8000770:	4240      	negs	r0, r0
 8000772:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000776:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800077a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000782:	f43f aed8 	beq.w	8000536 <__adddf3+0xe6>
 8000786:	f04f 0203 	mov.w	r2, #3
 800078a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800078e:	bf18      	it	ne
 8000790:	3203      	addne	r2, #3
 8000792:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000796:	bf18      	it	ne
 8000798:	3203      	addne	r2, #3
 800079a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800079e:	f1c2 0320 	rsb	r3, r2, #32
 80007a2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007a6:	fa20 f002 	lsr.w	r0, r0, r2
 80007aa:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ae:	ea40 000e 	orr.w	r0, r0, lr
 80007b2:	fa21 f102 	lsr.w	r1, r1, r2
 80007b6:	4414      	add	r4, r2
 80007b8:	e6bd      	b.n	8000536 <__adddf3+0xe6>
 80007ba:	bf00      	nop

080007bc <__aeabi_d2iz>:
 80007bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007c0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007c4:	d215      	bcs.n	80007f2 <__aeabi_d2iz+0x36>
 80007c6:	d511      	bpl.n	80007ec <__aeabi_d2iz+0x30>
 80007c8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007cc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007d0:	d912      	bls.n	80007f8 <__aeabi_d2iz+0x3c>
 80007d2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007da:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007de:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80007e2:	fa23 f002 	lsr.w	r0, r3, r2
 80007e6:	bf18      	it	ne
 80007e8:	4240      	negne	r0, r0
 80007ea:	4770      	bx	lr
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	4770      	bx	lr
 80007f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007f6:	d105      	bne.n	8000804 <__aeabi_d2iz+0x48>
 80007f8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80007fc:	bf08      	it	eq
 80007fe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000802:	4770      	bx	lr
 8000804:	f04f 0000 	mov.w	r0, #0
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop

0800080c <LPUART_init>:
//Not needed for A7
//cursor position center
//int row = 20;
//int col = 40;

void LPUART_init(void) {
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
	PWR->CR2 |= (PWR_CR2_IOSV);             // power avail on PG[15:2] (LPUART1)
 8000810:	4b22      	ldr	r3, [pc, #136]	; (800089c <LPUART_init+0x90>)
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	4a21      	ldr	r2, [pc, #132]	; (800089c <LPUART_init+0x90>)
 8000816:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800081a:	6053      	str	r3, [r2, #4]
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOGEN);   // enable GPIOG clock
 800081c:	4b20      	ldr	r3, [pc, #128]	; (80008a0 <LPUART_init+0x94>)
 800081e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000820:	4a1f      	ldr	r2, [pc, #124]	; (80008a0 <LPUART_init+0x94>)
 8000822:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000826:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC->APB1ENR2 |= RCC_APB1ENR2_LPUART1EN; // enable LPUART clock bridge
 8000828:	4b1d      	ldr	r3, [pc, #116]	; (80008a0 <LPUART_init+0x94>)
 800082a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800082c:	4a1c      	ldr	r2, [pc, #112]	; (80008a0 <LPUART_init+0x94>)
 800082e:	f043 0301 	orr.w	r3, r3, #1
 8000832:	65d3      	str	r3, [r2, #92]	; 0x5c

	//Initialize Pins for USART
	// Pin 7 = tx, pin 8 = rx,
	GPIOG->MODER &= ~(GPIO_MODER_MODE7 | GPIO_MODER_MODE8);	//clear bits
 8000834:	4b1b      	ldr	r3, [pc, #108]	; (80008a4 <LPUART_init+0x98>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a1a      	ldr	r2, [pc, #104]	; (80008a4 <LPUART_init+0x98>)
 800083a:	f423 3370 	bic.w	r3, r3, #245760	; 0x3c000
 800083e:	6013      	str	r3, [r2, #0]
	GPIOG->MODER |= (GPIO_MODER_MODE7_1 | GPIO_MODER_MODE8_1);//set to AFR mode
 8000840:	4b18      	ldr	r3, [pc, #96]	; (80008a4 <LPUART_init+0x98>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a17      	ldr	r2, [pc, #92]	; (80008a4 <LPUART_init+0x98>)
 8000846:	f443 3320 	orr.w	r3, r3, #163840	; 0x28000
 800084a:	6013      	str	r3, [r2, #0]
	GPIOG->AFR[0] |= (8 << GPIO_AFRL_AFSEL7_Pos);
 800084c:	4b15      	ldr	r3, [pc, #84]	; (80008a4 <LPUART_init+0x98>)
 800084e:	6a1b      	ldr	r3, [r3, #32]
 8000850:	4a14      	ldr	r2, [pc, #80]	; (80008a4 <LPUART_init+0x98>)
 8000852:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000856:	6213      	str	r3, [r2, #32]
	GPIOG->AFR[1] |= (8 << GPIO_AFRH_AFSEL8_Pos); //set to AF8 (USART)
 8000858:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <LPUART_init+0x98>)
 800085a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800085c:	4a11      	ldr	r2, [pc, #68]	; (80008a4 <LPUART_init+0x98>)
 800085e:	f043 0308 	orr.w	r3, r3, #8
 8000862:	6253      	str	r3, [r2, #36]	; 0x24

	LPUART1->CR1 &= ~(USART_CR1_M1 | USART_CR1_M0); // 8-bit data
 8000864:	4b10      	ldr	r3, [pc, #64]	; (80008a8 <LPUART_init+0x9c>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a0f      	ldr	r2, [pc, #60]	; (80008a8 <LPUART_init+0x9c>)
 800086a:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 800086e:	6013      	str	r3, [r2, #0]
	LPUART1->CR1 |= USART_CR1_UE;                   // enable LPUART1
 8000870:	4b0d      	ldr	r3, [pc, #52]	; (80008a8 <LPUART_init+0x9c>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a0c      	ldr	r2, [pc, #48]	; (80008a8 <LPUART_init+0x9c>)
 8000876:	f043 0301 	orr.w	r3, r3, #1
 800087a:	6013      	str	r3, [r2, #0]
	LPUART1->CR1 |= (USART_CR1_TE | USART_CR1_RE);  // enable xmit & recv
 800087c:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <LPUART_init+0x9c>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a09      	ldr	r2, [pc, #36]	; (80008a8 <LPUART_init+0x9c>)
 8000882:	f043 030c 	orr.w	r3, r3, #12
 8000886:	6013      	str	r3, [r2, #0]
//	LPUART1->CR1 |= USART_CR1_RXNEIE;        // enable LPUART1 recv interrupt
//	LPUART1->ISR &= ~(USART_ISR_RXNE);       // clear Recv-Not-Empty flag

	LPUART1->BRR = 53333;			//sets baud rate~VT100 11500
 8000888:	4b07      	ldr	r3, [pc, #28]	; (80008a8 <LPUART_init+0x9c>)
 800088a:	f24d 0255 	movw	r2, #53333	; 0xd055
 800088e:	60da      	str	r2, [r3, #12]

//	NVIC->ISER[2] = (1 << (LPUART1_IRQn & 0x1F));   // enable LPUART1 ISR
//	__enable_irq();                          // enable global interrupts
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	40007000 	.word	0x40007000
 80008a0:	40021000 	.word	0x40021000
 80008a4:	48001800 	.word	0x48001800
 80008a8:	40008000 	.word	0x40008000

080008ac <LPUART_Print>:

void LPUART_Print(const char *message) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
	uint16_t iStrIdx = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	81fb      	strh	r3, [r7, #14]
	while (message[iStrIdx] != 0) {
 80008b8:	e013      	b.n	80008e2 <LPUART_Print+0x36>
		while (!(LPUART1->ISR & USART_ISR_TXE))
 80008ba:	bf00      	nop
 80008bc:	4b10      	ldr	r3, [pc, #64]	; (8000900 <LPUART_Print+0x54>)
 80008be:	69db      	ldr	r3, [r3, #28]
 80008c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d0f9      	beq.n	80008bc <LPUART_Print+0x10>
			; // wait for empty xmit buffer
		LPUART1->TDR = message[iStrIdx];       // send this character
 80008c8:	89fb      	ldrh	r3, [r7, #14]
 80008ca:	687a      	ldr	r2, [r7, #4]
 80008cc:	4413      	add	r3, r2
 80008ce:	781a      	ldrb	r2, [r3, #0]
 80008d0:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <LPUART_Print+0x54>)
 80008d2:	b292      	uxth	r2, r2
 80008d4:	851a      	strh	r2, [r3, #40]	; 0x28
		iStrIdx++;                             // index to next char
 80008d6:	89fb      	ldrh	r3, [r7, #14]
 80008d8:	3301      	adds	r3, #1
 80008da:	81fb      	strh	r3, [r7, #14]
		delay_us(200);
 80008dc:	20c8      	movs	r0, #200	; 0xc8
 80008de:	f000 f8db 	bl	8000a98 <delay_us>
	while (message[iStrIdx] != 0) {
 80008e2:	89fb      	ldrh	r3, [r7, #14]
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	4413      	add	r3, r2
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d1e5      	bne.n	80008ba <LPUART_Print+0xe>
	}
	delay_us(1000);
 80008ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008f2:	f000 f8d1 	bl	8000a98 <delay_us>
}
 80008f6:	bf00      	nop
 80008f8:	3710      	adds	r7, #16
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40008000 	.word	0x40008000

08000904 <LPUART_ESC_Print>:

void LPUART_ESC_Print(const char *message) {
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
	uint16_t iStrIdx = 0;
 800090c:	2300      	movs	r3, #0
 800090e:	81fb      	strh	r3, [r7, #14]
	while (!(LPUART1->ISR & USART_ISR_TXE))
 8000910:	bf00      	nop
 8000912:	4b16      	ldr	r3, [pc, #88]	; (800096c <LPUART_ESC_Print+0x68>)
 8000914:	69db      	ldr	r3, [r3, #28]
 8000916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800091a:	2b00      	cmp	r3, #0
 800091c:	d0f9      	beq.n	8000912 <LPUART_ESC_Print+0xe>
		;
	LPUART1->TDR = 0x1b;
 800091e:	4b13      	ldr	r3, [pc, #76]	; (800096c <LPUART_ESC_Print+0x68>)
 8000920:	221b      	movs	r2, #27
 8000922:	851a      	strh	r2, [r3, #40]	; 0x28
	while (message[iStrIdx] != 0) {
 8000924:	e013      	b.n	800094e <LPUART_ESC_Print+0x4a>
		while (!(LPUART1->ISR & USART_ISR_TXE))
 8000926:	bf00      	nop
 8000928:	4b10      	ldr	r3, [pc, #64]	; (800096c <LPUART_ESC_Print+0x68>)
 800092a:	69db      	ldr	r3, [r3, #28]
 800092c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000930:	2b00      	cmp	r3, #0
 8000932:	d0f9      	beq.n	8000928 <LPUART_ESC_Print+0x24>
			; // wait for empty xmit buffer
		LPUART1->TDR = message[iStrIdx];       // send this character
 8000934:	89fb      	ldrh	r3, [r7, #14]
 8000936:	687a      	ldr	r2, [r7, #4]
 8000938:	4413      	add	r3, r2
 800093a:	781a      	ldrb	r2, [r3, #0]
 800093c:	4b0b      	ldr	r3, [pc, #44]	; (800096c <LPUART_ESC_Print+0x68>)
 800093e:	b292      	uxth	r2, r2
 8000940:	851a      	strh	r2, [r3, #40]	; 0x28
		iStrIdx++;
 8000942:	89fb      	ldrh	r3, [r7, #14]
 8000944:	3301      	adds	r3, #1
 8000946:	81fb      	strh	r3, [r7, #14]
		delay_us(200);       // advance index to next char
 8000948:	20c8      	movs	r0, #200	; 0xc8
 800094a:	f000 f8a5 	bl	8000a98 <delay_us>
	while (message[iStrIdx] != 0) {
 800094e:	89fb      	ldrh	r3, [r7, #14]
 8000950:	687a      	ldr	r2, [r7, #4]
 8000952:	4413      	add	r3, r2
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d1e5      	bne.n	8000926 <LPUART_ESC_Print+0x22>
	}
	delay_us(1000);
 800095a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800095e:	f000 f89b 	bl	8000a98 <delay_us>
}
 8000962:	bf00      	nop
 8000964:	3710      	adds	r7, #16
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40008000 	.word	0x40008000

08000970 <update_position>:

//works only for row and col values less than 100
void update_position(uint8_t row, uint8_t col) {
 8000970:	b580      	push	{r7, lr}
 8000972:	b08a      	sub	sp, #40	; 0x28
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	460a      	mov	r2, r1
 800097a:	71fb      	strb	r3, [r7, #7]
 800097c:	4613      	mov	r3, r2
 800097e:	71bb      	strb	r3, [r7, #6]
	char str[8];
	int i = 0; //pointer to increment if row and col values are greater than 10
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
	int rone, rten, cone, cten;
	rone = row % 10;
 8000984:	79fa      	ldrb	r2, [r7, #7]
 8000986:	4b38      	ldr	r3, [pc, #224]	; (8000a68 <update_position+0xf8>)
 8000988:	fba3 1302 	umull	r1, r3, r3, r2
 800098c:	08d9      	lsrs	r1, r3, #3
 800098e:	460b      	mov	r3, r1
 8000990:	009b      	lsls	r3, r3, #2
 8000992:	440b      	add	r3, r1
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	1ad3      	subs	r3, r2, r3
 8000998:	b2db      	uxtb	r3, r3
 800099a:	623b      	str	r3, [r7, #32]
	rten = row / 10;
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	4a32      	ldr	r2, [pc, #200]	; (8000a68 <update_position+0xf8>)
 80009a0:	fba2 2303 	umull	r2, r3, r2, r3
 80009a4:	08db      	lsrs	r3, r3, #3
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	61fb      	str	r3, [r7, #28]
	cone = col % 10;
 80009aa:	79ba      	ldrb	r2, [r7, #6]
 80009ac:	4b2e      	ldr	r3, [pc, #184]	; (8000a68 <update_position+0xf8>)
 80009ae:	fba3 1302 	umull	r1, r3, r3, r2
 80009b2:	08d9      	lsrs	r1, r3, #3
 80009b4:	460b      	mov	r3, r1
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	440b      	add	r3, r1
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	1ad3      	subs	r3, r2, r3
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	61bb      	str	r3, [r7, #24]
	cten = col / 10;
 80009c2:	79bb      	ldrb	r3, [r7, #6]
 80009c4:	4a28      	ldr	r2, [pc, #160]	; (8000a68 <update_position+0xf8>)
 80009c6:	fba2 2303 	umull	r2, r3, r2, r3
 80009ca:	08db      	lsrs	r3, r3, #3
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	617b      	str	r3, [r7, #20]

	//converts row and col int values to char
	char row_one = rone + '0';
 80009d0:	6a3b      	ldr	r3, [r7, #32]
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	3330      	adds	r3, #48	; 0x30
 80009d6:	74fb      	strb	r3, [r7, #19]
	char row_ten = rten + '0';
 80009d8:	69fb      	ldr	r3, [r7, #28]
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	3330      	adds	r3, #48	; 0x30
 80009de:	74bb      	strb	r3, [r7, #18]
	char col_one = cone + '0';
 80009e0:	69bb      	ldr	r3, [r7, #24]
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	3330      	adds	r3, #48	; 0x30
 80009e6:	747b      	strb	r3, [r7, #17]
	char col_ten = cten + '0';
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	3330      	adds	r3, #48	; 0x30
 80009ee:	743b      	strb	r3, [r7, #16]

	//Writes position value
	str[0] = '[';
 80009f0:	235b      	movs	r3, #91	; 0x5b
 80009f2:	723b      	strb	r3, [r7, #8]
	if (row > 9){
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	2b09      	cmp	r3, #9
 80009f8:	d904      	bls.n	8000a04 <update_position+0x94>
		i++;
 80009fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fc:	3301      	adds	r3, #1
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24
		str[1] = row_ten;
 8000a00:	7cbb      	ldrb	r3, [r7, #18]
 8000a02:	727b      	strb	r3, [r7, #9]
	}
	str[1+i] = row_one;
 8000a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a06:	3301      	adds	r3, #1
 8000a08:	3328      	adds	r3, #40	; 0x28
 8000a0a:	443b      	add	r3, r7
 8000a0c:	7cfa      	ldrb	r2, [r7, #19]
 8000a0e:	f803 2c20 	strb.w	r2, [r3, #-32]
	str[2+i] = ';';
 8000a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a14:	3302      	adds	r3, #2
 8000a16:	3328      	adds	r3, #40	; 0x28
 8000a18:	443b      	add	r3, r7
 8000a1a:	223b      	movs	r2, #59	; 0x3b
 8000a1c:	f803 2c20 	strb.w	r2, [r3, #-32]
	if (col > 9){
 8000a20:	79bb      	ldrb	r3, [r7, #6]
 8000a22:	2b09      	cmp	r3, #9
 8000a24:	d909      	bls.n	8000a3a <update_position+0xca>
		str[3+i] = col_ten;
 8000a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a28:	3303      	adds	r3, #3
 8000a2a:	3328      	adds	r3, #40	; 0x28
 8000a2c:	443b      	add	r3, r7
 8000a2e:	7c3a      	ldrb	r2, [r7, #16]
 8000a30:	f803 2c20 	strb.w	r2, [r3, #-32]
		i++;
 8000a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a36:	3301      	adds	r3, #1
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
	}
	str[3+i] = col_one;
 8000a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a3c:	3303      	adds	r3, #3
 8000a3e:	3328      	adds	r3, #40	; 0x28
 8000a40:	443b      	add	r3, r7
 8000a42:	7c7a      	ldrb	r2, [r7, #17]
 8000a44:	f803 2c20 	strb.w	r2, [r3, #-32]
	str[4+i] = 'H';
 8000a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a4a:	3304      	adds	r3, #4
 8000a4c:	3328      	adds	r3, #40	; 0x28
 8000a4e:	443b      	add	r3, r7
 8000a50:	2248      	movs	r2, #72	; 0x48
 8000a52:	f803 2c20 	strb.w	r2, [r3, #-32]
	LPUART_ESC_Print(str);
 8000a56:	f107 0308 	add.w	r3, r7, #8
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f7ff ff52 	bl	8000904 <LPUART_ESC_Print>
}
 8000a60:	bf00      	nop
 8000a62:	3728      	adds	r7, #40	; 0x28
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	cccccccd 	.word	0xcccccccd

08000a6c <SysTick_Init>:
#include "stm32l4xx_hal.h"


// configure SysTick timer for use with delay_us(). This will break
// warning: breaks HAL_delay() by disabling interrupts for shorter delay timing.
void SysTick_Init(void){
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
    SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |	       // enable SysTick Timer
 8000a70:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <SysTick_Init+0x28>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a07      	ldr	r2, [pc, #28]	; (8000a94 <SysTick_Init+0x28>)
 8000a76:	f043 0305 	orr.w	r3, r3, #5
 8000a7a:	6013      	str	r3, [r2, #0]
                      SysTick_CTRL_CLKSOURCE_Msk);     // select CPU clock
    SysTick->CTRL &= ~(SysTick_CTRL_TICKINT_Msk);      // disable interrupt
 8000a7c:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <SysTick_Init+0x28>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a04      	ldr	r2, [pc, #16]	; (8000a94 <SysTick_Init+0x28>)
 8000a82:	f023 0302 	bic.w	r3, r3, #2
 8000a86:	6013      	str	r3, [r2, #0]
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	e000e010 	.word	0xe000e010

08000a98 <delay_us>:

// delay in microseconds using SysTick timer to count CPU clock cycles
// do not call with 0 : error, maximum delay.
// careful calling with small nums : result in longer delays than specified:
//    e.g. @4MHz, delay_us(1) = 10=15 us delay.
void delay_us(const uint32_t time_us) {  // time_us = target delay, microseconds
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
    SysTick->LOAD = (uint32_t)((time_us * (SystemCoreClock / 6000000)) - 1);
 8000aa0:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <delay_us+0x50>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a11      	ldr	r2, [pc, #68]	; (8000aec <delay_us+0x54>)
 8000aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8000aaa:	0cdb      	lsrs	r3, r3, #19
 8000aac:	687a      	ldr	r2, [r7, #4]
 8000aae:	fb02 f303 	mul.w	r3, r2, r3
 8000ab2:	4a0f      	ldr	r2, [pc, #60]	; (8000af0 <delay_us+0x58>)
 8000ab4:	3b01      	subs	r3, #1
 8000ab6:	6053      	str	r3, [r2, #4]
    SysTick->VAL = 0;                                      // clear the timer count
 8000ab8:	4b0d      	ldr	r3, [pc, #52]	; (8000af0 <delay_us+0x58>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
    SysTick->CTRL &= ~(SysTick_CTRL_COUNTFLAG_Msk);        // clear the count flag
 8000abe:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <delay_us+0x58>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a0b      	ldr	r2, [pc, #44]	; (8000af0 <delay_us+0x58>)
 8000ac4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ac8:	6013      	str	r3, [r2, #0]
    while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)); // wait for the flag
 8000aca:	bf00      	nop
 8000acc:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <delay_us+0x58>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d0f9      	beq.n	8000acc <delay_us+0x34>
}
 8000ad8:	bf00      	nop
 8000ada:	bf00      	nop
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	20000004 	.word	0x20000004
 8000aec:	165e9f81 	.word	0x165e9f81
 8000af0:	e000e010 	.word	0xe000e010

08000af4 <main>:
int count_to_volts(int value);
void ADC_voltsConversion(int value);
void ADC_print();
void ADC1_2_IRQHandler(void);

int main(void) {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
	//Initialization
	HAL_Init();
 8000af8:	f000 fc0b 	bl	8001312 <HAL_Init>
	SystemClock_Config();
 8000afc:	f000 fb34 	bl	8001168 <SystemClock_Config>
	SysTick_Init();
 8000b00:	f7ff ffb4 	bl	8000a6c <SysTick_Init>
	LPUART_init();
 8000b04:	f7ff fe82 	bl	800080c <LPUART_init>
	ADC_init(); //ADC initialization
 8000b08:	f000 fa6c 	bl	8000fe4 <ADC_init>

	LPUART_ESC_Print("[2J");	//clear all
 8000b0c:	4827      	ldr	r0, [pc, #156]	; (8000bac <main+0xb8>)
 8000b0e:	f7ff fef9 	bl	8000904 <LPUART_ESC_Print>
	update_position(1, 1);
 8000b12:	2101      	movs	r1, #1
 8000b14:	2001      	movs	r0, #1
 8000b16:	f7ff ff2b 	bl	8000970 <update_position>
	LPUART_Print("ADC counts volts");
 8000b1a:	4825      	ldr	r0, [pc, #148]	; (8000bb0 <main+0xbc>)
 8000b1c:	f7ff fec6 	bl	80008ac <LPUART_Print>
	update_position(2, 1);
 8000b20:	2101      	movs	r1, #1
 8000b22:	2002      	movs	r0, #2
 8000b24:	f7ff ff24 	bl	8000970 <update_position>
	LPUART_Print("MIN              V");
 8000b28:	4822      	ldr	r0, [pc, #136]	; (8000bb4 <main+0xc0>)
 8000b2a:	f7ff febf 	bl	80008ac <LPUART_Print>
	update_position(3, 1);
 8000b2e:	2101      	movs	r1, #1
 8000b30:	2003      	movs	r0, #3
 8000b32:	f7ff ff1d 	bl	8000970 <update_position>
	LPUART_Print("MAX              V");
 8000b36:	4820      	ldr	r0, [pc, #128]	; (8000bb8 <main+0xc4>)
 8000b38:	f7ff feb8 	bl	80008ac <LPUART_Print>
	update_position(4, 1);
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	2004      	movs	r0, #4
 8000b40:	f7ff ff16 	bl	8000970 <update_position>
	LPUART_Print("AVG              V");
 8000b44:	481d      	ldr	r0, [pc, #116]	; (8000bbc <main+0xc8>)
 8000b46:	f7ff feb1 	bl	80008ac <LPUART_Print>

	while (1) {
		check = 0;	//resets check variable
 8000b4a:	4b1d      	ldr	r3, [pc, #116]	; (8000bc0 <main+0xcc>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	701a      	strb	r2, [r3, #0]
		while (check < tenth_of_sec) {
 8000b50:	e022      	b.n	8000b98 <main+0xa4>
			check++;			//increments count
 8000b52:	4b1b      	ldr	r3, [pc, #108]	; (8000bc0 <main+0xcc>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	3301      	adds	r3, #1
 8000b58:	b2da      	uxtb	r2, r3
 8000b5a:	4b19      	ldr	r3, [pc, #100]	; (8000bc0 <main+0xcc>)
 8000b5c:	701a      	strb	r2, [r3, #0]
			delay_us(10000);	//hundreth of a second delay
 8000b5e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000b62:	f7ff ff99 	bl	8000a98 <delay_us>
			if (done) {
 8000b66:	4b17      	ldr	r3, [pc, #92]	; (8000bc4 <main+0xd0>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d014      	beq.n	8000b98 <main+0xa4>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b6e:	b672      	cpsid	i
}
 8000b70:	bf00      	nop
				__disable_irq(); //disable interrupt
				ADC_updateArray();
 8000b72:	f000 f999 	bl	8000ea8 <ADC_updateArray>
				ADC_getAverage();
 8000b76:	f000 f9bd 	bl	8000ef4 <ADC_getAverage>
				ADC_getMin();
 8000b7a:	f000 f9e3 	bl	8000f44 <ADC_getMin>
				ADC_getMax();
 8000b7e:	f000 fa09 	bl	8000f94 <ADC_getMax>
				done = 0;	//resets flag
 8000b82:	4b10      	ldr	r3, [pc, #64]	; (8000bc4 <main+0xd0>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000b88:	b662      	cpsie	i
}
 8000b8a:	bf00      	nop
				__enable_irq();	//re enables interrupt
				ADC1->CR |= ADC_CR_ADSTART;  // start conversion
 8000b8c:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <main+0xd4>)
 8000b8e:	689b      	ldr	r3, [r3, #8]
 8000b90:	4a0d      	ldr	r2, [pc, #52]	; (8000bc8 <main+0xd4>)
 8000b92:	f043 0304 	orr.w	r3, r3, #4
 8000b96:	6093      	str	r3, [r2, #8]
		while (check < tenth_of_sec) {
 8000b98:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <main+0xcc>)
 8000b9a:	781a      	ldrb	r2, [r3, #0]
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <main+0xd8>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d3d6      	bcc.n	8000b52 <main+0x5e>
			}
		}
		ADC_print();
 8000ba4:	f000 f814 	bl	8000bd0 <ADC_print>
		check = 0;	//resets check variable
 8000ba8:	e7cf      	b.n	8000b4a <main+0x56>
 8000baa:	bf00      	nop
 8000bac:	0800230c 	.word	0x0800230c
 8000bb0:	08002310 	.word	0x08002310
 8000bb4:	08002324 	.word	0x08002324
 8000bb8:	08002338 	.word	0x08002338
 8000bbc:	0800234c 	.word	0x0800234c
 8000bc0:	2000008d 	.word	0x2000008d
 8000bc4:	2000008c 	.word	0x2000008c
 8000bc8:	50040000 	.word	0x50040000
 8000bcc:	20000000 	.word	0x20000000

08000bd0 <ADC_print>:
	}
}

//updates terminal with new stuff
void ADC_print() {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd4:	b672      	cpsid	i
}
 8000bd6:	bf00      	nop
	__disable_irq();
	//COL COUNT = 6			COL VOLTS = 12
	//Prints MIN VALUES : COUNT and VOLTS
	LPUART_ESC_Print("[2;6H");	//count cursor
 8000bd8:	4821      	ldr	r0, [pc, #132]	; (8000c60 <ADC_print+0x90>)
 8000bda:	f7ff fe93 	bl	8000904 <LPUART_ESC_Print>
	ADC_countConversion(ADC_min);
 8000bde:	4b21      	ldr	r3, [pc, #132]	; (8000c64 <ADC_print+0x94>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4618      	mov	r0, r3
 8000be4:	f000 f850 	bl	8000c88 <ADC_countConversion>
	LPUART_ESC_Print("[2;12H");	//volt cursor
 8000be8:	481f      	ldr	r0, [pc, #124]	; (8000c68 <ADC_print+0x98>)
 8000bea:	f7ff fe8b 	bl	8000904 <LPUART_ESC_Print>
	ADC_voltsConversion(count_to_volts(ADC_min));
 8000bee:	4b1d      	ldr	r3, [pc, #116]	; (8000c64 <ADC_print+0x94>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f000 f8b8 	bl	8000d68 <count_to_volts>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f000 f8de 	bl	8000dbc <ADC_voltsConversion>

	//Prints MAX Values : COUNT and VOLTS
	LPUART_ESC_Print("[3;6H");	//count cursor
 8000c00:	481a      	ldr	r0, [pc, #104]	; (8000c6c <ADC_print+0x9c>)
 8000c02:	f7ff fe7f 	bl	8000904 <LPUART_ESC_Print>
	ADC_countConversion(ADC_max);
 8000c06:	4b1a      	ldr	r3, [pc, #104]	; (8000c70 <ADC_print+0xa0>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f000 f83c 	bl	8000c88 <ADC_countConversion>
	LPUART_ESC_Print("[3;12H");	//volt cursor
 8000c10:	4818      	ldr	r0, [pc, #96]	; (8000c74 <ADC_print+0xa4>)
 8000c12:	f7ff fe77 	bl	8000904 <LPUART_ESC_Print>
	ADC_voltsConversion(count_to_volts(ADC_max));
 8000c16:	4b16      	ldr	r3, [pc, #88]	; (8000c70 <ADC_print+0xa0>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f000 f8a4 	bl	8000d68 <count_to_volts>
 8000c20:	4603      	mov	r3, r0
 8000c22:	4618      	mov	r0, r3
 8000c24:	f000 f8ca 	bl	8000dbc <ADC_voltsConversion>

	//Prints AVG Values : COUNT and VOLTS
	LPUART_ESC_Print("[4;6H");	//count cursor
 8000c28:	4813      	ldr	r0, [pc, #76]	; (8000c78 <ADC_print+0xa8>)
 8000c2a:	f7ff fe6b 	bl	8000904 <LPUART_ESC_Print>
	ADC_countConversion(ADC_avg);
 8000c2e:	4b13      	ldr	r3, [pc, #76]	; (8000c7c <ADC_print+0xac>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4618      	mov	r0, r3
 8000c34:	f000 f828 	bl	8000c88 <ADC_countConversion>
	LPUART_ESC_Print("[4;12H");	//volt cursor
 8000c38:	4811      	ldr	r0, [pc, #68]	; (8000c80 <ADC_print+0xb0>)
 8000c3a:	f7ff fe63 	bl	8000904 <LPUART_ESC_Print>
	ADC_voltsConversion(count_to_volts(ADC_avg));
 8000c3e:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <ADC_print+0xac>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4618      	mov	r0, r3
 8000c44:	f000 f890 	bl	8000d68 <count_to_volts>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f000 f8b6 	bl	8000dbc <ADC_voltsConversion>

	LPUART_ESC_Print("[?25l"); //turns off cursor
 8000c50:	480c      	ldr	r0, [pc, #48]	; (8000c84 <ADC_print+0xb4>)
 8000c52:	f7ff fe57 	bl	8000904 <LPUART_ESC_Print>
  __ASM volatile ("cpsie i" : : : "memory");
 8000c56:	b662      	cpsie	i
}
 8000c58:	bf00      	nop
	__enable_irq();
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	08002360 	.word	0x08002360
 8000c64:	20000034 	.word	0x20000034
 8000c68:	08002368 	.word	0x08002368
 8000c6c:	08002370 	.word	0x08002370
 8000c70:	20000038 	.word	0x20000038
 8000c74:	08002378 	.word	0x08002378
 8000c78:	08002380 	.word	0x08002380
 8000c7c:	20000030 	.word	0x20000030
 8000c80:	08002388 	.word	0x08002388
 8000c84:	08002390 	.word	0x08002390

08000c88 <ADC_countConversion>:

//Converts count and writes string
void ADC_countConversion(int value) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b088      	sub	sp, #32
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	char str[4] = { '0', '0', '0', '0' };
 8000c90:	f04f 3330 	mov.w	r3, #808464432	; 0x30303030
 8000c94:	60fb      	str	r3, [r7, #12]
	int thousand, hundred, ten, one;
	thousand = value / 1000;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4a2f      	ldr	r2, [pc, #188]	; (8000d58 <ADC_countConversion+0xd0>)
 8000c9a:	fb82 1203 	smull	r1, r2, r2, r3
 8000c9e:	1192      	asrs	r2, r2, #6
 8000ca0:	17db      	asrs	r3, r3, #31
 8000ca2:	1ad3      	subs	r3, r2, r3
 8000ca4:	61fb      	str	r3, [r7, #28]
	hundred = (value % 1000) / 100;
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	4b2b      	ldr	r3, [pc, #172]	; (8000d58 <ADC_countConversion+0xd0>)
 8000caa:	fb83 1302 	smull	r1, r3, r3, r2
 8000cae:	1199      	asrs	r1, r3, #6
 8000cb0:	17d3      	asrs	r3, r2, #31
 8000cb2:	1acb      	subs	r3, r1, r3
 8000cb4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000cb8:	fb01 f303 	mul.w	r3, r1, r3
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	4a27      	ldr	r2, [pc, #156]	; (8000d5c <ADC_countConversion+0xd4>)
 8000cc0:	fb82 1203 	smull	r1, r2, r2, r3
 8000cc4:	1152      	asrs	r2, r2, #5
 8000cc6:	17db      	asrs	r3, r3, #31
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	61bb      	str	r3, [r7, #24]
	ten = (value % 100) / 10;
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	4b23      	ldr	r3, [pc, #140]	; (8000d5c <ADC_countConversion+0xd4>)
 8000cd0:	fb83 1302 	smull	r1, r3, r3, r2
 8000cd4:	1159      	asrs	r1, r3, #5
 8000cd6:	17d3      	asrs	r3, r2, #31
 8000cd8:	1acb      	subs	r3, r1, r3
 8000cda:	2164      	movs	r1, #100	; 0x64
 8000cdc:	fb01 f303 	mul.w	r3, r1, r3
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	4a1f      	ldr	r2, [pc, #124]	; (8000d60 <ADC_countConversion+0xd8>)
 8000ce4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ce8:	1092      	asrs	r2, r2, #2
 8000cea:	17db      	asrs	r3, r3, #31
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	617b      	str	r3, [r7, #20]
	one = (value % 10);
 8000cf0:	687a      	ldr	r2, [r7, #4]
 8000cf2:	4b1b      	ldr	r3, [pc, #108]	; (8000d60 <ADC_countConversion+0xd8>)
 8000cf4:	fb83 1302 	smull	r1, r3, r3, r2
 8000cf8:	1099      	asrs	r1, r3, #2
 8000cfa:	17d3      	asrs	r3, r2, #31
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	460b      	mov	r3, r1
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	440b      	add	r3, r1
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	1ad3      	subs	r3, r2, r3
 8000d08:	613b      	str	r3, [r7, #16]
	str[3] = one + '0';
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	3330      	adds	r3, #48	; 0x30
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	73fb      	strb	r3, [r7, #15]
	if (value > 9)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2b09      	cmp	r3, #9
 8000d18:	dd04      	ble.n	8000d24 <ADC_countConversion+0x9c>
		str[2] = ten + '0';
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	3330      	adds	r3, #48	; 0x30
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	73bb      	strb	r3, [r7, #14]
	if (value > 99)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2b63      	cmp	r3, #99	; 0x63
 8000d28:	dd04      	ble.n	8000d34 <ADC_countConversion+0xac>
		str[1] = hundred + '0';
 8000d2a:	69bb      	ldr	r3, [r7, #24]
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	3330      	adds	r3, #48	; 0x30
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	737b      	strb	r3, [r7, #13]
	if (value > 999)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d3a:	db04      	blt.n	8000d46 <ADC_countConversion+0xbe>
		str[0] = thousand + '0';
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	3330      	adds	r3, #48	; 0x30
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	733b      	strb	r3, [r7, #12]
	LPUART_Print(str);
 8000d46:	f107 030c 	add.w	r3, r7, #12
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff fdae 	bl	80008ac <LPUART_Print>
}
 8000d50:	bf00      	nop
 8000d52:	3720      	adds	r7, #32
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	10624dd3 	.word	0x10624dd3
 8000d5c:	51eb851f 	.word	0x51eb851f
 8000d60:	66666667 	.word	0x66666667
 8000d64:	00000000 	.word	0x00000000

08000d68 <count_to_volts>:

//Calibration
int count_to_volts(int value) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
	value = value * 0.8084 + 40;
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f7ff fcb9 	bl	80006e8 <__aeabi_i2d>
 8000d76:	a30f      	add	r3, pc, #60	; (adr r3, 8000db4 <count_to_volts+0x4c>)
 8000d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d7c:	f7ff fa38 	bl	80001f0 <__aeabi_dmul>
 8000d80:	4602      	mov	r2, r0
 8000d82:	460b      	mov	r3, r1
 8000d84:	4610      	mov	r0, r2
 8000d86:	4619      	mov	r1, r3
 8000d88:	f04f 0200 	mov.w	r2, #0
 8000d8c:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <count_to_volts+0x48>)
 8000d8e:	f7ff fb5f 	bl	8000450 <__adddf3>
 8000d92:	4602      	mov	r2, r0
 8000d94:	460b      	mov	r3, r1
 8000d96:	4610      	mov	r0, r2
 8000d98:	4619      	mov	r1, r3
 8000d9a:	f7ff fd0f 	bl	80007bc <__aeabi_d2iz>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	607b      	str	r3, [r7, #4]
	return value;
 8000da2:	687b      	ldr	r3, [r7, #4]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	f3af 8000 	nop.w
 8000db0:	40440000 	.word	0x40440000
 8000db4:	ad42c3ca 	.word	0xad42c3ca
 8000db8:	3fe9de69 	.word	0x3fe9de69

08000dbc <ADC_voltsConversion>:

//Converts count_to_volts to volts str to write to terminal
void ADC_voltsConversion(int value) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b088      	sub	sp, #32
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
	char str[5] = { '0', '.', '0', '0', '0' };
 8000dc4:	4a34      	ldr	r2, [pc, #208]	; (8000e98 <ADC_voltsConversion+0xdc>)
 8000dc6:	f107 0308 	add.w	r3, r7, #8
 8000dca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000dce:	6018      	str	r0, [r3, #0]
 8000dd0:	3304      	adds	r3, #4
 8000dd2:	7019      	strb	r1, [r3, #0]
	int thousand, hundred, ten, one;
	thousand = value / 1000;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	4a31      	ldr	r2, [pc, #196]	; (8000e9c <ADC_voltsConversion+0xe0>)
 8000dd8:	fb82 1203 	smull	r1, r2, r2, r3
 8000ddc:	1192      	asrs	r2, r2, #6
 8000dde:	17db      	asrs	r3, r3, #31
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	61fb      	str	r3, [r7, #28]
	hundred = (value % 1000) / 100;
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	4b2d      	ldr	r3, [pc, #180]	; (8000e9c <ADC_voltsConversion+0xe0>)
 8000de8:	fb83 1302 	smull	r1, r3, r3, r2
 8000dec:	1199      	asrs	r1, r3, #6
 8000dee:	17d3      	asrs	r3, r2, #31
 8000df0:	1acb      	subs	r3, r1, r3
 8000df2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000df6:	fb01 f303 	mul.w	r3, r1, r3
 8000dfa:	1ad3      	subs	r3, r2, r3
 8000dfc:	4a28      	ldr	r2, [pc, #160]	; (8000ea0 <ADC_voltsConversion+0xe4>)
 8000dfe:	fb82 1203 	smull	r1, r2, r2, r3
 8000e02:	1152      	asrs	r2, r2, #5
 8000e04:	17db      	asrs	r3, r3, #31
 8000e06:	1ad3      	subs	r3, r2, r3
 8000e08:	61bb      	str	r3, [r7, #24]
	ten = (value % 100) / 10;
 8000e0a:	687a      	ldr	r2, [r7, #4]
 8000e0c:	4b24      	ldr	r3, [pc, #144]	; (8000ea0 <ADC_voltsConversion+0xe4>)
 8000e0e:	fb83 1302 	smull	r1, r3, r3, r2
 8000e12:	1159      	asrs	r1, r3, #5
 8000e14:	17d3      	asrs	r3, r2, #31
 8000e16:	1acb      	subs	r3, r1, r3
 8000e18:	2164      	movs	r1, #100	; 0x64
 8000e1a:	fb01 f303 	mul.w	r3, r1, r3
 8000e1e:	1ad3      	subs	r3, r2, r3
 8000e20:	4a20      	ldr	r2, [pc, #128]	; (8000ea4 <ADC_voltsConversion+0xe8>)
 8000e22:	fb82 1203 	smull	r1, r2, r2, r3
 8000e26:	1092      	asrs	r2, r2, #2
 8000e28:	17db      	asrs	r3, r3, #31
 8000e2a:	1ad3      	subs	r3, r2, r3
 8000e2c:	617b      	str	r3, [r7, #20]
	one = (value % 10);
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	4b1c      	ldr	r3, [pc, #112]	; (8000ea4 <ADC_voltsConversion+0xe8>)
 8000e32:	fb83 1302 	smull	r1, r3, r3, r2
 8000e36:	1099      	asrs	r1, r3, #2
 8000e38:	17d3      	asrs	r3, r2, #31
 8000e3a:	1ac9      	subs	r1, r1, r3
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	440b      	add	r3, r1
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	613b      	str	r3, [r7, #16]
	str[4] = one + '0';
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	3330      	adds	r3, #48	; 0x30
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	733b      	strb	r3, [r7, #12]
	if (value > 9)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2b09      	cmp	r3, #9
 8000e56:	dd04      	ble.n	8000e62 <ADC_voltsConversion+0xa6>
		str[3] = ten + '0';
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	3330      	adds	r3, #48	; 0x30
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	72fb      	strb	r3, [r7, #11]
	if (value > 99)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2b63      	cmp	r3, #99	; 0x63
 8000e66:	dd04      	ble.n	8000e72 <ADC_voltsConversion+0xb6>
		str[2] = hundred + '0';
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	3330      	adds	r3, #48	; 0x30
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	72bb      	strb	r3, [r7, #10]
	if (value > 999)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e78:	db04      	blt.n	8000e84 <ADC_voltsConversion+0xc8>
		str[0] = thousand + '0';
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	3330      	adds	r3, #48	; 0x30
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	723b      	strb	r3, [r7, #8]
	LPUART_Print(str);
 8000e84:	f107 0308 	add.w	r3, r7, #8
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff fd0f 	bl	80008ac <LPUART_Print>
}
 8000e8e:	bf00      	nop
 8000e90:	3720      	adds	r7, #32
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	08002398 	.word	0x08002398
 8000e9c:	10624dd3 	.word	0x10624dd3
 8000ea0:	51eb851f 	.word	0x51eb851f
 8000ea4:	66666667 	.word	0x66666667

08000ea8 <ADC_updateArray>:

void ADC_updateArray() {
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
	for (int i = 0; i < SAMPLE - 1; i++) { //shifts array to the left, deletes leftmost to update
 8000eae:	2300      	movs	r3, #0
 8000eb0:	607b      	str	r3, [r7, #4]
 8000eb2:	e00b      	b.n	8000ecc <ADC_updateArray+0x24>
		ADC_sample[i] = ADC_sample[i + 1];
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	4a0c      	ldr	r2, [pc, #48]	; (8000eec <ADC_updateArray+0x44>)
 8000eba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ebe:	490b      	ldr	r1, [pc, #44]	; (8000eec <ADC_updateArray+0x44>)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < SAMPLE - 1; i++) { //shifts array to the left, deletes leftmost to update
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	607b      	str	r3, [r7, #4]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2b12      	cmp	r3, #18
 8000ed0:	ddf0      	ble.n	8000eb4 <ADC_updateArray+0xc>
	}
	ADC_sample[SAMPLE - 1] = ADC_input;	//loads value to the rightmost part in the array
 8000ed2:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <ADC_updateArray+0x48>)
 8000ed4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4b04      	ldr	r3, [pc, #16]	; (8000eec <ADC_updateArray+0x44>)
 8000edc:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	2000003c 	.word	0x2000003c
 8000ef0:	2000002c 	.word	0x2000002c

08000ef4 <ADC_getAverage>:

//calculates the average of an array
void ADC_getAverage() {
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
	uint32_t sum = 0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < SAMPLE; i++) {//loads and adds each value in the sample
 8000efe:	2300      	movs	r3, #0
 8000f00:	603b      	str	r3, [r7, #0]
 8000f02:	e009      	b.n	8000f18 <ADC_getAverage+0x24>
		sum += ADC_sample[i];
 8000f04:	4a0c      	ldr	r2, [pc, #48]	; (8000f38 <ADC_getAverage+0x44>)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	4413      	add	r3, r2
 8000f10:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < SAMPLE; i++) {//loads and adds each value in the sample
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	3301      	adds	r3, #1
 8000f16:	603b      	str	r3, [r7, #0]
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	2b13      	cmp	r3, #19
 8000f1c:	ddf2      	ble.n	8000f04 <ADC_getAverage+0x10>
	}
	ADC_avg = sum / SAMPLE;	//updates and gets average value
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a06      	ldr	r2, [pc, #24]	; (8000f3c <ADC_getAverage+0x48>)
 8000f22:	fba2 2303 	umull	r2, r3, r2, r3
 8000f26:	091b      	lsrs	r3, r3, #4
 8000f28:	4a05      	ldr	r2, [pc, #20]	; (8000f40 <ADC_getAverage+0x4c>)
 8000f2a:	6013      	str	r3, [r2, #0]
}
 8000f2c:	bf00      	nop
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	2000003c 	.word	0x2000003c
 8000f3c:	cccccccd 	.word	0xcccccccd
 8000f40:	20000030 	.word	0x20000030

08000f44 <ADC_getMin>:

void ADC_getMin() {
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
	uint32_t smallest = ADC_sample[0];
 8000f4a:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <ADC_getMin+0x48>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < SAMPLE; i++) {//scans through and checks if input is the smallest
 8000f50:	2300      	movs	r3, #0
 8000f52:	603b      	str	r3, [r7, #0]
 8000f54:	e00e      	b.n	8000f74 <ADC_getMin+0x30>
		if (ADC_sample[i] < smallest) {
 8000f56:	4a0d      	ldr	r2, [pc, #52]	; (8000f8c <ADC_getMin+0x48>)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f5e:	687a      	ldr	r2, [r7, #4]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d904      	bls.n	8000f6e <ADC_getMin+0x2a>
			smallest = ADC_sample[i];
 8000f64:	4a09      	ldr	r2, [pc, #36]	; (8000f8c <ADC_getMin+0x48>)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f6c:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < SAMPLE; i++) {//scans through and checks if input is the smallest
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	3301      	adds	r3, #1
 8000f72:	603b      	str	r3, [r7, #0]
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	2b13      	cmp	r3, #19
 8000f78:	dded      	ble.n	8000f56 <ADC_getMin+0x12>
		}
	}
	ADC_min = smallest; //updates and gets smallest value
 8000f7a:	4a05      	ldr	r2, [pc, #20]	; (8000f90 <ADC_getMin+0x4c>)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6013      	str	r3, [r2, #0]
}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	2000003c 	.word	0x2000003c
 8000f90:	20000034 	.word	0x20000034

08000f94 <ADC_getMax>:

void ADC_getMax() {
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
	uint32_t largest = ADC_sample[0];
 8000f9a:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <ADC_getMax+0x48>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < SAMPLE; i++) { //scans through and checks if input is the largest
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	603b      	str	r3, [r7, #0]
 8000fa4:	e00e      	b.n	8000fc4 <ADC_getMax+0x30>
		if (ADC_sample[i] > largest) {
 8000fa6:	4a0d      	ldr	r2, [pc, #52]	; (8000fdc <ADC_getMax+0x48>)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d204      	bcs.n	8000fbe <ADC_getMax+0x2a>
			largest = ADC_sample[i];
 8000fb4:	4a09      	ldr	r2, [pc, #36]	; (8000fdc <ADC_getMax+0x48>)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fbc:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < SAMPLE; i++) { //scans through and checks if input is the largest
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	603b      	str	r3, [r7, #0]
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	2b13      	cmp	r3, #19
 8000fc8:	dded      	ble.n	8000fa6 <ADC_getMax+0x12>
		}
	}
	ADC_max = largest; //updates and gets largest value
 8000fca:	4a05      	ldr	r2, [pc, #20]	; (8000fe0 <ADC_getMax+0x4c>)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6013      	str	r3, [r2, #0]
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	2000003c 	.word	0x2000003c
 8000fe0:	20000038 	.word	0x20000038

08000fe4 <ADC_init>:

void ADC_init() {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= RCC_AHB2ENR_ADCEN;         // turn on clock for ADC
 8000fe8:	4b4d      	ldr	r3, [pc, #308]	; (8001120 <ADC_init+0x13c>)
 8000fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fec:	4a4c      	ldr	r2, [pc, #304]	; (8001120 <ADC_init+0x13c>)
 8000fee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ff2:	64d3      	str	r3, [r2, #76]	; 0x4c
	// power up & calibrate ADC
	ADC123_COMMON->CCR |= (1 << ADC_CCR_CKMODE_Pos); // clock source = HCLK/1
 8000ff4:	4b4b      	ldr	r3, [pc, #300]	; (8001124 <ADC_init+0x140>)
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	4a4a      	ldr	r2, [pc, #296]	; (8001124 <ADC_init+0x140>)
 8000ffa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ffe:	6093      	str	r3, [r2, #8]
	ADC1->CR &= ~(ADC_CR_DEEPPWD);             // disable deep-power-down
 8001000:	4b49      	ldr	r3, [pc, #292]	; (8001128 <ADC_init+0x144>)
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	4a48      	ldr	r2, [pc, #288]	; (8001128 <ADC_init+0x144>)
 8001006:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800100a:	6093      	str	r3, [r2, #8]
	ADC1->CR |= (ADC_CR_ADVREGEN);         // enable V regulator - see RM 18.4.6
 800100c:	4b46      	ldr	r3, [pc, #280]	; (8001128 <ADC_init+0x144>)
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	4a45      	ldr	r2, [pc, #276]	; (8001128 <ADC_init+0x144>)
 8001012:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001016:	6093      	str	r3, [r2, #8]
	delay_us(20);                              // wait 20us for ADC to power up
 8001018:	2014      	movs	r0, #20
 800101a:	f7ff fd3d 	bl	8000a98 <delay_us>
	ADC1->DIFSEL &= ~(ADC_DIFSEL_DIFSEL_5);    // PA0=ADC1_IN5, single-ended
 800101e:	4b42      	ldr	r3, [pc, #264]	; (8001128 <ADC_init+0x144>)
 8001020:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001024:	4a40      	ldr	r2, [pc, #256]	; (8001128 <ADC_init+0x144>)
 8001026:	f023 0320 	bic.w	r3, r3, #32
 800102a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	ADC1->CR &= ~(ADC_CR_ADEN | ADC_CR_ADCALDIF); // disable ADC, single-end calib
 800102e:	4b3e      	ldr	r3, [pc, #248]	; (8001128 <ADC_init+0x144>)
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	4a3d      	ldr	r2, [pc, #244]	; (8001128 <ADC_init+0x144>)
 8001034:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001038:	f023 0301 	bic.w	r3, r3, #1
 800103c:	6093      	str	r3, [r2, #8]
	ADC1->CR |= ADC_CR_ADCAL;                  // start calibration
 800103e:	4b3a      	ldr	r3, [pc, #232]	; (8001128 <ADC_init+0x144>)
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	4a39      	ldr	r2, [pc, #228]	; (8001128 <ADC_init+0x144>)
 8001044:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001048:	6093      	str	r3, [r2, #8]
	while (ADC1->CR & ADC_CR_ADCAL) {
 800104a:	bf00      	nop
 800104c:	4b36      	ldr	r3, [pc, #216]	; (8001128 <ADC_init+0x144>)
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	2b00      	cmp	r3, #0
 8001052:	dbfb      	blt.n	800104c <ADC_init+0x68>
		;
	}        // wait for calib to finish
	// enable ADC
	ADC1->ISR |= (ADC_ISR_ADRDY);              // set to clr ADC Ready flag
 8001054:	4b34      	ldr	r3, [pc, #208]	; (8001128 <ADC_init+0x144>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a33      	ldr	r2, [pc, #204]	; (8001128 <ADC_init+0x144>)
 800105a:	f043 0301 	orr.w	r3, r3, #1
 800105e:	6013      	str	r3, [r2, #0]
	ADC1->CR |= ADC_CR_ADEN;                   // enable ADC
 8001060:	4b31      	ldr	r3, [pc, #196]	; (8001128 <ADC_init+0x144>)
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	4a30      	ldr	r2, [pc, #192]	; (8001128 <ADC_init+0x144>)
 8001066:	f043 0301 	orr.w	r3, r3, #1
 800106a:	6093      	str	r3, [r2, #8]
	while (!(ADC1->ISR & ADC_ISR_ADRDY)) {
 800106c:	bf00      	nop
 800106e:	4b2e      	ldr	r3, [pc, #184]	; (8001128 <ADC_init+0x144>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	2b00      	cmp	r3, #0
 8001078:	d0f9      	beq.n	800106e <ADC_init+0x8a>
		;
	}    // wait for ADC Ready flag
	ADC1->ISR |= (ADC_ISR_ADRDY);              // set to clr ADC Ready flag
 800107a:	4b2b      	ldr	r3, [pc, #172]	; (8001128 <ADC_init+0x144>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a2a      	ldr	r2, [pc, #168]	; (8001128 <ADC_init+0x144>)
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	6013      	str	r3, [r2, #0]
	// configure ADC sampling & sequencing
	ADC1->SQR1 |= (5 << ADC_SQR1_SQ1_Pos);    // sequence = 1 conv., ch 5
 8001086:	4b28      	ldr	r3, [pc, #160]	; (8001128 <ADC_init+0x144>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	4a27      	ldr	r2, [pc, #156]	; (8001128 <ADC_init+0x144>)
 800108c:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8001090:	6313      	str	r3, [r2, #48]	; 0x30
	ADC1->SMPR1 |= (7 << ADC_SMPR1_SMP5_Pos);  // ch 5 sample time = 6.5 clocks
 8001092:	4b25      	ldr	r3, [pc, #148]	; (8001128 <ADC_init+0x144>)
 8001094:	695b      	ldr	r3, [r3, #20]
 8001096:	4a24      	ldr	r2, [pc, #144]	; (8001128 <ADC_init+0x144>)
 8001098:	f443 3360 	orr.w	r3, r3, #229376	; 0x38000
 800109c:	6153      	str	r3, [r2, #20]
	ADC1->CFGR &= ~( ADC_CFGR_CONT |         // single conversion mode
 800109e:	4b22      	ldr	r3, [pc, #136]	; (8001128 <ADC_init+0x144>)
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	4a21      	ldr	r2, [pc, #132]	; (8001128 <ADC_init+0x144>)
 80010a4:	f423 5330 	bic.w	r3, r3, #11264	; 0x2c00
 80010a8:	f023 0318 	bic.w	r3, r3, #24
 80010ac:	60d3      	str	r3, [r2, #12]
			ADC_CFGR_EXTEN |         // h/w trig disabled for s/w trig
			ADC_CFGR_RES);        // 12-bit resolution
	// configure & enable ADC interrupt
	ADC1->IER |= ADC_IER_EOCIE;                // enable end-of-conv interrupt
 80010ae:	4b1e      	ldr	r3, [pc, #120]	; (8001128 <ADC_init+0x144>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	4a1d      	ldr	r2, [pc, #116]	; (8001128 <ADC_init+0x144>)
 80010b4:	f043 0304 	orr.w	r3, r3, #4
 80010b8:	6053      	str	r3, [r2, #4]
	ADC1->ISR &= ~(ADC_ISR_EOC);               // clear EOC flag
 80010ba:	4b1b      	ldr	r3, [pc, #108]	; (8001128 <ADC_init+0x144>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a1a      	ldr	r2, [pc, #104]	; (8001128 <ADC_init+0x144>)
 80010c0:	f023 0304 	bic.w	r3, r3, #4
 80010c4:	6013      	str	r3, [r2, #0]
	NVIC->ISER[0] = (1 << (ADC1_2_IRQn & 0x1F)); // enable ADC interrupt service
 80010c6:	4b19      	ldr	r3, [pc, #100]	; (800112c <ADC_init+0x148>)
 80010c8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80010cc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80010ce:	b662      	cpsie	i
}
 80010d0:	bf00      	nop
	__enable_irq();                            // enable global interrupts
	// configure GPIO pin PA0
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN);    // connect clock to GPIOA
 80010d2:	4b13      	ldr	r3, [pc, #76]	; (8001120 <ADC_init+0x13c>)
 80010d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d6:	4a12      	ldr	r2, [pc, #72]	; (8001120 <ADC_init+0x13c>)
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	64d3      	str	r3, [r2, #76]	; 0x4c
	GPIOA->AFR[0] &= ~(GPIO_AFRL_AFSEL0);      // clear alt. function select
 80010de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80010e2:	6a1b      	ldr	r3, [r3, #32]
 80010e4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80010e8:	f023 030f 	bic.w	r3, r3, #15
 80010ec:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (7 << GPIO_AFRL_AFSEL0_Pos); // choose AF 7 (PA0=ADC1_IN5)
 80010ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80010f2:	6a1b      	ldr	r3, [r3, #32]
 80010f4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80010f8:	f043 0307 	orr.w	r3, r3, #7
 80010fc:	6213      	str	r3, [r2, #32]
	GPIOA->MODER |= (GPIO_MODER_MODE0);	 // analog mode for PA0 (set MODER last)
 80010fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001108:	f043 0303 	orr.w	r3, r3, #3
 800110c:	6013      	str	r3, [r2, #0]

	ADC1->CR |= ADC_CR_ADSTART;                // start 1st conversion
 800110e:	4b06      	ldr	r3, [pc, #24]	; (8001128 <ADC_init+0x144>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	4a05      	ldr	r2, [pc, #20]	; (8001128 <ADC_init+0x144>)
 8001114:	f043 0304 	orr.w	r3, r3, #4
 8001118:	6093      	str	r3, [r2, #8]
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40021000 	.word	0x40021000
 8001124:	50040300 	.word	0x50040300
 8001128:	50040000 	.word	0x50040000
 800112c:	e000e100 	.word	0xe000e100

08001130 <ADC1_2_IRQHandler>:

void ADC1_2_IRQHandler(void) {
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
	if (ADC_ISR_EOC) {
		ADC_input = ADC1->DR; //copies input to variable
 8001134:	4b09      	ldr	r3, [pc, #36]	; (800115c <ADC1_2_IRQHandler+0x2c>)
 8001136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001138:	b21a      	sxth	r2, r3
 800113a:	4b09      	ldr	r3, [pc, #36]	; (8001160 <ADC1_2_IRQHandler+0x30>)
 800113c:	801a      	strh	r2, [r3, #0]
		done = 1;
 800113e:	4b09      	ldr	r3, [pc, #36]	; (8001164 <ADC1_2_IRQHandler+0x34>)
 8001140:	2201      	movs	r2, #1
 8001142:	701a      	strb	r2, [r3, #0]
		ADC1->ISR &= ~(ADC_ISR_EOC); //clear
 8001144:	4b05      	ldr	r3, [pc, #20]	; (800115c <ADC1_2_IRQHandler+0x2c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a04      	ldr	r2, [pc, #16]	; (800115c <ADC1_2_IRQHandler+0x2c>)
 800114a:	f023 0304 	bic.w	r3, r3, #4
 800114e:	6013      	str	r3, [r2, #0]
	}
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	50040000 	.word	0x50040000
 8001160:	2000002c 	.word	0x2000002c
 8001164:	2000008c 	.word	0x2000008c

08001168 <SystemClock_Config>:
void SystemClock_Config(void) {
 8001168:	b580      	push	{r7, lr}
 800116a:	b096      	sub	sp, #88	; 0x58
 800116c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800116e:	f107 0314 	add.w	r3, r7, #20
 8001172:	2244      	movs	r2, #68	; 0x44
 8001174:	2100      	movs	r1, #0
 8001176:	4618      	mov	r0, r3
 8001178:	f001 f8b4 	bl	80022e4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800117c:	463b      	mov	r3, r7
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	60da      	str	r2, [r3, #12]
 8001188:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 800118a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800118e:	f000 fa29 	bl	80015e4 <HAL_PWREx_ControlVoltageScaling>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8001198:	f000 f82c 	bl	80011f4 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800119c:	2310      	movs	r3, #16
 800119e:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80011a0:	2301      	movs	r3, #1
 80011a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 80011a8:	2390      	movs	r3, #144	; 0x90
 80011aa:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011ac:	2300      	movs	r3, #0
 80011ae:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80011b0:	f107 0314 	add.w	r3, r7, #20
 80011b4:	4618      	mov	r0, r3
 80011b6:	f000 fa6b 	bl	8001690 <HAL_RCC_OscConfig>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <SystemClock_Config+0x5c>
		Error_Handler();
 80011c0:	f000 f818 	bl	80011f4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80011c4:	230f      	movs	r3, #15
 80011c6:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80011c8:	2300      	movs	r3, #0
 80011ca:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011cc:	2300      	movs	r3, #0
 80011ce:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011d0:	2300      	movs	r3, #0
 80011d2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011d4:	2300      	movs	r3, #0
 80011d6:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80011d8:	463b      	mov	r3, r7
 80011da:	2100      	movs	r1, #0
 80011dc:	4618      	mov	r0, r3
 80011de:	f000 fe71 	bl	8001ec4 <HAL_RCC_ClockConfig>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <SystemClock_Config+0x84>
		Error_Handler();
 80011e8:	f000 f804 	bl	80011f4 <Error_Handler>
	}
}
 80011ec:	bf00      	nop
 80011ee:	3758      	adds	r7, #88	; 0x58
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80011f8:	b672      	cpsid	i
}
 80011fa:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80011fc:	e7fe      	b.n	80011fc <Error_Handler+0x8>
	...

08001200 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001206:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <HAL_MspInit+0x44>)
 8001208:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800120a:	4a0e      	ldr	r2, [pc, #56]	; (8001244 <HAL_MspInit+0x44>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	6613      	str	r3, [r2, #96]	; 0x60
 8001212:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <HAL_MspInit+0x44>)
 8001214:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <HAL_MspInit+0x44>)
 8001220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001222:	4a08      	ldr	r2, [pc, #32]	; (8001244 <HAL_MspInit+0x44>)
 8001224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001228:	6593      	str	r3, [r2, #88]	; 0x58
 800122a:	4b06      	ldr	r3, [pc, #24]	; (8001244 <HAL_MspInit+0x44>)
 800122c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800122e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001232:	603b      	str	r3, [r7, #0]
 8001234:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	40021000 	.word	0x40021000

08001248 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800124c:	e7fe      	b.n	800124c <NMI_Handler+0x4>

0800124e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001252:	e7fe      	b.n	8001252 <HardFault_Handler+0x4>

08001254 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001258:	e7fe      	b.n	8001258 <MemManage_Handler+0x4>

0800125a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800125e:	e7fe      	b.n	800125e <BusFault_Handler+0x4>

08001260 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001264:	e7fe      	b.n	8001264 <UsageFault_Handler+0x4>

08001266 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001294:	f000 f892 	bl	80013bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}

0800129c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80012a0:	4b06      	ldr	r3, [pc, #24]	; (80012bc <SystemInit+0x20>)
 80012a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012a6:	4a05      	ldr	r2, [pc, #20]	; (80012bc <SystemInit+0x20>)
 80012a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80012c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012f8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012c4:	f7ff ffea 	bl	800129c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012c8:	480c      	ldr	r0, [pc, #48]	; (80012fc <LoopForever+0x6>)
  ldr r1, =_edata
 80012ca:	490d      	ldr	r1, [pc, #52]	; (8001300 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012cc:	4a0d      	ldr	r2, [pc, #52]	; (8001304 <LoopForever+0xe>)
  movs r3, #0
 80012ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012d0:	e002      	b.n	80012d8 <LoopCopyDataInit>

080012d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012d6:	3304      	adds	r3, #4

080012d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012dc:	d3f9      	bcc.n	80012d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012de:	4a0a      	ldr	r2, [pc, #40]	; (8001308 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012e0:	4c0a      	ldr	r4, [pc, #40]	; (800130c <LoopForever+0x16>)
  movs r3, #0
 80012e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012e4:	e001      	b.n	80012ea <LoopFillZerobss>

080012e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e8:	3204      	adds	r2, #4

080012ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012ec:	d3fb      	bcc.n	80012e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012ee:	f000 ffd5 	bl	800229c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012f2:	f7ff fbff 	bl	8000af4 <main>

080012f6 <LoopForever>:

LoopForever:
    b LoopForever
 80012f6:	e7fe      	b.n	80012f6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80012f8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80012fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001300:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001304:	080023e8 	.word	0x080023e8
  ldr r2, =_sbss
 8001308:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800130c:	20000094 	.word	0x20000094

08001310 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001310:	e7fe      	b.n	8001310 <ADC3_IRQHandler>

08001312 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b082      	sub	sp, #8
 8001316:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001318:	2300      	movs	r3, #0
 800131a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800131c:	2003      	movs	r0, #3
 800131e:	f000 f91f 	bl	8001560 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001322:	200f      	movs	r0, #15
 8001324:	f000 f80e 	bl	8001344 <HAL_InitTick>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d002      	beq.n	8001334 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	71fb      	strb	r3, [r7, #7]
 8001332:	e001      	b.n	8001338 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001334:	f7ff ff64 	bl	8001200 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001338:	79fb      	ldrb	r3, [r7, #7]
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800134c:	2300      	movs	r3, #0
 800134e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001350:	4b17      	ldr	r3, [pc, #92]	; (80013b0 <HAL_InitTick+0x6c>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d023      	beq.n	80013a0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001358:	4b16      	ldr	r3, [pc, #88]	; (80013b4 <HAL_InitTick+0x70>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	4b14      	ldr	r3, [pc, #80]	; (80013b0 <HAL_InitTick+0x6c>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	4619      	mov	r1, r3
 8001362:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001366:	fbb3 f3f1 	udiv	r3, r3, r1
 800136a:	fbb2 f3f3 	udiv	r3, r2, r3
 800136e:	4618      	mov	r0, r3
 8001370:	f000 f91d 	bl	80015ae <HAL_SYSTICK_Config>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d10f      	bne.n	800139a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2b0f      	cmp	r3, #15
 800137e:	d809      	bhi.n	8001394 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001380:	2200      	movs	r2, #0
 8001382:	6879      	ldr	r1, [r7, #4]
 8001384:	f04f 30ff 	mov.w	r0, #4294967295
 8001388:	f000 f8f5 	bl	8001576 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800138c:	4a0a      	ldr	r2, [pc, #40]	; (80013b8 <HAL_InitTick+0x74>)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6013      	str	r3, [r2, #0]
 8001392:	e007      	b.n	80013a4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	73fb      	strb	r3, [r7, #15]
 8001398:	e004      	b.n	80013a4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	73fb      	strb	r3, [r7, #15]
 800139e:	e001      	b.n	80013a4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	2000000c 	.word	0x2000000c
 80013b4:	20000004 	.word	0x20000004
 80013b8:	20000008 	.word	0x20000008

080013bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013c0:	4b06      	ldr	r3, [pc, #24]	; (80013dc <HAL_IncTick+0x20>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	461a      	mov	r2, r3
 80013c6:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <HAL_IncTick+0x24>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4413      	add	r3, r2
 80013cc:	4a04      	ldr	r2, [pc, #16]	; (80013e0 <HAL_IncTick+0x24>)
 80013ce:	6013      	str	r3, [r2, #0]
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	2000000c 	.word	0x2000000c
 80013e0:	20000090 	.word	0x20000090

080013e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  return uwTick;
 80013e8:	4b03      	ldr	r3, [pc, #12]	; (80013f8 <HAL_GetTick+0x14>)
 80013ea:	681b      	ldr	r3, [r3, #0]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	20000090 	.word	0x20000090

080013fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800140c:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <__NVIC_SetPriorityGrouping+0x44>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001412:	68ba      	ldr	r2, [r7, #8]
 8001414:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001418:	4013      	ands	r3, r2
 800141a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001424:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800142c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800142e:	4a04      	ldr	r2, [pc, #16]	; (8001440 <__NVIC_SetPriorityGrouping+0x44>)
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	60d3      	str	r3, [r2, #12]
}
 8001434:	bf00      	nop
 8001436:	3714      	adds	r7, #20
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001448:	4b04      	ldr	r3, [pc, #16]	; (800145c <__NVIC_GetPriorityGrouping+0x18>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	0a1b      	lsrs	r3, r3, #8
 800144e:	f003 0307 	and.w	r3, r3, #7
}
 8001452:	4618      	mov	r0, r3
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	6039      	str	r1, [r7, #0]
 800146a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800146c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001470:	2b00      	cmp	r3, #0
 8001472:	db0a      	blt.n	800148a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	b2da      	uxtb	r2, r3
 8001478:	490c      	ldr	r1, [pc, #48]	; (80014ac <__NVIC_SetPriority+0x4c>)
 800147a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147e:	0112      	lsls	r2, r2, #4
 8001480:	b2d2      	uxtb	r2, r2
 8001482:	440b      	add	r3, r1
 8001484:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001488:	e00a      	b.n	80014a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	b2da      	uxtb	r2, r3
 800148e:	4908      	ldr	r1, [pc, #32]	; (80014b0 <__NVIC_SetPriority+0x50>)
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	f003 030f 	and.w	r3, r3, #15
 8001496:	3b04      	subs	r3, #4
 8001498:	0112      	lsls	r2, r2, #4
 800149a:	b2d2      	uxtb	r2, r2
 800149c:	440b      	add	r3, r1
 800149e:	761a      	strb	r2, [r3, #24]
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	e000e100 	.word	0xe000e100
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b089      	sub	sp, #36	; 0x24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	f1c3 0307 	rsb	r3, r3, #7
 80014ce:	2b04      	cmp	r3, #4
 80014d0:	bf28      	it	cs
 80014d2:	2304      	movcs	r3, #4
 80014d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	3304      	adds	r3, #4
 80014da:	2b06      	cmp	r3, #6
 80014dc:	d902      	bls.n	80014e4 <NVIC_EncodePriority+0x30>
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	3b03      	subs	r3, #3
 80014e2:	e000      	b.n	80014e6 <NVIC_EncodePriority+0x32>
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e8:	f04f 32ff 	mov.w	r2, #4294967295
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	43da      	mvns	r2, r3
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	401a      	ands	r2, r3
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	fa01 f303 	lsl.w	r3, r1, r3
 8001506:	43d9      	mvns	r1, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800150c:	4313      	orrs	r3, r2
         );
}
 800150e:	4618      	mov	r0, r3
 8001510:	3724      	adds	r7, #36	; 0x24
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
	...

0800151c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3b01      	subs	r3, #1
 8001528:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800152c:	d301      	bcc.n	8001532 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800152e:	2301      	movs	r3, #1
 8001530:	e00f      	b.n	8001552 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001532:	4a0a      	ldr	r2, [pc, #40]	; (800155c <SysTick_Config+0x40>)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3b01      	subs	r3, #1
 8001538:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800153a:	210f      	movs	r1, #15
 800153c:	f04f 30ff 	mov.w	r0, #4294967295
 8001540:	f7ff ff8e 	bl	8001460 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001544:	4b05      	ldr	r3, [pc, #20]	; (800155c <SysTick_Config+0x40>)
 8001546:	2200      	movs	r2, #0
 8001548:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800154a:	4b04      	ldr	r3, [pc, #16]	; (800155c <SysTick_Config+0x40>)
 800154c:	2207      	movs	r2, #7
 800154e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	e000e010 	.word	0xe000e010

08001560 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7ff ff47 	bl	80013fc <__NVIC_SetPriorityGrouping>
}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b086      	sub	sp, #24
 800157a:	af00      	add	r7, sp, #0
 800157c:	4603      	mov	r3, r0
 800157e:	60b9      	str	r1, [r7, #8]
 8001580:	607a      	str	r2, [r7, #4]
 8001582:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001588:	f7ff ff5c 	bl	8001444 <__NVIC_GetPriorityGrouping>
 800158c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	68b9      	ldr	r1, [r7, #8]
 8001592:	6978      	ldr	r0, [r7, #20]
 8001594:	f7ff ff8e 	bl	80014b4 <NVIC_EncodePriority>
 8001598:	4602      	mov	r2, r0
 800159a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800159e:	4611      	mov	r1, r2
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff ff5d 	bl	8001460 <__NVIC_SetPriority>
}
 80015a6:	bf00      	nop
 80015a8:	3718      	adds	r7, #24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b082      	sub	sp, #8
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f7ff ffb0 	bl	800151c <SysTick_Config>
 80015bc:	4603      	mov	r3, r0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
	...

080015c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80015cc:	4b04      	ldr	r3, [pc, #16]	; (80015e0 <HAL_PWREx_GetVoltageRange+0x18>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	40007000 	.word	0x40007000

080015e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015f2:	d130      	bne.n	8001656 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80015f4:	4b23      	ldr	r3, [pc, #140]	; (8001684 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001600:	d038      	beq.n	8001674 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001602:	4b20      	ldr	r3, [pc, #128]	; (8001684 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800160a:	4a1e      	ldr	r2, [pc, #120]	; (8001684 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800160c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001610:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001612:	4b1d      	ldr	r3, [pc, #116]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2232      	movs	r2, #50	; 0x32
 8001618:	fb02 f303 	mul.w	r3, r2, r3
 800161c:	4a1b      	ldr	r2, [pc, #108]	; (800168c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800161e:	fba2 2303 	umull	r2, r3, r2, r3
 8001622:	0c9b      	lsrs	r3, r3, #18
 8001624:	3301      	adds	r3, #1
 8001626:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001628:	e002      	b.n	8001630 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	3b01      	subs	r3, #1
 800162e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001630:	4b14      	ldr	r3, [pc, #80]	; (8001684 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001632:	695b      	ldr	r3, [r3, #20]
 8001634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001638:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800163c:	d102      	bne.n	8001644 <HAL_PWREx_ControlVoltageScaling+0x60>
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d1f2      	bne.n	800162a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001644:	4b0f      	ldr	r3, [pc, #60]	; (8001684 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001646:	695b      	ldr	r3, [r3, #20]
 8001648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800164c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001650:	d110      	bne.n	8001674 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e00f      	b.n	8001676 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001656:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800165e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001662:	d007      	beq.n	8001674 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001664:	4b07      	ldr	r3, [pc, #28]	; (8001684 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800166c:	4a05      	ldr	r2, [pc, #20]	; (8001684 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800166e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001672:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3714      	adds	r7, #20
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	40007000 	.word	0x40007000
 8001688:	20000004 	.word	0x20000004
 800168c:	431bde83 	.word	0x431bde83

08001690 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b088      	sub	sp, #32
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d102      	bne.n	80016a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	f000 bc08 	b.w	8001eb4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016a4:	4b96      	ldr	r3, [pc, #600]	; (8001900 <HAL_RCC_OscConfig+0x270>)
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f003 030c 	and.w	r3, r3, #12
 80016ac:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016ae:	4b94      	ldr	r3, [pc, #592]	; (8001900 <HAL_RCC_OscConfig+0x270>)
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	f003 0303 	and.w	r3, r3, #3
 80016b6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0310 	and.w	r3, r3, #16
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	f000 80e4 	beq.w	800188e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d007      	beq.n	80016dc <HAL_RCC_OscConfig+0x4c>
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	2b0c      	cmp	r3, #12
 80016d0:	f040 808b 	bne.w	80017ea <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	f040 8087 	bne.w	80017ea <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016dc:	4b88      	ldr	r3, [pc, #544]	; (8001900 <HAL_RCC_OscConfig+0x270>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d005      	beq.n	80016f4 <HAL_RCC_OscConfig+0x64>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d101      	bne.n	80016f4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e3df      	b.n	8001eb4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a1a      	ldr	r2, [r3, #32]
 80016f8:	4b81      	ldr	r3, [pc, #516]	; (8001900 <HAL_RCC_OscConfig+0x270>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0308 	and.w	r3, r3, #8
 8001700:	2b00      	cmp	r3, #0
 8001702:	d004      	beq.n	800170e <HAL_RCC_OscConfig+0x7e>
 8001704:	4b7e      	ldr	r3, [pc, #504]	; (8001900 <HAL_RCC_OscConfig+0x270>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800170c:	e005      	b.n	800171a <HAL_RCC_OscConfig+0x8a>
 800170e:	4b7c      	ldr	r3, [pc, #496]	; (8001900 <HAL_RCC_OscConfig+0x270>)
 8001710:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001714:	091b      	lsrs	r3, r3, #4
 8001716:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800171a:	4293      	cmp	r3, r2
 800171c:	d223      	bcs.n	8001766 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a1b      	ldr	r3, [r3, #32]
 8001722:	4618      	mov	r0, r3
 8001724:	f000 fd5a 	bl	80021dc <RCC_SetFlashLatencyFromMSIRange>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e3c0      	b.n	8001eb4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001732:	4b73      	ldr	r3, [pc, #460]	; (8001900 <HAL_RCC_OscConfig+0x270>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a72      	ldr	r2, [pc, #456]	; (8001900 <HAL_RCC_OscConfig+0x270>)
 8001738:	f043 0308 	orr.w	r3, r3, #8
 800173c:	6013      	str	r3, [r2, #0]
 800173e:	4b70      	ldr	r3, [pc, #448]	; (8001900 <HAL_RCC_OscConfig+0x270>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a1b      	ldr	r3, [r3, #32]
 800174a:	496d      	ldr	r1, [pc, #436]	; (8001900 <HAL_RCC_OscConfig+0x270>)
 800174c:	4313      	orrs	r3, r2
 800174e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001750:	4b6b      	ldr	r3, [pc, #428]	; (8001900 <HAL_RCC_OscConfig+0x270>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	69db      	ldr	r3, [r3, #28]
 800175c:	021b      	lsls	r3, r3, #8
 800175e:	4968      	ldr	r1, [pc, #416]	; (8001900 <HAL_RCC_OscConfig+0x270>)
 8001760:	4313      	orrs	r3, r2
 8001762:	604b      	str	r3, [r1, #4]
 8001764:	e025      	b.n	80017b2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001766:	4b66      	ldr	r3, [pc, #408]	; (8001900 <HAL_RCC_OscConfig+0x270>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a65      	ldr	r2, [pc, #404]	; (8001900 <HAL_RCC_OscConfig+0x270>)
 800176c:	f043 0308 	orr.w	r3, r3, #8
 8001770:	6013      	str	r3, [r2, #0]
 8001772:	4b63      	ldr	r3, [pc, #396]	; (8001900 <HAL_RCC_OscConfig+0x270>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a1b      	ldr	r3, [r3, #32]
 800177e:	4960      	ldr	r1, [pc, #384]	; (8001900 <HAL_RCC_OscConfig+0x270>)
 8001780:	4313      	orrs	r3, r2
 8001782:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001784:	4b5e      	ldr	r3, [pc, #376]	; (8001900 <HAL_RCC_OscConfig+0x270>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	69db      	ldr	r3, [r3, #28]
 8001790:	021b      	lsls	r3, r3, #8
 8001792:	495b      	ldr	r1, [pc, #364]	; (8001900 <HAL_RCC_OscConfig+0x270>)
 8001794:	4313      	orrs	r3, r2
 8001796:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d109      	bne.n	80017b2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6a1b      	ldr	r3, [r3, #32]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f000 fd1a 	bl	80021dc <RCC_SetFlashLatencyFromMSIRange>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e380      	b.n	8001eb4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017b2:	f000 fc87 	bl	80020c4 <HAL_RCC_GetSysClockFreq>
 80017b6:	4602      	mov	r2, r0
 80017b8:	4b51      	ldr	r3, [pc, #324]	; (8001900 <HAL_RCC_OscConfig+0x270>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	091b      	lsrs	r3, r3, #4
 80017be:	f003 030f 	and.w	r3, r3, #15
 80017c2:	4950      	ldr	r1, [pc, #320]	; (8001904 <HAL_RCC_OscConfig+0x274>)
 80017c4:	5ccb      	ldrb	r3, [r1, r3]
 80017c6:	f003 031f 	and.w	r3, r3, #31
 80017ca:	fa22 f303 	lsr.w	r3, r2, r3
 80017ce:	4a4e      	ldr	r2, [pc, #312]	; (8001908 <HAL_RCC_OscConfig+0x278>)
 80017d0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80017d2:	4b4e      	ldr	r3, [pc, #312]	; (800190c <HAL_RCC_OscConfig+0x27c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff fdb4 	bl	8001344 <HAL_InitTick>
 80017dc:	4603      	mov	r3, r0
 80017de:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80017e0:	7bfb      	ldrb	r3, [r7, #15]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d052      	beq.n	800188c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80017e6:	7bfb      	ldrb	r3, [r7, #15]
 80017e8:	e364      	b.n	8001eb4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d032      	beq.n	8001858 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017f2:	4b43      	ldr	r3, [pc, #268]	; (8001900 <HAL_RCC_OscConfig+0x270>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a42      	ldr	r2, [pc, #264]	; (8001900 <HAL_RCC_OscConfig+0x270>)
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017fe:	f7ff fdf1 	bl	80013e4 <HAL_GetTick>
 8001802:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001804:	e008      	b.n	8001818 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001806:	f7ff fded 	bl	80013e4 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e34d      	b.n	8001eb4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001818:	4b39      	ldr	r3, [pc, #228]	; (8001900 <HAL_RCC_OscConfig+0x270>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d0f0      	beq.n	8001806 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001824:	4b36      	ldr	r3, [pc, #216]	; (8001900 <HAL_RCC_OscConfig+0x270>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a35      	ldr	r2, [pc, #212]	; (8001900 <HAL_RCC_OscConfig+0x270>)
 800182a:	f043 0308 	orr.w	r3, r3, #8
 800182e:	6013      	str	r3, [r2, #0]
 8001830:	4b33      	ldr	r3, [pc, #204]	; (8001900 <HAL_RCC_OscConfig+0x270>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a1b      	ldr	r3, [r3, #32]
 800183c:	4930      	ldr	r1, [pc, #192]	; (8001900 <HAL_RCC_OscConfig+0x270>)
 800183e:	4313      	orrs	r3, r2
 8001840:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001842:	4b2f      	ldr	r3, [pc, #188]	; (8001900 <HAL_RCC_OscConfig+0x270>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	69db      	ldr	r3, [r3, #28]
 800184e:	021b      	lsls	r3, r3, #8
 8001850:	492b      	ldr	r1, [pc, #172]	; (8001900 <HAL_RCC_OscConfig+0x270>)
 8001852:	4313      	orrs	r3, r2
 8001854:	604b      	str	r3, [r1, #4]
 8001856:	e01a      	b.n	800188e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001858:	4b29      	ldr	r3, [pc, #164]	; (8001900 <HAL_RCC_OscConfig+0x270>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a28      	ldr	r2, [pc, #160]	; (8001900 <HAL_RCC_OscConfig+0x270>)
 800185e:	f023 0301 	bic.w	r3, r3, #1
 8001862:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001864:	f7ff fdbe 	bl	80013e4 <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800186c:	f7ff fdba 	bl	80013e4 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e31a      	b.n	8001eb4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800187e:	4b20      	ldr	r3, [pc, #128]	; (8001900 <HAL_RCC_OscConfig+0x270>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1f0      	bne.n	800186c <HAL_RCC_OscConfig+0x1dc>
 800188a:	e000      	b.n	800188e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800188c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	2b00      	cmp	r3, #0
 8001898:	d073      	beq.n	8001982 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	2b08      	cmp	r3, #8
 800189e:	d005      	beq.n	80018ac <HAL_RCC_OscConfig+0x21c>
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	2b0c      	cmp	r3, #12
 80018a4:	d10e      	bne.n	80018c4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	2b03      	cmp	r3, #3
 80018aa:	d10b      	bne.n	80018c4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ac:	4b14      	ldr	r3, [pc, #80]	; (8001900 <HAL_RCC_OscConfig+0x270>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d063      	beq.n	8001980 <HAL_RCC_OscConfig+0x2f0>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d15f      	bne.n	8001980 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e2f7      	b.n	8001eb4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018cc:	d106      	bne.n	80018dc <HAL_RCC_OscConfig+0x24c>
 80018ce:	4b0c      	ldr	r3, [pc, #48]	; (8001900 <HAL_RCC_OscConfig+0x270>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a0b      	ldr	r2, [pc, #44]	; (8001900 <HAL_RCC_OscConfig+0x270>)
 80018d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	e025      	b.n	8001928 <HAL_RCC_OscConfig+0x298>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018e4:	d114      	bne.n	8001910 <HAL_RCC_OscConfig+0x280>
 80018e6:	4b06      	ldr	r3, [pc, #24]	; (8001900 <HAL_RCC_OscConfig+0x270>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a05      	ldr	r2, [pc, #20]	; (8001900 <HAL_RCC_OscConfig+0x270>)
 80018ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018f0:	6013      	str	r3, [r2, #0]
 80018f2:	4b03      	ldr	r3, [pc, #12]	; (8001900 <HAL_RCC_OscConfig+0x270>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a02      	ldr	r2, [pc, #8]	; (8001900 <HAL_RCC_OscConfig+0x270>)
 80018f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018fc:	6013      	str	r3, [r2, #0]
 80018fe:	e013      	b.n	8001928 <HAL_RCC_OscConfig+0x298>
 8001900:	40021000 	.word	0x40021000
 8001904:	080023a0 	.word	0x080023a0
 8001908:	20000004 	.word	0x20000004
 800190c:	20000008 	.word	0x20000008
 8001910:	4ba0      	ldr	r3, [pc, #640]	; (8001b94 <HAL_RCC_OscConfig+0x504>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a9f      	ldr	r2, [pc, #636]	; (8001b94 <HAL_RCC_OscConfig+0x504>)
 8001916:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800191a:	6013      	str	r3, [r2, #0]
 800191c:	4b9d      	ldr	r3, [pc, #628]	; (8001b94 <HAL_RCC_OscConfig+0x504>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a9c      	ldr	r2, [pc, #624]	; (8001b94 <HAL_RCC_OscConfig+0x504>)
 8001922:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001926:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d013      	beq.n	8001958 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001930:	f7ff fd58 	bl	80013e4 <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001938:	f7ff fd54 	bl	80013e4 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b64      	cmp	r3, #100	; 0x64
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e2b4      	b.n	8001eb4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800194a:	4b92      	ldr	r3, [pc, #584]	; (8001b94 <HAL_RCC_OscConfig+0x504>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d0f0      	beq.n	8001938 <HAL_RCC_OscConfig+0x2a8>
 8001956:	e014      	b.n	8001982 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001958:	f7ff fd44 	bl	80013e4 <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001960:	f7ff fd40 	bl	80013e4 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b64      	cmp	r3, #100	; 0x64
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e2a0      	b.n	8001eb4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001972:	4b88      	ldr	r3, [pc, #544]	; (8001b94 <HAL_RCC_OscConfig+0x504>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d1f0      	bne.n	8001960 <HAL_RCC_OscConfig+0x2d0>
 800197e:	e000      	b.n	8001982 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001980:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d060      	beq.n	8001a50 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	2b04      	cmp	r3, #4
 8001992:	d005      	beq.n	80019a0 <HAL_RCC_OscConfig+0x310>
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	2b0c      	cmp	r3, #12
 8001998:	d119      	bne.n	80019ce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	2b02      	cmp	r3, #2
 800199e:	d116      	bne.n	80019ce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019a0:	4b7c      	ldr	r3, [pc, #496]	; (8001b94 <HAL_RCC_OscConfig+0x504>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d005      	beq.n	80019b8 <HAL_RCC_OscConfig+0x328>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d101      	bne.n	80019b8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e27d      	b.n	8001eb4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b8:	4b76      	ldr	r3, [pc, #472]	; (8001b94 <HAL_RCC_OscConfig+0x504>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	691b      	ldr	r3, [r3, #16]
 80019c4:	061b      	lsls	r3, r3, #24
 80019c6:	4973      	ldr	r1, [pc, #460]	; (8001b94 <HAL_RCC_OscConfig+0x504>)
 80019c8:	4313      	orrs	r3, r2
 80019ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019cc:	e040      	b.n	8001a50 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d023      	beq.n	8001a1e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019d6:	4b6f      	ldr	r3, [pc, #444]	; (8001b94 <HAL_RCC_OscConfig+0x504>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a6e      	ldr	r2, [pc, #440]	; (8001b94 <HAL_RCC_OscConfig+0x504>)
 80019dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e2:	f7ff fcff 	bl	80013e4 <HAL_GetTick>
 80019e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019e8:	e008      	b.n	80019fc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ea:	f7ff fcfb 	bl	80013e4 <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e25b      	b.n	8001eb4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019fc:	4b65      	ldr	r3, [pc, #404]	; (8001b94 <HAL_RCC_OscConfig+0x504>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d0f0      	beq.n	80019ea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a08:	4b62      	ldr	r3, [pc, #392]	; (8001b94 <HAL_RCC_OscConfig+0x504>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	691b      	ldr	r3, [r3, #16]
 8001a14:	061b      	lsls	r3, r3, #24
 8001a16:	495f      	ldr	r1, [pc, #380]	; (8001b94 <HAL_RCC_OscConfig+0x504>)
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	604b      	str	r3, [r1, #4]
 8001a1c:	e018      	b.n	8001a50 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a1e:	4b5d      	ldr	r3, [pc, #372]	; (8001b94 <HAL_RCC_OscConfig+0x504>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a5c      	ldr	r2, [pc, #368]	; (8001b94 <HAL_RCC_OscConfig+0x504>)
 8001a24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2a:	f7ff fcdb 	bl	80013e4 <HAL_GetTick>
 8001a2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a32:	f7ff fcd7 	bl	80013e4 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e237      	b.n	8001eb4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a44:	4b53      	ldr	r3, [pc, #332]	; (8001b94 <HAL_RCC_OscConfig+0x504>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1f0      	bne.n	8001a32 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0308 	and.w	r3, r3, #8
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d03c      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	695b      	ldr	r3, [r3, #20]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d01c      	beq.n	8001a9e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a64:	4b4b      	ldr	r3, [pc, #300]	; (8001b94 <HAL_RCC_OscConfig+0x504>)
 8001a66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a6a:	4a4a      	ldr	r2, [pc, #296]	; (8001b94 <HAL_RCC_OscConfig+0x504>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a74:	f7ff fcb6 	bl	80013e4 <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a7c:	f7ff fcb2 	bl	80013e4 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e212      	b.n	8001eb4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a8e:	4b41      	ldr	r3, [pc, #260]	; (8001b94 <HAL_RCC_OscConfig+0x504>)
 8001a90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d0ef      	beq.n	8001a7c <HAL_RCC_OscConfig+0x3ec>
 8001a9c:	e01b      	b.n	8001ad6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a9e:	4b3d      	ldr	r3, [pc, #244]	; (8001b94 <HAL_RCC_OscConfig+0x504>)
 8001aa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aa4:	4a3b      	ldr	r2, [pc, #236]	; (8001b94 <HAL_RCC_OscConfig+0x504>)
 8001aa6:	f023 0301 	bic.w	r3, r3, #1
 8001aaa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aae:	f7ff fc99 	bl	80013e4 <HAL_GetTick>
 8001ab2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ab4:	e008      	b.n	8001ac8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ab6:	f7ff fc95 	bl	80013e4 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e1f5      	b.n	8001eb4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ac8:	4b32      	ldr	r3, [pc, #200]	; (8001b94 <HAL_RCC_OscConfig+0x504>)
 8001aca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1ef      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0304 	and.w	r3, r3, #4
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f000 80a6 	beq.w	8001c30 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ae8:	4b2a      	ldr	r3, [pc, #168]	; (8001b94 <HAL_RCC_OscConfig+0x504>)
 8001aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d10d      	bne.n	8001b10 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001af4:	4b27      	ldr	r3, [pc, #156]	; (8001b94 <HAL_RCC_OscConfig+0x504>)
 8001af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af8:	4a26      	ldr	r2, [pc, #152]	; (8001b94 <HAL_RCC_OscConfig+0x504>)
 8001afa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001afe:	6593      	str	r3, [r2, #88]	; 0x58
 8001b00:	4b24      	ldr	r3, [pc, #144]	; (8001b94 <HAL_RCC_OscConfig+0x504>)
 8001b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b08:	60bb      	str	r3, [r7, #8]
 8001b0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b10:	4b21      	ldr	r3, [pc, #132]	; (8001b98 <HAL_RCC_OscConfig+0x508>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d118      	bne.n	8001b4e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b1c:	4b1e      	ldr	r3, [pc, #120]	; (8001b98 <HAL_RCC_OscConfig+0x508>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a1d      	ldr	r2, [pc, #116]	; (8001b98 <HAL_RCC_OscConfig+0x508>)
 8001b22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b28:	f7ff fc5c 	bl	80013e4 <HAL_GetTick>
 8001b2c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b2e:	e008      	b.n	8001b42 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b30:	f7ff fc58 	bl	80013e4 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e1b8      	b.n	8001eb4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b42:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <HAL_RCC_OscConfig+0x508>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d0f0      	beq.n	8001b30 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d108      	bne.n	8001b68 <HAL_RCC_OscConfig+0x4d8>
 8001b56:	4b0f      	ldr	r3, [pc, #60]	; (8001b94 <HAL_RCC_OscConfig+0x504>)
 8001b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b5c:	4a0d      	ldr	r2, [pc, #52]	; (8001b94 <HAL_RCC_OscConfig+0x504>)
 8001b5e:	f043 0301 	orr.w	r3, r3, #1
 8001b62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b66:	e029      	b.n	8001bbc <HAL_RCC_OscConfig+0x52c>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	2b05      	cmp	r3, #5
 8001b6e:	d115      	bne.n	8001b9c <HAL_RCC_OscConfig+0x50c>
 8001b70:	4b08      	ldr	r3, [pc, #32]	; (8001b94 <HAL_RCC_OscConfig+0x504>)
 8001b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b76:	4a07      	ldr	r2, [pc, #28]	; (8001b94 <HAL_RCC_OscConfig+0x504>)
 8001b78:	f043 0304 	orr.w	r3, r3, #4
 8001b7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b80:	4b04      	ldr	r3, [pc, #16]	; (8001b94 <HAL_RCC_OscConfig+0x504>)
 8001b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b86:	4a03      	ldr	r2, [pc, #12]	; (8001b94 <HAL_RCC_OscConfig+0x504>)
 8001b88:	f043 0301 	orr.w	r3, r3, #1
 8001b8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b90:	e014      	b.n	8001bbc <HAL_RCC_OscConfig+0x52c>
 8001b92:	bf00      	nop
 8001b94:	40021000 	.word	0x40021000
 8001b98:	40007000 	.word	0x40007000
 8001b9c:	4b9d      	ldr	r3, [pc, #628]	; (8001e14 <HAL_RCC_OscConfig+0x784>)
 8001b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ba2:	4a9c      	ldr	r2, [pc, #624]	; (8001e14 <HAL_RCC_OscConfig+0x784>)
 8001ba4:	f023 0301 	bic.w	r3, r3, #1
 8001ba8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bac:	4b99      	ldr	r3, [pc, #612]	; (8001e14 <HAL_RCC_OscConfig+0x784>)
 8001bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bb2:	4a98      	ldr	r2, [pc, #608]	; (8001e14 <HAL_RCC_OscConfig+0x784>)
 8001bb4:	f023 0304 	bic.w	r3, r3, #4
 8001bb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d016      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc4:	f7ff fc0e 	bl	80013e4 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bca:	e00a      	b.n	8001be2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bcc:	f7ff fc0a 	bl	80013e4 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e168      	b.n	8001eb4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001be2:	4b8c      	ldr	r3, [pc, #560]	; (8001e14 <HAL_RCC_OscConfig+0x784>)
 8001be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d0ed      	beq.n	8001bcc <HAL_RCC_OscConfig+0x53c>
 8001bf0:	e015      	b.n	8001c1e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf2:	f7ff fbf7 	bl	80013e4 <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bf8:	e00a      	b.n	8001c10 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bfa:	f7ff fbf3 	bl	80013e4 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e151      	b.n	8001eb4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c10:	4b80      	ldr	r3, [pc, #512]	; (8001e14 <HAL_RCC_OscConfig+0x784>)
 8001c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1ed      	bne.n	8001bfa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c1e:	7ffb      	ldrb	r3, [r7, #31]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d105      	bne.n	8001c30 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c24:	4b7b      	ldr	r3, [pc, #492]	; (8001e14 <HAL_RCC_OscConfig+0x784>)
 8001c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c28:	4a7a      	ldr	r2, [pc, #488]	; (8001e14 <HAL_RCC_OscConfig+0x784>)
 8001c2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c2e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0320 	and.w	r3, r3, #32
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d03c      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d01c      	beq.n	8001c7e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c44:	4b73      	ldr	r3, [pc, #460]	; (8001e14 <HAL_RCC_OscConfig+0x784>)
 8001c46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c4a:	4a72      	ldr	r2, [pc, #456]	; (8001e14 <HAL_RCC_OscConfig+0x784>)
 8001c4c:	f043 0301 	orr.w	r3, r3, #1
 8001c50:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c54:	f7ff fbc6 	bl	80013e4 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c5c:	f7ff fbc2 	bl	80013e4 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e122      	b.n	8001eb4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c6e:	4b69      	ldr	r3, [pc, #420]	; (8001e14 <HAL_RCC_OscConfig+0x784>)
 8001c70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d0ef      	beq.n	8001c5c <HAL_RCC_OscConfig+0x5cc>
 8001c7c:	e01b      	b.n	8001cb6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c7e:	4b65      	ldr	r3, [pc, #404]	; (8001e14 <HAL_RCC_OscConfig+0x784>)
 8001c80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c84:	4a63      	ldr	r2, [pc, #396]	; (8001e14 <HAL_RCC_OscConfig+0x784>)
 8001c86:	f023 0301 	bic.w	r3, r3, #1
 8001c8a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c8e:	f7ff fba9 	bl	80013e4 <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c94:	e008      	b.n	8001ca8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c96:	f7ff fba5 	bl	80013e4 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e105      	b.n	8001eb4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ca8:	4b5a      	ldr	r3, [pc, #360]	; (8001e14 <HAL_RCC_OscConfig+0x784>)
 8001caa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1ef      	bne.n	8001c96 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f000 80f9 	beq.w	8001eb2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	f040 80cf 	bne.w	8001e68 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001cca:	4b52      	ldr	r3, [pc, #328]	; (8001e14 <HAL_RCC_OscConfig+0x784>)
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	f003 0203 	and.w	r2, r3, #3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d12c      	bne.n	8001d38 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d123      	bne.n	8001d38 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cfa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d11b      	bne.n	8001d38 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d0a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d113      	bne.n	8001d38 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d1a:	085b      	lsrs	r3, r3, #1
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d109      	bne.n	8001d38 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	085b      	lsrs	r3, r3, #1
 8001d30:	3b01      	subs	r3, #1
 8001d32:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d071      	beq.n	8001e1c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	2b0c      	cmp	r3, #12
 8001d3c:	d068      	beq.n	8001e10 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d3e:	4b35      	ldr	r3, [pc, #212]	; (8001e14 <HAL_RCC_OscConfig+0x784>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d105      	bne.n	8001d56 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001d4a:	4b32      	ldr	r3, [pc, #200]	; (8001e14 <HAL_RCC_OscConfig+0x784>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e0ac      	b.n	8001eb4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d5a:	4b2e      	ldr	r3, [pc, #184]	; (8001e14 <HAL_RCC_OscConfig+0x784>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a2d      	ldr	r2, [pc, #180]	; (8001e14 <HAL_RCC_OscConfig+0x784>)
 8001d60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d64:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d66:	f7ff fb3d 	bl	80013e4 <HAL_GetTick>
 8001d6a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d6c:	e008      	b.n	8001d80 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d6e:	f7ff fb39 	bl	80013e4 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e099      	b.n	8001eb4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d80:	4b24      	ldr	r3, [pc, #144]	; (8001e14 <HAL_RCC_OscConfig+0x784>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1f0      	bne.n	8001d6e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d8c:	4b21      	ldr	r3, [pc, #132]	; (8001e14 <HAL_RCC_OscConfig+0x784>)
 8001d8e:	68da      	ldr	r2, [r3, #12]
 8001d90:	4b21      	ldr	r3, [pc, #132]	; (8001e18 <HAL_RCC_OscConfig+0x788>)
 8001d92:	4013      	ands	r3, r2
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d9c:	3a01      	subs	r2, #1
 8001d9e:	0112      	lsls	r2, r2, #4
 8001da0:	4311      	orrs	r1, r2
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001da6:	0212      	lsls	r2, r2, #8
 8001da8:	4311      	orrs	r1, r2
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001dae:	0852      	lsrs	r2, r2, #1
 8001db0:	3a01      	subs	r2, #1
 8001db2:	0552      	lsls	r2, r2, #21
 8001db4:	4311      	orrs	r1, r2
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001dba:	0852      	lsrs	r2, r2, #1
 8001dbc:	3a01      	subs	r2, #1
 8001dbe:	0652      	lsls	r2, r2, #25
 8001dc0:	4311      	orrs	r1, r2
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001dc6:	06d2      	lsls	r2, r2, #27
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	4912      	ldr	r1, [pc, #72]	; (8001e14 <HAL_RCC_OscConfig+0x784>)
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001dd0:	4b10      	ldr	r3, [pc, #64]	; (8001e14 <HAL_RCC_OscConfig+0x784>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a0f      	ldr	r2, [pc, #60]	; (8001e14 <HAL_RCC_OscConfig+0x784>)
 8001dd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dda:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ddc:	4b0d      	ldr	r3, [pc, #52]	; (8001e14 <HAL_RCC_OscConfig+0x784>)
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	4a0c      	ldr	r2, [pc, #48]	; (8001e14 <HAL_RCC_OscConfig+0x784>)
 8001de2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001de6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001de8:	f7ff fafc 	bl	80013e4 <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df0:	f7ff faf8 	bl	80013e4 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e058      	b.n	8001eb4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e02:	4b04      	ldr	r3, [pc, #16]	; (8001e14 <HAL_RCC_OscConfig+0x784>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d0f0      	beq.n	8001df0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e0e:	e050      	b.n	8001eb2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e04f      	b.n	8001eb4 <HAL_RCC_OscConfig+0x824>
 8001e14:	40021000 	.word	0x40021000
 8001e18:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e1c:	4b27      	ldr	r3, [pc, #156]	; (8001ebc <HAL_RCC_OscConfig+0x82c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d144      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e28:	4b24      	ldr	r3, [pc, #144]	; (8001ebc <HAL_RCC_OscConfig+0x82c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a23      	ldr	r2, [pc, #140]	; (8001ebc <HAL_RCC_OscConfig+0x82c>)
 8001e2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e32:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e34:	4b21      	ldr	r3, [pc, #132]	; (8001ebc <HAL_RCC_OscConfig+0x82c>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	4a20      	ldr	r2, [pc, #128]	; (8001ebc <HAL_RCC_OscConfig+0x82c>)
 8001e3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e3e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e40:	f7ff fad0 	bl	80013e4 <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e48:	f7ff facc 	bl	80013e4 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e02c      	b.n	8001eb4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e5a:	4b18      	ldr	r3, [pc, #96]	; (8001ebc <HAL_RCC_OscConfig+0x82c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d0f0      	beq.n	8001e48 <HAL_RCC_OscConfig+0x7b8>
 8001e66:	e024      	b.n	8001eb2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	2b0c      	cmp	r3, #12
 8001e6c:	d01f      	beq.n	8001eae <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e6e:	4b13      	ldr	r3, [pc, #76]	; (8001ebc <HAL_RCC_OscConfig+0x82c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a12      	ldr	r2, [pc, #72]	; (8001ebc <HAL_RCC_OscConfig+0x82c>)
 8001e74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7a:	f7ff fab3 	bl	80013e4 <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e80:	e008      	b.n	8001e94 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e82:	f7ff faaf 	bl	80013e4 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e00f      	b.n	8001eb4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e94:	4b09      	ldr	r3, [pc, #36]	; (8001ebc <HAL_RCC_OscConfig+0x82c>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1f0      	bne.n	8001e82 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001ea0:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <HAL_RCC_OscConfig+0x82c>)
 8001ea2:	68da      	ldr	r2, [r3, #12]
 8001ea4:	4905      	ldr	r1, [pc, #20]	; (8001ebc <HAL_RCC_OscConfig+0x82c>)
 8001ea6:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <HAL_RCC_OscConfig+0x830>)
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	60cb      	str	r3, [r1, #12]
 8001eac:	e001      	b.n	8001eb2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e000      	b.n	8001eb4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3720      	adds	r7, #32
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	feeefffc 	.word	0xfeeefffc

08001ec4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d101      	bne.n	8001ed8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e0e7      	b.n	80020a8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ed8:	4b75      	ldr	r3, [pc, #468]	; (80020b0 <HAL_RCC_ClockConfig+0x1ec>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0307 	and.w	r3, r3, #7
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d910      	bls.n	8001f08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee6:	4b72      	ldr	r3, [pc, #456]	; (80020b0 <HAL_RCC_ClockConfig+0x1ec>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f023 0207 	bic.w	r2, r3, #7
 8001eee:	4970      	ldr	r1, [pc, #448]	; (80020b0 <HAL_RCC_ClockConfig+0x1ec>)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef6:	4b6e      	ldr	r3, [pc, #440]	; (80020b0 <HAL_RCC_ClockConfig+0x1ec>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d001      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e0cf      	b.n	80020a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d010      	beq.n	8001f36 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	4b66      	ldr	r3, [pc, #408]	; (80020b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d908      	bls.n	8001f36 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f24:	4b63      	ldr	r3, [pc, #396]	; (80020b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	4960      	ldr	r1, [pc, #384]	; (80020b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f32:	4313      	orrs	r3, r2
 8001f34:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d04c      	beq.n	8001fdc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	2b03      	cmp	r3, #3
 8001f48:	d107      	bne.n	8001f5a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f4a:	4b5a      	ldr	r3, [pc, #360]	; (80020b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d121      	bne.n	8001f9a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e0a6      	b.n	80020a8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d107      	bne.n	8001f72 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f62:	4b54      	ldr	r3, [pc, #336]	; (80020b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d115      	bne.n	8001f9a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e09a      	b.n	80020a8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d107      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f7a:	4b4e      	ldr	r3, [pc, #312]	; (80020b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d109      	bne.n	8001f9a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e08e      	b.n	80020a8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f8a:	4b4a      	ldr	r3, [pc, #296]	; (80020b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e086      	b.n	80020a8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f9a:	4b46      	ldr	r3, [pc, #280]	; (80020b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f023 0203 	bic.w	r2, r3, #3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	4943      	ldr	r1, [pc, #268]	; (80020b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fac:	f7ff fa1a 	bl	80013e4 <HAL_GetTick>
 8001fb0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fb2:	e00a      	b.n	8001fca <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fb4:	f7ff fa16 	bl	80013e4 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e06e      	b.n	80020a8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fca:	4b3a      	ldr	r3, [pc, #232]	; (80020b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f003 020c 	and.w	r2, r3, #12
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d1eb      	bne.n	8001fb4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d010      	beq.n	800200a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689a      	ldr	r2, [r3, #8]
 8001fec:	4b31      	ldr	r3, [pc, #196]	; (80020b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d208      	bcs.n	800200a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ff8:	4b2e      	ldr	r3, [pc, #184]	; (80020b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	492b      	ldr	r1, [pc, #172]	; (80020b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002006:	4313      	orrs	r3, r2
 8002008:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800200a:	4b29      	ldr	r3, [pc, #164]	; (80020b0 <HAL_RCC_ClockConfig+0x1ec>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	429a      	cmp	r2, r3
 8002016:	d210      	bcs.n	800203a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002018:	4b25      	ldr	r3, [pc, #148]	; (80020b0 <HAL_RCC_ClockConfig+0x1ec>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f023 0207 	bic.w	r2, r3, #7
 8002020:	4923      	ldr	r1, [pc, #140]	; (80020b0 <HAL_RCC_ClockConfig+0x1ec>)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	4313      	orrs	r3, r2
 8002026:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002028:	4b21      	ldr	r3, [pc, #132]	; (80020b0 <HAL_RCC_ClockConfig+0x1ec>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0307 	and.w	r3, r3, #7
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	429a      	cmp	r2, r3
 8002034:	d001      	beq.n	800203a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e036      	b.n	80020a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0304 	and.w	r3, r3, #4
 8002042:	2b00      	cmp	r3, #0
 8002044:	d008      	beq.n	8002058 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002046:	4b1b      	ldr	r3, [pc, #108]	; (80020b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	4918      	ldr	r1, [pc, #96]	; (80020b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002054:	4313      	orrs	r3, r2
 8002056:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0308 	and.w	r3, r3, #8
 8002060:	2b00      	cmp	r3, #0
 8002062:	d009      	beq.n	8002078 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002064:	4b13      	ldr	r3, [pc, #76]	; (80020b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	691b      	ldr	r3, [r3, #16]
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	4910      	ldr	r1, [pc, #64]	; (80020b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002074:	4313      	orrs	r3, r2
 8002076:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002078:	f000 f824 	bl	80020c4 <HAL_RCC_GetSysClockFreq>
 800207c:	4602      	mov	r2, r0
 800207e:	4b0d      	ldr	r3, [pc, #52]	; (80020b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	091b      	lsrs	r3, r3, #4
 8002084:	f003 030f 	and.w	r3, r3, #15
 8002088:	490b      	ldr	r1, [pc, #44]	; (80020b8 <HAL_RCC_ClockConfig+0x1f4>)
 800208a:	5ccb      	ldrb	r3, [r1, r3]
 800208c:	f003 031f 	and.w	r3, r3, #31
 8002090:	fa22 f303 	lsr.w	r3, r2, r3
 8002094:	4a09      	ldr	r2, [pc, #36]	; (80020bc <HAL_RCC_ClockConfig+0x1f8>)
 8002096:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002098:	4b09      	ldr	r3, [pc, #36]	; (80020c0 <HAL_RCC_ClockConfig+0x1fc>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff f951 	bl	8001344 <HAL_InitTick>
 80020a2:	4603      	mov	r3, r0
 80020a4:	72fb      	strb	r3, [r7, #11]

  return status;
 80020a6:	7afb      	ldrb	r3, [r7, #11]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40022000 	.word	0x40022000
 80020b4:	40021000 	.word	0x40021000
 80020b8:	080023a0 	.word	0x080023a0
 80020bc:	20000004 	.word	0x20000004
 80020c0:	20000008 	.word	0x20000008

080020c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b089      	sub	sp, #36	; 0x24
 80020c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80020ca:	2300      	movs	r3, #0
 80020cc:	61fb      	str	r3, [r7, #28]
 80020ce:	2300      	movs	r3, #0
 80020d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020d2:	4b3e      	ldr	r3, [pc, #248]	; (80021cc <HAL_RCC_GetSysClockFreq+0x108>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f003 030c 	and.w	r3, r3, #12
 80020da:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020dc:	4b3b      	ldr	r3, [pc, #236]	; (80021cc <HAL_RCC_GetSysClockFreq+0x108>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	f003 0303 	and.w	r3, r3, #3
 80020e4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d005      	beq.n	80020f8 <HAL_RCC_GetSysClockFreq+0x34>
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	2b0c      	cmp	r3, #12
 80020f0:	d121      	bne.n	8002136 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d11e      	bne.n	8002136 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80020f8:	4b34      	ldr	r3, [pc, #208]	; (80021cc <HAL_RCC_GetSysClockFreq+0x108>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0308 	and.w	r3, r3, #8
 8002100:	2b00      	cmp	r3, #0
 8002102:	d107      	bne.n	8002114 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002104:	4b31      	ldr	r3, [pc, #196]	; (80021cc <HAL_RCC_GetSysClockFreq+0x108>)
 8002106:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800210a:	0a1b      	lsrs	r3, r3, #8
 800210c:	f003 030f 	and.w	r3, r3, #15
 8002110:	61fb      	str	r3, [r7, #28]
 8002112:	e005      	b.n	8002120 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002114:	4b2d      	ldr	r3, [pc, #180]	; (80021cc <HAL_RCC_GetSysClockFreq+0x108>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	091b      	lsrs	r3, r3, #4
 800211a:	f003 030f 	and.w	r3, r3, #15
 800211e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002120:	4a2b      	ldr	r2, [pc, #172]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002128:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d10d      	bne.n	800214c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002134:	e00a      	b.n	800214c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	2b04      	cmp	r3, #4
 800213a:	d102      	bne.n	8002142 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800213c:	4b25      	ldr	r3, [pc, #148]	; (80021d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800213e:	61bb      	str	r3, [r7, #24]
 8002140:	e004      	b.n	800214c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	2b08      	cmp	r3, #8
 8002146:	d101      	bne.n	800214c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002148:	4b23      	ldr	r3, [pc, #140]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x114>)
 800214a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	2b0c      	cmp	r3, #12
 8002150:	d134      	bne.n	80021bc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002152:	4b1e      	ldr	r3, [pc, #120]	; (80021cc <HAL_RCC_GetSysClockFreq+0x108>)
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	f003 0303 	and.w	r3, r3, #3
 800215a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	2b02      	cmp	r3, #2
 8002160:	d003      	beq.n	800216a <HAL_RCC_GetSysClockFreq+0xa6>
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	2b03      	cmp	r3, #3
 8002166:	d003      	beq.n	8002170 <HAL_RCC_GetSysClockFreq+0xac>
 8002168:	e005      	b.n	8002176 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800216a:	4b1a      	ldr	r3, [pc, #104]	; (80021d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800216c:	617b      	str	r3, [r7, #20]
      break;
 800216e:	e005      	b.n	800217c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002170:	4b19      	ldr	r3, [pc, #100]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002172:	617b      	str	r3, [r7, #20]
      break;
 8002174:	e002      	b.n	800217c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	617b      	str	r3, [r7, #20]
      break;
 800217a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800217c:	4b13      	ldr	r3, [pc, #76]	; (80021cc <HAL_RCC_GetSysClockFreq+0x108>)
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	091b      	lsrs	r3, r3, #4
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	3301      	adds	r3, #1
 8002188:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800218a:	4b10      	ldr	r3, [pc, #64]	; (80021cc <HAL_RCC_GetSysClockFreq+0x108>)
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	0a1b      	lsrs	r3, r3, #8
 8002190:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002194:	697a      	ldr	r2, [r7, #20]
 8002196:	fb03 f202 	mul.w	r2, r3, r2
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021a2:	4b0a      	ldr	r3, [pc, #40]	; (80021cc <HAL_RCC_GetSysClockFreq+0x108>)
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	0e5b      	lsrs	r3, r3, #25
 80021a8:	f003 0303 	and.w	r3, r3, #3
 80021ac:	3301      	adds	r3, #1
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80021bc:	69bb      	ldr	r3, [r7, #24]
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3724      	adds	r7, #36	; 0x24
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	40021000 	.word	0x40021000
 80021d0:	080023b0 	.word	0x080023b0
 80021d4:	00f42400 	.word	0x00f42400
 80021d8:	007a1200 	.word	0x007a1200

080021dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80021e4:	2300      	movs	r3, #0
 80021e6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80021e8:	4b2a      	ldr	r3, [pc, #168]	; (8002294 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d003      	beq.n	80021fc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80021f4:	f7ff f9e8 	bl	80015c8 <HAL_PWREx_GetVoltageRange>
 80021f8:	6178      	str	r0, [r7, #20]
 80021fa:	e014      	b.n	8002226 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80021fc:	4b25      	ldr	r3, [pc, #148]	; (8002294 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002200:	4a24      	ldr	r2, [pc, #144]	; (8002294 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002202:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002206:	6593      	str	r3, [r2, #88]	; 0x58
 8002208:	4b22      	ldr	r3, [pc, #136]	; (8002294 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800220a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800220c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002214:	f7ff f9d8 	bl	80015c8 <HAL_PWREx_GetVoltageRange>
 8002218:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800221a:	4b1e      	ldr	r3, [pc, #120]	; (8002294 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800221c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221e:	4a1d      	ldr	r2, [pc, #116]	; (8002294 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002220:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002224:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800222c:	d10b      	bne.n	8002246 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b80      	cmp	r3, #128	; 0x80
 8002232:	d919      	bls.n	8002268 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2ba0      	cmp	r3, #160	; 0xa0
 8002238:	d902      	bls.n	8002240 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800223a:	2302      	movs	r3, #2
 800223c:	613b      	str	r3, [r7, #16]
 800223e:	e013      	b.n	8002268 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002240:	2301      	movs	r3, #1
 8002242:	613b      	str	r3, [r7, #16]
 8002244:	e010      	b.n	8002268 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2b80      	cmp	r3, #128	; 0x80
 800224a:	d902      	bls.n	8002252 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800224c:	2303      	movs	r3, #3
 800224e:	613b      	str	r3, [r7, #16]
 8002250:	e00a      	b.n	8002268 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2b80      	cmp	r3, #128	; 0x80
 8002256:	d102      	bne.n	800225e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002258:	2302      	movs	r3, #2
 800225a:	613b      	str	r3, [r7, #16]
 800225c:	e004      	b.n	8002268 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b70      	cmp	r3, #112	; 0x70
 8002262:	d101      	bne.n	8002268 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002264:	2301      	movs	r3, #1
 8002266:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002268:	4b0b      	ldr	r3, [pc, #44]	; (8002298 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f023 0207 	bic.w	r2, r3, #7
 8002270:	4909      	ldr	r1, [pc, #36]	; (8002298 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	4313      	orrs	r3, r2
 8002276:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002278:	4b07      	ldr	r3, [pc, #28]	; (8002298 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0307 	and.w	r3, r3, #7
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	429a      	cmp	r2, r3
 8002284:	d001      	beq.n	800228a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e000      	b.n	800228c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3718      	adds	r7, #24
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40021000 	.word	0x40021000
 8002298:	40022000 	.word	0x40022000

0800229c <__libc_init_array>:
 800229c:	b570      	push	{r4, r5, r6, lr}
 800229e:	4d0d      	ldr	r5, [pc, #52]	; (80022d4 <__libc_init_array+0x38>)
 80022a0:	4c0d      	ldr	r4, [pc, #52]	; (80022d8 <__libc_init_array+0x3c>)
 80022a2:	1b64      	subs	r4, r4, r5
 80022a4:	10a4      	asrs	r4, r4, #2
 80022a6:	2600      	movs	r6, #0
 80022a8:	42a6      	cmp	r6, r4
 80022aa:	d109      	bne.n	80022c0 <__libc_init_array+0x24>
 80022ac:	4d0b      	ldr	r5, [pc, #44]	; (80022dc <__libc_init_array+0x40>)
 80022ae:	4c0c      	ldr	r4, [pc, #48]	; (80022e0 <__libc_init_array+0x44>)
 80022b0:	f000 f820 	bl	80022f4 <_init>
 80022b4:	1b64      	subs	r4, r4, r5
 80022b6:	10a4      	asrs	r4, r4, #2
 80022b8:	2600      	movs	r6, #0
 80022ba:	42a6      	cmp	r6, r4
 80022bc:	d105      	bne.n	80022ca <__libc_init_array+0x2e>
 80022be:	bd70      	pop	{r4, r5, r6, pc}
 80022c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80022c4:	4798      	blx	r3
 80022c6:	3601      	adds	r6, #1
 80022c8:	e7ee      	b.n	80022a8 <__libc_init_array+0xc>
 80022ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80022ce:	4798      	blx	r3
 80022d0:	3601      	adds	r6, #1
 80022d2:	e7f2      	b.n	80022ba <__libc_init_array+0x1e>
 80022d4:	080023e0 	.word	0x080023e0
 80022d8:	080023e0 	.word	0x080023e0
 80022dc:	080023e0 	.word	0x080023e0
 80022e0:	080023e4 	.word	0x080023e4

080022e4 <memset>:
 80022e4:	4402      	add	r2, r0
 80022e6:	4603      	mov	r3, r0
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d100      	bne.n	80022ee <memset+0xa>
 80022ec:	4770      	bx	lr
 80022ee:	f803 1b01 	strb.w	r1, [r3], #1
 80022f2:	e7f9      	b.n	80022e8 <memset+0x4>

080022f4 <_init>:
 80022f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022f6:	bf00      	nop
 80022f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022fa:	bc08      	pop	{r3}
 80022fc:	469e      	mov	lr, r3
 80022fe:	4770      	bx	lr

08002300 <_fini>:
 8002300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002302:	bf00      	nop
 8002304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002306:	bc08      	pop	{r3}
 8002308:	469e      	mov	lr, r3
 800230a:	4770      	bx	lr
