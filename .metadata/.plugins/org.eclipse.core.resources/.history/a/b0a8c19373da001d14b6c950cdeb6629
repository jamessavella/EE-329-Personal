/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

void SystemClock_Config(void);

//Keypad information
static const int keyspad[4][3] = {{1, 2, 3},
						  {4, 5, 6},
						  {7, 8, 9},
						  {10, 11, 12}};

//initialize Column port type
#define COLUMN_PORT GPIOB;
#define ROW_PORT GPIOC;
#define LED_PORT GPIOD;

//define output column pins
#define col1 GPIO_PIN_0; //pin 1
#define col2 GPIO_PIN_1; //pin 2
#define col3 GPIO_PIN_2; //pin 3

//define input row pins
#define row1 GPIO_PIN0; //pin 1
#define row2 GPIO_PIN1; //pin 2
#define row3 GPIO_PIN2; //pin 3
#define row4 GPIO_PIN3; //pin 4

//define output LED pins
#define led1 GPIO_PIN0; //pin 1
#define led2 GPIO_PIN1; //pin 2
#define led3 GPIO_PIN2; //pin 3
#define led4 GPIO_PIN3; //pin 4

//Tells us which value is high or low
static int cols[3] = {col1, col2, col3};
static int rows[4] = {row1, row2, row3, row4};

void keypad_init(){
	//initialize column pins as outputs
	//GPIOB output pins
	ROW_PORT->MODER &= ~ (GPIO_MODER_MODE0);

}

//initialize row pins as inputs
//GPIOC input pins

//initialize LED pins as outputs
//GPIOD output pins

int main(void)
{
  HAL_Init();
  SystemClock_Config();

  //Initialize clock for register types
  RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOBEN);  //Column output
  RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOCEN);  //Row inputs
  RCC->AHB2ENR |= (RCC_AHB2ENR_GPIODEN);  //LED outputs

  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
