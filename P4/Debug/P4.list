
P4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e08  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08001fb4  08001fb4  00011fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002120  08002120  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08002120  08002120  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002120  08002120  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002120  08002120  00012120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002124  08002124  00012124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002128  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  20000014  0800213c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  0800213c  00020164  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000618a  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001585  00000000  00000000  000261ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e0  00000000  00000000  00027758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000608  00000000  00000000  00027e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027737  00000000  00000000  00028440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007915  00000000  00000000  0004fb77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee906  00000000  00000000  0005748c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00145d92  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018ac  00000000  00000000  00145de4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000014 	.word	0x20000014
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08001f9c 	.word	0x08001f9c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000018 	.word	0x20000018
 80001e8:	08001f9c 	.word	0x08001f9c

080001ec <FP_enroll>:
#include "delay.h"
#include "lcd.h"

#define MAX_FP_PER_SECTION 2

void FP_enroll(int section_num) {
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b084      	sub	sp, #16
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
	/* Order of Operations
	 * 1. Get user to type name associated with FP
	 * 2. Get User Input twice
	 */
	genImg();	//to get ready to take an input
 80001f4:	f000 f996 	bl	8000524 <genImg>

	//add section functionality here

	uint8_t mem_local = 0; //initializes mem local
 80001f8:	2300      	movs	r3, #0
 80001fa:	73fb      	strb	r3, [r7, #15]
	mem_local = section_num * 10 + mem_local;
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	b2db      	uxtb	r3, r3
 8000200:	461a      	mov	r2, r3
 8000202:	0092      	lsls	r2, r2, #2
 8000204:	4413      	add	r3, r2
 8000206:	005b      	lsls	r3, r3, #1
 8000208:	b2da      	uxtb	r2, r3
 800020a:	7bfb      	ldrb	r3, [r7, #15]
 800020c:	4413      	add	r3, r2
 800020e:	73fb      	strb	r3, [r7, #15]

	uint8_t number_of_fp_per_section = 0;
 8000210:	2300      	movs	r3, #0
 8000212:	73bb      	strb	r3, [r7, #14]

	while (number_of_fp_per_section < MAX_FP_PER_SECTION) {	//takes 10 user inputs: 0-9
 8000214:	e094      	b.n	8000340 <FP_enroll+0x154>

		for (int buff_local = 1; buff_local <= 2; buff_local++) {
 8000216:	2301      	movs	r3, #1
 8000218:	60bb      	str	r3, [r7, #8]
 800021a:	e045      	b.n	80002a8 <FP_enroll+0xbc>
			while (ConfirmationCode == 0x02) {	//No finger detected get finger
				if (buff_local == 1) {
 800021c:	68bb      	ldr	r3, [r7, #8]
 800021e:	2b01      	cmp	r3, #1
 8000220:	d10e      	bne.n	8000240 <FP_enroll+0x54>
					lcd_set_cursor_position(0, 0);
 8000222:	2100      	movs	r1, #0
 8000224:	2000      	movs	r0, #0
 8000226:	f000 fc07 	bl	8000a38 <lcd_set_cursor_position>
					str_write("Place finger    ");
 800022a:	4854      	ldr	r0, [pc, #336]	; (800037c <FP_enroll+0x190>)
 800022c:	f000 fc1e 	bl	8000a6c <str_write>
					lcd_set_cursor_position(1, 0);
 8000230:	2100      	movs	r1, #0
 8000232:	2001      	movs	r0, #1
 8000234:	f000 fc00 	bl	8000a38 <lcd_set_cursor_position>
					str_write("                ");
 8000238:	4851      	ldr	r0, [pc, #324]	; (8000380 <FP_enroll+0x194>)
 800023a:	f000 fc17 	bl	8000a6c <str_write>
 800023e:	e010      	b.n	8000262 <FP_enroll+0x76>
				} else if (buff_local == 2) {
 8000240:	68bb      	ldr	r3, [r7, #8]
 8000242:	2b02      	cmp	r3, #2
 8000244:	d10d      	bne.n	8000262 <FP_enroll+0x76>
					lcd_set_cursor_position(0, 0);
 8000246:	2100      	movs	r1, #0
 8000248:	2000      	movs	r0, #0
 800024a:	f000 fbf5 	bl	8000a38 <lcd_set_cursor_position>
					str_write("Place finger ");
 800024e:	484d      	ldr	r0, [pc, #308]	; (8000384 <FP_enroll+0x198>)
 8000250:	f000 fc0c 	bl	8000a6c <str_write>
					lcd_set_cursor_position(1, 0);
 8000254:	2100      	movs	r1, #0
 8000256:	2001      	movs	r0, #1
 8000258:	f000 fbee 	bl	8000a38 <lcd_set_cursor_position>
					str_write("again         ");
 800025c:	484a      	ldr	r0, [pc, #296]	; (8000388 <FP_enroll+0x19c>)
 800025e:	f000 fc05 	bl	8000a6c <str_write>
				}
				genImg();	//checks fingerprint
 8000262:	f000 f95f 	bl	8000524 <genImg>
			while (ConfirmationCode == 0x02) {	//No finger detected get finger
 8000266:	4b49      	ldr	r3, [pc, #292]	; (800038c <FP_enroll+0x1a0>)
 8000268:	781b      	ldrb	r3, [r3, #0]
 800026a:	2b02      	cmp	r3, #2
 800026c:	d0d6      	beq.n	800021c <FP_enroll+0x30>
			}
			Img2Tz(buff_local);
 800026e:	68bb      	ldr	r3, [r7, #8]
 8000270:	b2db      	uxtb	r3, r3
 8000272:	4618      	mov	r0, r3
 8000274:	f000 f988 	bl	8000588 <Img2Tz>
			while (ConfirmationCode == 0x00) { //to wait til user removes finger
 8000278:	e00f      	b.n	800029a <FP_enroll+0xae>
				lcd_set_cursor_position(0, 0);
 800027a:	2100      	movs	r1, #0
 800027c:	2000      	movs	r0, #0
 800027e:	f000 fbdb 	bl	8000a38 <lcd_set_cursor_position>
				str_write("Got Finger!     ");
 8000282:	4843      	ldr	r0, [pc, #268]	; (8000390 <FP_enroll+0x1a4>)
 8000284:	f000 fbf2 	bl	8000a6c <str_write>
				lcd_set_cursor_position(1, 0);
 8000288:	2100      	movs	r1, #0
 800028a:	2001      	movs	r0, #1
 800028c:	f000 fbd4 	bl	8000a38 <lcd_set_cursor_position>
				str_write("Remove Finger   ");
 8000290:	4840      	ldr	r0, [pc, #256]	; (8000394 <FP_enroll+0x1a8>)
 8000292:	f000 fbeb 	bl	8000a6c <str_write>
				genImg();	//checks fingerprint
 8000296:	f000 f945 	bl	8000524 <genImg>
			while (ConfirmationCode == 0x00) { //to wait til user removes finger
 800029a:	4b3c      	ldr	r3, [pc, #240]	; (800038c <FP_enroll+0x1a0>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d0eb      	beq.n	800027a <FP_enroll+0x8e>
		for (int buff_local = 1; buff_local <= 2; buff_local++) {
 80002a2:	68bb      	ldr	r3, [r7, #8]
 80002a4:	3301      	adds	r3, #1
 80002a6:	60bb      	str	r3, [r7, #8]
 80002a8:	68bb      	ldr	r3, [r7, #8]
 80002aa:	2b02      	cmp	r3, #2
 80002ac:	dddb      	ble.n	8000266 <FP_enroll+0x7a>
			}

		}
		regMode(); //generates FP template to store to memory checks if they match as well
 80002ae:	f000 f9bd 	bl	800062c <regMode>

		if (ConfirmationCode == 0x00) { //Fingerprint matches!
 80002b2:	4b36      	ldr	r3, [pc, #216]	; (800038c <FP_enroll+0x1a0>)
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d12a      	bne.n	8000310 <FP_enroll+0x124>
			lcd_set_cursor_position(0, 0);
 80002ba:	2100      	movs	r1, #0
 80002bc:	2000      	movs	r0, #0
 80002be:	f000 fbbb 	bl	8000a38 <lcd_set_cursor_position>
			str_write("FP Match!   ID=");
 80002c2:	4835      	ldr	r0, [pc, #212]	; (8000398 <FP_enroll+0x1ac>)
 80002c4:	f000 fbd2 	bl	8000a6c <str_write>
			write(mem_local + '0');
 80002c8:	7bfb      	ldrb	r3, [r7, #15]
 80002ca:	3330      	adds	r3, #48	; 0x30
 80002cc:	b2db      	uxtb	r3, r3
 80002ce:	4618      	mov	r0, r3
 80002d0:	f000 fb42 	bl	8000958 <write>

			store(1, mem_local); //stores ID to memory
 80002d4:	7bfb      	ldrb	r3, [r7, #15]
 80002d6:	b29b      	uxth	r3, r3
 80002d8:	4619      	mov	r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	f000 f9d8 	bl	8000690 <store>
			mem_local++; //increments mem_local
 80002e0:	7bfb      	ldrb	r3, [r7, #15]
 80002e2:	3301      	adds	r3, #1
 80002e4:	73fb      	strb	r3, [r7, #15]
			number_of_fp_per_section++; //increments total
 80002e6:	7bbb      	ldrb	r3, [r7, #14]
 80002e8:	3301      	adds	r3, #1
 80002ea:	73bb      	strb	r3, [r7, #14]

			ConfirmationCode = 0x02;	//to get ready for input
 80002ec:	4b27      	ldr	r3, [pc, #156]	; (800038c <FP_enroll+0x1a0>)
 80002ee:	2202      	movs	r2, #2
 80002f0:	701a      	strb	r2, [r3, #0]
			while ((ConfirmationCode == 0x02) && ~(number_of_fp_per_section == MAX_FP_PER_SECTION)) {	//No finger detected get finger
 80002f2:	e008      	b.n	8000306 <FP_enroll+0x11a>
				genImg(); //checks fingerprint
 80002f4:	f000 f916 	bl	8000524 <genImg>
				lcd_set_cursor_position(1, 0);
 80002f8:	2100      	movs	r1, #0
 80002fa:	2001      	movs	r0, #1
 80002fc:	f000 fb9c 	bl	8000a38 <lcd_set_cursor_position>
				str_write("Place New Finger");
 8000300:	4826      	ldr	r0, [pc, #152]	; (800039c <FP_enroll+0x1b0>)
 8000302:	f000 fbb3 	bl	8000a6c <str_write>
			while ((ConfirmationCode == 0x02) && ~(number_of_fp_per_section == MAX_FP_PER_SECTION)) {	//No finger detected get finger
 8000306:	4b21      	ldr	r3, [pc, #132]	; (800038c <FP_enroll+0x1a0>)
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	2b02      	cmp	r3, #2
 800030c:	d0f2      	beq.n	80002f4 <FP_enroll+0x108>
 800030e:	e017      	b.n	8000340 <FP_enroll+0x154>
			}
		} else {
			lcd_set_cursor_position(0, 0);
 8000310:	2100      	movs	r1, #0
 8000312:	2000      	movs	r0, #0
 8000314:	f000 fb90 	bl	8000a38 <lcd_set_cursor_position>
			str_write("FP mismatch :(  ");
 8000318:	4821      	ldr	r0, [pc, #132]	; (80003a0 <FP_enroll+0x1b4>)
 800031a:	f000 fba7 	bl	8000a6c <str_write>

			ConfirmationCode = 0x02;	//to get ready for input
 800031e:	4b1b      	ldr	r3, [pc, #108]	; (800038c <FP_enroll+0x1a0>)
 8000320:	2202      	movs	r2, #2
 8000322:	701a      	strb	r2, [r3, #0]
			while (ConfirmationCode == 0x02) {	//No finger detected get finger
 8000324:	e008      	b.n	8000338 <FP_enroll+0x14c>
				genImg(); //checks fingerprint
 8000326:	f000 f8fd 	bl	8000524 <genImg>
				lcd_set_cursor_position(1, 0);
 800032a:	2100      	movs	r1, #0
 800032c:	2001      	movs	r0, #1
 800032e:	f000 fb83 	bl	8000a38 <lcd_set_cursor_position>
				str_write("Redo Input      ");
 8000332:	481c      	ldr	r0, [pc, #112]	; (80003a4 <FP_enroll+0x1b8>)
 8000334:	f000 fb9a 	bl	8000a6c <str_write>
			while (ConfirmationCode == 0x02) {	//No finger detected get finger
 8000338:	4b14      	ldr	r3, [pc, #80]	; (800038c <FP_enroll+0x1a0>)
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	2b02      	cmp	r3, #2
 800033e:	d0f2      	beq.n	8000326 <FP_enroll+0x13a>
	while (number_of_fp_per_section < MAX_FP_PER_SECTION) {	//takes 10 user inputs: 0-9
 8000340:	7bbb      	ldrb	r3, [r7, #14]
 8000342:	2b01      	cmp	r3, #1
 8000344:	f67f af67 	bls.w	8000216 <FP_enroll+0x2a>
			}
		}
	}
	lcd_set_cursor_position(0, 0);
 8000348:	2100      	movs	r1, #0
 800034a:	2000      	movs	r0, #0
 800034c:	f000 fb74 	bl	8000a38 <lcd_set_cursor_position>
	str_write("Reached Max Reg ");
 8000350:	4815      	ldr	r0, [pc, #84]	; (80003a8 <FP_enroll+0x1bc>)
 8000352:	f000 fb8b 	bl	8000a6c <str_write>
	lcd_set_cursor_position(1, 0);
 8000356:	2100      	movs	r1, #0
 8000358:	2001      	movs	r0, #1
 800035a:	f000 fb6d 	bl	8000a38 <lcd_set_cursor_position>
	str_write(" For Section = ");
 800035e:	4813      	ldr	r0, [pc, #76]	; (80003ac <FP_enroll+0x1c0>)
 8000360:	f000 fb84 	bl	8000a6c <str_write>
	write(section_num + '0');
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	b2db      	uxtb	r3, r3
 8000368:	3330      	adds	r3, #48	; 0x30
 800036a:	b2db      	uxtb	r3, r3
 800036c:	4618      	mov	r0, r3
 800036e:	f000 faf3 	bl	8000958 <write>
}
 8000372:	bf00      	nop
 8000374:	3710      	adds	r7, #16
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	08001fb4 	.word	0x08001fb4
 8000380:	08001fc8 	.word	0x08001fc8
 8000384:	08001fdc 	.word	0x08001fdc
 8000388:	08001fec 	.word	0x08001fec
 800038c:	2000015c 	.word	0x2000015c
 8000390:	08001ffc 	.word	0x08001ffc
 8000394:	08002010 	.word	0x08002010
 8000398:	08002024 	.word	0x08002024
 800039c:	08002034 	.word	0x08002034
 80003a0:	08002048 	.word	0x08002048
 80003a4:	0800205c 	.word	0x0800205c
 80003a8:	08002070 	.word	0x08002070
 80003ac:	08002084 	.word	0x08002084

080003b0 <delay_us>:

// delay in microseconds using SysTick timer to count CPU clock cycles
// do not call with 0 : error, maximum delay.
// careful calling with small nums : result in longer delays than specified:
//    e.g. @4MHz, delay_us(1) = 10=15 us delay.
void delay_us(const uint32_t time_us) {  // time_us = target delay, microseconds
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
    SysTick->LOAD = (uint32_t)((time_us * (SystemCoreClock / 1000000)) - 1);
 80003b8:	4b11      	ldr	r3, [pc, #68]	; (8000400 <delay_us+0x50>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4a11      	ldr	r2, [pc, #68]	; (8000404 <delay_us+0x54>)
 80003be:	fba2 2303 	umull	r2, r3, r2, r3
 80003c2:	0c9b      	lsrs	r3, r3, #18
 80003c4:	687a      	ldr	r2, [r7, #4]
 80003c6:	fb02 f303 	mul.w	r3, r2, r3
 80003ca:	4a0f      	ldr	r2, [pc, #60]	; (8000408 <delay_us+0x58>)
 80003cc:	3b01      	subs	r3, #1
 80003ce:	6053      	str	r3, [r2, #4]
    SysTick->VAL = 0;                                      // clear the timer count
 80003d0:	4b0d      	ldr	r3, [pc, #52]	; (8000408 <delay_us+0x58>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	609a      	str	r2, [r3, #8]
    SysTick->CTRL &= ~(SysTick_CTRL_COUNTFLAG_Msk);        // clear the count flag
 80003d6:	4b0c      	ldr	r3, [pc, #48]	; (8000408 <delay_us+0x58>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	4a0b      	ldr	r2, [pc, #44]	; (8000408 <delay_us+0x58>)
 80003dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80003e0:	6013      	str	r3, [r2, #0]
    while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)); // wait for the flag
 80003e2:	bf00      	nop
 80003e4:	4b08      	ldr	r3, [pc, #32]	; (8000408 <delay_us+0x58>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d0f9      	beq.n	80003e4 <delay_us+0x34>
}
 80003f0:	bf00      	nop
 80003f2:	bf00      	nop
 80003f4:	370c      	adds	r7, #12
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	20000008 	.word	0x20000008
 8000404:	431bde83 	.word	0x431bde83
 8000408:	e000e010 	.word	0xe000e010

0800040c <handshake>:
void FP_init(void) {
}

//--------------------Instructions to transmit
//Command to confirm if fingerprint is connected to upper computer
void handshake(void) {
 800040c:	b590      	push	{r4, r7, lr}
 800040e:	b085      	sub	sp, #20
 8000410:	af00      	add	r7, sp, #0
	char handshake[13] = { 0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF,	//instruction
 8000412:	4b13      	ldr	r3, [pc, #76]	; (8000460 <handshake+0x54>)
 8000414:	463c      	mov	r4, r7
 8000416:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000418:	c407      	stmia	r4!, {r0, r1, r2}
 800041a:	7023      	strb	r3, [r4, #0]
			0x01, 0x00, 0x04, 0x17, 0x00, 0x00, 0x1C }; //a 0x00 after 0x01 before 0x04
	uint8_t i = 0;		//iteration counter
 800041c:	2300      	movs	r3, #0
 800041e:	73fb      	strb	r3, [r7, #15]
	while (i < 13) { //sends data from lowest byte to highest byte
 8000420:	e011      	b.n	8000446 <handshake+0x3a>
		while (!(USART2->ISR & USART_ISR_TXE))
 8000422:	bf00      	nop
 8000424:	4b0f      	ldr	r3, [pc, #60]	; (8000464 <handshake+0x58>)
 8000426:	69db      	ldr	r3, [r3, #28]
 8000428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800042c:	2b00      	cmp	r3, #0
 800042e:	d0f9      	beq.n	8000424 <handshake+0x18>
			; //waits for empty transmit
		USART2->TDR = handshake[i];
 8000430:	7bfb      	ldrb	r3, [r7, #15]
 8000432:	3310      	adds	r3, #16
 8000434:	443b      	add	r3, r7
 8000436:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800043a:	4b0a      	ldr	r3, [pc, #40]	; (8000464 <handshake+0x58>)
 800043c:	b292      	uxth	r2, r2
 800043e:	851a      	strh	r2, [r3, #40]	; 0x28
		i++;	//increments array
 8000440:	7bfb      	ldrb	r3, [r7, #15]
 8000442:	3301      	adds	r3, #1
 8000444:	73fb      	strb	r3, [r7, #15]
	while (i < 13) { //sends data from lowest byte to highest byte
 8000446:	7bfb      	ldrb	r3, [r7, #15]
 8000448:	2b0c      	cmp	r3, #12
 800044a:	d9ea      	bls.n	8000422 <handshake+0x16>
	}
	ACK_LENGTH = 12; //Acknowledge packet 12 bytes long
 800044c:	4b06      	ldr	r3, [pc, #24]	; (8000468 <handshake+0x5c>)
 800044e:	220c      	movs	r2, #12
 8000450:	601a      	str	r2, [r3, #0]
	delay_us(CMD_DELAY); //to separate transmission and received data
 8000452:	4806      	ldr	r0, [pc, #24]	; (800046c <handshake+0x60>)
 8000454:	f7ff ffac 	bl	80003b0 <delay_us>
}
 8000458:	bf00      	nop
 800045a:	3714      	adds	r7, #20
 800045c:	46bd      	mov	sp, r7
 800045e:	bd90      	pop	{r4, r7, pc}
 8000460:	08002094 	.word	0x08002094
 8000464:	40004400 	.word	0x40004400
 8000468:	20000030 	.word	0x20000030
 800046c:	0007a120 	.word	0x0007a120

08000470 <SetSysPara>:
 * (4) Baud Rate: setting = [1,12] | setting value * 9600bps
 * (5) Security Level: setting = [1,5]
 * 					   1 FAR (false acceptance rate) highest - 5 FAR lowest
 * (6) Data Package Length : setting = [0,3] | 32 bytes, 64 bytes, 128 bytes, 256 bytes
 */
void SetSysPara(char param, char setting) {
 8000470:	b580      	push	{r7, lr}
 8000472:	b088      	sub	sp, #32
 8000474:	af00      	add	r7, sp, #0
 8000476:	4603      	mov	r3, r0
 8000478:	460a      	mov	r2, r1
 800047a:	71fb      	strb	r3, [r7, #7]
 800047c:	4613      	mov	r3, r2
 800047e:	71bb      	strb	r3, [r7, #6]
	//sum = package identifier + package length + instruction code + package contents
	//IMPORTANT is the parameter number part of the checksum?? need to verify by checking if it exceeds 2 bytes
	uint16_t sum = 0x01 + 0x0005 + 0x0E + setting + param;//0x0007 package length, 0x01 package identifer
 8000480:	79bb      	ldrb	r3, [r7, #6]
 8000482:	b29a      	uxth	r2, r3
 8000484:	79fb      	ldrb	r3, [r7, #7]
 8000486:	b29b      	uxth	r3, r3
 8000488:	4413      	add	r3, r2
 800048a:	b29b      	uxth	r3, r3
 800048c:	3314      	adds	r3, #20
 800048e:	83bb      	strh	r3, [r7, #28]
	char sum1 = (sum >> 8) & 0xFF;
 8000490:	8bbb      	ldrh	r3, [r7, #28]
 8000492:	0a1b      	lsrs	r3, r3, #8
 8000494:	b29b      	uxth	r3, r3
 8000496:	76fb      	strb	r3, [r7, #27]
	char sum2 = sum & 0xFF;
 8000498:	8bbb      	ldrh	r3, [r7, #28]
 800049a:	76bb      	strb	r3, [r7, #26]

	//might need to adjust address (will I have to change this? make current module address a global variable?
	char sys[14] = { 0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x05, 0x0E, //instruction
 800049c:	23ef      	movs	r3, #239	; 0xef
 800049e:	733b      	strb	r3, [r7, #12]
 80004a0:	2301      	movs	r3, #1
 80004a2:	737b      	strb	r3, [r7, #13]
 80004a4:	23ff      	movs	r3, #255	; 0xff
 80004a6:	73bb      	strb	r3, [r7, #14]
 80004a8:	23ff      	movs	r3, #255	; 0xff
 80004aa:	73fb      	strb	r3, [r7, #15]
 80004ac:	23ff      	movs	r3, #255	; 0xff
 80004ae:	743b      	strb	r3, [r7, #16]
 80004b0:	23ff      	movs	r3, #255	; 0xff
 80004b2:	747b      	strb	r3, [r7, #17]
 80004b4:	2301      	movs	r3, #1
 80004b6:	74bb      	strb	r3, [r7, #18]
 80004b8:	2300      	movs	r3, #0
 80004ba:	74fb      	strb	r3, [r7, #19]
 80004bc:	2305      	movs	r3, #5
 80004be:	753b      	strb	r3, [r7, #20]
 80004c0:	230e      	movs	r3, #14
 80004c2:	757b      	strb	r3, [r7, #21]
 80004c4:	79fb      	ldrb	r3, [r7, #7]
 80004c6:	75bb      	strb	r3, [r7, #22]
 80004c8:	79bb      	ldrb	r3, [r7, #6]
 80004ca:	75fb      	strb	r3, [r7, #23]
 80004cc:	7efb      	ldrb	r3, [r7, #27]
 80004ce:	763b      	strb	r3, [r7, #24]
 80004d0:	7ebb      	ldrb	r3, [r7, #26]
 80004d2:	767b      	strb	r3, [r7, #25]
			param, setting, sum1, sum2 };

	uint8_t i = 0;		//iteration counter
 80004d4:	2300      	movs	r3, #0
 80004d6:	77fb      	strb	r3, [r7, #31]
	while (i < 14) { //sends data from lowest byte to highest byte
 80004d8:	e011      	b.n	80004fe <SetSysPara+0x8e>
		while (!(USART2->ISR & USART_ISR_TXE))
 80004da:	bf00      	nop
 80004dc:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <SetSysPara+0xa8>)
 80004de:	69db      	ldr	r3, [r3, #28]
 80004e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d0f9      	beq.n	80004dc <SetSysPara+0x6c>
			; //waits for empty transmit
		USART2->TDR = sys[i];
 80004e8:	7ffb      	ldrb	r3, [r7, #31]
 80004ea:	3320      	adds	r3, #32
 80004ec:	443b      	add	r3, r7
 80004ee:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 80004f2:	4b09      	ldr	r3, [pc, #36]	; (8000518 <SetSysPara+0xa8>)
 80004f4:	b292      	uxth	r2, r2
 80004f6:	851a      	strh	r2, [r3, #40]	; 0x28
		i++;	//increments array
 80004f8:	7ffb      	ldrb	r3, [r7, #31]
 80004fa:	3301      	adds	r3, #1
 80004fc:	77fb      	strb	r3, [r7, #31]
	while (i < 14) { //sends data from lowest byte to highest byte
 80004fe:	7ffb      	ldrb	r3, [r7, #31]
 8000500:	2b0d      	cmp	r3, #13
 8000502:	d9ea      	bls.n	80004da <SetSysPara+0x6a>
	}
	ACK_LENGTH = 12; //Acknowledge packet 12 bytes long
 8000504:	4b05      	ldr	r3, [pc, #20]	; (800051c <SetSysPara+0xac>)
 8000506:	220c      	movs	r2, #12
 8000508:	601a      	str	r2, [r3, #0]
	delay_us(CMD_DELAY); //to separate transmission and received data
 800050a:	4805      	ldr	r0, [pc, #20]	; (8000520 <SetSysPara+0xb0>)
 800050c:	f7ff ff50 	bl	80003b0 <delay_us>
}
 8000510:	bf00      	nop
 8000512:	3720      	adds	r7, #32
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	40004400 	.word	0x40004400
 800051c:	20000030 	.word	0x20000030
 8000520:	0007a120 	.word	0x0007a120

08000524 <genImg>:
	ACK_LENGTH = 14; //Acknowledge packet 14 bytes long
	delay_us(CMD_DELAY); //to separate transmission and received data
}


void genImg(void){
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af00      	add	r7, sp, #0
	//might need to adjust address (will I have to change this? make current module address a global variable?
	char gen[12] = { 0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x03, 0x01,
 800052a:	4a13      	ldr	r2, [pc, #76]	; (8000578 <genImg+0x54>)
 800052c:	463b      	mov	r3, r7
 800052e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000530:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x00, 0x05 };

	uint8_t i = 0;		//iteration counter
 8000534:	2300      	movs	r3, #0
 8000536:	73fb      	strb	r3, [r7, #15]
	while (i < 12) { //sends data from lowest byte to highest byte
 8000538:	e011      	b.n	800055e <genImg+0x3a>
		while (!(USART2->ISR & USART_ISR_TXE))
 800053a:	bf00      	nop
 800053c:	4b0f      	ldr	r3, [pc, #60]	; (800057c <genImg+0x58>)
 800053e:	69db      	ldr	r3, [r3, #28]
 8000540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000544:	2b00      	cmp	r3, #0
 8000546:	d0f9      	beq.n	800053c <genImg+0x18>
			; //waits for empty transmit
		USART2->TDR = gen[i];
 8000548:	7bfb      	ldrb	r3, [r7, #15]
 800054a:	3310      	adds	r3, #16
 800054c:	443b      	add	r3, r7
 800054e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8000552:	4b0a      	ldr	r3, [pc, #40]	; (800057c <genImg+0x58>)
 8000554:	b292      	uxth	r2, r2
 8000556:	851a      	strh	r2, [r3, #40]	; 0x28
		i++;	//increments array
 8000558:	7bfb      	ldrb	r3, [r7, #15]
 800055a:	3301      	adds	r3, #1
 800055c:	73fb      	strb	r3, [r7, #15]
	while (i < 12) { //sends data from lowest byte to highest byte
 800055e:	7bfb      	ldrb	r3, [r7, #15]
 8000560:	2b0b      	cmp	r3, #11
 8000562:	d9ea      	bls.n	800053a <genImg+0x16>
	}
	ACK_LENGTH = 12; //Acknowledge packet 12 bytes long
 8000564:	4b06      	ldr	r3, [pc, #24]	; (8000580 <genImg+0x5c>)
 8000566:	220c      	movs	r2, #12
 8000568:	601a      	str	r2, [r3, #0]
	delay_us(CMD_DELAY); //to separate transmission and received data
 800056a:	4806      	ldr	r0, [pc, #24]	; (8000584 <genImg+0x60>)
 800056c:	f7ff ff20 	bl	80003b0 <delay_us>
}
 8000570:	bf00      	nop
 8000572:	3710      	adds	r7, #16
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	080020b0 	.word	0x080020b0
 800057c:	40004400 	.word	0x40004400
 8000580:	20000030 	.word	0x20000030
 8000584:	0007a120 	.word	0x0007a120

08000588 <Img2Tz>:
//--------------
//--------------ALL CHECKSUM BELOW IS CORRECT:
//Need to add all package identifier, package length, and pakacage contents
//--------------
//generates character file and stores in charbuffer1/charbuffer2 (buffID)
void Img2Tz(char buffID){
 8000588:	b580      	push	{r7, lr}
 800058a:	b088      	sub	sp, #32
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	71fb      	strb	r3, [r7, #7]
	//sum = package identifier + package length + instruction code + package contents
	//IMPORTANT is the parameter number part of the checksum?? need to verify by checking if it exceeds 2 bytes
	uint16_t sum = 0x01 + 0x0004 + 0x02 + buffID;//0x0007 package length, 0x01 package identifer
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	b29b      	uxth	r3, r3
 8000596:	3307      	adds	r3, #7
 8000598:	83bb      	strh	r3, [r7, #28]
	char sum1 = (sum >> 8) & 0xFF;
 800059a:	8bbb      	ldrh	r3, [r7, #28]
 800059c:	0a1b      	lsrs	r3, r3, #8
 800059e:	b29b      	uxth	r3, r3
 80005a0:	76fb      	strb	r3, [r7, #27]
	char sum2 = sum & 0xFF;
 80005a2:	8bbb      	ldrh	r3, [r7, #28]
 80005a4:	76bb      	strb	r3, [r7, #26]
	buffID = 0x00 + buffID;

	//instruction to send
	char img[13] = { 0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x04, 0x02, //instruction
 80005a6:	23ef      	movs	r3, #239	; 0xef
 80005a8:	733b      	strb	r3, [r7, #12]
 80005aa:	2301      	movs	r3, #1
 80005ac:	737b      	strb	r3, [r7, #13]
 80005ae:	23ff      	movs	r3, #255	; 0xff
 80005b0:	73bb      	strb	r3, [r7, #14]
 80005b2:	23ff      	movs	r3, #255	; 0xff
 80005b4:	73fb      	strb	r3, [r7, #15]
 80005b6:	23ff      	movs	r3, #255	; 0xff
 80005b8:	743b      	strb	r3, [r7, #16]
 80005ba:	23ff      	movs	r3, #255	; 0xff
 80005bc:	747b      	strb	r3, [r7, #17]
 80005be:	2301      	movs	r3, #1
 80005c0:	74bb      	strb	r3, [r7, #18]
 80005c2:	2300      	movs	r3, #0
 80005c4:	74fb      	strb	r3, [r7, #19]
 80005c6:	2304      	movs	r3, #4
 80005c8:	753b      	strb	r3, [r7, #20]
 80005ca:	2302      	movs	r3, #2
 80005cc:	757b      	strb	r3, [r7, #21]
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	75bb      	strb	r3, [r7, #22]
 80005d2:	7efb      	ldrb	r3, [r7, #27]
 80005d4:	75fb      	strb	r3, [r7, #23]
 80005d6:	7ebb      	ldrb	r3, [r7, #26]
 80005d8:	763b      	strb	r3, [r7, #24]
			buffID, sum1, sum2 };

	uint8_t i = 0;		//iteration counter
 80005da:	2300      	movs	r3, #0
 80005dc:	77fb      	strb	r3, [r7, #31]
	while (i < 13) { //sends data from lowest byte to highest byte
 80005de:	e011      	b.n	8000604 <Img2Tz+0x7c>
		while (!(USART2->ISR & USART_ISR_TXE))
 80005e0:	bf00      	nop
 80005e2:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <Img2Tz+0x98>)
 80005e4:	69db      	ldr	r3, [r3, #28]
 80005e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d0f9      	beq.n	80005e2 <Img2Tz+0x5a>
			; //waits for empty transmit
		USART2->TDR = img[i];
 80005ee:	7ffb      	ldrb	r3, [r7, #31]
 80005f0:	3320      	adds	r3, #32
 80005f2:	443b      	add	r3, r7
 80005f4:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 80005f8:	4b09      	ldr	r3, [pc, #36]	; (8000620 <Img2Tz+0x98>)
 80005fa:	b292      	uxth	r2, r2
 80005fc:	851a      	strh	r2, [r3, #40]	; 0x28
		i++;	//increments array
 80005fe:	7ffb      	ldrb	r3, [r7, #31]
 8000600:	3301      	adds	r3, #1
 8000602:	77fb      	strb	r3, [r7, #31]
	while (i < 13) { //sends data from lowest byte to highest byte
 8000604:	7ffb      	ldrb	r3, [r7, #31]
 8000606:	2b0c      	cmp	r3, #12
 8000608:	d9ea      	bls.n	80005e0 <Img2Tz+0x58>
	}
	ACK_LENGTH = 12; //Acknowledge packet 12 bytes long
 800060a:	4b06      	ldr	r3, [pc, #24]	; (8000624 <Img2Tz+0x9c>)
 800060c:	220c      	movs	r2, #12
 800060e:	601a      	str	r2, [r3, #0]
	delay_us(CMD_DELAY); //to separate transmission and received data
 8000610:	4805      	ldr	r0, [pc, #20]	; (8000628 <Img2Tz+0xa0>)
 8000612:	f7ff fecd 	bl	80003b0 <delay_us>
}
 8000616:	bf00      	nop
 8000618:	3720      	adds	r7, #32
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40004400 	.word	0x40004400
 8000624:	20000030 	.word	0x20000030
 8000628:	0007a120 	.word	0x0007a120

0800062c <regMode>:


//----------PROBLEM: not writing 0x09 final byte
//combines template from both inputs and generates a template
void regMode(void) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
	//might need to adjust address (will I have to change this? make current module address a global variable?
	char reg[12] = { 0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x03, 0x05,//instruction
 8000632:	4a13      	ldr	r2, [pc, #76]	; (8000680 <regMode+0x54>)
 8000634:	463b      	mov	r3, r7
 8000636:	ca07      	ldmia	r2, {r0, r1, r2}
 8000638:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x00, 0x09 };

	uint8_t i = 0;		//iteration counter
 800063c:	2300      	movs	r3, #0
 800063e:	73fb      	strb	r3, [r7, #15]
	while (i < 12) { //sends data from lowest byte to highest byte
 8000640:	e011      	b.n	8000666 <regMode+0x3a>
		while (!(USART2->ISR & USART_ISR_TXE))
 8000642:	bf00      	nop
 8000644:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <regMode+0x58>)
 8000646:	69db      	ldr	r3, [r3, #28]
 8000648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800064c:	2b00      	cmp	r3, #0
 800064e:	d0f9      	beq.n	8000644 <regMode+0x18>
			; //waits for empty transmit
		USART2->TDR = reg[i];
 8000650:	7bfb      	ldrb	r3, [r7, #15]
 8000652:	3310      	adds	r3, #16
 8000654:	443b      	add	r3, r7
 8000656:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800065a:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <regMode+0x58>)
 800065c:	b292      	uxth	r2, r2
 800065e:	851a      	strh	r2, [r3, #40]	; 0x28
		i++;	//increments array
 8000660:	7bfb      	ldrb	r3, [r7, #15]
 8000662:	3301      	adds	r3, #1
 8000664:	73fb      	strb	r3, [r7, #15]
	while (i < 12) { //sends data from lowest byte to highest byte
 8000666:	7bfb      	ldrb	r3, [r7, #15]
 8000668:	2b0b      	cmp	r3, #11
 800066a:	d9ea      	bls.n	8000642 <regMode+0x16>
	}
	ACK_LENGTH = 12; //Acknowledge packet 12 bytes long
 800066c:	4b06      	ldr	r3, [pc, #24]	; (8000688 <regMode+0x5c>)
 800066e:	220c      	movs	r2, #12
 8000670:	601a      	str	r2, [r3, #0]
	delay_us(CMD_DELAY); //to separate transmission and received data
 8000672:	4806      	ldr	r0, [pc, #24]	; (800068c <regMode+0x60>)
 8000674:	f7ff fe9c 	bl	80003b0 <delay_us>
}
 8000678:	bf00      	nop
 800067a:	3710      	adds	r7, #16
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	080020bc 	.word	0x080020bc
 8000684:	40004400 	.word	0x40004400
 8000688:	20000030 	.word	0x20000030
 800068c:	0007a120 	.word	0x0007a120

08000690 <store>:

//stores template at specified buffer (buff1/buff2) at specified location (pageID)
void store(char buffID, uint16_t pageID) {
 8000690:	b580      	push	{r7, lr}
 8000692:	b088      	sub	sp, #32
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	460a      	mov	r2, r1
 800069a:	71fb      	strb	r3, [r7, #7]
 800069c:	4613      	mov	r3, r2
 800069e:	80bb      	strh	r3, [r7, #4]
	//sum = package identifier + package length + instruction code + package contents
	//IMPORTANT is the parameter number part of the checksum?? need to verify by checking if it exceeds 2 bytes
	uint16_t sum = 0x01 + 0x0006 + 0x06 + buffID + pageID;//0x0007 package length, 0x01 package identifer
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	b29a      	uxth	r2, r3
 80006a4:	88bb      	ldrh	r3, [r7, #4]
 80006a6:	4413      	add	r3, r2
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	330d      	adds	r3, #13
 80006ac:	83bb      	strh	r3, [r7, #28]
	char sum1 = (sum >> 8) & 0xFF;
 80006ae:	8bbb      	ldrh	r3, [r7, #28]
 80006b0:	0a1b      	lsrs	r3, r3, #8
 80006b2:	b29b      	uxth	r3, r3
 80006b4:	76fb      	strb	r3, [r7, #27]
	char sum2 = sum & 0xFF;
 80006b6:	8bbb      	ldrh	r3, [r7, #28]
 80006b8:	76bb      	strb	r3, [r7, #26]

	//separates pageID
	char pageIDH = (pageID >> 8) & 0xFF;
 80006ba:	88bb      	ldrh	r3, [r7, #4]
 80006bc:	0a1b      	lsrs	r3, r3, #8
 80006be:	b29b      	uxth	r3, r3
 80006c0:	767b      	strb	r3, [r7, #25]
	char pageIDL = pageID & 0xFF;
 80006c2:	88bb      	ldrh	r3, [r7, #4]
 80006c4:	763b      	strb	r3, [r7, #24]

	//might need to adjust address (will I have to change this? make current module address a global variable?
	char sto[15] = { 0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x06,//instructions
 80006c6:	23ef      	movs	r3, #239	; 0xef
 80006c8:	723b      	strb	r3, [r7, #8]
 80006ca:	2301      	movs	r3, #1
 80006cc:	727b      	strb	r3, [r7, #9]
 80006ce:	23ff      	movs	r3, #255	; 0xff
 80006d0:	72bb      	strb	r3, [r7, #10]
 80006d2:	23ff      	movs	r3, #255	; 0xff
 80006d4:	72fb      	strb	r3, [r7, #11]
 80006d6:	23ff      	movs	r3, #255	; 0xff
 80006d8:	733b      	strb	r3, [r7, #12]
 80006da:	23ff      	movs	r3, #255	; 0xff
 80006dc:	737b      	strb	r3, [r7, #13]
 80006de:	2301      	movs	r3, #1
 80006e0:	73bb      	strb	r3, [r7, #14]
 80006e2:	2300      	movs	r3, #0
 80006e4:	73fb      	strb	r3, [r7, #15]
 80006e6:	2306      	movs	r3, #6
 80006e8:	743b      	strb	r3, [r7, #16]
 80006ea:	2306      	movs	r3, #6
 80006ec:	747b      	strb	r3, [r7, #17]
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	74bb      	strb	r3, [r7, #18]
 80006f2:	7e7b      	ldrb	r3, [r7, #25]
 80006f4:	74fb      	strb	r3, [r7, #19]
 80006f6:	7e3b      	ldrb	r3, [r7, #24]
 80006f8:	753b      	strb	r3, [r7, #20]
 80006fa:	7efb      	ldrb	r3, [r7, #27]
 80006fc:	757b      	strb	r3, [r7, #21]
 80006fe:	7ebb      	ldrb	r3, [r7, #26]
 8000700:	75bb      	strb	r3, [r7, #22]
			0x06, buffID, pageIDH, pageIDL, sum1, sum2 };

	uint8_t i = 0;		//iteration counter
 8000702:	2300      	movs	r3, #0
 8000704:	77fb      	strb	r3, [r7, #31]
	while (i < 15) { //sends data from lowest byte to highest byte
 8000706:	e011      	b.n	800072c <store+0x9c>
		while (!(USART2->ISR & USART_ISR_TXE))
 8000708:	bf00      	nop
 800070a:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <store+0xb8>)
 800070c:	69db      	ldr	r3, [r3, #28]
 800070e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000712:	2b00      	cmp	r3, #0
 8000714:	d0f9      	beq.n	800070a <store+0x7a>
			; //waits for empty transmit
		USART2->TDR = sto[i];
 8000716:	7ffb      	ldrb	r3, [r7, #31]
 8000718:	3320      	adds	r3, #32
 800071a:	443b      	add	r3, r7
 800071c:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8000720:	4b09      	ldr	r3, [pc, #36]	; (8000748 <store+0xb8>)
 8000722:	b292      	uxth	r2, r2
 8000724:	851a      	strh	r2, [r3, #40]	; 0x28
		i++;	//increments array
 8000726:	7ffb      	ldrb	r3, [r7, #31]
 8000728:	3301      	adds	r3, #1
 800072a:	77fb      	strb	r3, [r7, #31]
	while (i < 15) { //sends data from lowest byte to highest byte
 800072c:	7ffb      	ldrb	r3, [r7, #31]
 800072e:	2b0e      	cmp	r3, #14
 8000730:	d9ea      	bls.n	8000708 <store+0x78>
	}
	ACK_LENGTH = 12; //Acknowledge packet 12 bytes long
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <store+0xbc>)
 8000734:	220c      	movs	r2, #12
 8000736:	601a      	str	r2, [r3, #0]
	delay_us(CMD_DELAY); //to separate transmission and received data
 8000738:	4805      	ldr	r0, [pc, #20]	; (8000750 <store+0xc0>)
 800073a:	f7ff fe39 	bl	80003b0 <delay_us>
}
 800073e:	bf00      	nop
 8000740:	3720      	adds	r7, #32
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40004400 	.word	0x40004400
 800074c:	20000030 	.word	0x20000030
 8000750:	0007a120 	.word	0x0007a120

08000754 <empty>:
	ACK_LENGTH = 12; //Acknowledge packet 12 bytes long
	delay_us(CMD_DELAY); //to separate transmission and received data
}

//empties entire data base
void empty(void) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
	//might need to adjust address (will I have to change this? make current module address a global variable?
	char emp[12] = { 0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x03,//instructions
 800075a:	4a13      	ldr	r2, [pc, #76]	; (80007a8 <empty+0x54>)
 800075c:	463b      	mov	r3, r7
 800075e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000760:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x0D, 0x00, 0x11 };

	uint8_t i = 0;		//iteration counter
 8000764:	2300      	movs	r3, #0
 8000766:	73fb      	strb	r3, [r7, #15]
	while (i < 11) { //sends data from lowest byte to highest byte
 8000768:	e011      	b.n	800078e <empty+0x3a>
		while (!(USART2->ISR & USART_ISR_TXE))
 800076a:	bf00      	nop
 800076c:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <empty+0x58>)
 800076e:	69db      	ldr	r3, [r3, #28]
 8000770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000774:	2b00      	cmp	r3, #0
 8000776:	d0f9      	beq.n	800076c <empty+0x18>
			; //waits for empty transmit
		USART2->TDR = emp[i];
 8000778:	7bfb      	ldrb	r3, [r7, #15]
 800077a:	3310      	adds	r3, #16
 800077c:	443b      	add	r3, r7
 800077e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8000782:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <empty+0x58>)
 8000784:	b292      	uxth	r2, r2
 8000786:	851a      	strh	r2, [r3, #40]	; 0x28
		i++;	//increments array
 8000788:	7bfb      	ldrb	r3, [r7, #15]
 800078a:	3301      	adds	r3, #1
 800078c:	73fb      	strb	r3, [r7, #15]
	while (i < 11) { //sends data from lowest byte to highest byte
 800078e:	7bfb      	ldrb	r3, [r7, #15]
 8000790:	2b0a      	cmp	r3, #10
 8000792:	d9ea      	bls.n	800076a <empty+0x16>
	}
	ACK_LENGTH = 12; //Acknowledge packet 12 bytes long
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <empty+0x5c>)
 8000796:	220c      	movs	r2, #12
 8000798:	601a      	str	r2, [r3, #0]
	delay_us(CMD_DELAY); //to separate transmission and received data
 800079a:	4806      	ldr	r0, [pc, #24]	; (80007b4 <empty+0x60>)
 800079c:	f7ff fe08 	bl	80003b0 <delay_us>
}
 80007a0:	bf00      	nop
 80007a2:	3710      	adds	r7, #16
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	080020c8 	.word	0x080020c8
 80007ac:	40004400 	.word	0x40004400
 80007b0:	20000030 	.word	0x20000030
 80007b4:	0007a120 	.word	0x0007a120

080007b8 <LCD_init>:
//void clear_LCD(void);

//data bus array
uint16_t GPIO_Pin[] = {D4, D5, D6, D7};

void LCD_init(void) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  delay_us(100000);
 80007bc:	4825      	ldr	r0, [pc, #148]	; (8000854 <LCD_init+0x9c>)
 80007be:	f7ff fdf7 	bl	80003b0 <delay_us>
  RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOEEN); // enable GPIOA clock on bus
 80007c2:	4b25      	ldr	r3, [pc, #148]	; (8000858 <LCD_init+0xa0>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	4a24      	ldr	r2, [pc, #144]	; (8000858 <LCD_init+0xa0>)
 80007c8:	f043 0310 	orr.w	r3, r3, #16
 80007cc:	64d3      	str	r3, [r2, #76]	; 0x4c

  // Making control pins output mode bits(01)
  control_pins->MODER &=
 80007ce:	4b23      	ldr	r3, [pc, #140]	; (800085c <LCD_init+0xa4>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4a22      	ldr	r2, [pc, #136]	; (800085c <LCD_init+0xa4>)
 80007d4:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80007d8:	6013      	str	r3, [r2, #0]
      ~(GPIO_MODER_MODE9 | GPIO_MODER_MODE10 | GPIO_MODER_MODE11 |
        GPIO_MODER_MODE12 | GPIO_MODER_MODE13 | GPIO_MODER_MODE14 |
        GPIO_MODER_MODE15); // clear bits for PA
  control_pins->MODER |=
 80007da:	4b20      	ldr	r3, [pc, #128]	; (800085c <LCD_init+0xa4>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a1f      	ldr	r2, [pc, #124]	; (800085c <LCD_init+0xa4>)
 80007e0:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 80007e4:	f443 03a8 	orr.w	r3, r3, #5505024	; 0x540000
 80007e8:	6013      	str	r3, [r2, #0]
      (GPIO_MODER_MODE9_0 | GPIO_MODER_MODE10_0 | GPIO_MODER_MODE11_0 |
       GPIO_MODER_MODE12_0 | GPIO_MODER_MODE13_0 | GPIO_MODER_MODE14_0 |
       GPIO_MODER_MODE15_0); // set up DB4 to DB7, RS, RW, E as outputs
  control_pins->OTYPER &=
 80007ea:	4b1c      	ldr	r3, [pc, #112]	; (800085c <LCD_init+0xa4>)
 80007ec:	685b      	ldr	r3, [r3, #4]
 80007ee:	4a1b      	ldr	r2, [pc, #108]	; (800085c <LCD_init+0xa4>)
 80007f0:	f423 437e 	bic.w	r3, r3, #65024	; 0xfe00
 80007f4:	6053      	str	r3, [r2, #4]
      ~(GPIO_OTYPER_OT9 | GPIO_OTYPER_OT10 | GPIO_OTYPER_OT11 | GPIO_OTYPER_OT12 |
        GPIO_OTYPER_OT13 | GPIO_OTYPER_OT14 | GPIO_OTYPER_OT15);
  control_pins->OSPEEDR |=
 80007f6:	4b19      	ldr	r3, [pc, #100]	; (800085c <LCD_init+0xa4>)
 80007f8:	689b      	ldr	r3, [r3, #8]
 80007fa:	4a18      	ldr	r2, [pc, #96]	; (800085c <LCD_init+0xa4>)
 80007fc:	ea6f 3383 	mvn.w	r3, r3, lsl #14
 8000800:	ea6f 3393 	mvn.w	r3, r3, lsr #14
 8000804:	6093      	str	r3, [r2, #8]
      ((3 << GPIO_OSPEEDR_OSPEED9_Pos) | (3 << GPIO_OSPEEDR_OSPEED10_Pos) |
       (3 << GPIO_OSPEEDR_OSPEED11_Pos) | (3 << GPIO_OSPEEDR_OSPEED12_Pos) |
       (3 << GPIO_OSPEEDR_OSPEED13_Pos) | (3 << GPIO_OSPEEDR_OSPEED14_Pos) |
       (3 << GPIO_OSPEEDR_OSPEED15_Pos));
  control_pins->BRR =
 8000806:	4b15      	ldr	r3, [pc, #84]	; (800085c <LCD_init+0xa4>)
 8000808:	f44f 427e 	mov.w	r2, #65024	; 0xfe00
 800080c:	629a      	str	r2, [r3, #40]	; 0x28
      (D4 | D5 | D6 | D7 | EN | RW | RS); // Initializes data to all 0

  //LCD init commands based on the LCD datasheet
  delay_us(100000);
 800080e:	4811      	ldr	r0, [pc, #68]	; (8000854 <LCD_init+0x9c>)
 8000810:	f7ff fdce 	bl	80003b0 <delay_us>
  command(0x30);
 8000814:	2030      	movs	r0, #48	; 0x30
 8000816:	f000 f83d 	bl	8000894 <command>
  delay_us(100);
 800081a:	2064      	movs	r0, #100	; 0x64
 800081c:	f7ff fdc8 	bl	80003b0 <delay_us>
  command(0x30);
 8000820:	2030      	movs	r0, #48	; 0x30
 8000822:	f000 f837 	bl	8000894 <command>
  delay_us(100);
 8000826:	2064      	movs	r0, #100	; 0x64
 8000828:	f7ff fdc2 	bl	80003b0 <delay_us>
  command(0x30);
 800082c:	2030      	movs	r0, #48	; 0x30
 800082e:	f000 f831 	bl	8000894 <command>
  delay_us(100);
 8000832:	2064      	movs	r0, #100	; 0x64
 8000834:	f7ff fdbc 	bl	80003b0 <delay_us>
  command(0x20);
 8000838:	2020      	movs	r0, #32
 800083a:	f000 f82b 	bl	8000894 <command>
  delay_us(100);
 800083e:	2064      	movs	r0, #100	; 0x64
 8000840:	f7ff fdb6 	bl	80003b0 <delay_us>
  command(0x02);
 8000844:	2002      	movs	r0, #2
 8000846:	f000 f825 	bl	8000894 <command>
  delay_us(100);
 800084a:	2064      	movs	r0, #100	; 0x64
 800084c:	f7ff fdb0 	bl	80003b0 <delay_us>
}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}
 8000854:	000186a0 	.word	0x000186a0
 8000858:	40021000 	.word	0x40021000
 800085c:	48001000 	.word	0x48001000

08000860 <Nybble>:

void Nybble() {
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  control_pins->BSRR = EN;  //turn on EN for pulse
 8000864:	4b0a      	ldr	r3, [pc, #40]	; (8000890 <Nybble+0x30>)
 8000866:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800086a:	619a      	str	r2, [r3, #24]
  delay_us(50); // wait
 800086c:	2032      	movs	r0, #50	; 0x32
 800086e:	f7ff fd9f 	bl	80003b0 <delay_us>
  control_pins->BRR = EN;   //turn off EN for pulse
 8000872:	4b07      	ldr	r3, [pc, #28]	; (8000890 <Nybble+0x30>)
 8000874:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000878:	629a      	str	r2, [r3, #40]	; 0x28
  delay_us(50);                                // wait
 800087a:	2032      	movs	r0, #50	; 0x32
 800087c:	f7ff fd98 	bl	80003b0 <delay_us>
  control_pins->ODR &= ~((D4 | D5 | D6 | D7)); // clear data registers
 8000880:	4b03      	ldr	r3, [pc, #12]	; (8000890 <Nybble+0x30>)
 8000882:	695b      	ldr	r3, [r3, #20]
 8000884:	4a02      	ldr	r2, [pc, #8]	; (8000890 <Nybble+0x30>)
 8000886:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800088a:	6153      	str	r3, [r2, #20]
}
 800088c:	bf00      	nop
 800088e:	bd80      	pop	{r7, pc}
 8000890:	48001000 	.word	0x48001000

08000894 <command>:

void command(uint8_t command) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b086      	sub	sp, #24
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	71fb      	strb	r3, [r7, #7]
  uint8_t command2 = command >> 4; //shift higher nibbles to lower nibbles
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	091b      	lsrs	r3, r3, #4
 80008a2:	73fb      	strb	r3, [r7, #15]
  control_pins->BRR = (RS | RW); // set RS and RW to zero
 80008a4:	4b2a      	ldr	r3, [pc, #168]	; (8000950 <command+0xbc>)
 80008a6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80008aa:	629a      	str	r2, [r3, #40]	; 0x28

  for (int i = 0; i < 4; i++) {  //loop through data bus and turn on or off
 80008ac:	2300      	movs	r3, #0
 80008ae:	617b      	str	r3, [r7, #20]
 80008b0:	e017      	b.n	80008e2 <command+0x4e>
    if ((command2 >> i) & 0x01) {
 80008b2:	7bfa      	ldrb	r2, [r7, #15]
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	fa42 f303 	asr.w	r3, r2, r3
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d006      	beq.n	80008d0 <command+0x3c>
      control_pins->BSRR = GPIO_Pin[i];
 80008c2:	4a24      	ldr	r2, [pc, #144]	; (8000954 <command+0xc0>)
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80008ca:	4b21      	ldr	r3, [pc, #132]	; (8000950 <command+0xbc>)
 80008cc:	619a      	str	r2, [r3, #24]
 80008ce:	e005      	b.n	80008dc <command+0x48>
    } else {
      control_pins->BRR = GPIO_Pin[i];
 80008d0:	4a20      	ldr	r2, [pc, #128]	; (8000954 <command+0xc0>)
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80008d8:	4b1d      	ldr	r3, [pc, #116]	; (8000950 <command+0xbc>)
 80008da:	629a      	str	r2, [r3, #40]	; 0x28
  for (int i = 0; i < 4; i++) {  //loop through data bus and turn on or off
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	3301      	adds	r3, #1
 80008e0:	617b      	str	r3, [r7, #20]
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	2b03      	cmp	r3, #3
 80008e6:	dde4      	ble.n	80008b2 <command+0x1e>
    }
  }

  delay_us(1000);
 80008e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008ec:	f7ff fd60 	bl	80003b0 <delay_us>
  Nybble(); // Send pulse
 80008f0:	f7ff ffb6 	bl	8000860 <Nybble>

  for (int i = 0; i < 4; i++) {
 80008f4:	2300      	movs	r3, #0
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	e017      	b.n	800092a <command+0x96>
    if ((command >> i) & 0x01) { //loop through data bus and turn on or off
 80008fa:	79fa      	ldrb	r2, [r7, #7]
 80008fc:	693b      	ldr	r3, [r7, #16]
 80008fe:	fa42 f303 	asr.w	r3, r2, r3
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	2b00      	cmp	r3, #0
 8000908:	d006      	beq.n	8000918 <command+0x84>
      control_pins->BSRR = GPIO_Pin[i];
 800090a:	4a12      	ldr	r2, [pc, #72]	; (8000954 <command+0xc0>)
 800090c:	693b      	ldr	r3, [r7, #16]
 800090e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000912:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <command+0xbc>)
 8000914:	619a      	str	r2, [r3, #24]
 8000916:	e005      	b.n	8000924 <command+0x90>
    } else {
      control_pins->BRR = GPIO_Pin[i];
 8000918:	4a0e      	ldr	r2, [pc, #56]	; (8000954 <command+0xc0>)
 800091a:	693b      	ldr	r3, [r7, #16]
 800091c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000920:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <command+0xbc>)
 8000922:	629a      	str	r2, [r3, #40]	; 0x28
  for (int i = 0; i < 4; i++) {
 8000924:	693b      	ldr	r3, [r7, #16]
 8000926:	3301      	adds	r3, #1
 8000928:	613b      	str	r3, [r7, #16]
 800092a:	693b      	ldr	r3, [r7, #16]
 800092c:	2b03      	cmp	r3, #3
 800092e:	dde4      	ble.n	80008fa <command+0x66>
    }
  }
  delay_us(1000);
 8000930:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000934:	f7ff fd3c 	bl	80003b0 <delay_us>
  Nybble();                                    // Send pulse
 8000938:	f7ff ff92 	bl	8000860 <Nybble>
  control_pins->ODR &= ~((D4 | D5 | D6 | D7)); // Clears registers
 800093c:	4b04      	ldr	r3, [pc, #16]	; (8000950 <command+0xbc>)
 800093e:	695b      	ldr	r3, [r3, #20]
 8000940:	4a03      	ldr	r2, [pc, #12]	; (8000950 <command+0xbc>)
 8000942:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000946:	6153      	str	r3, [r2, #20]
}
 8000948:	bf00      	nop
 800094a:	3718      	adds	r7, #24
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	48001000 	.word	0x48001000
 8000954:	20000000 	.word	0x20000000

08000958 <write>:

void write(char letter) {  //write 1 character on the LCD display
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	71fb      	strb	r3, [r7, #7]
  uint8_t c = letter;
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	73fb      	strb	r3, [r7, #15]
  uint8_t c2 = c >> 4;
 8000966:	7bfb      	ldrb	r3, [r7, #15]
 8000968:	091b      	lsrs	r3, r3, #4
 800096a:	73bb      	strb	r3, [r7, #14]
  control_pins->BSRR = (RS); // set RS on
 800096c:	4b30      	ldr	r3, [pc, #192]	; (8000a30 <write+0xd8>)
 800096e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000972:	619a      	str	r2, [r3, #24]
  control_pins->BRR = (RW);  // set RW off
 8000974:	4b2e      	ldr	r3, [pc, #184]	; (8000a30 <write+0xd8>)
 8000976:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800097a:	629a      	str	r2, [r3, #40]	; 0x28
  for (int i = 0; i < 4; i++) { //loop through data bus and turn on or off
 800097c:	2300      	movs	r3, #0
 800097e:	617b      	str	r3, [r7, #20]
 8000980:	e017      	b.n	80009b2 <write+0x5a>
    if ((c2 >> i) & 0x01) {
 8000982:	7bba      	ldrb	r2, [r7, #14]
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	fa42 f303 	asr.w	r3, r2, r3
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	2b00      	cmp	r3, #0
 8000990:	d006      	beq.n	80009a0 <write+0x48>
      control_pins->BSRR = GPIO_Pin[i];
 8000992:	4a28      	ldr	r2, [pc, #160]	; (8000a34 <write+0xdc>)
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800099a:	4b25      	ldr	r3, [pc, #148]	; (8000a30 <write+0xd8>)
 800099c:	619a      	str	r2, [r3, #24]
 800099e:	e005      	b.n	80009ac <write+0x54>
    } else {
      control_pins->BRR = GPIO_Pin[i];
 80009a0:	4a24      	ldr	r2, [pc, #144]	; (8000a34 <write+0xdc>)
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80009a8:	4b21      	ldr	r3, [pc, #132]	; (8000a30 <write+0xd8>)
 80009aa:	629a      	str	r2, [r3, #40]	; 0x28
  for (int i = 0; i < 4; i++) { //loop through data bus and turn on or off
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	3301      	adds	r3, #1
 80009b0:	617b      	str	r3, [r7, #20]
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	2b03      	cmp	r3, #3
 80009b6:	dde4      	ble.n	8000982 <write+0x2a>
    }
  }

  delay_us(1000);
 80009b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009bc:	f7ff fcf8 	bl	80003b0 <delay_us>
  Nybble(); //send pulse
 80009c0:	f7ff ff4e 	bl	8000860 <Nybble>

  for (int i = 0; i < 4; i++) { //loop through data bus and turn on or off
 80009c4:	2300      	movs	r3, #0
 80009c6:	613b      	str	r3, [r7, #16]
 80009c8:	e017      	b.n	80009fa <write+0xa2>
    if ((c >> i) & 0x01) {
 80009ca:	7bfa      	ldrb	r2, [r7, #15]
 80009cc:	693b      	ldr	r3, [r7, #16]
 80009ce:	fa42 f303 	asr.w	r3, r2, r3
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d006      	beq.n	80009e8 <write+0x90>
      control_pins->BSRR = GPIO_Pin[i];
 80009da:	4a16      	ldr	r2, [pc, #88]	; (8000a34 <write+0xdc>)
 80009dc:	693b      	ldr	r3, [r7, #16]
 80009de:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80009e2:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <write+0xd8>)
 80009e4:	619a      	str	r2, [r3, #24]
 80009e6:	e005      	b.n	80009f4 <write+0x9c>
    } else {
      control_pins->BRR = GPIO_Pin[i];
 80009e8:	4a12      	ldr	r2, [pc, #72]	; (8000a34 <write+0xdc>)
 80009ea:	693b      	ldr	r3, [r7, #16]
 80009ec:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <write+0xd8>)
 80009f2:	629a      	str	r2, [r3, #40]	; 0x28
  for (int i = 0; i < 4; i++) { //loop through data bus and turn on or off
 80009f4:	693b      	ldr	r3, [r7, #16]
 80009f6:	3301      	adds	r3, #1
 80009f8:	613b      	str	r3, [r7, #16]
 80009fa:	693b      	ldr	r3, [r7, #16]
 80009fc:	2b03      	cmp	r3, #3
 80009fe:	dde4      	ble.n	80009ca <write+0x72>
    }
  }
  delay_us(1000);
 8000a00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a04:	f7ff fcd4 	bl	80003b0 <delay_us>
  Nybble(); //send pulse
 8000a08:	f7ff ff2a 	bl	8000860 <Nybble>
  control_pins->BRR = (RS);                    // set RS back to zero
 8000a0c:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <write+0xd8>)
 8000a0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a12:	629a      	str	r2, [r3, #40]	; 0x28
  control_pins->ODR &= ~((D4 | D5 | D6 | D7)); // Clears registers
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <write+0xd8>)
 8000a16:	695b      	ldr	r3, [r3, #20]
 8000a18:	4a05      	ldr	r2, [pc, #20]	; (8000a30 <write+0xd8>)
 8000a1a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000a1e:	6153      	str	r3, [r2, #20]
  delay_us(100);
 8000a20:	2064      	movs	r0, #100	; 0x64
 8000a22:	f7ff fcc5 	bl	80003b0 <delay_us>
}
 8000a26:	bf00      	nop
 8000a28:	3718      	adds	r7, #24
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	48001000 	.word	0x48001000
 8000a34:	20000000 	.word	0x20000000

08000a38 <lcd_set_cursor_position>:

void lcd_set_cursor_position(uint8_t row, uint8_t col) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	460a      	mov	r2, r1
 8000a42:	71fb      	strb	r3, [r7, #7]
 8000a44:	4613      	mov	r3, r2
 8000a46:	71bb      	strb	r3, [r7, #6]
  uint8_t address;

  // Calculate the address based on row and col values
  if (row == 0) {
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d103      	bne.n	8000a56 <lcd_set_cursor_position+0x1e>
    address = 0x80 + col; // For row 0, the address starts from 0x80
 8000a4e:	79bb      	ldrb	r3, [r7, #6]
 8000a50:	3b80      	subs	r3, #128	; 0x80
 8000a52:	73fb      	strb	r3, [r7, #15]
 8000a54:	e002      	b.n	8000a5c <lcd_set_cursor_position+0x24>
  } else {
    address = 0xC0 + col; // For row 1, the address starts from 0xC0
 8000a56:	79bb      	ldrb	r3, [r7, #6]
 8000a58:	3b40      	subs	r3, #64	; 0x40
 8000a5a:	73fb      	strb	r3, [r7, #15]
  }

  // Send the command to set the cursor position
  command(address);
 8000a5c:	7bfb      	ldrb	r3, [r7, #15]
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f7ff ff18 	bl	8000894 <command>
}
 8000a64:	bf00      	nop
 8000a66:	3710      	adds	r7, #16
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <str_write>:

void str_write(const char *str) { //writes a character array to LCD
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  for (int i = 0; str[i] != '\0'; i++) {
 8000a74:	2300      	movs	r3, #0
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	e00c      	b.n	8000a94 <str_write+0x28>
    write(str[i]);
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	687a      	ldr	r2, [r7, #4]
 8000a7e:	4413      	add	r3, r2
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff ff68 	bl	8000958 <write>
    delay_us(100);
 8000a88:	2064      	movs	r0, #100	; 0x64
 8000a8a:	f7ff fc91 	bl	80003b0 <delay_us>
  for (int i = 0; str[i] != '\0'; i++) {
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	3301      	adds	r3, #1
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	4413      	add	r3, r2
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d1ec      	bne.n	8000a7a <str_write+0xe>
  }
	delay_us(100);
 8000aa0:	2064      	movs	r0, #100	; 0x64
 8000aa2:	f7ff fc85 	bl	80003b0 <delay_us>
}
 8000aa6:	bf00      	nop
 8000aa8:	3710      	adds	r7, #16
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
	...

08000ab0 <main>:
static int index0 = 0;
//static int bufferLength = 0;
uint8_t ConfirmationCode = 0;
uint32_t currentPacketSize = 0;

int main(void) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0

	HAL_Init();
 8000ab4:	f000 fa81 	bl	8000fba <HAL_Init>
	SystemClock_Config();
 8000ab8:	f000 f8d6 	bl	8000c68 <SystemClock_Config>
	LPUART_init();
 8000abc:	f000 f980 	bl	8000dc0 <LPUART_init>
	LCD_init();
 8000ac0:	f7ff fe7a 	bl	80007b8 <LCD_init>
	command(0x0C);
 8000ac4:	200c      	movs	r0, #12
 8000ac6:	f7ff fee5 	bl	8000894 <command>

	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;  // GPIOC clock init
 8000aca:	4b23      	ldr	r3, [pc, #140]	; (8000b58 <main+0xa8>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ace:	4a22      	ldr	r2, [pc, #136]	; (8000b58 <main+0xa8>)
 8000ad0:	f043 0304 	orr.w	r3, r3, #4
 8000ad4:	64d3      	str	r3, [r2, #76]	; 0x4c
	GPIOC->MODER &= ~(GPIO_MODER_MODE13); // button init
 8000ad6:	4b21      	ldr	r3, [pc, #132]	; (8000b5c <main+0xac>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a20      	ldr	r2, [pc, #128]	; (8000b5c <main+0xac>)
 8000adc:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8000ae0:	6013      	str	r3, [r2, #0]
	GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPD13_1);
 8000ae2:	4b1e      	ldr	r3, [pc, #120]	; (8000b5c <main+0xac>)
 8000ae4:	68db      	ldr	r3, [r3, #12]
 8000ae6:	4a1d      	ldr	r2, [pc, #116]	; (8000b5c <main+0xac>)
 8000ae8:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000aec:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR |= (GPIO_PUPDR_PUPD13_1);
 8000aee:	4b1b      	ldr	r3, [pc, #108]	; (8000b5c <main+0xac>)
 8000af0:	68db      	ldr	r3, [r3, #12]
 8000af2:	4a1a      	ldr	r2, [pc, #104]	; (8000b5c <main+0xac>)
 8000af4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000af8:	60d3      	str	r3, [r2, #12]
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;  // GPIOB clock init
 8000afa:	4b17      	ldr	r3, [pc, #92]	; (8000b58 <main+0xa8>)
 8000afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afe:	4a16      	ldr	r2, [pc, #88]	; (8000b58 <main+0xa8>)
 8000b00:	f043 0302 	orr.w	r3, r3, #2
 8000b04:	64d3      	str	r3, [r2, #76]	; 0x4c
	GPIOB->MODER &= ~(GPIO_MODER_MODE7);  // LD2 clear
 8000b06:	4b16      	ldr	r3, [pc, #88]	; (8000b60 <main+0xb0>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a15      	ldr	r2, [pc, #84]	; (8000b60 <main+0xb0>)
 8000b0c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b10:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (GPIO_MODER_MODE7_0); // LD2 output mode
 8000b12:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <main+0xb0>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a12      	ldr	r2, [pc, #72]	; (8000b60 <main+0xb0>)
 8000b18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b1c:	6013      	str	r3, [r2, #0]

	delay_us(100);
 8000b1e:	2064      	movs	r0, #100	; 0x64
 8000b20:	f7ff fc46 	bl	80003b0 <delay_us>
	USART_init();
 8000b24:	f000 f9be 	bl	8000ea4 <USART_init>
	delay_us(10000);
 8000b28:	f242 7010 	movw	r0, #10000	; 0x2710
 8000b2c:	f7ff fc40 	bl	80003b0 <delay_us>

	//Fingerprint initialization
	handshake();
 8000b30:	f7ff fc6c 	bl	800040c <handshake>
	SetSysPara(4, 6);
 8000b34:	2106      	movs	r1, #6
 8000b36:	2004      	movs	r0, #4
 8000b38:	f7ff fc9a 	bl	8000470 <SetSysPara>
	SetSysPara(5, 1);
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	2005      	movs	r0, #5
 8000b40:	f7ff fc96 	bl	8000470 <SetSysPara>
	SetSysPara(6, 3);
 8000b44:	2103      	movs	r1, #3
 8000b46:	2006      	movs	r0, #6
 8000b48:	f7ff fc92 	bl	8000470 <SetSysPara>

	//FOR DEBUGGING
	empty(); //empties entire database of FP
 8000b4c:	f7ff fe02 	bl	8000754 <empty>


	//use gotos:
	FP_enroll(1);	//section 0: only have 10 fingerprints
 8000b50:	2001      	movs	r0, #1
 8000b52:	f7ff fb4b 	bl	80001ec <FP_enroll>

	while (1) {
 8000b56:	e7fe      	b.n	8000b56 <main+0xa6>
 8000b58:	40021000 	.word	0x40021000
 8000b5c:	48000800 	.word	0x48000800
 8000b60:	48000400 	.word	0x48000400

08000b64 <LPUART1_IRQHandler>:
//		GPIOB->BRR = GPIO_PIN_7;

	}
}

void LPUART1_IRQHandler(void) {
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
	if (LPUART1->ISR & USART_ISR_RXNE) { // check if there is new data in the UART receiver
 8000b6a:	4b1f      	ldr	r3, [pc, #124]	; (8000be8 <LPUART1_IRQHandler+0x84>)
 8000b6c:	69db      	ldr	r3, [r3, #28]
 8000b6e:	f003 0320 	and.w	r3, r3, #32
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d031      	beq.n	8000bda <LPUART1_IRQHandler+0x76>
		GPIOB->BSRR = GPIO_PIN_7;
 8000b76:	4b1d      	ldr	r3, [pc, #116]	; (8000bec <LPUART1_IRQHandler+0x88>)
 8000b78:	2280      	movs	r2, #128	; 0x80
 8000b7a:	619a      	str	r2, [r3, #24]

		char charRecv = LPUART1->RDR;  // read the received character
 8000b7c:	4b1a      	ldr	r3, [pc, #104]	; (8000be8 <LPUART1_IRQHandler+0x84>)
 8000b7e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	71fb      	strb	r3, [r7, #7]
		buffer[index] = charRecv;
 8000b84:	4b1a      	ldr	r3, [pc, #104]	; (8000bf0 <LPUART1_IRQHandler+0x8c>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	491a      	ldr	r1, [pc, #104]	; (8000bf4 <LPUART1_IRQHandler+0x90>)
 8000b8a:	79fa      	ldrb	r2, [r7, #7]
 8000b8c:	54ca      	strb	r2, [r1, r3]
		index++;
 8000b8e:	4b18      	ldr	r3, [pc, #96]	; (8000bf0 <LPUART1_IRQHandler+0x8c>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	3301      	adds	r3, #1
 8000b94:	4a16      	ldr	r2, [pc, #88]	; (8000bf0 <LPUART1_IRQHandler+0x8c>)
 8000b96:	6013      	str	r3, [r2, #0]

		if (charRecv == '\n') {
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	2b0a      	cmp	r3, #10
 8000b9c:	d10f      	bne.n	8000bbe <LPUART1_IRQHandler+0x5a>
			flag = 1;
 8000b9e:	4b16      	ldr	r3, [pc, #88]	; (8000bf8 <LPUART1_IRQHandler+0x94>)
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	601a      	str	r2, [r3, #0]
			index--;
 8000ba4:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <LPUART1_IRQHandler+0x8c>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	3b01      	subs	r3, #1
 8000baa:	4a11      	ldr	r2, [pc, #68]	; (8000bf0 <LPUART1_IRQHandler+0x8c>)
 8000bac:	6013      	str	r3, [r2, #0]
			buffer[index] = '\0';
 8000bae:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <LPUART1_IRQHandler+0x8c>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a10      	ldr	r2, [pc, #64]	; (8000bf4 <LPUART1_IRQHandler+0x90>)
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	54d1      	strb	r1, [r2, r3]
			index = 0;
 8000bb8:	4b0d      	ldr	r3, [pc, #52]	; (8000bf0 <LPUART1_IRQHandler+0x8c>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
		}
		while (!(LPUART1->ISR & USART_ISR_TXE))
 8000bbe:	bf00      	nop
 8000bc0:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <LPUART1_IRQHandler+0x84>)
 8000bc2:	69db      	ldr	r3, [r3, #28]
 8000bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d0f9      	beq.n	8000bc0 <LPUART1_IRQHandler+0x5c>
			;  // wait for empty TX buffer
		LPUART1->TDR = charRecv; // send received character
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <LPUART1_IRQHandler+0x84>)
 8000bce:	79fa      	ldrb	r2, [r7, #7]
 8000bd0:	b292      	uxth	r2, r2
 8000bd2:	851a      	strh	r2, [r3, #40]	; 0x28

		GPIOB->BRR = GPIO_PIN_7;
 8000bd4:	4b05      	ldr	r3, [pc, #20]	; (8000bec <LPUART1_IRQHandler+0x88>)
 8000bd6:	2280      	movs	r2, #128	; 0x80
 8000bd8:	629a      	str	r2, [r3, #40]	; 0x28
	}
}
 8000bda:	bf00      	nop
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	40008000 	.word	0x40008000
 8000bec:	48000400 	.word	0x48000400
 8000bf0:	20000134 	.word	0x20000134
 8000bf4:	20000034 	.word	0x20000034
 8000bf8:	20000138 	.word	0x20000138

08000bfc <USART2_IRQHandler>:

void USART2_IRQHandler(void) { //[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27]
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
//	GPIOB->BSRR = GPIO_PIN_7;
	if (USART2->ISR & USART_ISR_RXNE) { // check if there is new data in the UART receiver
 8000c02:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <USART2_IRQHandler+0x58>)
 8000c04:	69db      	ldr	r3, [r3, #28]
 8000c06:	f003 0320 	and.w	r3, r3, #32
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d01b      	beq.n	8000c46 <USART2_IRQHandler+0x4a>
		uint8_t charRecv = USART2->RDR;    // read the received character
 8000c0e:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <USART2_IRQHandler+0x58>)
 8000c10:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	71fb      	strb	r3, [r7, #7]
		errorbuffer[index0] = charRecv; //buffer must be global variable
 8000c16:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <USART2_IRQHandler+0x5c>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4910      	ldr	r1, [pc, #64]	; (8000c5c <USART2_IRQHandler+0x60>)
 8000c1c:	79fa      	ldrb	r2, [r7, #7]
 8000c1e:	54ca      	strb	r2, [r1, r3]
		index0++;                  //index must be global variable
 8000c20:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <USART2_IRQHandler+0x5c>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	3301      	adds	r3, #1
 8000c26:	4a0c      	ldr	r2, [pc, #48]	; (8000c58 <USART2_IRQHandler+0x5c>)
 8000c28:	6013      	str	r3, [r2, #0]
		if (index0 >= ACK_LENGTH) {
 8000c2a:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <USART2_IRQHandler+0x5c>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	461a      	mov	r2, r3
 8000c30:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <USART2_IRQHandler+0x64>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d306      	bcc.n	8000c46 <USART2_IRQHandler+0x4a>
			ConfirmationCode = errorbuffer[9];    //must be global variable
 8000c38:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <USART2_IRQHandler+0x60>)
 8000c3a:	7a5a      	ldrb	r2, [r3, #9]
 8000c3c:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <USART2_IRQHandler+0x68>)
 8000c3e:	701a      	strb	r2, [r3, #0]
//			FingerprintErrorHandler();
//			errorbuffer[1+index0] = '\n';
			index0 = 0;
 8000c40:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <USART2_IRQHandler+0x5c>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	40004400 	.word	0x40004400
 8000c58:	20000158 	.word	0x20000158
 8000c5c:	2000013c 	.word	0x2000013c
 8000c60:	20000030 	.word	0x20000030
 8000c64:	2000015c 	.word	0x2000015c

08000c68 <SystemClock_Config>:
		lcd_set_cursor_position(1, 0);
		str_write("library");
	}
}

void SystemClock_Config(void) {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b096      	sub	sp, #88	; 0x58
 8000c6c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000c6e:	f107 0314 	add.w	r3, r7, #20
 8000c72:	2244      	movs	r2, #68	; 0x44
 8000c74:	2100      	movs	r1, #0
 8000c76:	4618      	mov	r0, r3
 8000c78:	f001 f988 	bl	8001f8c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000c7c:	463b      	mov	r3, r7
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
 8000c86:	60da      	str	r2, [r3, #12]
 8000c88:	611a      	str	r2, [r3, #16]

	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c8a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c8e:	f000 fafd 	bl	800128c <HAL_PWREx_ControlVoltageScaling>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8000c98:	f000 f82c 	bl	8000cf4 <Error_Handler>
	}

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000c9c:	2310      	movs	r3, #16
 8000c9e:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ca8:	2360      	movs	r3, #96	; 0x60
 8000caa:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000cac:	2300      	movs	r3, #0
 8000cae:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f000 fb3f 	bl	8001338 <HAL_RCC_OscConfig>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <SystemClock_Config+0x5c>
		Error_Handler();
 8000cc0:	f000 f818 	bl	8000cf4 <Error_Handler>
	}

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000cc4:	230f      	movs	r3, #15
 8000cc6:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000cd8:	463b      	mov	r3, r7
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f000 ff45 	bl	8001b6c <HAL_RCC_ClockConfig>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <SystemClock_Config+0x84>
		Error_Handler();
 8000ce8:	f000 f804 	bl	8000cf4 <Error_Handler>
	}
}
 8000cec:	bf00      	nop
 8000cee:	3758      	adds	r7, #88	; 0x58
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <Error_Handler>:

void Error_Handler(void) {
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf8:	b672      	cpsid	i
}
 8000cfa:	bf00      	nop

	__disable_irq();
	while (1) {
 8000cfc:	e7fe      	b.n	8000cfc <Error_Handler+0x8>
	...

08000d00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d06:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <HAL_MspInit+0x44>)
 8000d08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d0a:	4a0e      	ldr	r2, [pc, #56]	; (8000d44 <HAL_MspInit+0x44>)
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	6613      	str	r3, [r2, #96]	; 0x60
 8000d12:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <HAL_MspInit+0x44>)
 8000d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1e:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <HAL_MspInit+0x44>)
 8000d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d22:	4a08      	ldr	r2, [pc, #32]	; (8000d44 <HAL_MspInit+0x44>)
 8000d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d28:	6593      	str	r3, [r2, #88]	; 0x58
 8000d2a:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <HAL_MspInit+0x44>)
 8000d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d32:	603b      	str	r3, [r7, #0]
 8000d34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d36:	bf00      	nop
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	40021000 	.word	0x40021000

08000d48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <NMI_Handler+0x4>

08000d4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d52:	e7fe      	b.n	8000d52 <HardFault_Handler+0x4>

08000d54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <MemManage_Handler+0x4>

08000d5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d5e:	e7fe      	b.n	8000d5e <BusFault_Handler+0x4>

08000d60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <UsageFault_Handler+0x4>

08000d66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d94:	f000 f966 	bl	8001064 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d98:	bf00      	nop
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <SystemInit+0x20>)
 8000da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000da6:	4a05      	ldr	r2, [pc, #20]	; (8000dbc <SystemInit+0x20>)
 8000da8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <LPUART_init>:

#include "main.h"
#include "uart.h"


void LPUART_init() {
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
	PWR->CR2 |= (PWR_CR2_IOSV);             // power avail on PG[15:2] (LPUART1)
 8000dc4:	4b31      	ldr	r3, [pc, #196]	; (8000e8c <LPUART_init+0xcc>)
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	4a30      	ldr	r2, [pc, #192]	; (8000e8c <LPUART_init+0xcc>)
 8000dca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dce:	6053      	str	r3, [r2, #4]
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOGEN);   // enable GPIOG clock
 8000dd0:	4b2f      	ldr	r3, [pc, #188]	; (8000e90 <LPUART_init+0xd0>)
 8000dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd4:	4a2e      	ldr	r2, [pc, #184]	; (8000e90 <LPUART_init+0xd0>)
 8000dd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dda:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC->APB1ENR2 |= RCC_APB1ENR2_LPUART1EN; // enable LPUART clock bridge
 8000ddc:	4b2c      	ldr	r3, [pc, #176]	; (8000e90 <LPUART_init+0xd0>)
 8000dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000de0:	4a2b      	ldr	r2, [pc, #172]	; (8000e90 <LPUART_init+0xd0>)
 8000de2:	f043 0301 	orr.w	r3, r3, #1
 8000de6:	65d3      	str	r3, [r2, #92]	; 0x5c
	GPIOG->MODER &= ~(GPIO_MODER_MODE5 | GPIO_MODER_MODE6 | GPIO_MODER_MODE7
 8000de8:	4b2a      	ldr	r3, [pc, #168]	; (8000e94 <LPUART_init+0xd4>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a29      	ldr	r2, [pc, #164]	; (8000e94 <LPUART_init+0xd4>)
 8000dee:	f423 337f 	bic.w	r3, r3, #261120	; 0x3fc00
 8000df2:	6013      	str	r3, [r2, #0]
			| GPIO_MODER_MODE8); //clear bits
	GPIOG->MODER |= (GPIO_MODER_MODE5_1 | GPIO_MODER_MODE6_1
 8000df4:	4b27      	ldr	r3, [pc, #156]	; (8000e94 <LPUART_init+0xd4>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a26      	ldr	r2, [pc, #152]	; (8000e94 <LPUART_init+0xd4>)
 8000dfa:	f443 332a 	orr.w	r3, r3, #174080	; 0x2a800
 8000dfe:	6013      	str	r3, [r2, #0]
			| GPIO_MODER_MODE7_1 | GPIO_MODER_MODE8_1); //set bits AF mode
	GPIOG->AFR[0] &= ~((0x000F << GPIO_AFRL_AFSEL5_Pos)
 8000e00:	4b24      	ldr	r3, [pc, #144]	; (8000e94 <LPUART_init+0xd4>)
 8000e02:	6a1b      	ldr	r3, [r3, #32]
 8000e04:	4a23      	ldr	r2, [pc, #140]	; (8000e94 <LPUART_init+0xd4>)
 8000e06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000e0a:	6213      	str	r3, [r2, #32]
			| (0x000F << GPIO_AFRL_AFSEL6_Pos)
			| (0x000F << GPIO_AFRL_AFSEL7_Pos));
	GPIOG->AFR[1] &= ~(0x000F << GPIO_AFRH_AFSEL8_Pos); //clear AF
 8000e0c:	4b21      	ldr	r3, [pc, #132]	; (8000e94 <LPUART_init+0xd4>)
 8000e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e10:	4a20      	ldr	r2, [pc, #128]	; (8000e94 <LPUART_init+0xd4>)
 8000e12:	f023 030f 	bic.w	r3, r3, #15
 8000e16:	6253      	str	r3, [r2, #36]	; 0x24

	GPIOG->AFR[0] |= ((0x0008 << GPIO_AFRL_AFSEL5_Pos)
 8000e18:	4b1e      	ldr	r3, [pc, #120]	; (8000e94 <LPUART_init+0xd4>)
 8000e1a:	6a1b      	ldr	r3, [r3, #32]
 8000e1c:	4a1d      	ldr	r2, [pc, #116]	; (8000e94 <LPUART_init+0xd4>)
 8000e1e:	f043 4308 	orr.w	r3, r3, #2281701376	; 0x88000000
 8000e22:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e26:	6213      	str	r3, [r2, #32]
			| (0x0008 << GPIO_AFRL_AFSEL6_Pos)
			| (0x0008 << GPIO_AFRL_AFSEL7_Pos));	//set bits AF 8

	GPIOG->AFR[1] |= (0x0008 << GPIO_AFRH_AFSEL8_Pos);
 8000e28:	4b1a      	ldr	r3, [pc, #104]	; (8000e94 <LPUART_init+0xd4>)
 8000e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e2c:	4a19      	ldr	r2, [pc, #100]	; (8000e94 <LPUART_init+0xd4>)
 8000e2e:	f043 0308 	orr.w	r3, r3, #8
 8000e32:	6253      	str	r3, [r2, #36]	; 0x24
	/* USER: configure GPIOG registers MODER/PUPDR/OTYPER/OSPEEDR then
	 select AF mode and specify which function with AFR[0] and AFR[1] */
	LPUART1->CR1 &= ~(USART_CR1_M1 | USART_CR1_M0); // 8-bit data
 8000e34:	4b18      	ldr	r3, [pc, #96]	; (8000e98 <LPUART_init+0xd8>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a17      	ldr	r2, [pc, #92]	; (8000e98 <LPUART_init+0xd8>)
 8000e3a:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 8000e3e:	6013      	str	r3, [r2, #0]
	LPUART1->CR1 |= USART_CR1_UE;                   // enable LPUART1
 8000e40:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <LPUART_init+0xd8>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a14      	ldr	r2, [pc, #80]	; (8000e98 <LPUART_init+0xd8>)
 8000e46:	f043 0301 	orr.w	r3, r3, #1
 8000e4a:	6013      	str	r3, [r2, #0]
	LPUART1->CR1 |= (USART_CR1_TE | USART_CR1_RE);  // enable xmit & recv
 8000e4c:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <LPUART_init+0xd8>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a11      	ldr	r2, [pc, #68]	; (8000e98 <LPUART_init+0xd8>)
 8000e52:	f043 030c 	orr.w	r3, r3, #12
 8000e56:	6013      	str	r3, [r2, #0]
	LPUART1->CR1 |= USART_CR1_RXNEIE;        // enable LPUART1 recv interrupt
 8000e58:	4b0f      	ldr	r3, [pc, #60]	; (8000e98 <LPUART_init+0xd8>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a0e      	ldr	r2, [pc, #56]	; (8000e98 <LPUART_init+0xd8>)
 8000e5e:	f043 0320 	orr.w	r3, r3, #32
 8000e62:	6013      	str	r3, [r2, #0]
	LPUART1->ISR &= ~(USART_ISR_RXNE);       // clear Recv-Not-Empty flag
 8000e64:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <LPUART_init+0xd8>)
 8000e66:	69db      	ldr	r3, [r3, #28]
 8000e68:	4a0b      	ldr	r2, [pc, #44]	; (8000e98 <LPUART_init+0xd8>)
 8000e6a:	f023 0320 	bic.w	r3, r3, #32
 8000e6e:	61d3      	str	r3, [r2, #28]
	LPUART1->BRR = 106666;
 8000e70:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <LPUART_init+0xd8>)
 8000e72:	4a0a      	ldr	r2, [pc, #40]	; (8000e9c <LPUART_init+0xdc>)
 8000e74:	60da      	str	r2, [r3, #12]
	NVIC->ISER[2] = (1 << (LPUART1_IRQn & 0x1F));   // enable LPUART1 ISR
 8000e76:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <LPUART_init+0xe0>)
 8000e78:	2240      	movs	r2, #64	; 0x40
 8000e7a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8000e7c:	b662      	cpsie	i
}
 8000e7e:	bf00      	nop
	__enable_irq();                          // enable global interrupts
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	40007000 	.word	0x40007000
 8000e90:	40021000 	.word	0x40021000
 8000e94:	48001800 	.word	0x48001800
 8000e98:	40008000 	.word	0x40008000
 8000e9c:	0001a0aa 	.word	0x0001a0aa
 8000ea0:	e000e100 	.word	0xe000e100

08000ea4 <USART_init>:

void USART_init() {
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN; // enable GPIOA clock
 8000ea8:	4b2c      	ldr	r3, [pc, #176]	; (8000f5c <USART_init+0xb8>)
 8000eaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eac:	4a2b      	ldr	r2, [pc, #172]	; (8000f5c <USART_init+0xb8>)
 8000eae:	f043 0301 	orr.w	r3, r3, #1
 8000eb2:	64d3      	str	r3, [r2, #76]	; 0x4c
    RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN; // enable USART2 clock
 8000eb4:	4b29      	ldr	r3, [pc, #164]	; (8000f5c <USART_init+0xb8>)
 8000eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb8:	4a28      	ldr	r2, [pc, #160]	; (8000f5c <USART_init+0xb8>)
 8000eba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ebe:	6593      	str	r3, [r2, #88]	; 0x58

    GPIOA->MODER &= ~(GPIO_MODER_MODE0 |GPIO_MODER_MODE1 |GPIO_MODER_MODE2 | GPIO_MODER_MODE3); //clear bits
 8000ec0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000eca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000ece:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (GPIO_MODER_MODE0_1 |GPIO_MODER_MODE1_1 |GPIO_MODER_MODE2_1 | GPIO_MODER_MODE3_1);
 8000ed0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000eda:	f043 03aa 	orr.w	r3, r3, #170	; 0xaa
 8000ede:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] &= ~((0x000F << GPIO_AFRL_AFSEL0_Pos) |(0x000F << GPIO_AFRL_AFSEL1_Pos) |(0x000F << GPIO_AFRL_AFSEL2_Pos) | (0x000F << GPIO_AFRL_AFSEL3_Pos));
 8000ee0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ee4:	6a1b      	ldr	r3, [r3, #32]
 8000ee6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000eea:	0c1b      	lsrs	r3, r3, #16
 8000eec:	041b      	lsls	r3, r3, #16
 8000eee:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= ((0x0007 << GPIO_AFRL_AFSEL0_Pos) |(0x0007 << GPIO_AFRL_AFSEL1_Pos) |(0x0007 << GPIO_AFRL_AFSEL2_Pos) | (0x0007 << GPIO_AFRL_AFSEL3_Pos));
 8000ef0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ef4:	6a1b      	ldr	r3, [r3, #32]
 8000ef6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000efa:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8000efe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8000f02:	6213      	str	r3, [r2, #32]

    USART2->CR1 &= ~(USART_CR1_M1 | USART_CR1_M0); // 8-bit data
 8000f04:	4b16      	ldr	r3, [pc, #88]	; (8000f60 <USART_init+0xbc>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a15      	ldr	r2, [pc, #84]	; (8000f60 <USART_init+0xbc>)
 8000f0a:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 8000f0e:	6013      	str	r3, [r2, #0]
    USART2->CR1 |= USART_CR1_UE;                   // enable USART2
 8000f10:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <USART_init+0xbc>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a12      	ldr	r2, [pc, #72]	; (8000f60 <USART_init+0xbc>)
 8000f16:	f043 0301 	orr.w	r3, r3, #1
 8000f1a:	6013      	str	r3, [r2, #0]
    USART2->CR1 |= (USART_CR1_TE | USART_CR1_RE);  // enable xmit & recv
 8000f1c:	4b10      	ldr	r3, [pc, #64]	; (8000f60 <USART_init+0xbc>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a0f      	ldr	r2, [pc, #60]	; (8000f60 <USART_init+0xbc>)
 8000f22:	f043 030c 	orr.w	r3, r3, #12
 8000f26:	6013      	str	r3, [r2, #0]
    USART2->CR1 |= USART_CR1_RXNEIE;        // enable USART2 recv interrupt
 8000f28:	4b0d      	ldr	r3, [pc, #52]	; (8000f60 <USART_init+0xbc>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a0c      	ldr	r2, [pc, #48]	; (8000f60 <USART_init+0xbc>)
 8000f2e:	f043 0320 	orr.w	r3, r3, #32
 8000f32:	6013      	str	r3, [r2, #0]
    USART2->ISR &= ~(USART_ISR_RXNE);       // clear Recv-Not-Empty flag
 8000f34:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <USART_init+0xbc>)
 8000f36:	69db      	ldr	r3, [r3, #28]
 8000f38:	4a09      	ldr	r2, [pc, #36]	; (8000f60 <USART_init+0xbc>)
 8000f3a:	f023 0320 	bic.w	r3, r3, #32
 8000f3e:	61d3      	str	r3, [r2, #28]
    USART2->BRR = 69;                   // Set the correct baud rate
 8000f40:	4b07      	ldr	r3, [pc, #28]	; (8000f60 <USART_init+0xbc>)
 8000f42:	2245      	movs	r2, #69	; 0x45
 8000f44:	60da      	str	r2, [r3, #12]
    NVIC->ISER[1] = (1 << (USART2_IRQn & 0x1F));   // enable USART2 ISR
 8000f46:	4b07      	ldr	r3, [pc, #28]	; (8000f64 <USART_init+0xc0>)
 8000f48:	2240      	movs	r2, #64	; 0x40
 8000f4a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 8000f4c:	b662      	cpsie	i
}
 8000f4e:	bf00      	nop
    __enable_irq();                          // enable global interrupts
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	40004400 	.word	0x40004400
 8000f64:	e000e100 	.word	0xe000e100

08000f68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fa0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f6c:	f7ff ff16 	bl	8000d9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f70:	480c      	ldr	r0, [pc, #48]	; (8000fa4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f72:	490d      	ldr	r1, [pc, #52]	; (8000fa8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f74:	4a0d      	ldr	r2, [pc, #52]	; (8000fac <LoopForever+0xe>)
  movs r3, #0
 8000f76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f78:	e002      	b.n	8000f80 <LoopCopyDataInit>

08000f7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f7e:	3304      	adds	r3, #4

08000f80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f84:	d3f9      	bcc.n	8000f7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f86:	4a0a      	ldr	r2, [pc, #40]	; (8000fb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f88:	4c0a      	ldr	r4, [pc, #40]	; (8000fb4 <LoopForever+0x16>)
  movs r3, #0
 8000f8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f8c:	e001      	b.n	8000f92 <LoopFillZerobss>

08000f8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f90:	3204      	adds	r2, #4

08000f92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f94:	d3fb      	bcc.n	8000f8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f96:	f000 ffd5 	bl	8001f44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f9a:	f7ff fd89 	bl	8000ab0 <main>

08000f9e <LoopForever>:

LoopForever:
    b LoopForever
 8000f9e:	e7fe      	b.n	8000f9e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fa0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000fa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000fac:	08002128 	.word	0x08002128
  ldr r2, =_sbss
 8000fb0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000fb4:	20000164 	.word	0x20000164

08000fb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fb8:	e7fe      	b.n	8000fb8 <ADC1_2_IRQHandler>

08000fba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc4:	2003      	movs	r0, #3
 8000fc6:	f000 f91f 	bl	8001208 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fca:	200f      	movs	r0, #15
 8000fcc:	f000 f80e 	bl	8000fec <HAL_InitTick>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d002      	beq.n	8000fdc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	71fb      	strb	r3, [r7, #7]
 8000fda:	e001      	b.n	8000fe0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fdc:	f7ff fe90 	bl	8000d00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
	...

08000fec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ff8:	4b17      	ldr	r3, [pc, #92]	; (8001058 <HAL_InitTick+0x6c>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d023      	beq.n	8001048 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001000:	4b16      	ldr	r3, [pc, #88]	; (800105c <HAL_InitTick+0x70>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	4b14      	ldr	r3, [pc, #80]	; (8001058 <HAL_InitTick+0x6c>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	4619      	mov	r1, r3
 800100a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800100e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001012:	fbb2 f3f3 	udiv	r3, r2, r3
 8001016:	4618      	mov	r0, r3
 8001018:	f000 f91d 	bl	8001256 <HAL_SYSTICK_Config>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d10f      	bne.n	8001042 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2b0f      	cmp	r3, #15
 8001026:	d809      	bhi.n	800103c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001028:	2200      	movs	r2, #0
 800102a:	6879      	ldr	r1, [r7, #4]
 800102c:	f04f 30ff 	mov.w	r0, #4294967295
 8001030:	f000 f8f5 	bl	800121e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001034:	4a0a      	ldr	r2, [pc, #40]	; (8001060 <HAL_InitTick+0x74>)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6013      	str	r3, [r2, #0]
 800103a:	e007      	b.n	800104c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	73fb      	strb	r3, [r7, #15]
 8001040:	e004      	b.n	800104c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	73fb      	strb	r3, [r7, #15]
 8001046:	e001      	b.n	800104c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800104c:	7bfb      	ldrb	r3, [r7, #15]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000010 	.word	0x20000010
 800105c:	20000008 	.word	0x20000008
 8001060:	2000000c 	.word	0x2000000c

08001064 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <HAL_IncTick+0x20>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	461a      	mov	r2, r3
 800106e:	4b06      	ldr	r3, [pc, #24]	; (8001088 <HAL_IncTick+0x24>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4413      	add	r3, r2
 8001074:	4a04      	ldr	r2, [pc, #16]	; (8001088 <HAL_IncTick+0x24>)
 8001076:	6013      	str	r3, [r2, #0]
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	20000010 	.word	0x20000010
 8001088:	20000160 	.word	0x20000160

0800108c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  return uwTick;
 8001090:	4b03      	ldr	r3, [pc, #12]	; (80010a0 <HAL_GetTick+0x14>)
 8001092:	681b      	ldr	r3, [r3, #0]
}
 8001094:	4618      	mov	r0, r3
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	20000160 	.word	0x20000160

080010a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <__NVIC_SetPriorityGrouping+0x44>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ba:	68ba      	ldr	r2, [r7, #8]
 80010bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010c0:	4013      	ands	r3, r2
 80010c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010d6:	4a04      	ldr	r2, [pc, #16]	; (80010e8 <__NVIC_SetPriorityGrouping+0x44>)
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	60d3      	str	r3, [r2, #12]
}
 80010dc:	bf00      	nop
 80010de:	3714      	adds	r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f0:	4b04      	ldr	r3, [pc, #16]	; (8001104 <__NVIC_GetPriorityGrouping+0x18>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	0a1b      	lsrs	r3, r3, #8
 80010f6:	f003 0307 	and.w	r3, r3, #7
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	6039      	str	r1, [r7, #0]
 8001112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001118:	2b00      	cmp	r3, #0
 800111a:	db0a      	blt.n	8001132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	b2da      	uxtb	r2, r3
 8001120:	490c      	ldr	r1, [pc, #48]	; (8001154 <__NVIC_SetPriority+0x4c>)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	0112      	lsls	r2, r2, #4
 8001128:	b2d2      	uxtb	r2, r2
 800112a:	440b      	add	r3, r1
 800112c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001130:	e00a      	b.n	8001148 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	b2da      	uxtb	r2, r3
 8001136:	4908      	ldr	r1, [pc, #32]	; (8001158 <__NVIC_SetPriority+0x50>)
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	f003 030f 	and.w	r3, r3, #15
 800113e:	3b04      	subs	r3, #4
 8001140:	0112      	lsls	r2, r2, #4
 8001142:	b2d2      	uxtb	r2, r2
 8001144:	440b      	add	r3, r1
 8001146:	761a      	strb	r2, [r3, #24]
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	e000e100 	.word	0xe000e100
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800115c:	b480      	push	{r7}
 800115e:	b089      	sub	sp, #36	; 0x24
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	f1c3 0307 	rsb	r3, r3, #7
 8001176:	2b04      	cmp	r3, #4
 8001178:	bf28      	it	cs
 800117a:	2304      	movcs	r3, #4
 800117c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	3304      	adds	r3, #4
 8001182:	2b06      	cmp	r3, #6
 8001184:	d902      	bls.n	800118c <NVIC_EncodePriority+0x30>
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3b03      	subs	r3, #3
 800118a:	e000      	b.n	800118e <NVIC_EncodePriority+0x32>
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001190:	f04f 32ff 	mov.w	r2, #4294967295
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43da      	mvns	r2, r3
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	401a      	ands	r2, r3
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a4:	f04f 31ff 	mov.w	r1, #4294967295
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	fa01 f303 	lsl.w	r3, r1, r3
 80011ae:	43d9      	mvns	r1, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b4:	4313      	orrs	r3, r2
         );
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3724      	adds	r7, #36	; 0x24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
	...

080011c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3b01      	subs	r3, #1
 80011d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011d4:	d301      	bcc.n	80011da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011d6:	2301      	movs	r3, #1
 80011d8:	e00f      	b.n	80011fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011da:	4a0a      	ldr	r2, [pc, #40]	; (8001204 <SysTick_Config+0x40>)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3b01      	subs	r3, #1
 80011e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011e2:	210f      	movs	r1, #15
 80011e4:	f04f 30ff 	mov.w	r0, #4294967295
 80011e8:	f7ff ff8e 	bl	8001108 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011ec:	4b05      	ldr	r3, [pc, #20]	; (8001204 <SysTick_Config+0x40>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011f2:	4b04      	ldr	r3, [pc, #16]	; (8001204 <SysTick_Config+0x40>)
 80011f4:	2207      	movs	r2, #7
 80011f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	e000e010 	.word	0xe000e010

08001208 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff ff47 	bl	80010a4 <__NVIC_SetPriorityGrouping>
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b086      	sub	sp, #24
 8001222:	af00      	add	r7, sp, #0
 8001224:	4603      	mov	r3, r0
 8001226:	60b9      	str	r1, [r7, #8]
 8001228:	607a      	str	r2, [r7, #4]
 800122a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001230:	f7ff ff5c 	bl	80010ec <__NVIC_GetPriorityGrouping>
 8001234:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	68b9      	ldr	r1, [r7, #8]
 800123a:	6978      	ldr	r0, [r7, #20]
 800123c:	f7ff ff8e 	bl	800115c <NVIC_EncodePriority>
 8001240:	4602      	mov	r2, r0
 8001242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001246:	4611      	mov	r1, r2
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff ff5d 	bl	8001108 <__NVIC_SetPriority>
}
 800124e:	bf00      	nop
 8001250:	3718      	adds	r7, #24
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff ffb0 	bl	80011c4 <SysTick_Config>
 8001264:	4603      	mov	r3, r0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
	...

08001270 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001274:	4b04      	ldr	r3, [pc, #16]	; (8001288 <HAL_PWREx_GetVoltageRange+0x18>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800127c:	4618      	mov	r0, r3
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	40007000 	.word	0x40007000

0800128c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800129a:	d130      	bne.n	80012fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800129c:	4b23      	ldr	r3, [pc, #140]	; (800132c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012a8:	d038      	beq.n	800131c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012aa:	4b20      	ldr	r3, [pc, #128]	; (800132c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012b2:	4a1e      	ldr	r2, [pc, #120]	; (800132c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012ba:	4b1d      	ldr	r3, [pc, #116]	; (8001330 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2232      	movs	r2, #50	; 0x32
 80012c0:	fb02 f303 	mul.w	r3, r2, r3
 80012c4:	4a1b      	ldr	r2, [pc, #108]	; (8001334 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80012c6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ca:	0c9b      	lsrs	r3, r3, #18
 80012cc:	3301      	adds	r3, #1
 80012ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012d0:	e002      	b.n	80012d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	3b01      	subs	r3, #1
 80012d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012d8:	4b14      	ldr	r3, [pc, #80]	; (800132c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012da:	695b      	ldr	r3, [r3, #20]
 80012dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012e4:	d102      	bne.n	80012ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d1f2      	bne.n	80012d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012ec:	4b0f      	ldr	r3, [pc, #60]	; (800132c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ee:	695b      	ldr	r3, [r3, #20]
 80012f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012f8:	d110      	bne.n	800131c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e00f      	b.n	800131e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80012fe:	4b0b      	ldr	r3, [pc, #44]	; (800132c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001306:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800130a:	d007      	beq.n	800131c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800130c:	4b07      	ldr	r3, [pc, #28]	; (800132c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001314:	4a05      	ldr	r2, [pc, #20]	; (800132c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001316:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800131a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3714      	adds	r7, #20
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	40007000 	.word	0x40007000
 8001330:	20000008 	.word	0x20000008
 8001334:	431bde83 	.word	0x431bde83

08001338 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b088      	sub	sp, #32
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d102      	bne.n	800134c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	f000 bc08 	b.w	8001b5c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800134c:	4b96      	ldr	r3, [pc, #600]	; (80015a8 <HAL_RCC_OscConfig+0x270>)
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	f003 030c 	and.w	r3, r3, #12
 8001354:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001356:	4b94      	ldr	r3, [pc, #592]	; (80015a8 <HAL_RCC_OscConfig+0x270>)
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	f003 0303 	and.w	r3, r3, #3
 800135e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0310 	and.w	r3, r3, #16
 8001368:	2b00      	cmp	r3, #0
 800136a:	f000 80e4 	beq.w	8001536 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d007      	beq.n	8001384 <HAL_RCC_OscConfig+0x4c>
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	2b0c      	cmp	r3, #12
 8001378:	f040 808b 	bne.w	8001492 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	2b01      	cmp	r3, #1
 8001380:	f040 8087 	bne.w	8001492 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001384:	4b88      	ldr	r3, [pc, #544]	; (80015a8 <HAL_RCC_OscConfig+0x270>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0302 	and.w	r3, r3, #2
 800138c:	2b00      	cmp	r3, #0
 800138e:	d005      	beq.n	800139c <HAL_RCC_OscConfig+0x64>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d101      	bne.n	800139c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e3df      	b.n	8001b5c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6a1a      	ldr	r2, [r3, #32]
 80013a0:	4b81      	ldr	r3, [pc, #516]	; (80015a8 <HAL_RCC_OscConfig+0x270>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0308 	and.w	r3, r3, #8
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d004      	beq.n	80013b6 <HAL_RCC_OscConfig+0x7e>
 80013ac:	4b7e      	ldr	r3, [pc, #504]	; (80015a8 <HAL_RCC_OscConfig+0x270>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013b4:	e005      	b.n	80013c2 <HAL_RCC_OscConfig+0x8a>
 80013b6:	4b7c      	ldr	r3, [pc, #496]	; (80015a8 <HAL_RCC_OscConfig+0x270>)
 80013b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013bc:	091b      	lsrs	r3, r3, #4
 80013be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d223      	bcs.n	800140e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6a1b      	ldr	r3, [r3, #32]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f000 fd5a 	bl	8001e84 <RCC_SetFlashLatencyFromMSIRange>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e3c0      	b.n	8001b5c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013da:	4b73      	ldr	r3, [pc, #460]	; (80015a8 <HAL_RCC_OscConfig+0x270>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a72      	ldr	r2, [pc, #456]	; (80015a8 <HAL_RCC_OscConfig+0x270>)
 80013e0:	f043 0308 	orr.w	r3, r3, #8
 80013e4:	6013      	str	r3, [r2, #0]
 80013e6:	4b70      	ldr	r3, [pc, #448]	; (80015a8 <HAL_RCC_OscConfig+0x270>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6a1b      	ldr	r3, [r3, #32]
 80013f2:	496d      	ldr	r1, [pc, #436]	; (80015a8 <HAL_RCC_OscConfig+0x270>)
 80013f4:	4313      	orrs	r3, r2
 80013f6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013f8:	4b6b      	ldr	r3, [pc, #428]	; (80015a8 <HAL_RCC_OscConfig+0x270>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	69db      	ldr	r3, [r3, #28]
 8001404:	021b      	lsls	r3, r3, #8
 8001406:	4968      	ldr	r1, [pc, #416]	; (80015a8 <HAL_RCC_OscConfig+0x270>)
 8001408:	4313      	orrs	r3, r2
 800140a:	604b      	str	r3, [r1, #4]
 800140c:	e025      	b.n	800145a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800140e:	4b66      	ldr	r3, [pc, #408]	; (80015a8 <HAL_RCC_OscConfig+0x270>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a65      	ldr	r2, [pc, #404]	; (80015a8 <HAL_RCC_OscConfig+0x270>)
 8001414:	f043 0308 	orr.w	r3, r3, #8
 8001418:	6013      	str	r3, [r2, #0]
 800141a:	4b63      	ldr	r3, [pc, #396]	; (80015a8 <HAL_RCC_OscConfig+0x270>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6a1b      	ldr	r3, [r3, #32]
 8001426:	4960      	ldr	r1, [pc, #384]	; (80015a8 <HAL_RCC_OscConfig+0x270>)
 8001428:	4313      	orrs	r3, r2
 800142a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800142c:	4b5e      	ldr	r3, [pc, #376]	; (80015a8 <HAL_RCC_OscConfig+0x270>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	69db      	ldr	r3, [r3, #28]
 8001438:	021b      	lsls	r3, r3, #8
 800143a:	495b      	ldr	r1, [pc, #364]	; (80015a8 <HAL_RCC_OscConfig+0x270>)
 800143c:	4313      	orrs	r3, r2
 800143e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d109      	bne.n	800145a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a1b      	ldr	r3, [r3, #32]
 800144a:	4618      	mov	r0, r3
 800144c:	f000 fd1a 	bl	8001e84 <RCC_SetFlashLatencyFromMSIRange>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e380      	b.n	8001b5c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800145a:	f000 fc87 	bl	8001d6c <HAL_RCC_GetSysClockFreq>
 800145e:	4602      	mov	r2, r0
 8001460:	4b51      	ldr	r3, [pc, #324]	; (80015a8 <HAL_RCC_OscConfig+0x270>)
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	091b      	lsrs	r3, r3, #4
 8001466:	f003 030f 	and.w	r3, r3, #15
 800146a:	4950      	ldr	r1, [pc, #320]	; (80015ac <HAL_RCC_OscConfig+0x274>)
 800146c:	5ccb      	ldrb	r3, [r1, r3]
 800146e:	f003 031f 	and.w	r3, r3, #31
 8001472:	fa22 f303 	lsr.w	r3, r2, r3
 8001476:	4a4e      	ldr	r2, [pc, #312]	; (80015b0 <HAL_RCC_OscConfig+0x278>)
 8001478:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800147a:	4b4e      	ldr	r3, [pc, #312]	; (80015b4 <HAL_RCC_OscConfig+0x27c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff fdb4 	bl	8000fec <HAL_InitTick>
 8001484:	4603      	mov	r3, r0
 8001486:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001488:	7bfb      	ldrb	r3, [r7, #15]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d052      	beq.n	8001534 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800148e:	7bfb      	ldrb	r3, [r7, #15]
 8001490:	e364      	b.n	8001b5c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d032      	beq.n	8001500 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800149a:	4b43      	ldr	r3, [pc, #268]	; (80015a8 <HAL_RCC_OscConfig+0x270>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a42      	ldr	r2, [pc, #264]	; (80015a8 <HAL_RCC_OscConfig+0x270>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014a6:	f7ff fdf1 	bl	800108c <HAL_GetTick>
 80014aa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014ac:	e008      	b.n	80014c0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014ae:	f7ff fded 	bl	800108c <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e34d      	b.n	8001b5c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014c0:	4b39      	ldr	r3, [pc, #228]	; (80015a8 <HAL_RCC_OscConfig+0x270>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0302 	and.w	r3, r3, #2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d0f0      	beq.n	80014ae <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014cc:	4b36      	ldr	r3, [pc, #216]	; (80015a8 <HAL_RCC_OscConfig+0x270>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a35      	ldr	r2, [pc, #212]	; (80015a8 <HAL_RCC_OscConfig+0x270>)
 80014d2:	f043 0308 	orr.w	r3, r3, #8
 80014d6:	6013      	str	r3, [r2, #0]
 80014d8:	4b33      	ldr	r3, [pc, #204]	; (80015a8 <HAL_RCC_OscConfig+0x270>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a1b      	ldr	r3, [r3, #32]
 80014e4:	4930      	ldr	r1, [pc, #192]	; (80015a8 <HAL_RCC_OscConfig+0x270>)
 80014e6:	4313      	orrs	r3, r2
 80014e8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014ea:	4b2f      	ldr	r3, [pc, #188]	; (80015a8 <HAL_RCC_OscConfig+0x270>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	69db      	ldr	r3, [r3, #28]
 80014f6:	021b      	lsls	r3, r3, #8
 80014f8:	492b      	ldr	r1, [pc, #172]	; (80015a8 <HAL_RCC_OscConfig+0x270>)
 80014fa:	4313      	orrs	r3, r2
 80014fc:	604b      	str	r3, [r1, #4]
 80014fe:	e01a      	b.n	8001536 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001500:	4b29      	ldr	r3, [pc, #164]	; (80015a8 <HAL_RCC_OscConfig+0x270>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a28      	ldr	r2, [pc, #160]	; (80015a8 <HAL_RCC_OscConfig+0x270>)
 8001506:	f023 0301 	bic.w	r3, r3, #1
 800150a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800150c:	f7ff fdbe 	bl	800108c <HAL_GetTick>
 8001510:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001512:	e008      	b.n	8001526 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001514:	f7ff fdba 	bl	800108c <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b02      	cmp	r3, #2
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e31a      	b.n	8001b5c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001526:	4b20      	ldr	r3, [pc, #128]	; (80015a8 <HAL_RCC_OscConfig+0x270>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1f0      	bne.n	8001514 <HAL_RCC_OscConfig+0x1dc>
 8001532:	e000      	b.n	8001536 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001534:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	2b00      	cmp	r3, #0
 8001540:	d073      	beq.n	800162a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	2b08      	cmp	r3, #8
 8001546:	d005      	beq.n	8001554 <HAL_RCC_OscConfig+0x21c>
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	2b0c      	cmp	r3, #12
 800154c:	d10e      	bne.n	800156c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	2b03      	cmp	r3, #3
 8001552:	d10b      	bne.n	800156c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001554:	4b14      	ldr	r3, [pc, #80]	; (80015a8 <HAL_RCC_OscConfig+0x270>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d063      	beq.n	8001628 <HAL_RCC_OscConfig+0x2f0>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d15f      	bne.n	8001628 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e2f7      	b.n	8001b5c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001574:	d106      	bne.n	8001584 <HAL_RCC_OscConfig+0x24c>
 8001576:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <HAL_RCC_OscConfig+0x270>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a0b      	ldr	r2, [pc, #44]	; (80015a8 <HAL_RCC_OscConfig+0x270>)
 800157c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001580:	6013      	str	r3, [r2, #0]
 8001582:	e025      	b.n	80015d0 <HAL_RCC_OscConfig+0x298>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800158c:	d114      	bne.n	80015b8 <HAL_RCC_OscConfig+0x280>
 800158e:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <HAL_RCC_OscConfig+0x270>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a05      	ldr	r2, [pc, #20]	; (80015a8 <HAL_RCC_OscConfig+0x270>)
 8001594:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001598:	6013      	str	r3, [r2, #0]
 800159a:	4b03      	ldr	r3, [pc, #12]	; (80015a8 <HAL_RCC_OscConfig+0x270>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a02      	ldr	r2, [pc, #8]	; (80015a8 <HAL_RCC_OscConfig+0x270>)
 80015a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a4:	6013      	str	r3, [r2, #0]
 80015a6:	e013      	b.n	80015d0 <HAL_RCC_OscConfig+0x298>
 80015a8:	40021000 	.word	0x40021000
 80015ac:	080020e0 	.word	0x080020e0
 80015b0:	20000008 	.word	0x20000008
 80015b4:	2000000c 	.word	0x2000000c
 80015b8:	4ba0      	ldr	r3, [pc, #640]	; (800183c <HAL_RCC_OscConfig+0x504>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a9f      	ldr	r2, [pc, #636]	; (800183c <HAL_RCC_OscConfig+0x504>)
 80015be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015c2:	6013      	str	r3, [r2, #0]
 80015c4:	4b9d      	ldr	r3, [pc, #628]	; (800183c <HAL_RCC_OscConfig+0x504>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a9c      	ldr	r2, [pc, #624]	; (800183c <HAL_RCC_OscConfig+0x504>)
 80015ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d013      	beq.n	8001600 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d8:	f7ff fd58 	bl	800108c <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015e0:	f7ff fd54 	bl	800108c <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b64      	cmp	r3, #100	; 0x64
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e2b4      	b.n	8001b5c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015f2:	4b92      	ldr	r3, [pc, #584]	; (800183c <HAL_RCC_OscConfig+0x504>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d0f0      	beq.n	80015e0 <HAL_RCC_OscConfig+0x2a8>
 80015fe:	e014      	b.n	800162a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001600:	f7ff fd44 	bl	800108c <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001608:	f7ff fd40 	bl	800108c <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b64      	cmp	r3, #100	; 0x64
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e2a0      	b.n	8001b5c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800161a:	4b88      	ldr	r3, [pc, #544]	; (800183c <HAL_RCC_OscConfig+0x504>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d1f0      	bne.n	8001608 <HAL_RCC_OscConfig+0x2d0>
 8001626:	e000      	b.n	800162a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001628:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d060      	beq.n	80016f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	2b04      	cmp	r3, #4
 800163a:	d005      	beq.n	8001648 <HAL_RCC_OscConfig+0x310>
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	2b0c      	cmp	r3, #12
 8001640:	d119      	bne.n	8001676 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	2b02      	cmp	r3, #2
 8001646:	d116      	bne.n	8001676 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001648:	4b7c      	ldr	r3, [pc, #496]	; (800183c <HAL_RCC_OscConfig+0x504>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001650:	2b00      	cmp	r3, #0
 8001652:	d005      	beq.n	8001660 <HAL_RCC_OscConfig+0x328>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d101      	bne.n	8001660 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e27d      	b.n	8001b5c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001660:	4b76      	ldr	r3, [pc, #472]	; (800183c <HAL_RCC_OscConfig+0x504>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	691b      	ldr	r3, [r3, #16]
 800166c:	061b      	lsls	r3, r3, #24
 800166e:	4973      	ldr	r1, [pc, #460]	; (800183c <HAL_RCC_OscConfig+0x504>)
 8001670:	4313      	orrs	r3, r2
 8001672:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001674:	e040      	b.n	80016f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d023      	beq.n	80016c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800167e:	4b6f      	ldr	r3, [pc, #444]	; (800183c <HAL_RCC_OscConfig+0x504>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a6e      	ldr	r2, [pc, #440]	; (800183c <HAL_RCC_OscConfig+0x504>)
 8001684:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001688:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168a:	f7ff fcff 	bl	800108c <HAL_GetTick>
 800168e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001690:	e008      	b.n	80016a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001692:	f7ff fcfb 	bl	800108c <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e25b      	b.n	8001b5c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016a4:	4b65      	ldr	r3, [pc, #404]	; (800183c <HAL_RCC_OscConfig+0x504>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d0f0      	beq.n	8001692 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b0:	4b62      	ldr	r3, [pc, #392]	; (800183c <HAL_RCC_OscConfig+0x504>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	691b      	ldr	r3, [r3, #16]
 80016bc:	061b      	lsls	r3, r3, #24
 80016be:	495f      	ldr	r1, [pc, #380]	; (800183c <HAL_RCC_OscConfig+0x504>)
 80016c0:	4313      	orrs	r3, r2
 80016c2:	604b      	str	r3, [r1, #4]
 80016c4:	e018      	b.n	80016f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016c6:	4b5d      	ldr	r3, [pc, #372]	; (800183c <HAL_RCC_OscConfig+0x504>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a5c      	ldr	r2, [pc, #368]	; (800183c <HAL_RCC_OscConfig+0x504>)
 80016cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d2:	f7ff fcdb 	bl	800108c <HAL_GetTick>
 80016d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016d8:	e008      	b.n	80016ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016da:	f7ff fcd7 	bl	800108c <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e237      	b.n	8001b5c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016ec:	4b53      	ldr	r3, [pc, #332]	; (800183c <HAL_RCC_OscConfig+0x504>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d1f0      	bne.n	80016da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0308 	and.w	r3, r3, #8
 8001700:	2b00      	cmp	r3, #0
 8001702:	d03c      	beq.n	800177e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	695b      	ldr	r3, [r3, #20]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d01c      	beq.n	8001746 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800170c:	4b4b      	ldr	r3, [pc, #300]	; (800183c <HAL_RCC_OscConfig+0x504>)
 800170e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001712:	4a4a      	ldr	r2, [pc, #296]	; (800183c <HAL_RCC_OscConfig+0x504>)
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800171c:	f7ff fcb6 	bl	800108c <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001724:	f7ff fcb2 	bl	800108c <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b02      	cmp	r3, #2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e212      	b.n	8001b5c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001736:	4b41      	ldr	r3, [pc, #260]	; (800183c <HAL_RCC_OscConfig+0x504>)
 8001738:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800173c:	f003 0302 	and.w	r3, r3, #2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d0ef      	beq.n	8001724 <HAL_RCC_OscConfig+0x3ec>
 8001744:	e01b      	b.n	800177e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001746:	4b3d      	ldr	r3, [pc, #244]	; (800183c <HAL_RCC_OscConfig+0x504>)
 8001748:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800174c:	4a3b      	ldr	r2, [pc, #236]	; (800183c <HAL_RCC_OscConfig+0x504>)
 800174e:	f023 0301 	bic.w	r3, r3, #1
 8001752:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001756:	f7ff fc99 	bl	800108c <HAL_GetTick>
 800175a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800175c:	e008      	b.n	8001770 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800175e:	f7ff fc95 	bl	800108c <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e1f5      	b.n	8001b5c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001770:	4b32      	ldr	r3, [pc, #200]	; (800183c <HAL_RCC_OscConfig+0x504>)
 8001772:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1ef      	bne.n	800175e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0304 	and.w	r3, r3, #4
 8001786:	2b00      	cmp	r3, #0
 8001788:	f000 80a6 	beq.w	80018d8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800178c:	2300      	movs	r3, #0
 800178e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001790:	4b2a      	ldr	r3, [pc, #168]	; (800183c <HAL_RCC_OscConfig+0x504>)
 8001792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d10d      	bne.n	80017b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800179c:	4b27      	ldr	r3, [pc, #156]	; (800183c <HAL_RCC_OscConfig+0x504>)
 800179e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a0:	4a26      	ldr	r2, [pc, #152]	; (800183c <HAL_RCC_OscConfig+0x504>)
 80017a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a6:	6593      	str	r3, [r2, #88]	; 0x58
 80017a8:	4b24      	ldr	r3, [pc, #144]	; (800183c <HAL_RCC_OscConfig+0x504>)
 80017aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b0:	60bb      	str	r3, [r7, #8]
 80017b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017b4:	2301      	movs	r3, #1
 80017b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017b8:	4b21      	ldr	r3, [pc, #132]	; (8001840 <HAL_RCC_OscConfig+0x508>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d118      	bne.n	80017f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017c4:	4b1e      	ldr	r3, [pc, #120]	; (8001840 <HAL_RCC_OscConfig+0x508>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a1d      	ldr	r2, [pc, #116]	; (8001840 <HAL_RCC_OscConfig+0x508>)
 80017ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017d0:	f7ff fc5c 	bl	800108c <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017d8:	f7ff fc58 	bl	800108c <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e1b8      	b.n	8001b5c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017ea:	4b15      	ldr	r3, [pc, #84]	; (8001840 <HAL_RCC_OscConfig+0x508>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d0f0      	beq.n	80017d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d108      	bne.n	8001810 <HAL_RCC_OscConfig+0x4d8>
 80017fe:	4b0f      	ldr	r3, [pc, #60]	; (800183c <HAL_RCC_OscConfig+0x504>)
 8001800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001804:	4a0d      	ldr	r2, [pc, #52]	; (800183c <HAL_RCC_OscConfig+0x504>)
 8001806:	f043 0301 	orr.w	r3, r3, #1
 800180a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800180e:	e029      	b.n	8001864 <HAL_RCC_OscConfig+0x52c>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	2b05      	cmp	r3, #5
 8001816:	d115      	bne.n	8001844 <HAL_RCC_OscConfig+0x50c>
 8001818:	4b08      	ldr	r3, [pc, #32]	; (800183c <HAL_RCC_OscConfig+0x504>)
 800181a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800181e:	4a07      	ldr	r2, [pc, #28]	; (800183c <HAL_RCC_OscConfig+0x504>)
 8001820:	f043 0304 	orr.w	r3, r3, #4
 8001824:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001828:	4b04      	ldr	r3, [pc, #16]	; (800183c <HAL_RCC_OscConfig+0x504>)
 800182a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800182e:	4a03      	ldr	r2, [pc, #12]	; (800183c <HAL_RCC_OscConfig+0x504>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001838:	e014      	b.n	8001864 <HAL_RCC_OscConfig+0x52c>
 800183a:	bf00      	nop
 800183c:	40021000 	.word	0x40021000
 8001840:	40007000 	.word	0x40007000
 8001844:	4b9d      	ldr	r3, [pc, #628]	; (8001abc <HAL_RCC_OscConfig+0x784>)
 8001846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800184a:	4a9c      	ldr	r2, [pc, #624]	; (8001abc <HAL_RCC_OscConfig+0x784>)
 800184c:	f023 0301 	bic.w	r3, r3, #1
 8001850:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001854:	4b99      	ldr	r3, [pc, #612]	; (8001abc <HAL_RCC_OscConfig+0x784>)
 8001856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800185a:	4a98      	ldr	r2, [pc, #608]	; (8001abc <HAL_RCC_OscConfig+0x784>)
 800185c:	f023 0304 	bic.w	r3, r3, #4
 8001860:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d016      	beq.n	800189a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800186c:	f7ff fc0e 	bl	800108c <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001872:	e00a      	b.n	800188a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001874:	f7ff fc0a 	bl	800108c <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001882:	4293      	cmp	r3, r2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e168      	b.n	8001b5c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800188a:	4b8c      	ldr	r3, [pc, #560]	; (8001abc <HAL_RCC_OscConfig+0x784>)
 800188c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d0ed      	beq.n	8001874 <HAL_RCC_OscConfig+0x53c>
 8001898:	e015      	b.n	80018c6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800189a:	f7ff fbf7 	bl	800108c <HAL_GetTick>
 800189e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018a0:	e00a      	b.n	80018b8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018a2:	f7ff fbf3 	bl	800108c <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e151      	b.n	8001b5c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018b8:	4b80      	ldr	r3, [pc, #512]	; (8001abc <HAL_RCC_OscConfig+0x784>)
 80018ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1ed      	bne.n	80018a2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018c6:	7ffb      	ldrb	r3, [r7, #31]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d105      	bne.n	80018d8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018cc:	4b7b      	ldr	r3, [pc, #492]	; (8001abc <HAL_RCC_OscConfig+0x784>)
 80018ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d0:	4a7a      	ldr	r2, [pc, #488]	; (8001abc <HAL_RCC_OscConfig+0x784>)
 80018d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018d6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0320 	and.w	r3, r3, #32
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d03c      	beq.n	800195e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d01c      	beq.n	8001926 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80018ec:	4b73      	ldr	r3, [pc, #460]	; (8001abc <HAL_RCC_OscConfig+0x784>)
 80018ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018f2:	4a72      	ldr	r2, [pc, #456]	; (8001abc <HAL_RCC_OscConfig+0x784>)
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018fc:	f7ff fbc6 	bl	800108c <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001904:	f7ff fbc2 	bl	800108c <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e122      	b.n	8001b5c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001916:	4b69      	ldr	r3, [pc, #420]	; (8001abc <HAL_RCC_OscConfig+0x784>)
 8001918:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d0ef      	beq.n	8001904 <HAL_RCC_OscConfig+0x5cc>
 8001924:	e01b      	b.n	800195e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001926:	4b65      	ldr	r3, [pc, #404]	; (8001abc <HAL_RCC_OscConfig+0x784>)
 8001928:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800192c:	4a63      	ldr	r2, [pc, #396]	; (8001abc <HAL_RCC_OscConfig+0x784>)
 800192e:	f023 0301 	bic.w	r3, r3, #1
 8001932:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001936:	f7ff fba9 	bl	800108c <HAL_GetTick>
 800193a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800193c:	e008      	b.n	8001950 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800193e:	f7ff fba5 	bl	800108c <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d901      	bls.n	8001950 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e105      	b.n	8001b5c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001950:	4b5a      	ldr	r3, [pc, #360]	; (8001abc <HAL_RCC_OscConfig+0x784>)
 8001952:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1ef      	bne.n	800193e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001962:	2b00      	cmp	r3, #0
 8001964:	f000 80f9 	beq.w	8001b5a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196c:	2b02      	cmp	r3, #2
 800196e:	f040 80cf 	bne.w	8001b10 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001972:	4b52      	ldr	r3, [pc, #328]	; (8001abc <HAL_RCC_OscConfig+0x784>)
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	f003 0203 	and.w	r2, r3, #3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001982:	429a      	cmp	r2, r3
 8001984:	d12c      	bne.n	80019e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001990:	3b01      	subs	r3, #1
 8001992:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001994:	429a      	cmp	r2, r3
 8001996:	d123      	bne.n	80019e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019a2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d11b      	bne.n	80019e0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019b2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d113      	bne.n	80019e0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019c2:	085b      	lsrs	r3, r3, #1
 80019c4:	3b01      	subs	r3, #1
 80019c6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d109      	bne.n	80019e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	085b      	lsrs	r3, r3, #1
 80019d8:	3b01      	subs	r3, #1
 80019da:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019dc:	429a      	cmp	r2, r3
 80019de:	d071      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	2b0c      	cmp	r3, #12
 80019e4:	d068      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80019e6:	4b35      	ldr	r3, [pc, #212]	; (8001abc <HAL_RCC_OscConfig+0x784>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d105      	bne.n	80019fe <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80019f2:	4b32      	ldr	r3, [pc, #200]	; (8001abc <HAL_RCC_OscConfig+0x784>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e0ac      	b.n	8001b5c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a02:	4b2e      	ldr	r3, [pc, #184]	; (8001abc <HAL_RCC_OscConfig+0x784>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a2d      	ldr	r2, [pc, #180]	; (8001abc <HAL_RCC_OscConfig+0x784>)
 8001a08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a0c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a0e:	f7ff fb3d 	bl	800108c <HAL_GetTick>
 8001a12:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a14:	e008      	b.n	8001a28 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a16:	f7ff fb39 	bl	800108c <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d901      	bls.n	8001a28 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e099      	b.n	8001b5c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a28:	4b24      	ldr	r3, [pc, #144]	; (8001abc <HAL_RCC_OscConfig+0x784>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d1f0      	bne.n	8001a16 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a34:	4b21      	ldr	r3, [pc, #132]	; (8001abc <HAL_RCC_OscConfig+0x784>)
 8001a36:	68da      	ldr	r2, [r3, #12]
 8001a38:	4b21      	ldr	r3, [pc, #132]	; (8001ac0 <HAL_RCC_OscConfig+0x788>)
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a44:	3a01      	subs	r2, #1
 8001a46:	0112      	lsls	r2, r2, #4
 8001a48:	4311      	orrs	r1, r2
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a4e:	0212      	lsls	r2, r2, #8
 8001a50:	4311      	orrs	r1, r2
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a56:	0852      	lsrs	r2, r2, #1
 8001a58:	3a01      	subs	r2, #1
 8001a5a:	0552      	lsls	r2, r2, #21
 8001a5c:	4311      	orrs	r1, r2
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a62:	0852      	lsrs	r2, r2, #1
 8001a64:	3a01      	subs	r2, #1
 8001a66:	0652      	lsls	r2, r2, #25
 8001a68:	4311      	orrs	r1, r2
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a6e:	06d2      	lsls	r2, r2, #27
 8001a70:	430a      	orrs	r2, r1
 8001a72:	4912      	ldr	r1, [pc, #72]	; (8001abc <HAL_RCC_OscConfig+0x784>)
 8001a74:	4313      	orrs	r3, r2
 8001a76:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a78:	4b10      	ldr	r3, [pc, #64]	; (8001abc <HAL_RCC_OscConfig+0x784>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a0f      	ldr	r2, [pc, #60]	; (8001abc <HAL_RCC_OscConfig+0x784>)
 8001a7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a82:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a84:	4b0d      	ldr	r3, [pc, #52]	; (8001abc <HAL_RCC_OscConfig+0x784>)
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	4a0c      	ldr	r2, [pc, #48]	; (8001abc <HAL_RCC_OscConfig+0x784>)
 8001a8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a8e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a90:	f7ff fafc 	bl	800108c <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a98:	f7ff faf8 	bl	800108c <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e058      	b.n	8001b5c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aaa:	4b04      	ldr	r3, [pc, #16]	; (8001abc <HAL_RCC_OscConfig+0x784>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d0f0      	beq.n	8001a98 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ab6:	e050      	b.n	8001b5a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e04f      	b.n	8001b5c <HAL_RCC_OscConfig+0x824>
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ac4:	4b27      	ldr	r3, [pc, #156]	; (8001b64 <HAL_RCC_OscConfig+0x82c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d144      	bne.n	8001b5a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ad0:	4b24      	ldr	r3, [pc, #144]	; (8001b64 <HAL_RCC_OscConfig+0x82c>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a23      	ldr	r2, [pc, #140]	; (8001b64 <HAL_RCC_OscConfig+0x82c>)
 8001ad6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ada:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001adc:	4b21      	ldr	r3, [pc, #132]	; (8001b64 <HAL_RCC_OscConfig+0x82c>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	4a20      	ldr	r2, [pc, #128]	; (8001b64 <HAL_RCC_OscConfig+0x82c>)
 8001ae2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ae6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ae8:	f7ff fad0 	bl	800108c <HAL_GetTick>
 8001aec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af0:	f7ff facc 	bl	800108c <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e02c      	b.n	8001b5c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b02:	4b18      	ldr	r3, [pc, #96]	; (8001b64 <HAL_RCC_OscConfig+0x82c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d0f0      	beq.n	8001af0 <HAL_RCC_OscConfig+0x7b8>
 8001b0e:	e024      	b.n	8001b5a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	2b0c      	cmp	r3, #12
 8001b14:	d01f      	beq.n	8001b56 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b16:	4b13      	ldr	r3, [pc, #76]	; (8001b64 <HAL_RCC_OscConfig+0x82c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a12      	ldr	r2, [pc, #72]	; (8001b64 <HAL_RCC_OscConfig+0x82c>)
 8001b1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b22:	f7ff fab3 	bl	800108c <HAL_GetTick>
 8001b26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b28:	e008      	b.n	8001b3c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b2a:	f7ff faaf 	bl	800108c <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e00f      	b.n	8001b5c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b3c:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <HAL_RCC_OscConfig+0x82c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1f0      	bne.n	8001b2a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001b48:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <HAL_RCC_OscConfig+0x82c>)
 8001b4a:	68da      	ldr	r2, [r3, #12]
 8001b4c:	4905      	ldr	r1, [pc, #20]	; (8001b64 <HAL_RCC_OscConfig+0x82c>)
 8001b4e:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <HAL_RCC_OscConfig+0x830>)
 8001b50:	4013      	ands	r3, r2
 8001b52:	60cb      	str	r3, [r1, #12]
 8001b54:	e001      	b.n	8001b5a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e000      	b.n	8001b5c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3720      	adds	r7, #32
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40021000 	.word	0x40021000
 8001b68:	feeefffc 	.word	0xfeeefffc

08001b6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d101      	bne.n	8001b80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e0e7      	b.n	8001d50 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b80:	4b75      	ldr	r3, [pc, #468]	; (8001d58 <HAL_RCC_ClockConfig+0x1ec>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d910      	bls.n	8001bb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b8e:	4b72      	ldr	r3, [pc, #456]	; (8001d58 <HAL_RCC_ClockConfig+0x1ec>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f023 0207 	bic.w	r2, r3, #7
 8001b96:	4970      	ldr	r1, [pc, #448]	; (8001d58 <HAL_RCC_ClockConfig+0x1ec>)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b9e:	4b6e      	ldr	r3, [pc, #440]	; (8001d58 <HAL_RCC_ClockConfig+0x1ec>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d001      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e0cf      	b.n	8001d50 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d010      	beq.n	8001bde <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689a      	ldr	r2, [r3, #8]
 8001bc0:	4b66      	ldr	r3, [pc, #408]	; (8001d5c <HAL_RCC_ClockConfig+0x1f0>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d908      	bls.n	8001bde <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bcc:	4b63      	ldr	r3, [pc, #396]	; (8001d5c <HAL_RCC_ClockConfig+0x1f0>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	4960      	ldr	r1, [pc, #384]	; (8001d5c <HAL_RCC_ClockConfig+0x1f0>)
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d04c      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b03      	cmp	r3, #3
 8001bf0:	d107      	bne.n	8001c02 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bf2:	4b5a      	ldr	r3, [pc, #360]	; (8001d5c <HAL_RCC_ClockConfig+0x1f0>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d121      	bne.n	8001c42 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e0a6      	b.n	8001d50 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d107      	bne.n	8001c1a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c0a:	4b54      	ldr	r3, [pc, #336]	; (8001d5c <HAL_RCC_ClockConfig+0x1f0>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d115      	bne.n	8001c42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e09a      	b.n	8001d50 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d107      	bne.n	8001c32 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c22:	4b4e      	ldr	r3, [pc, #312]	; (8001d5c <HAL_RCC_ClockConfig+0x1f0>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d109      	bne.n	8001c42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e08e      	b.n	8001d50 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c32:	4b4a      	ldr	r3, [pc, #296]	; (8001d5c <HAL_RCC_ClockConfig+0x1f0>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e086      	b.n	8001d50 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c42:	4b46      	ldr	r3, [pc, #280]	; (8001d5c <HAL_RCC_ClockConfig+0x1f0>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f023 0203 	bic.w	r2, r3, #3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	4943      	ldr	r1, [pc, #268]	; (8001d5c <HAL_RCC_ClockConfig+0x1f0>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c54:	f7ff fa1a 	bl	800108c <HAL_GetTick>
 8001c58:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c5a:	e00a      	b.n	8001c72 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c5c:	f7ff fa16 	bl	800108c <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e06e      	b.n	8001d50 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c72:	4b3a      	ldr	r3, [pc, #232]	; (8001d5c <HAL_RCC_ClockConfig+0x1f0>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 020c 	and.w	r2, r3, #12
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d1eb      	bne.n	8001c5c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d010      	beq.n	8001cb2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	4b31      	ldr	r3, [pc, #196]	; (8001d5c <HAL_RCC_ClockConfig+0x1f0>)
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d208      	bcs.n	8001cb2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ca0:	4b2e      	ldr	r3, [pc, #184]	; (8001d5c <HAL_RCC_ClockConfig+0x1f0>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	492b      	ldr	r1, [pc, #172]	; (8001d5c <HAL_RCC_ClockConfig+0x1f0>)
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cb2:	4b29      	ldr	r3, [pc, #164]	; (8001d58 <HAL_RCC_ClockConfig+0x1ec>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	683a      	ldr	r2, [r7, #0]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d210      	bcs.n	8001ce2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc0:	4b25      	ldr	r3, [pc, #148]	; (8001d58 <HAL_RCC_ClockConfig+0x1ec>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f023 0207 	bic.w	r2, r3, #7
 8001cc8:	4923      	ldr	r1, [pc, #140]	; (8001d58 <HAL_RCC_ClockConfig+0x1ec>)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd0:	4b21      	ldr	r3, [pc, #132]	; (8001d58 <HAL_RCC_ClockConfig+0x1ec>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0307 	and.w	r3, r3, #7
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d001      	beq.n	8001ce2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e036      	b.n	8001d50 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0304 	and.w	r3, r3, #4
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d008      	beq.n	8001d00 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cee:	4b1b      	ldr	r3, [pc, #108]	; (8001d5c <HAL_RCC_ClockConfig+0x1f0>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	4918      	ldr	r1, [pc, #96]	; (8001d5c <HAL_RCC_ClockConfig+0x1f0>)
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0308 	and.w	r3, r3, #8
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d009      	beq.n	8001d20 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d0c:	4b13      	ldr	r3, [pc, #76]	; (8001d5c <HAL_RCC_ClockConfig+0x1f0>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	691b      	ldr	r3, [r3, #16]
 8001d18:	00db      	lsls	r3, r3, #3
 8001d1a:	4910      	ldr	r1, [pc, #64]	; (8001d5c <HAL_RCC_ClockConfig+0x1f0>)
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d20:	f000 f824 	bl	8001d6c <HAL_RCC_GetSysClockFreq>
 8001d24:	4602      	mov	r2, r0
 8001d26:	4b0d      	ldr	r3, [pc, #52]	; (8001d5c <HAL_RCC_ClockConfig+0x1f0>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	091b      	lsrs	r3, r3, #4
 8001d2c:	f003 030f 	and.w	r3, r3, #15
 8001d30:	490b      	ldr	r1, [pc, #44]	; (8001d60 <HAL_RCC_ClockConfig+0x1f4>)
 8001d32:	5ccb      	ldrb	r3, [r1, r3]
 8001d34:	f003 031f 	and.w	r3, r3, #31
 8001d38:	fa22 f303 	lsr.w	r3, r2, r3
 8001d3c:	4a09      	ldr	r2, [pc, #36]	; (8001d64 <HAL_RCC_ClockConfig+0x1f8>)
 8001d3e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d40:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <HAL_RCC_ClockConfig+0x1fc>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff f951 	bl	8000fec <HAL_InitTick>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d4e:	7afb      	ldrb	r3, [r7, #11]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3710      	adds	r7, #16
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	40022000 	.word	0x40022000
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	080020e0 	.word	0x080020e0
 8001d64:	20000008 	.word	0x20000008
 8001d68:	2000000c 	.word	0x2000000c

08001d6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b089      	sub	sp, #36	; 0x24
 8001d70:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d72:	2300      	movs	r3, #0
 8001d74:	61fb      	str	r3, [r7, #28]
 8001d76:	2300      	movs	r3, #0
 8001d78:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d7a:	4b3e      	ldr	r3, [pc, #248]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f003 030c 	and.w	r3, r3, #12
 8001d82:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d84:	4b3b      	ldr	r3, [pc, #236]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	f003 0303 	and.w	r3, r3, #3
 8001d8c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d005      	beq.n	8001da0 <HAL_RCC_GetSysClockFreq+0x34>
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	2b0c      	cmp	r3, #12
 8001d98:	d121      	bne.n	8001dde <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d11e      	bne.n	8001dde <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001da0:	4b34      	ldr	r3, [pc, #208]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0308 	and.w	r3, r3, #8
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d107      	bne.n	8001dbc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001dac:	4b31      	ldr	r3, [pc, #196]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001db2:	0a1b      	lsrs	r3, r3, #8
 8001db4:	f003 030f 	and.w	r3, r3, #15
 8001db8:	61fb      	str	r3, [r7, #28]
 8001dba:	e005      	b.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001dbc:	4b2d      	ldr	r3, [pc, #180]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	091b      	lsrs	r3, r3, #4
 8001dc2:	f003 030f 	and.w	r3, r3, #15
 8001dc6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001dc8:	4a2b      	ldr	r2, [pc, #172]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d10d      	bne.n	8001df4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ddc:	e00a      	b.n	8001df4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	2b04      	cmp	r3, #4
 8001de2:	d102      	bne.n	8001dea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001de4:	4b25      	ldr	r3, [pc, #148]	; (8001e7c <HAL_RCC_GetSysClockFreq+0x110>)
 8001de6:	61bb      	str	r3, [r7, #24]
 8001de8:	e004      	b.n	8001df4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	2b08      	cmp	r3, #8
 8001dee:	d101      	bne.n	8001df4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001df0:	4b23      	ldr	r3, [pc, #140]	; (8001e80 <HAL_RCC_GetSysClockFreq+0x114>)
 8001df2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	2b0c      	cmp	r3, #12
 8001df8:	d134      	bne.n	8001e64 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001dfa:	4b1e      	ldr	r3, [pc, #120]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	f003 0303 	and.w	r3, r3, #3
 8001e02:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d003      	beq.n	8001e12 <HAL_RCC_GetSysClockFreq+0xa6>
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	2b03      	cmp	r3, #3
 8001e0e:	d003      	beq.n	8001e18 <HAL_RCC_GetSysClockFreq+0xac>
 8001e10:	e005      	b.n	8001e1e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e12:	4b1a      	ldr	r3, [pc, #104]	; (8001e7c <HAL_RCC_GetSysClockFreq+0x110>)
 8001e14:	617b      	str	r3, [r7, #20]
      break;
 8001e16:	e005      	b.n	8001e24 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e18:	4b19      	ldr	r3, [pc, #100]	; (8001e80 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e1a:	617b      	str	r3, [r7, #20]
      break;
 8001e1c:	e002      	b.n	8001e24 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	617b      	str	r3, [r7, #20]
      break;
 8001e22:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e24:	4b13      	ldr	r3, [pc, #76]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	091b      	lsrs	r3, r3, #4
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	3301      	adds	r3, #1
 8001e30:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e32:	4b10      	ldr	r3, [pc, #64]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	0a1b      	lsrs	r3, r3, #8
 8001e38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e3c:	697a      	ldr	r2, [r7, #20]
 8001e3e:	fb03 f202 	mul.w	r2, r3, r2
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e48:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e4a:	4b0a      	ldr	r3, [pc, #40]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	0e5b      	lsrs	r3, r3, #25
 8001e50:	f003 0303 	and.w	r3, r3, #3
 8001e54:	3301      	adds	r3, #1
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e5a:	697a      	ldr	r2, [r7, #20]
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e62:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e64:	69bb      	ldr	r3, [r7, #24]
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3724      	adds	r7, #36	; 0x24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	40021000 	.word	0x40021000
 8001e78:	080020f0 	.word	0x080020f0
 8001e7c:	00f42400 	.word	0x00f42400
 8001e80:	007a1200 	.word	0x007a1200

08001e84 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e90:	4b2a      	ldr	r3, [pc, #168]	; (8001f3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e9c:	f7ff f9e8 	bl	8001270 <HAL_PWREx_GetVoltageRange>
 8001ea0:	6178      	str	r0, [r7, #20]
 8001ea2:	e014      	b.n	8001ece <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ea4:	4b25      	ldr	r3, [pc, #148]	; (8001f3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea8:	4a24      	ldr	r2, [pc, #144]	; (8001f3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eae:	6593      	str	r3, [r2, #88]	; 0x58
 8001eb0:	4b22      	ldr	r3, [pc, #136]	; (8001f3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ebc:	f7ff f9d8 	bl	8001270 <HAL_PWREx_GetVoltageRange>
 8001ec0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001ec2:	4b1e      	ldr	r3, [pc, #120]	; (8001f3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec6:	4a1d      	ldr	r2, [pc, #116]	; (8001f3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ec8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ecc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ed4:	d10b      	bne.n	8001eee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2b80      	cmp	r3, #128	; 0x80
 8001eda:	d919      	bls.n	8001f10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2ba0      	cmp	r3, #160	; 0xa0
 8001ee0:	d902      	bls.n	8001ee8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	613b      	str	r3, [r7, #16]
 8001ee6:	e013      	b.n	8001f10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ee8:	2301      	movs	r3, #1
 8001eea:	613b      	str	r3, [r7, #16]
 8001eec:	e010      	b.n	8001f10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b80      	cmp	r3, #128	; 0x80
 8001ef2:	d902      	bls.n	8001efa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	613b      	str	r3, [r7, #16]
 8001ef8:	e00a      	b.n	8001f10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2b80      	cmp	r3, #128	; 0x80
 8001efe:	d102      	bne.n	8001f06 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f00:	2302      	movs	r3, #2
 8001f02:	613b      	str	r3, [r7, #16]
 8001f04:	e004      	b.n	8001f10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2b70      	cmp	r3, #112	; 0x70
 8001f0a:	d101      	bne.n	8001f10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f10:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f023 0207 	bic.w	r2, r3, #7
 8001f18:	4909      	ldr	r1, [pc, #36]	; (8001f40 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f20:	4b07      	ldr	r3, [pc, #28]	; (8001f40 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0307 	and.w	r3, r3, #7
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d001      	beq.n	8001f32 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e000      	b.n	8001f34 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3718      	adds	r7, #24
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	40022000 	.word	0x40022000

08001f44 <__libc_init_array>:
 8001f44:	b570      	push	{r4, r5, r6, lr}
 8001f46:	4d0d      	ldr	r5, [pc, #52]	; (8001f7c <__libc_init_array+0x38>)
 8001f48:	4c0d      	ldr	r4, [pc, #52]	; (8001f80 <__libc_init_array+0x3c>)
 8001f4a:	1b64      	subs	r4, r4, r5
 8001f4c:	10a4      	asrs	r4, r4, #2
 8001f4e:	2600      	movs	r6, #0
 8001f50:	42a6      	cmp	r6, r4
 8001f52:	d109      	bne.n	8001f68 <__libc_init_array+0x24>
 8001f54:	4d0b      	ldr	r5, [pc, #44]	; (8001f84 <__libc_init_array+0x40>)
 8001f56:	4c0c      	ldr	r4, [pc, #48]	; (8001f88 <__libc_init_array+0x44>)
 8001f58:	f000 f820 	bl	8001f9c <_init>
 8001f5c:	1b64      	subs	r4, r4, r5
 8001f5e:	10a4      	asrs	r4, r4, #2
 8001f60:	2600      	movs	r6, #0
 8001f62:	42a6      	cmp	r6, r4
 8001f64:	d105      	bne.n	8001f72 <__libc_init_array+0x2e>
 8001f66:	bd70      	pop	{r4, r5, r6, pc}
 8001f68:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f6c:	4798      	blx	r3
 8001f6e:	3601      	adds	r6, #1
 8001f70:	e7ee      	b.n	8001f50 <__libc_init_array+0xc>
 8001f72:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f76:	4798      	blx	r3
 8001f78:	3601      	adds	r6, #1
 8001f7a:	e7f2      	b.n	8001f62 <__libc_init_array+0x1e>
 8001f7c:	08002120 	.word	0x08002120
 8001f80:	08002120 	.word	0x08002120
 8001f84:	08002120 	.word	0x08002120
 8001f88:	08002124 	.word	0x08002124

08001f8c <memset>:
 8001f8c:	4402      	add	r2, r0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d100      	bne.n	8001f96 <memset+0xa>
 8001f94:	4770      	bx	lr
 8001f96:	f803 1b01 	strb.w	r1, [r3], #1
 8001f9a:	e7f9      	b.n	8001f90 <memset+0x4>

08001f9c <_init>:
 8001f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f9e:	bf00      	nop
 8001fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fa2:	bc08      	pop	{r3}
 8001fa4:	469e      	mov	lr, r3
 8001fa6:	4770      	bx	lr

08001fa8 <_fini>:
 8001fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001faa:	bf00      	nop
 8001fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fae:	bc08      	pop	{r3}
 8001fb0:	469e      	mov	lr, r3
 8001fb2:	4770      	bx	lr
