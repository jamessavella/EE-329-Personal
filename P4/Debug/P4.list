
P4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002150  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  080022fc  080022fc  000122fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002594  08002594  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08002594  08002594  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002594  08002594  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002594  08002594  00012594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002598  08002598  00012598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800259c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  20000014  080025b0  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  080025b0  00020170  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000625c  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001638  00000000  00000000  000262a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f0  00000000  00000000  000278d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000618  00000000  00000000  00027fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027737  00000000  00000000  000285e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007954  00000000  00000000  0004fd17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee909  00000000  00000000  0005766b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00145f74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018e4  00000000  00000000  00145fc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000014 	.word	0x20000014
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080022e4 	.word	0x080022e4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000018 	.word	0x20000018
 80001e8:	080022e4 	.word	0x080022e4

080001ec <FP_check>:
uint8_t MEM_GLOBAL;	//FP ID# LOCATION IN FLASH MEMORY
uint16_t FP_ID; //FOUND FP ID# LOCATION IN FLASH MEMORY

//checks if FP is connected and communicating properly
//does not properly find it will need to look at bytes when it is not being sent proper
void FP_check(void){
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
	lcd_set_cursor_position(0, 0);
 80001f0:	2100      	movs	r1, #0
 80001f2:	2000      	movs	r0, #0
 80001f4:	f000 fd8a 	bl	8000d0c <lcd_set_cursor_position>
	str_write("Booting Fngrprnt");
 80001f8:	4828      	ldr	r0, [pc, #160]	; (800029c <FP_check+0xb0>)
 80001fa:	f000 fda1 	bl	8000d40 <str_write>
	lcd_set_cursor_position(1, 0);
 80001fe:	2100      	movs	r1, #0
 8000200:	2001      	movs	r0, #1
 8000202:	f000 fd83 	bl	8000d0c <lcd_set_cursor_position>
	str_write("Scanner         ");
 8000206:	4826      	ldr	r0, [pc, #152]	; (80002a0 <FP_check+0xb4>)
 8000208:	f000 fd9a 	bl	8000d40 <str_write>
	delay_us(1000000);		//1 second delay to read the message
 800020c:	4825      	ldr	r0, [pc, #148]	; (80002a4 <FP_check+0xb8>)
 800020e:	f000 f9bb 	bl	8000588 <delay_us>

	handshake();
 8000212:	f000 f9e7 	bl	80005e4 <handshake>
	while (ConfirmationCode != 0x00){
 8000216:	e00f      	b.n	8000238 <FP_check+0x4c>
		handshake();
 8000218:	f000 f9e4 	bl	80005e4 <handshake>
		lcd_set_cursor_position(0, 0);
 800021c:	2100      	movs	r1, #0
 800021e:	2000      	movs	r0, #0
 8000220:	f000 fd74 	bl	8000d0c <lcd_set_cursor_position>
		str_write("FP Scanner not  ");
 8000224:	4820      	ldr	r0, [pc, #128]	; (80002a8 <FP_check+0xbc>)
 8000226:	f000 fd8b 	bl	8000d40 <str_write>
		lcd_set_cursor_position(1,0);
 800022a:	2100      	movs	r1, #0
 800022c:	2001      	movs	r0, #1
 800022e:	f000 fd6d 	bl	8000d0c <lcd_set_cursor_position>
		str_write("found reconnect ");
 8000232:	481e      	ldr	r0, [pc, #120]	; (80002ac <FP_check+0xc0>)
 8000234:	f000 fd84 	bl	8000d40 <str_write>
	while (ConfirmationCode != 0x00){
 8000238:	4b1d      	ldr	r3, [pc, #116]	; (80002b0 <FP_check+0xc4>)
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	2b00      	cmp	r3, #0
 800023e:	d1eb      	bne.n	8000218 <FP_check+0x2c>
	}
	//sets other parameters: 2nd argument changes settings
	SetSysPara(4, 6);	//baud rate: 6* 9600 = 57600
 8000240:	2106      	movs	r1, #6
 8000242:	2004      	movs	r0, #4
 8000244:	f000 fa00 	bl	8000648 <SetSysPara>
	SetSysPara(5, 1);   //security level: 1 - 5 lowest to highest
 8000248:	2101      	movs	r1, #1
 800024a:	2005      	movs	r0, #5
 800024c:	f000 f9fc 	bl	8000648 <SetSysPara>
	SetSysPara(6, 3);	//package length: 0 - 3 lowest to highest
 8000250:	2103      	movs	r1, #3
 8000252:	2006      	movs	r0, #6
 8000254:	f000 f9f8 	bl	8000648 <SetSysPara>
	lcd_set_cursor_position(0, 0);
 8000258:	2100      	movs	r1, #0
 800025a:	2000      	movs	r0, #0
 800025c:	f000 fd56 	bl	8000d0c <lcd_set_cursor_position>
	str_write("FP Scanner      ");
 8000260:	4814      	ldr	r0, [pc, #80]	; (80002b4 <FP_check+0xc8>)
 8000262:	f000 fd6d 	bl	8000d40 <str_write>
	lcd_set_cursor_position(1,0);
 8000266:	2100      	movs	r1, #0
 8000268:	2001      	movs	r0, #1
 800026a:	f000 fd4f 	bl	8000d0c <lcd_set_cursor_position>
	str_write("Found           ");
 800026e:	4812      	ldr	r0, [pc, #72]	; (80002b8 <FP_check+0xcc>)
 8000270:	f000 fd66 	bl	8000d40 <str_write>
	delay_us(1000000); 		//1 second delay to read the message
 8000274:	480b      	ldr	r0, [pc, #44]	; (80002a4 <FP_check+0xb8>)
 8000276:	f000 f987 	bl	8000588 <delay_us>
	lcd_set_cursor_position(0, 0);
 800027a:	2100      	movs	r1, #0
 800027c:	2000      	movs	r0, #0
 800027e:	f000 fd45 	bl	8000d0c <lcd_set_cursor_position>
	str_write("                ");
 8000282:	480e      	ldr	r0, [pc, #56]	; (80002bc <FP_check+0xd0>)
 8000284:	f000 fd5c 	bl	8000d40 <str_write>
	lcd_set_cursor_position(1,0);
 8000288:	2100      	movs	r1, #0
 800028a:	2001      	movs	r0, #1
 800028c:	f000 fd3e 	bl	8000d0c <lcd_set_cursor_position>
	str_write("                ");
 8000290:	480a      	ldr	r0, [pc, #40]	; (80002bc <FP_check+0xd0>)
 8000292:	f000 fd55 	bl	8000d40 <str_write>
}
 8000296:	bf00      	nop
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	080022fc 	.word	0x080022fc
 80002a0:	08002310 	.word	0x08002310
 80002a4:	000f4240 	.word	0x000f4240
 80002a8:	08002324 	.word	0x08002324
 80002ac:	08002338 	.word	0x08002338
 80002b0:	20000058 	.word	0x20000058
 80002b4:	0800234c 	.word	0x0800234c
 80002b8:	08002360 	.word	0x08002360
 80002bc:	08002374 	.word	0x08002374

080002c0 <FP_enroll>:

void FP_enroll(void) {
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
	/* Order of Operations
	 * 1. Get user to type name associated with FP
	 * 2. Get User Input twice
	 */
	FP_enroll_start:
	genImg();	//to get ready to take an input
 80002c6:	f000 fa19 	bl	80006fc <genImg>
//	uint8_t mem_local = 0;	//initializes mem local
	//update mem_local to equal global ID variable

//	while (number_of_fp_per_section < MAX_FP_PER_SECTION) {	//takes 10 user inputs: 0-9

	for (int buff_local = 1; buff_local <= 2; buff_local++) {
 80002ca:	2301      	movs	r3, #1
 80002cc:	607b      	str	r3, [r7, #4]
 80002ce:	e045      	b.n	800035c <FP_enroll+0x9c>
		while (ConfirmationCode == 0x02) {	//No finger detected get finger
			if (buff_local == 1) {
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	2b01      	cmp	r3, #1
 80002d4:	d10e      	bne.n	80002f4 <FP_enroll+0x34>
				lcd_set_cursor_position(0, 0);
 80002d6:	2100      	movs	r1, #0
 80002d8:	2000      	movs	r0, #0
 80002da:	f000 fd17 	bl	8000d0c <lcd_set_cursor_position>
				str_write("Place finger    ");
 80002de:	483e      	ldr	r0, [pc, #248]	; (80003d8 <FP_enroll+0x118>)
 80002e0:	f000 fd2e 	bl	8000d40 <str_write>
				lcd_set_cursor_position(1, 0);
 80002e4:	2100      	movs	r1, #0
 80002e6:	2001      	movs	r0, #1
 80002e8:	f000 fd10 	bl	8000d0c <lcd_set_cursor_position>
				str_write("                ");
 80002ec:	483b      	ldr	r0, [pc, #236]	; (80003dc <FP_enroll+0x11c>)
 80002ee:	f000 fd27 	bl	8000d40 <str_write>
 80002f2:	e010      	b.n	8000316 <FP_enroll+0x56>
			} else if (buff_local == 2) {
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	2b02      	cmp	r3, #2
 80002f8:	d10d      	bne.n	8000316 <FP_enroll+0x56>
				lcd_set_cursor_position(0, 0);
 80002fa:	2100      	movs	r1, #0
 80002fc:	2000      	movs	r0, #0
 80002fe:	f000 fd05 	bl	8000d0c <lcd_set_cursor_position>
				str_write("Place finger ");
 8000302:	4837      	ldr	r0, [pc, #220]	; (80003e0 <FP_enroll+0x120>)
 8000304:	f000 fd1c 	bl	8000d40 <str_write>
				lcd_set_cursor_position(1, 0);
 8000308:	2100      	movs	r1, #0
 800030a:	2001      	movs	r0, #1
 800030c:	f000 fcfe 	bl	8000d0c <lcd_set_cursor_position>
				str_write("again         ");
 8000310:	4834      	ldr	r0, [pc, #208]	; (80003e4 <FP_enroll+0x124>)
 8000312:	f000 fd15 	bl	8000d40 <str_write>
			}
			genImg();	//checks fingerprint
 8000316:	f000 f9f1 	bl	80006fc <genImg>
		while (ConfirmationCode == 0x02) {	//No finger detected get finger
 800031a:	4b33      	ldr	r3, [pc, #204]	; (80003e8 <FP_enroll+0x128>)
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	2b02      	cmp	r3, #2
 8000320:	d0d6      	beq.n	80002d0 <FP_enroll+0x10>
		}
		Img2Tz(buff_local);
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	b2db      	uxtb	r3, r3
 8000326:	4618      	mov	r0, r3
 8000328:	f000 fa1a 	bl	8000760 <Img2Tz>

		while (ConfirmationCode == 0x00) { //to wait til user removes finger
 800032c:	e00f      	b.n	800034e <FP_enroll+0x8e>
			lcd_set_cursor_position(0, 0);
 800032e:	2100      	movs	r1, #0
 8000330:	2000      	movs	r0, #0
 8000332:	f000 fceb 	bl	8000d0c <lcd_set_cursor_position>
			str_write("Got Finger!     ");
 8000336:	482d      	ldr	r0, [pc, #180]	; (80003ec <FP_enroll+0x12c>)
 8000338:	f000 fd02 	bl	8000d40 <str_write>
			lcd_set_cursor_position(1, 0);
 800033c:	2100      	movs	r1, #0
 800033e:	2001      	movs	r0, #1
 8000340:	f000 fce4 	bl	8000d0c <lcd_set_cursor_position>
			str_write("Remove Finger   ");
 8000344:	482a      	ldr	r0, [pc, #168]	; (80003f0 <FP_enroll+0x130>)
 8000346:	f000 fcfb 	bl	8000d40 <str_write>
			genImg(); //checks fingerprint
 800034a:	f000 f9d7 	bl	80006fc <genImg>
		while (ConfirmationCode == 0x00) { //to wait til user removes finger
 800034e:	4b26      	ldr	r3, [pc, #152]	; (80003e8 <FP_enroll+0x128>)
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	2b00      	cmp	r3, #0
 8000354:	d0eb      	beq.n	800032e <FP_enroll+0x6e>
	for (int buff_local = 1; buff_local <= 2; buff_local++) {
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	3301      	adds	r3, #1
 800035a:	607b      	str	r3, [r7, #4]
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	2b02      	cmp	r3, #2
 8000360:	dddb      	ble.n	800031a <FP_enroll+0x5a>
		}

	}
	regMode(); //generates FP template to store to memory checks if they match as well
 8000362:	f000 fa4f 	bl	8000804 <regMode>

	if (ConfirmationCode == 0x00) { //Fingerprint matches!
 8000366:	4b20      	ldr	r3, [pc, #128]	; (80003e8 <FP_enroll+0x128>)
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	2b00      	cmp	r3, #0
 800036c:	d11c      	bne.n	80003a8 <FP_enroll+0xe8>
		lcd_set_cursor_position(0, 0);
 800036e:	2100      	movs	r1, #0
 8000370:	2000      	movs	r0, #0
 8000372:	f000 fccb 	bl	8000d0c <lcd_set_cursor_position>
		str_write("FP Match!   ID=");
 8000376:	481f      	ldr	r0, [pc, #124]	; (80003f4 <FP_enroll+0x134>)
 8000378:	f000 fce2 	bl	8000d40 <str_write>
		//want to add MEM_GLOBAL 2 digit functionality?
		write(MEM_GLOBAL + '0');	//ONLY FOR DEBUGGING
 800037c:	4b1e      	ldr	r3, [pc, #120]	; (80003f8 <FP_enroll+0x138>)
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	3330      	adds	r3, #48	; 0x30
 8000382:	b2db      	uxtb	r3, r3
 8000384:	4618      	mov	r0, r3
 8000386:	f000 fc51 	bl	8000c2c <write>

		store(1, MEM_GLOBAL); //stores ID to memory, updates ID for each user enrolled
 800038a:	4b1b      	ldr	r3, [pc, #108]	; (80003f8 <FP_enroll+0x138>)
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	b29b      	uxth	r3, r3
 8000390:	4619      	mov	r1, r3
 8000392:	2001      	movs	r0, #1
 8000394:	f000 fa68 	bl	8000868 <store>
		lcd_set_cursor_position(1, 0);
 8000398:	2100      	movs	r1, #0
 800039a:	2001      	movs	r0, #1
 800039c:	f000 fcb6 	bl	8000d0c <lcd_set_cursor_position>
		str_write("User Enrolled   ");
 80003a0:	4816      	ldr	r0, [pc, #88]	; (80003fc <FP_enroll+0x13c>)
 80003a2:	f000 fccd 	bl	8000d40 <str_write>
//	str_write("Reached Max Reg ");
//	lcd_set_cursor_position(1, 0);
//	str_write(" For Section = ");
//	write(section_num + '0');

}
 80003a6:	e014      	b.n	80003d2 <FP_enroll+0x112>
		lcd_set_cursor_position(0, 0);
 80003a8:	2100      	movs	r1, #0
 80003aa:	2000      	movs	r0, #0
 80003ac:	f000 fcae 	bl	8000d0c <lcd_set_cursor_position>
		str_write("FP mismatch :(  ");
 80003b0:	4813      	ldr	r0, [pc, #76]	; (8000400 <FP_enroll+0x140>)
 80003b2:	f000 fcc5 	bl	8000d40 <str_write>
		lcd_set_cursor_position(1, 0);
 80003b6:	2100      	movs	r1, #0
 80003b8:	2001      	movs	r0, #1
 80003ba:	f000 fca7 	bl	8000d0c <lcd_set_cursor_position>
		str_write("Redo Input      ");
 80003be:	4811      	ldr	r0, [pc, #68]	; (8000404 <FP_enroll+0x144>)
 80003c0:	f000 fcbe 	bl	8000d40 <str_write>
			genImg();	//checks fingerprint
 80003c4:	f000 f99a 	bl	80006fc <genImg>
			if (ConfirmationCode == 0x00) goto FP_enroll_start;
 80003c8:	4b07      	ldr	r3, [pc, #28]	; (80003e8 <FP_enroll+0x128>)
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d1f9      	bne.n	80003c4 <FP_enroll+0x104>
 80003d0:	e779      	b.n	80002c6 <FP_enroll+0x6>
}
 80003d2:	3708      	adds	r7, #8
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	08002388 	.word	0x08002388
 80003dc:	08002374 	.word	0x08002374
 80003e0:	0800239c 	.word	0x0800239c
 80003e4:	080023ac 	.word	0x080023ac
 80003e8:	20000058 	.word	0x20000058
 80003ec:	080023bc 	.word	0x080023bc
 80003f0:	080023d0 	.word	0x080023d0
 80003f4:	080023e4 	.word	0x080023e4
 80003f8:	20000030 	.word	0x20000030
 80003fc:	080023f4 	.word	0x080023f4
 8000400:	08002408 	.word	0x08002408
 8000404:	0800241c 	.word	0x0800241c

08000408 <FP_search>:

//Searches through data base by asking for user input.
//Returns address found or -1 if error
int FP_search(void) {
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
	//FPIDrdy = 0;
	lcd_set_cursor_position(0, 0);
 800040c:	2100      	movs	r1, #0
 800040e:	2000      	movs	r0, #0
 8000410:	f000 fc7c 	bl	8000d0c <lcd_set_cursor_position>
	str_write("Place Finger    ");
 8000414:	484c      	ldr	r0, [pc, #304]	; (8000548 <FP_search+0x140>)
 8000416:	f000 fc93 	bl	8000d40 <str_write>
	lcd_set_cursor_position(1, 0);
 800041a:	2100      	movs	r1, #0
 800041c:	2001      	movs	r0, #1
 800041e:	f000 fc75 	bl	8000d0c <lcd_set_cursor_position>
	str_write("to find it      ");
 8000422:	484a      	ldr	r0, [pc, #296]	; (800054c <FP_search+0x144>)
 8000424:	f000 fc8c 	bl	8000d40 <str_write>
	genImg();
 8000428:	f000 f968 	bl	80006fc <genImg>

	while (1) {	//No finger detected get finger
		genImg();	//checks fingerprint
 800042c:	f000 f966 	bl	80006fc <genImg>
		if (ConfirmationCode == 0x00)
 8000430:	4b47      	ldr	r3, [pc, #284]	; (8000550 <FP_search+0x148>)
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	2b00      	cmp	r3, #0
 8000436:	d020      	beq.n	800047a <FP_search+0x72>
			break;
		//for error handling
		else if ((ConfirmationCode == 0x01) | (ConfirmationCode == 0x03)) {
 8000438:	4b45      	ldr	r3, [pc, #276]	; (8000550 <FP_search+0x148>)
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	2b01      	cmp	r3, #1
 800043e:	bf0c      	ite	eq
 8000440:	2301      	moveq	r3, #1
 8000442:	2300      	movne	r3, #0
 8000444:	b2da      	uxtb	r2, r3
 8000446:	4b42      	ldr	r3, [pc, #264]	; (8000550 <FP_search+0x148>)
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	2b03      	cmp	r3, #3
 800044c:	bf0c      	ite	eq
 800044e:	2301      	moveq	r3, #1
 8000450:	2300      	movne	r3, #0
 8000452:	b2db      	uxtb	r3, r3
 8000454:	4313      	orrs	r3, r2
 8000456:	b2db      	uxtb	r3, r3
 8000458:	2b00      	cmp	r3, #0
 800045a:	d0e7      	beq.n	800042c <FP_search+0x24>
			lcd_set_cursor_position(0, 0);
 800045c:	2100      	movs	r1, #0
 800045e:	2000      	movs	r0, #0
 8000460:	f000 fc54 	bl	8000d0c <lcd_set_cursor_position>
			str_write("Place fngr again");
 8000464:	483b      	ldr	r0, [pc, #236]	; (8000554 <FP_search+0x14c>)
 8000466:	f000 fc6b 	bl	8000d40 <str_write>
			lcd_set_cursor_position(1, 0);
 800046a:	2100      	movs	r1, #0
 800046c:	2001      	movs	r0, #1
 800046e:	f000 fc4d 	bl	8000d0c <lcd_set_cursor_position>
			str_write("Error clean fngr");
 8000472:	4839      	ldr	r0, [pc, #228]	; (8000558 <FP_search+0x150>)
 8000474:	f000 fc64 	bl	8000d40 <str_write>
		genImg();	//checks fingerprint
 8000478:	e7d8      	b.n	800042c <FP_search+0x24>
			break;
 800047a:	bf00      	nop
		}
	}
	Img2Tz(1);	//stores in buffer 1
 800047c:	2001      	movs	r0, #1
 800047e:	f000 f96f 	bl	8000760 <Img2Tz>

	lcd_set_cursor_position(0, 0);
 8000482:	2100      	movs	r1, #0
 8000484:	2000      	movs	r0, #0
 8000486:	f000 fc41 	bl	8000d0c <lcd_set_cursor_position>
	str_write("Searching Database");
 800048a:	4834      	ldr	r0, [pc, #208]	; (800055c <FP_search+0x154>)
 800048c:	f000 fc58 	bl	8000d40 <str_write>
	lcd_set_cursor_position(1, 0);
 8000490:	2100      	movs	r1, #0
 8000492:	2001      	movs	r0, #1
 8000494:	f000 fc3a 	bl	8000d0c <lcd_set_cursor_position>
	str_write("        PageID = ");
 8000498:	4831      	ldr	r0, [pc, #196]	; (8000560 <FP_search+0x158>)
 800049a:	f000 fc51 	bl	8000d40 <str_write>
	write(MAX_FP + '0');
 800049e:	2039      	movs	r0, #57	; 0x39
 80004a0:	f000 fbc4 	bl	8000c2c <write>
	search(1, 0, MAX_FP);	//searches through entire database
 80004a4:	2209      	movs	r2, #9
 80004a6:	2100      	movs	r1, #0
 80004a8:	2001      	movs	r0, #1
 80004aa:	f000 fa71 	bl	8000990 <search>
	if (ConfirmationCode == 0x00) {	//successfully found ID
 80004ae:	4b28      	ldr	r3, [pc, #160]	; (8000550 <FP_search+0x148>)
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d123      	bne.n	80004fe <FP_search+0xf6>
		lcd_set_cursor_position(0, 0);
 80004b6:	2100      	movs	r1, #0
 80004b8:	2000      	movs	r0, #0
 80004ba:	f000 fc27 	bl	8000d0c <lcd_set_cursor_position>
		str_write("Found FP at     ");
 80004be:	4829      	ldr	r0, [pc, #164]	; (8000564 <FP_search+0x15c>)
 80004c0:	f000 fc3e 	bl	8000d40 <str_write>
		lcd_set_cursor_position(1, 0);
 80004c4:	2100      	movs	r1, #0
 80004c6:	2001      	movs	r0, #1
 80004c8:	f000 fc20 	bl	8000d0c <lcd_set_cursor_position>
		str_write("      PageID = ");
 80004cc:	4826      	ldr	r0, [pc, #152]	; (8000568 <FP_search+0x160>)
 80004ce:	f000 fc37 	bl	8000d40 <str_write>
		FP_ID = errorbuffer[10] + errorbuffer[11];//gets pageID = location of FP stored in FLASH
 80004d2:	4b26      	ldr	r3, [pc, #152]	; (800056c <FP_search+0x164>)
 80004d4:	7a9b      	ldrb	r3, [r3, #10]
 80004d6:	b29a      	uxth	r2, r3
 80004d8:	4b24      	ldr	r3, [pc, #144]	; (800056c <FP_search+0x164>)
 80004da:	7adb      	ldrb	r3, [r3, #11]
 80004dc:	b29b      	uxth	r3, r3
 80004de:	4413      	add	r3, r2
 80004e0:	b29a      	uxth	r2, r3
 80004e2:	4b23      	ldr	r3, [pc, #140]	; (8000570 <FP_search+0x168>)
 80004e4:	801a      	strh	r2, [r3, #0]
		write(FP_ID + '0');
 80004e6:	4b22      	ldr	r3, [pc, #136]	; (8000570 <FP_search+0x168>)
 80004e8:	881b      	ldrh	r3, [r3, #0]
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	3330      	adds	r3, #48	; 0x30
 80004ee:	b2db      	uxtb	r3, r3
 80004f0:	4618      	mov	r0, r3
 80004f2:	f000 fb9b 	bl	8000c2c <write>
		FPIDrdy = 1;
 80004f6:	4b1f      	ldr	r3, [pc, #124]	; (8000574 <FP_search+0x16c>)
 80004f8:	2201      	movs	r2, #1
 80004fa:	601a      	str	r2, [r3, #0]
 80004fc:	e020      	b.n	8000540 <FP_search+0x138>
		//return FP_ID;
	} else if (ConfirmationCode == 0x01) {
 80004fe:	4b14      	ldr	r3, [pc, #80]	; (8000550 <FP_search+0x148>)
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	2b01      	cmp	r3, #1
 8000504:	d10e      	bne.n	8000524 <FP_search+0x11c>
		lcd_set_cursor_position(0, 0);
 8000506:	2100      	movs	r1, #0
 8000508:	2000      	movs	r0, #0
 800050a:	f000 fbff 	bl	8000d0c <lcd_set_cursor_position>
		str_write("Error During    ");
 800050e:	481a      	ldr	r0, [pc, #104]	; (8000578 <FP_search+0x170>)
 8000510:	f000 fc16 	bl	8000d40 <str_write>
		lcd_set_cursor_position(1, 0);
 8000514:	2100      	movs	r1, #0
 8000516:	2001      	movs	r0, #1
 8000518:	f000 fbf8 	bl	8000d0c <lcd_set_cursor_position>
		str_write("                ");
 800051c:	4817      	ldr	r0, [pc, #92]	; (800057c <FP_search+0x174>)
 800051e:	f000 fc0f 	bl	8000d40 <str_write>
 8000522:	e00d      	b.n	8000540 <FP_search+0x138>
		//return -1;
	} else {
		lcd_set_cursor_position(0, 0);
 8000524:	2100      	movs	r1, #0
 8000526:	2000      	movs	r0, #0
 8000528:	f000 fbf0 	bl	8000d0c <lcd_set_cursor_position>
		str_write("FP Not Found    ");
 800052c:	4814      	ldr	r0, [pc, #80]	; (8000580 <FP_search+0x178>)
 800052e:	f000 fc07 	bl	8000d40 <str_write>
		lcd_set_cursor_position(1, 0);
 8000532:	2100      	movs	r1, #0
 8000534:	2001      	movs	r0, #1
 8000536:	f000 fbe9 	bl	8000d0c <lcd_set_cursor_position>
		str_write("Please Enroll   ");
 800053a:	4812      	ldr	r0, [pc, #72]	; (8000584 <FP_search+0x17c>)
 800053c:	f000 fc00 	bl	8000d40 <str_write>
		//return -1;
	}
}
 8000540:	bf00      	nop
 8000542:	4618      	mov	r0, r3
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	08002430 	.word	0x08002430
 800054c:	08002444 	.word	0x08002444
 8000550:	20000058 	.word	0x20000058
 8000554:	08002458 	.word	0x08002458
 8000558:	0800246c 	.word	0x0800246c
 800055c:	08002480 	.word	0x08002480
 8000560:	08002494 	.word	0x08002494
 8000564:	080024a8 	.word	0x080024a8
 8000568:	080024bc 	.word	0x080024bc
 800056c:	20000038 	.word	0x20000038
 8000570:	20000032 	.word	0x20000032
 8000574:	20000168 	.word	0x20000168
 8000578:	080024cc 	.word	0x080024cc
 800057c:	08002374 	.word	0x08002374
 8000580:	080024e0 	.word	0x080024e0
 8000584:	080024f4 	.word	0x080024f4

08000588 <delay_us>:

// delay in microseconds using SysTick timer to count CPU clock cycles
// do not call with 0 : error, maximum delay.
// careful calling with small nums : result in longer delays than specified:
//    e.g. @4MHz, delay_us(1) = 10=15 us delay.
void delay_us(const uint32_t time_us) {  // time_us = target delay, microseconds
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
    SysTick->LOAD = (uint32_t)((time_us * (SystemCoreClock / 1000000)) - 1);
 8000590:	4b11      	ldr	r3, [pc, #68]	; (80005d8 <delay_us+0x50>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a11      	ldr	r2, [pc, #68]	; (80005dc <delay_us+0x54>)
 8000596:	fba2 2303 	umull	r2, r3, r2, r3
 800059a:	0c9b      	lsrs	r3, r3, #18
 800059c:	687a      	ldr	r2, [r7, #4]
 800059e:	fb02 f303 	mul.w	r3, r2, r3
 80005a2:	4a0f      	ldr	r2, [pc, #60]	; (80005e0 <delay_us+0x58>)
 80005a4:	3b01      	subs	r3, #1
 80005a6:	6053      	str	r3, [r2, #4]
    SysTick->VAL = 0;                                      // clear the timer count
 80005a8:	4b0d      	ldr	r3, [pc, #52]	; (80005e0 <delay_us+0x58>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	609a      	str	r2, [r3, #8]
    SysTick->CTRL &= ~(SysTick_CTRL_COUNTFLAG_Msk);        // clear the count flag
 80005ae:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <delay_us+0x58>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4a0b      	ldr	r2, [pc, #44]	; (80005e0 <delay_us+0x58>)
 80005b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005b8:	6013      	str	r3, [r2, #0]
    while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)); // wait for the flag
 80005ba:	bf00      	nop
 80005bc:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <delay_us+0x58>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d0f9      	beq.n	80005bc <delay_us+0x34>
}
 80005c8:	bf00      	nop
 80005ca:	bf00      	nop
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000008 	.word	0x20000008
 80005dc:	431bde83 	.word	0x431bde83
 80005e0:	e000e010 	.word	0xe000e010

080005e4 <handshake>:
void FP_init(void) {
}

//--------------------Instructions to transmit
//Command to confirm if fingerprint is connected to upper computer
void handshake(void) {
 80005e4:	b590      	push	{r4, r7, lr}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
	char handshake[13] = { 0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF,	//instruction
 80005ea:	4b13      	ldr	r3, [pc, #76]	; (8000638 <handshake+0x54>)
 80005ec:	463c      	mov	r4, r7
 80005ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005f0:	c407      	stmia	r4!, {r0, r1, r2}
 80005f2:	7023      	strb	r3, [r4, #0]
			0x01, 0x00, 0x04, 0x17, 0x00, 0x00, 0x1C }; //a 0x00 after 0x01 before 0x04
	uint8_t i = 0;		//iteration counter
 80005f4:	2300      	movs	r3, #0
 80005f6:	73fb      	strb	r3, [r7, #15]
	while (i < 13) { //sends data from lowest byte to highest byte
 80005f8:	e011      	b.n	800061e <handshake+0x3a>
		while (!(USART2->ISR & USART_ISR_TXE))
 80005fa:	bf00      	nop
 80005fc:	4b0f      	ldr	r3, [pc, #60]	; (800063c <handshake+0x58>)
 80005fe:	69db      	ldr	r3, [r3, #28]
 8000600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000604:	2b00      	cmp	r3, #0
 8000606:	d0f9      	beq.n	80005fc <handshake+0x18>
			; //waits for empty transmit
		USART2->TDR = handshake[i];
 8000608:	7bfb      	ldrb	r3, [r7, #15]
 800060a:	3310      	adds	r3, #16
 800060c:	443b      	add	r3, r7
 800060e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8000612:	4b0a      	ldr	r3, [pc, #40]	; (800063c <handshake+0x58>)
 8000614:	b292      	uxth	r2, r2
 8000616:	851a      	strh	r2, [r3, #40]	; 0x28
		i++;	//increments array
 8000618:	7bfb      	ldrb	r3, [r7, #15]
 800061a:	3301      	adds	r3, #1
 800061c:	73fb      	strb	r3, [r7, #15]
	while (i < 13) { //sends data from lowest byte to highest byte
 800061e:	7bfb      	ldrb	r3, [r7, #15]
 8000620:	2b0c      	cmp	r3, #12
 8000622:	d9ea      	bls.n	80005fa <handshake+0x16>
	}
	ACK_LENGTH = 12; //Acknowledge packet 12 bytes long
 8000624:	4b06      	ldr	r3, [pc, #24]	; (8000640 <handshake+0x5c>)
 8000626:	220c      	movs	r2, #12
 8000628:	601a      	str	r2, [r3, #0]
	delay_us(CMD_DELAY); //to separate transmission and received data
 800062a:	4806      	ldr	r0, [pc, #24]	; (8000644 <handshake+0x60>)
 800062c:	f7ff ffac 	bl	8000588 <delay_us>
}
 8000630:	bf00      	nop
 8000632:	3714      	adds	r7, #20
 8000634:	46bd      	mov	sp, r7
 8000636:	bd90      	pop	{r4, r7, pc}
 8000638:	08002508 	.word	0x08002508
 800063c:	40004400 	.word	0x40004400
 8000640:	20000034 	.word	0x20000034
 8000644:	0007a120 	.word	0x0007a120

08000648 <SetSysPara>:
 * (4) Baud Rate: setting = [1,12] | setting value * 9600bps
 * (5) Security Level: setting = [1,5]
 * 					   1 FAR (false acceptance rate) highest - 5 FAR lowest
 * (6) Data Package Length : setting = [0,3] | 32 bytes, 64 bytes, 128 bytes, 256 bytes
 */
void SetSysPara(char param, char setting) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b088      	sub	sp, #32
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	460a      	mov	r2, r1
 8000652:	71fb      	strb	r3, [r7, #7]
 8000654:	4613      	mov	r3, r2
 8000656:	71bb      	strb	r3, [r7, #6]
	//sum = package identifier + package length + instruction code + package contents
	//IMPORTANT is the parameter number part of the checksum?? need to verify by checking if it exceeds 2 bytes
	uint16_t sum = 0x01 + 0x0005 + 0x0E + setting + param;//0x0007 package length, 0x01 package identifer
 8000658:	79bb      	ldrb	r3, [r7, #6]
 800065a:	b29a      	uxth	r2, r3
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	b29b      	uxth	r3, r3
 8000660:	4413      	add	r3, r2
 8000662:	b29b      	uxth	r3, r3
 8000664:	3314      	adds	r3, #20
 8000666:	83bb      	strh	r3, [r7, #28]
	char sum1 = (sum >> 8) & 0xFF;
 8000668:	8bbb      	ldrh	r3, [r7, #28]
 800066a:	0a1b      	lsrs	r3, r3, #8
 800066c:	b29b      	uxth	r3, r3
 800066e:	76fb      	strb	r3, [r7, #27]
	char sum2 = sum & 0xFF;
 8000670:	8bbb      	ldrh	r3, [r7, #28]
 8000672:	76bb      	strb	r3, [r7, #26]

	//might need to adjust address (will I have to change this? make current module address a global variable?
	char sys[14] = { 0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x05, 0x0E, //instruction
 8000674:	23ef      	movs	r3, #239	; 0xef
 8000676:	733b      	strb	r3, [r7, #12]
 8000678:	2301      	movs	r3, #1
 800067a:	737b      	strb	r3, [r7, #13]
 800067c:	23ff      	movs	r3, #255	; 0xff
 800067e:	73bb      	strb	r3, [r7, #14]
 8000680:	23ff      	movs	r3, #255	; 0xff
 8000682:	73fb      	strb	r3, [r7, #15]
 8000684:	23ff      	movs	r3, #255	; 0xff
 8000686:	743b      	strb	r3, [r7, #16]
 8000688:	23ff      	movs	r3, #255	; 0xff
 800068a:	747b      	strb	r3, [r7, #17]
 800068c:	2301      	movs	r3, #1
 800068e:	74bb      	strb	r3, [r7, #18]
 8000690:	2300      	movs	r3, #0
 8000692:	74fb      	strb	r3, [r7, #19]
 8000694:	2305      	movs	r3, #5
 8000696:	753b      	strb	r3, [r7, #20]
 8000698:	230e      	movs	r3, #14
 800069a:	757b      	strb	r3, [r7, #21]
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	75bb      	strb	r3, [r7, #22]
 80006a0:	79bb      	ldrb	r3, [r7, #6]
 80006a2:	75fb      	strb	r3, [r7, #23]
 80006a4:	7efb      	ldrb	r3, [r7, #27]
 80006a6:	763b      	strb	r3, [r7, #24]
 80006a8:	7ebb      	ldrb	r3, [r7, #26]
 80006aa:	767b      	strb	r3, [r7, #25]
			param, setting, sum1, sum2 };

	uint8_t i = 0;		//iteration counter
 80006ac:	2300      	movs	r3, #0
 80006ae:	77fb      	strb	r3, [r7, #31]
	while (i < 14) { //sends data from lowest byte to highest byte
 80006b0:	e011      	b.n	80006d6 <SetSysPara+0x8e>
		while (!(USART2->ISR & USART_ISR_TXE))
 80006b2:	bf00      	nop
 80006b4:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <SetSysPara+0xa8>)
 80006b6:	69db      	ldr	r3, [r3, #28]
 80006b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d0f9      	beq.n	80006b4 <SetSysPara+0x6c>
			; //waits for empty transmit
		USART2->TDR = sys[i];
 80006c0:	7ffb      	ldrb	r3, [r7, #31]
 80006c2:	3320      	adds	r3, #32
 80006c4:	443b      	add	r3, r7
 80006c6:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 80006ca:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <SetSysPara+0xa8>)
 80006cc:	b292      	uxth	r2, r2
 80006ce:	851a      	strh	r2, [r3, #40]	; 0x28
		i++;	//increments array
 80006d0:	7ffb      	ldrb	r3, [r7, #31]
 80006d2:	3301      	adds	r3, #1
 80006d4:	77fb      	strb	r3, [r7, #31]
	while (i < 14) { //sends data from lowest byte to highest byte
 80006d6:	7ffb      	ldrb	r3, [r7, #31]
 80006d8:	2b0d      	cmp	r3, #13
 80006da:	d9ea      	bls.n	80006b2 <SetSysPara+0x6a>
	}
	ACK_LENGTH = 12; //Acknowledge packet 12 bytes long
 80006dc:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <SetSysPara+0xac>)
 80006de:	220c      	movs	r2, #12
 80006e0:	601a      	str	r2, [r3, #0]
	delay_us(CMD_DELAY); //to separate transmission and received data
 80006e2:	4805      	ldr	r0, [pc, #20]	; (80006f8 <SetSysPara+0xb0>)
 80006e4:	f7ff ff50 	bl	8000588 <delay_us>
}
 80006e8:	bf00      	nop
 80006ea:	3720      	adds	r7, #32
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40004400 	.word	0x40004400
 80006f4:	20000034 	.word	0x20000034
 80006f8:	0007a120 	.word	0x0007a120

080006fc <genImg>:
	ACK_LENGTH = 14; //Acknowledge packet 14 bytes long
	delay_us(CMD_DELAY); //to separate transmission and received data
}


void genImg(void){
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
	//might need to adjust address (will I have to change this? make current module address a global variable?
	char gen[12] = { 0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x03, 0x01,
 8000702:	4a13      	ldr	r2, [pc, #76]	; (8000750 <genImg+0x54>)
 8000704:	463b      	mov	r3, r7
 8000706:	ca07      	ldmia	r2, {r0, r1, r2}
 8000708:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x00, 0x05 };

	uint8_t i = 0;		//iteration counter
 800070c:	2300      	movs	r3, #0
 800070e:	73fb      	strb	r3, [r7, #15]
	while (i < 12) { //sends data from lowest byte to highest byte
 8000710:	e011      	b.n	8000736 <genImg+0x3a>
		while (!(USART2->ISR & USART_ISR_TXE))
 8000712:	bf00      	nop
 8000714:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <genImg+0x58>)
 8000716:	69db      	ldr	r3, [r3, #28]
 8000718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800071c:	2b00      	cmp	r3, #0
 800071e:	d0f9      	beq.n	8000714 <genImg+0x18>
			; //waits for empty transmit
		USART2->TDR = gen[i];
 8000720:	7bfb      	ldrb	r3, [r7, #15]
 8000722:	3310      	adds	r3, #16
 8000724:	443b      	add	r3, r7
 8000726:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800072a:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <genImg+0x58>)
 800072c:	b292      	uxth	r2, r2
 800072e:	851a      	strh	r2, [r3, #40]	; 0x28
		i++;	//increments array
 8000730:	7bfb      	ldrb	r3, [r7, #15]
 8000732:	3301      	adds	r3, #1
 8000734:	73fb      	strb	r3, [r7, #15]
	while (i < 12) { //sends data from lowest byte to highest byte
 8000736:	7bfb      	ldrb	r3, [r7, #15]
 8000738:	2b0b      	cmp	r3, #11
 800073a:	d9ea      	bls.n	8000712 <genImg+0x16>
	}
	ACK_LENGTH = 12; //Acknowledge packet 12 bytes long
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <genImg+0x5c>)
 800073e:	220c      	movs	r2, #12
 8000740:	601a      	str	r2, [r3, #0]
	delay_us(CMD_DELAY); //to separate transmission and received data
 8000742:	4806      	ldr	r0, [pc, #24]	; (800075c <genImg+0x60>)
 8000744:	f7ff ff20 	bl	8000588 <delay_us>
}
 8000748:	bf00      	nop
 800074a:	3710      	adds	r7, #16
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	08002524 	.word	0x08002524
 8000754:	40004400 	.word	0x40004400
 8000758:	20000034 	.word	0x20000034
 800075c:	0007a120 	.word	0x0007a120

08000760 <Img2Tz>:
//--------------
//--------------ALL CHECKSUM BELOW IS CORRECT:
//Need to add all package identifier, package length, and pakacage contents
//--------------
//generates character file and stores in charbuffer1/charbuffer2 (buffID)
void Img2Tz(char buffID){
 8000760:	b580      	push	{r7, lr}
 8000762:	b088      	sub	sp, #32
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	71fb      	strb	r3, [r7, #7]
	//sum = package identifier + package length + instruction code + package contents
	//IMPORTANT is the parameter number part of the checksum?? need to verify by checking if it exceeds 2 bytes
	uint16_t sum = 0x01 + 0x0004 + 0x02 + buffID;//0x0007 package length, 0x01 package identifer
 800076a:	79fb      	ldrb	r3, [r7, #7]
 800076c:	b29b      	uxth	r3, r3
 800076e:	3307      	adds	r3, #7
 8000770:	83bb      	strh	r3, [r7, #28]
	char sum1 = (sum >> 8) & 0xFF;
 8000772:	8bbb      	ldrh	r3, [r7, #28]
 8000774:	0a1b      	lsrs	r3, r3, #8
 8000776:	b29b      	uxth	r3, r3
 8000778:	76fb      	strb	r3, [r7, #27]
	char sum2 = sum & 0xFF;
 800077a:	8bbb      	ldrh	r3, [r7, #28]
 800077c:	76bb      	strb	r3, [r7, #26]
	buffID = 0x00 + buffID;

	//instruction to send
	char img[13] = { 0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x04, 0x02, //instruction
 800077e:	23ef      	movs	r3, #239	; 0xef
 8000780:	733b      	strb	r3, [r7, #12]
 8000782:	2301      	movs	r3, #1
 8000784:	737b      	strb	r3, [r7, #13]
 8000786:	23ff      	movs	r3, #255	; 0xff
 8000788:	73bb      	strb	r3, [r7, #14]
 800078a:	23ff      	movs	r3, #255	; 0xff
 800078c:	73fb      	strb	r3, [r7, #15]
 800078e:	23ff      	movs	r3, #255	; 0xff
 8000790:	743b      	strb	r3, [r7, #16]
 8000792:	23ff      	movs	r3, #255	; 0xff
 8000794:	747b      	strb	r3, [r7, #17]
 8000796:	2301      	movs	r3, #1
 8000798:	74bb      	strb	r3, [r7, #18]
 800079a:	2300      	movs	r3, #0
 800079c:	74fb      	strb	r3, [r7, #19]
 800079e:	2304      	movs	r3, #4
 80007a0:	753b      	strb	r3, [r7, #20]
 80007a2:	2302      	movs	r3, #2
 80007a4:	757b      	strb	r3, [r7, #21]
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	75bb      	strb	r3, [r7, #22]
 80007aa:	7efb      	ldrb	r3, [r7, #27]
 80007ac:	75fb      	strb	r3, [r7, #23]
 80007ae:	7ebb      	ldrb	r3, [r7, #26]
 80007b0:	763b      	strb	r3, [r7, #24]
			buffID, sum1, sum2 };

	uint8_t i = 0;		//iteration counter
 80007b2:	2300      	movs	r3, #0
 80007b4:	77fb      	strb	r3, [r7, #31]
	while (i < 13) { //sends data from lowest byte to highest byte
 80007b6:	e011      	b.n	80007dc <Img2Tz+0x7c>
		while (!(USART2->ISR & USART_ISR_TXE))
 80007b8:	bf00      	nop
 80007ba:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <Img2Tz+0x98>)
 80007bc:	69db      	ldr	r3, [r3, #28]
 80007be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d0f9      	beq.n	80007ba <Img2Tz+0x5a>
			; //waits for empty transmit
		USART2->TDR = img[i];
 80007c6:	7ffb      	ldrb	r3, [r7, #31]
 80007c8:	3320      	adds	r3, #32
 80007ca:	443b      	add	r3, r7
 80007cc:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 80007d0:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <Img2Tz+0x98>)
 80007d2:	b292      	uxth	r2, r2
 80007d4:	851a      	strh	r2, [r3, #40]	; 0x28
		i++;	//increments array
 80007d6:	7ffb      	ldrb	r3, [r7, #31]
 80007d8:	3301      	adds	r3, #1
 80007da:	77fb      	strb	r3, [r7, #31]
	while (i < 13) { //sends data from lowest byte to highest byte
 80007dc:	7ffb      	ldrb	r3, [r7, #31]
 80007de:	2b0c      	cmp	r3, #12
 80007e0:	d9ea      	bls.n	80007b8 <Img2Tz+0x58>
	}
	ACK_LENGTH = 12; //Acknowledge packet 12 bytes long
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <Img2Tz+0x9c>)
 80007e4:	220c      	movs	r2, #12
 80007e6:	601a      	str	r2, [r3, #0]
	delay_us(CMD_DELAY); //to separate transmission and received data
 80007e8:	4805      	ldr	r0, [pc, #20]	; (8000800 <Img2Tz+0xa0>)
 80007ea:	f7ff fecd 	bl	8000588 <delay_us>
}
 80007ee:	bf00      	nop
 80007f0:	3720      	adds	r7, #32
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40004400 	.word	0x40004400
 80007fc:	20000034 	.word	0x20000034
 8000800:	0007a120 	.word	0x0007a120

08000804 <regMode>:


//----------PROBLEM: not writing 0x09 final byte
//combines template from both inputs and generates a template
void regMode(void) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
	//might need to adjust address (will I have to change this? make current module address a global variable?
	char reg[12] = { 0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x03, 0x05,//instruction
 800080a:	4a13      	ldr	r2, [pc, #76]	; (8000858 <regMode+0x54>)
 800080c:	463b      	mov	r3, r7
 800080e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000810:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x00, 0x09 };

	uint8_t i = 0;		//iteration counter
 8000814:	2300      	movs	r3, #0
 8000816:	73fb      	strb	r3, [r7, #15]
	while (i < 12) { //sends data from lowest byte to highest byte
 8000818:	e011      	b.n	800083e <regMode+0x3a>
		while (!(USART2->ISR & USART_ISR_TXE))
 800081a:	bf00      	nop
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <regMode+0x58>)
 800081e:	69db      	ldr	r3, [r3, #28]
 8000820:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000824:	2b00      	cmp	r3, #0
 8000826:	d0f9      	beq.n	800081c <regMode+0x18>
			; //waits for empty transmit
		USART2->TDR = reg[i];
 8000828:	7bfb      	ldrb	r3, [r7, #15]
 800082a:	3310      	adds	r3, #16
 800082c:	443b      	add	r3, r7
 800082e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8000832:	4b0a      	ldr	r3, [pc, #40]	; (800085c <regMode+0x58>)
 8000834:	b292      	uxth	r2, r2
 8000836:	851a      	strh	r2, [r3, #40]	; 0x28
		i++;	//increments array
 8000838:	7bfb      	ldrb	r3, [r7, #15]
 800083a:	3301      	adds	r3, #1
 800083c:	73fb      	strb	r3, [r7, #15]
	while (i < 12) { //sends data from lowest byte to highest byte
 800083e:	7bfb      	ldrb	r3, [r7, #15]
 8000840:	2b0b      	cmp	r3, #11
 8000842:	d9ea      	bls.n	800081a <regMode+0x16>
	}
	ACK_LENGTH = 12; //Acknowledge packet 12 bytes long
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <regMode+0x5c>)
 8000846:	220c      	movs	r2, #12
 8000848:	601a      	str	r2, [r3, #0]
	delay_us(CMD_DELAY); //to separate transmission and received data
 800084a:	4806      	ldr	r0, [pc, #24]	; (8000864 <regMode+0x60>)
 800084c:	f7ff fe9c 	bl	8000588 <delay_us>
}
 8000850:	bf00      	nop
 8000852:	3710      	adds	r7, #16
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	08002530 	.word	0x08002530
 800085c:	40004400 	.word	0x40004400
 8000860:	20000034 	.word	0x20000034
 8000864:	0007a120 	.word	0x0007a120

08000868 <store>:

//stores template at specified buffer (buff1/buff2) at specified location (pageID)
void store(char buffID, uint16_t pageID) {
 8000868:	b580      	push	{r7, lr}
 800086a:	b088      	sub	sp, #32
 800086c:	af00      	add	r7, sp, #0
 800086e:	4603      	mov	r3, r0
 8000870:	460a      	mov	r2, r1
 8000872:	71fb      	strb	r3, [r7, #7]
 8000874:	4613      	mov	r3, r2
 8000876:	80bb      	strh	r3, [r7, #4]
	//sum = package identifier + package length + instruction code + package contents
	//IMPORTANT is the parameter number part of the checksum?? need to verify by checking if it exceeds 2 bytes
	uint16_t sum = 0x01 + 0x0006 + 0x06 + buffID + pageID;//0x0007 package length, 0x01 package identifer
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	b29a      	uxth	r2, r3
 800087c:	88bb      	ldrh	r3, [r7, #4]
 800087e:	4413      	add	r3, r2
 8000880:	b29b      	uxth	r3, r3
 8000882:	330d      	adds	r3, #13
 8000884:	83bb      	strh	r3, [r7, #28]
	char sum1 = (sum >> 8) & 0xFF;
 8000886:	8bbb      	ldrh	r3, [r7, #28]
 8000888:	0a1b      	lsrs	r3, r3, #8
 800088a:	b29b      	uxth	r3, r3
 800088c:	76fb      	strb	r3, [r7, #27]
	char sum2 = sum & 0xFF;
 800088e:	8bbb      	ldrh	r3, [r7, #28]
 8000890:	76bb      	strb	r3, [r7, #26]

	//separates pageID
	char pageIDH = (pageID >> 8) & 0xFF;
 8000892:	88bb      	ldrh	r3, [r7, #4]
 8000894:	0a1b      	lsrs	r3, r3, #8
 8000896:	b29b      	uxth	r3, r3
 8000898:	767b      	strb	r3, [r7, #25]
	char pageIDL = pageID & 0xFF;
 800089a:	88bb      	ldrh	r3, [r7, #4]
 800089c:	763b      	strb	r3, [r7, #24]

	//might need to adjust address (will I have to change this? make current module address a global variable?
	char sto[15] = { 0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x06,//instructions
 800089e:	23ef      	movs	r3, #239	; 0xef
 80008a0:	723b      	strb	r3, [r7, #8]
 80008a2:	2301      	movs	r3, #1
 80008a4:	727b      	strb	r3, [r7, #9]
 80008a6:	23ff      	movs	r3, #255	; 0xff
 80008a8:	72bb      	strb	r3, [r7, #10]
 80008aa:	23ff      	movs	r3, #255	; 0xff
 80008ac:	72fb      	strb	r3, [r7, #11]
 80008ae:	23ff      	movs	r3, #255	; 0xff
 80008b0:	733b      	strb	r3, [r7, #12]
 80008b2:	23ff      	movs	r3, #255	; 0xff
 80008b4:	737b      	strb	r3, [r7, #13]
 80008b6:	2301      	movs	r3, #1
 80008b8:	73bb      	strb	r3, [r7, #14]
 80008ba:	2300      	movs	r3, #0
 80008bc:	73fb      	strb	r3, [r7, #15]
 80008be:	2306      	movs	r3, #6
 80008c0:	743b      	strb	r3, [r7, #16]
 80008c2:	2306      	movs	r3, #6
 80008c4:	747b      	strb	r3, [r7, #17]
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	74bb      	strb	r3, [r7, #18]
 80008ca:	7e7b      	ldrb	r3, [r7, #25]
 80008cc:	74fb      	strb	r3, [r7, #19]
 80008ce:	7e3b      	ldrb	r3, [r7, #24]
 80008d0:	753b      	strb	r3, [r7, #20]
 80008d2:	7efb      	ldrb	r3, [r7, #27]
 80008d4:	757b      	strb	r3, [r7, #21]
 80008d6:	7ebb      	ldrb	r3, [r7, #26]
 80008d8:	75bb      	strb	r3, [r7, #22]
			0x06, buffID, pageIDH, pageIDL, sum1, sum2 };

	uint8_t i = 0;		//iteration counter
 80008da:	2300      	movs	r3, #0
 80008dc:	77fb      	strb	r3, [r7, #31]
	while (i < 15) { //sends data from lowest byte to highest byte
 80008de:	e011      	b.n	8000904 <store+0x9c>
		while (!(USART2->ISR & USART_ISR_TXE))
 80008e0:	bf00      	nop
 80008e2:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <store+0xb8>)
 80008e4:	69db      	ldr	r3, [r3, #28]
 80008e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d0f9      	beq.n	80008e2 <store+0x7a>
			; //waits for empty transmit
		USART2->TDR = sto[i];
 80008ee:	7ffb      	ldrb	r3, [r7, #31]
 80008f0:	3320      	adds	r3, #32
 80008f2:	443b      	add	r3, r7
 80008f4:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80008f8:	4b09      	ldr	r3, [pc, #36]	; (8000920 <store+0xb8>)
 80008fa:	b292      	uxth	r2, r2
 80008fc:	851a      	strh	r2, [r3, #40]	; 0x28
		i++;	//increments array
 80008fe:	7ffb      	ldrb	r3, [r7, #31]
 8000900:	3301      	adds	r3, #1
 8000902:	77fb      	strb	r3, [r7, #31]
	while (i < 15) { //sends data from lowest byte to highest byte
 8000904:	7ffb      	ldrb	r3, [r7, #31]
 8000906:	2b0e      	cmp	r3, #14
 8000908:	d9ea      	bls.n	80008e0 <store+0x78>
	}
	ACK_LENGTH = 12; //Acknowledge packet 12 bytes long
 800090a:	4b06      	ldr	r3, [pc, #24]	; (8000924 <store+0xbc>)
 800090c:	220c      	movs	r2, #12
 800090e:	601a      	str	r2, [r3, #0]
	delay_us(CMD_DELAY); //to separate transmission and received data
 8000910:	4805      	ldr	r0, [pc, #20]	; (8000928 <store+0xc0>)
 8000912:	f7ff fe39 	bl	8000588 <delay_us>
}
 8000916:	bf00      	nop
 8000918:	3720      	adds	r7, #32
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40004400 	.word	0x40004400
 8000924:	20000034 	.word	0x20000034
 8000928:	0007a120 	.word	0x0007a120

0800092c <empty>:
	ACK_LENGTH = 12; //Acknowledge packet 12 bytes long
	delay_us(CMD_DELAY); //to separate transmission and received data
}

//empties entire data base
void empty(void) {
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
	//might need to adjust address (will I have to change this? make current module address a global variable?
	char emp[12] = { 0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x03,//instructions
 8000932:	4a13      	ldr	r2, [pc, #76]	; (8000980 <empty+0x54>)
 8000934:	463b      	mov	r3, r7
 8000936:	ca07      	ldmia	r2, {r0, r1, r2}
 8000938:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x0D, 0x00, 0x11 };

	uint8_t i = 0;		//iteration counter
 800093c:	2300      	movs	r3, #0
 800093e:	73fb      	strb	r3, [r7, #15]
	while (i < 11) { //sends data from lowest byte to highest byte
 8000940:	e011      	b.n	8000966 <empty+0x3a>
		while (!(USART2->ISR & USART_ISR_TXE))
 8000942:	bf00      	nop
 8000944:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <empty+0x58>)
 8000946:	69db      	ldr	r3, [r3, #28]
 8000948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800094c:	2b00      	cmp	r3, #0
 800094e:	d0f9      	beq.n	8000944 <empty+0x18>
			; //waits for empty transmit
		USART2->TDR = emp[i];
 8000950:	7bfb      	ldrb	r3, [r7, #15]
 8000952:	3310      	adds	r3, #16
 8000954:	443b      	add	r3, r7
 8000956:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800095a:	4b0a      	ldr	r3, [pc, #40]	; (8000984 <empty+0x58>)
 800095c:	b292      	uxth	r2, r2
 800095e:	851a      	strh	r2, [r3, #40]	; 0x28
		i++;	//increments array
 8000960:	7bfb      	ldrb	r3, [r7, #15]
 8000962:	3301      	adds	r3, #1
 8000964:	73fb      	strb	r3, [r7, #15]
	while (i < 11) { //sends data from lowest byte to highest byte
 8000966:	7bfb      	ldrb	r3, [r7, #15]
 8000968:	2b0a      	cmp	r3, #10
 800096a:	d9ea      	bls.n	8000942 <empty+0x16>
	}
	ACK_LENGTH = 12; //Acknowledge packet 12 bytes long
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <empty+0x5c>)
 800096e:	220c      	movs	r2, #12
 8000970:	601a      	str	r2, [r3, #0]
	delay_us(CMD_DELAY); //to separate transmission and received data
 8000972:	4806      	ldr	r0, [pc, #24]	; (800098c <empty+0x60>)
 8000974:	f7ff fe08 	bl	8000588 <delay_us>
}
 8000978:	bf00      	nop
 800097a:	3710      	adds	r7, #16
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	0800253c 	.word	0x0800253c
 8000984:	40004400 	.word	0x40004400
 8000988:	20000034 	.word	0x20000034
 800098c:	0007a120 	.word	0x0007a120

08000990 <search>:
	delay_us(CMD_DELAY); //to separate transmission and received data
}

//search whole library to find what matches
//INPUT: BufferID (charbuff1/charbuff2), startPage(searching start), pageNum(searching numbers)
void search(char buffID, uint16_t startPage, uint16_t pageNum) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	; 0x28
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
 800099a:	460b      	mov	r3, r1
 800099c:	80bb      	strh	r3, [r7, #4]
 800099e:	4613      	mov	r3, r2
 80009a0:	807b      	strh	r3, [r7, #2]
	//checksum
	int16_t sum = 0x01 + 0x0008 + 0x04 + buffID + startPage + pageNum;
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	b29a      	uxth	r2, r3
 80009a6:	88bb      	ldrh	r3, [r7, #4]
 80009a8:	4413      	add	r3, r2
 80009aa:	b29a      	uxth	r2, r3
 80009ac:	887b      	ldrh	r3, [r7, #2]
 80009ae:	4413      	add	r3, r2
 80009b0:	b29b      	uxth	r3, r3
 80009b2:	330d      	adds	r3, #13
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	84bb      	strh	r3, [r7, #36]	; 0x24
	char sum1 = (sum >> 8) & 0xFF;
 80009b8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80009bc:	121b      	asrs	r3, r3, #8
 80009be:	b21b      	sxth	r3, r3
 80009c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	char sum2 = sum & 0xFF;
 80009c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80009c6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	//separates startPage and pageNum
	char sPH = (startPage >> 8) & 0xFF;
 80009ca:	88bb      	ldrh	r3, [r7, #4]
 80009cc:	0a1b      	lsrs	r3, r3, #8
 80009ce:	b29b      	uxth	r3, r3
 80009d0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	char sPL = startPage & 0xFF;
 80009d4:	88bb      	ldrh	r3, [r7, #4]
 80009d6:	f887 3020 	strb.w	r3, [r7, #32]
	char pNH = (pageNum >> 8) & 0xFF;
 80009da:	887b      	ldrh	r3, [r7, #2]
 80009dc:	0a1b      	lsrs	r3, r3, #8
 80009de:	b29b      	uxth	r3, r3
 80009e0:	77fb      	strb	r3, [r7, #31]
	char pNL = pageNum & 0xFF;
 80009e2:	887b      	ldrh	r3, [r7, #2]
 80009e4:	77bb      	strb	r3, [r7, #30]

	//might need to adjust address (will I have to change this? make current module address a global variable?
	char ser[17] = { 0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x08,//instructions
 80009e6:	23ef      	movs	r3, #239	; 0xef
 80009e8:	733b      	strb	r3, [r7, #12]
 80009ea:	2301      	movs	r3, #1
 80009ec:	737b      	strb	r3, [r7, #13]
 80009ee:	23ff      	movs	r3, #255	; 0xff
 80009f0:	73bb      	strb	r3, [r7, #14]
 80009f2:	23ff      	movs	r3, #255	; 0xff
 80009f4:	73fb      	strb	r3, [r7, #15]
 80009f6:	23ff      	movs	r3, #255	; 0xff
 80009f8:	743b      	strb	r3, [r7, #16]
 80009fa:	23ff      	movs	r3, #255	; 0xff
 80009fc:	747b      	strb	r3, [r7, #17]
 80009fe:	2301      	movs	r3, #1
 8000a00:	74bb      	strb	r3, [r7, #18]
 8000a02:	2300      	movs	r3, #0
 8000a04:	74fb      	strb	r3, [r7, #19]
 8000a06:	2308      	movs	r3, #8
 8000a08:	753b      	strb	r3, [r7, #20]
 8000a0a:	2304      	movs	r3, #4
 8000a0c:	757b      	strb	r3, [r7, #21]
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	75bb      	strb	r3, [r7, #22]
 8000a12:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000a16:	75fb      	strb	r3, [r7, #23]
 8000a18:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000a1c:	763b      	strb	r3, [r7, #24]
 8000a1e:	7ffb      	ldrb	r3, [r7, #31]
 8000a20:	767b      	strb	r3, [r7, #25]
 8000a22:	7fbb      	ldrb	r3, [r7, #30]
 8000a24:	76bb      	strb	r3, [r7, #26]
 8000a26:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000a2a:	76fb      	strb	r3, [r7, #27]
 8000a2c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000a30:	773b      	strb	r3, [r7, #28]
			0x04, buffID, sPH, sPL, pNH, pNL, sum1, sum2 };

	uint8_t i = 0;		//iteration counter
 8000a32:	2300      	movs	r3, #0
 8000a34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (i < 17) { //sends data from lowest byte to highest byte
 8000a38:	e014      	b.n	8000a64 <search+0xd4>
		while (!(USART2->ISR & USART_ISR_TXE))
 8000a3a:	bf00      	nop
 8000a3c:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <search+0xf0>)
 8000a3e:	69db      	ldr	r3, [r3, #28]
 8000a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d0f9      	beq.n	8000a3c <search+0xac>
			; //waits for empty transmit
		USART2->TDR = ser[i];
 8000a48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a4c:	3328      	adds	r3, #40	; 0x28
 8000a4e:	443b      	add	r3, r7
 8000a50:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
 8000a54:	4b0a      	ldr	r3, [pc, #40]	; (8000a80 <search+0xf0>)
 8000a56:	b292      	uxth	r2, r2
 8000a58:	851a      	strh	r2, [r3, #40]	; 0x28
		i++;	//increments array
 8000a5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a5e:	3301      	adds	r3, #1
 8000a60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (i < 17) { //sends data from lowest byte to highest byte
 8000a64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a68:	2b10      	cmp	r3, #16
 8000a6a:	d9e6      	bls.n	8000a3a <search+0xaa>
	}
	ACK_LENGTH = 16; //Acknowledge packet 12 bytes long
 8000a6c:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <search+0xf4>)
 8000a6e:	2210      	movs	r2, #16
 8000a70:	601a      	str	r2, [r3, #0]
	delay_us(CMD_DELAY); //to separate transmission and received data
 8000a72:	4805      	ldr	r0, [pc, #20]	; (8000a88 <search+0xf8>)
 8000a74:	f7ff fd88 	bl	8000588 <delay_us>
}
 8000a78:	bf00      	nop
 8000a7a:	3728      	adds	r7, #40	; 0x28
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40004400 	.word	0x40004400
 8000a84:	20000034 	.word	0x20000034
 8000a88:	0007a120 	.word	0x0007a120

08000a8c <LCD_init>:
//void clear_LCD(void);

//data bus array
uint16_t GPIO_Pin[] = {D4, D5, D6, D7};

void LCD_init(void) {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  delay_us(100000);
 8000a90:	4825      	ldr	r0, [pc, #148]	; (8000b28 <LCD_init+0x9c>)
 8000a92:	f7ff fd79 	bl	8000588 <delay_us>
  RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOEEN); // enable GPIOA clock on bus
 8000a96:	4b25      	ldr	r3, [pc, #148]	; (8000b2c <LCD_init+0xa0>)
 8000a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9a:	4a24      	ldr	r2, [pc, #144]	; (8000b2c <LCD_init+0xa0>)
 8000a9c:	f043 0310 	orr.w	r3, r3, #16
 8000aa0:	64d3      	str	r3, [r2, #76]	; 0x4c

  // Making control pins output mode bits(01)
  control_pins->MODER &=
 8000aa2:	4b23      	ldr	r3, [pc, #140]	; (8000b30 <LCD_init+0xa4>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a22      	ldr	r2, [pc, #136]	; (8000b30 <LCD_init+0xa4>)
 8000aa8:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8000aac:	6013      	str	r3, [r2, #0]
      ~(GPIO_MODER_MODE9 | GPIO_MODER_MODE10 | GPIO_MODER_MODE11 |
        GPIO_MODER_MODE12 | GPIO_MODER_MODE13 | GPIO_MODER_MODE14 |
        GPIO_MODER_MODE15); // clear bits for PA
  control_pins->MODER |=
 8000aae:	4b20      	ldr	r3, [pc, #128]	; (8000b30 <LCD_init+0xa4>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a1f      	ldr	r2, [pc, #124]	; (8000b30 <LCD_init+0xa4>)
 8000ab4:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 8000ab8:	f443 03a8 	orr.w	r3, r3, #5505024	; 0x540000
 8000abc:	6013      	str	r3, [r2, #0]
      (GPIO_MODER_MODE9_0 | GPIO_MODER_MODE10_0 | GPIO_MODER_MODE11_0 |
       GPIO_MODER_MODE12_0 | GPIO_MODER_MODE13_0 | GPIO_MODER_MODE14_0 |
       GPIO_MODER_MODE15_0); // set up DB4 to DB7, RS, RW, E as outputs
  control_pins->OTYPER &=
 8000abe:	4b1c      	ldr	r3, [pc, #112]	; (8000b30 <LCD_init+0xa4>)
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	4a1b      	ldr	r2, [pc, #108]	; (8000b30 <LCD_init+0xa4>)
 8000ac4:	f423 437e 	bic.w	r3, r3, #65024	; 0xfe00
 8000ac8:	6053      	str	r3, [r2, #4]
      ~(GPIO_OTYPER_OT9 | GPIO_OTYPER_OT10 | GPIO_OTYPER_OT11 | GPIO_OTYPER_OT12 |
        GPIO_OTYPER_OT13 | GPIO_OTYPER_OT14 | GPIO_OTYPER_OT15);
  control_pins->OSPEEDR |=
 8000aca:	4b19      	ldr	r3, [pc, #100]	; (8000b30 <LCD_init+0xa4>)
 8000acc:	689b      	ldr	r3, [r3, #8]
 8000ace:	4a18      	ldr	r2, [pc, #96]	; (8000b30 <LCD_init+0xa4>)
 8000ad0:	ea6f 3383 	mvn.w	r3, r3, lsl #14
 8000ad4:	ea6f 3393 	mvn.w	r3, r3, lsr #14
 8000ad8:	6093      	str	r3, [r2, #8]
      ((3 << GPIO_OSPEEDR_OSPEED9_Pos) | (3 << GPIO_OSPEEDR_OSPEED10_Pos) |
       (3 << GPIO_OSPEEDR_OSPEED11_Pos) | (3 << GPIO_OSPEEDR_OSPEED12_Pos) |
       (3 << GPIO_OSPEEDR_OSPEED13_Pos) | (3 << GPIO_OSPEEDR_OSPEED14_Pos) |
       (3 << GPIO_OSPEEDR_OSPEED15_Pos));
  control_pins->BRR =
 8000ada:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <LCD_init+0xa4>)
 8000adc:	f44f 427e 	mov.w	r2, #65024	; 0xfe00
 8000ae0:	629a      	str	r2, [r3, #40]	; 0x28
      (D4 | D5 | D6 | D7 | EN | RW | RS); // Initializes data to all 0

  //LCD init commands based on the LCD datasheet
  delay_us(100000);
 8000ae2:	4811      	ldr	r0, [pc, #68]	; (8000b28 <LCD_init+0x9c>)
 8000ae4:	f7ff fd50 	bl	8000588 <delay_us>
  command(0x30);
 8000ae8:	2030      	movs	r0, #48	; 0x30
 8000aea:	f000 f83d 	bl	8000b68 <command>
  delay_us(100);
 8000aee:	2064      	movs	r0, #100	; 0x64
 8000af0:	f7ff fd4a 	bl	8000588 <delay_us>
  command(0x30);
 8000af4:	2030      	movs	r0, #48	; 0x30
 8000af6:	f000 f837 	bl	8000b68 <command>
  delay_us(100);
 8000afa:	2064      	movs	r0, #100	; 0x64
 8000afc:	f7ff fd44 	bl	8000588 <delay_us>
  command(0x30);
 8000b00:	2030      	movs	r0, #48	; 0x30
 8000b02:	f000 f831 	bl	8000b68 <command>
  delay_us(100);
 8000b06:	2064      	movs	r0, #100	; 0x64
 8000b08:	f7ff fd3e 	bl	8000588 <delay_us>
  command(0x20);
 8000b0c:	2020      	movs	r0, #32
 8000b0e:	f000 f82b 	bl	8000b68 <command>
  delay_us(100);
 8000b12:	2064      	movs	r0, #100	; 0x64
 8000b14:	f7ff fd38 	bl	8000588 <delay_us>
  command(0x02);
 8000b18:	2002      	movs	r0, #2
 8000b1a:	f000 f825 	bl	8000b68 <command>
  delay_us(100);
 8000b1e:	2064      	movs	r0, #100	; 0x64
 8000b20:	f7ff fd32 	bl	8000588 <delay_us>
}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	000186a0 	.word	0x000186a0
 8000b2c:	40021000 	.word	0x40021000
 8000b30:	48001000 	.word	0x48001000

08000b34 <Nybble>:

void Nybble() {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  control_pins->BSRR = EN;  //turn on EN for pulse
 8000b38:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <Nybble+0x30>)
 8000b3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b3e:	619a      	str	r2, [r3, #24]
  delay_us(50); // wait
 8000b40:	2032      	movs	r0, #50	; 0x32
 8000b42:	f7ff fd21 	bl	8000588 <delay_us>
  control_pins->BRR = EN;   //turn off EN for pulse
 8000b46:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <Nybble+0x30>)
 8000b48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b4c:	629a      	str	r2, [r3, #40]	; 0x28
  delay_us(50);                                // wait
 8000b4e:	2032      	movs	r0, #50	; 0x32
 8000b50:	f7ff fd1a 	bl	8000588 <delay_us>
  control_pins->ODR &= ~((D4 | D5 | D6 | D7)); // clear data registers
 8000b54:	4b03      	ldr	r3, [pc, #12]	; (8000b64 <Nybble+0x30>)
 8000b56:	695b      	ldr	r3, [r3, #20]
 8000b58:	4a02      	ldr	r2, [pc, #8]	; (8000b64 <Nybble+0x30>)
 8000b5a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000b5e:	6153      	str	r3, [r2, #20]
}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	48001000 	.word	0x48001000

08000b68 <command>:

void command(uint8_t command) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
  uint8_t command2 = command >> 4; //shift higher nibbles to lower nibbles
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	091b      	lsrs	r3, r3, #4
 8000b76:	73fb      	strb	r3, [r7, #15]
  control_pins->BRR = (RS | RW); // set RS and RW to zero
 8000b78:	4b2a      	ldr	r3, [pc, #168]	; (8000c24 <command+0xbc>)
 8000b7a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000b7e:	629a      	str	r2, [r3, #40]	; 0x28

  for (int i = 0; i < 4; i++) {  //loop through data bus and turn on or off
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]
 8000b84:	e017      	b.n	8000bb6 <command+0x4e>
    if ((command2 >> i) & 0x01) {
 8000b86:	7bfa      	ldrb	r2, [r7, #15]
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	fa42 f303 	asr.w	r3, r2, r3
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d006      	beq.n	8000ba4 <command+0x3c>
      control_pins->BSRR = GPIO_Pin[i];
 8000b96:	4a24      	ldr	r2, [pc, #144]	; (8000c28 <command+0xc0>)
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000b9e:	4b21      	ldr	r3, [pc, #132]	; (8000c24 <command+0xbc>)
 8000ba0:	619a      	str	r2, [r3, #24]
 8000ba2:	e005      	b.n	8000bb0 <command+0x48>
    } else {
      control_pins->BRR = GPIO_Pin[i];
 8000ba4:	4a20      	ldr	r2, [pc, #128]	; (8000c28 <command+0xc0>)
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000bac:	4b1d      	ldr	r3, [pc, #116]	; (8000c24 <command+0xbc>)
 8000bae:	629a      	str	r2, [r3, #40]	; 0x28
  for (int i = 0; i < 4; i++) {  //loop through data bus and turn on or off
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	617b      	str	r3, [r7, #20]
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	2b03      	cmp	r3, #3
 8000bba:	dde4      	ble.n	8000b86 <command+0x1e>
    }
  }

  delay_us(1000);
 8000bbc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bc0:	f7ff fce2 	bl	8000588 <delay_us>
  Nybble(); // Send pulse
 8000bc4:	f7ff ffb6 	bl	8000b34 <Nybble>

  for (int i = 0; i < 4; i++) {
 8000bc8:	2300      	movs	r3, #0
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	e017      	b.n	8000bfe <command+0x96>
    if ((command >> i) & 0x01) { //loop through data bus and turn on or off
 8000bce:	79fa      	ldrb	r2, [r7, #7]
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	fa42 f303 	asr.w	r3, r2, r3
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d006      	beq.n	8000bec <command+0x84>
      control_pins->BSRR = GPIO_Pin[i];
 8000bde:	4a12      	ldr	r2, [pc, #72]	; (8000c28 <command+0xc0>)
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000be6:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <command+0xbc>)
 8000be8:	619a      	str	r2, [r3, #24]
 8000bea:	e005      	b.n	8000bf8 <command+0x90>
    } else {
      control_pins->BRR = GPIO_Pin[i];
 8000bec:	4a0e      	ldr	r2, [pc, #56]	; (8000c28 <command+0xc0>)
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000bf4:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <command+0xbc>)
 8000bf6:	629a      	str	r2, [r3, #40]	; 0x28
  for (int i = 0; i < 4; i++) {
 8000bf8:	693b      	ldr	r3, [r7, #16]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	613b      	str	r3, [r7, #16]
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	2b03      	cmp	r3, #3
 8000c02:	dde4      	ble.n	8000bce <command+0x66>
    }
  }
  delay_us(1000);
 8000c04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c08:	f7ff fcbe 	bl	8000588 <delay_us>
  Nybble();                                    // Send pulse
 8000c0c:	f7ff ff92 	bl	8000b34 <Nybble>
  control_pins->ODR &= ~((D4 | D5 | D6 | D7)); // Clears registers
 8000c10:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <command+0xbc>)
 8000c12:	695b      	ldr	r3, [r3, #20]
 8000c14:	4a03      	ldr	r2, [pc, #12]	; (8000c24 <command+0xbc>)
 8000c16:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000c1a:	6153      	str	r3, [r2, #20]
}
 8000c1c:	bf00      	nop
 8000c1e:	3718      	adds	r7, #24
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	48001000 	.word	0x48001000
 8000c28:	20000000 	.word	0x20000000

08000c2c <write>:

void write(char letter) {  //write 1 character on the LCD display
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	71fb      	strb	r3, [r7, #7]
  uint8_t c = letter;
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	73fb      	strb	r3, [r7, #15]
  uint8_t c2 = c >> 4;
 8000c3a:	7bfb      	ldrb	r3, [r7, #15]
 8000c3c:	091b      	lsrs	r3, r3, #4
 8000c3e:	73bb      	strb	r3, [r7, #14]
  control_pins->BSRR = (RS); // set RS on
 8000c40:	4b30      	ldr	r3, [pc, #192]	; (8000d04 <write+0xd8>)
 8000c42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c46:	619a      	str	r2, [r3, #24]
  control_pins->BRR = (RW);  // set RW off
 8000c48:	4b2e      	ldr	r3, [pc, #184]	; (8000d04 <write+0xd8>)
 8000c4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c4e:	629a      	str	r2, [r3, #40]	; 0x28
  for (int i = 0; i < 4; i++) { //loop through data bus and turn on or off
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]
 8000c54:	e017      	b.n	8000c86 <write+0x5a>
    if ((c2 >> i) & 0x01) {
 8000c56:	7bba      	ldrb	r2, [r7, #14]
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	fa42 f303 	asr.w	r3, r2, r3
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d006      	beq.n	8000c74 <write+0x48>
      control_pins->BSRR = GPIO_Pin[i];
 8000c66:	4a28      	ldr	r2, [pc, #160]	; (8000d08 <write+0xdc>)
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000c6e:	4b25      	ldr	r3, [pc, #148]	; (8000d04 <write+0xd8>)
 8000c70:	619a      	str	r2, [r3, #24]
 8000c72:	e005      	b.n	8000c80 <write+0x54>
    } else {
      control_pins->BRR = GPIO_Pin[i];
 8000c74:	4a24      	ldr	r2, [pc, #144]	; (8000d08 <write+0xdc>)
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000c7c:	4b21      	ldr	r3, [pc, #132]	; (8000d04 <write+0xd8>)
 8000c7e:	629a      	str	r2, [r3, #40]	; 0x28
  for (int i = 0; i < 4; i++) { //loop through data bus and turn on or off
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	3301      	adds	r3, #1
 8000c84:	617b      	str	r3, [r7, #20]
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	2b03      	cmp	r3, #3
 8000c8a:	dde4      	ble.n	8000c56 <write+0x2a>
    }
  }

  delay_us(1000);
 8000c8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c90:	f7ff fc7a 	bl	8000588 <delay_us>
  Nybble(); //send pulse
 8000c94:	f7ff ff4e 	bl	8000b34 <Nybble>

  for (int i = 0; i < 4; i++) { //loop through data bus and turn on or off
 8000c98:	2300      	movs	r3, #0
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	e017      	b.n	8000cce <write+0xa2>
    if ((c >> i) & 0x01) {
 8000c9e:	7bfa      	ldrb	r2, [r7, #15]
 8000ca0:	693b      	ldr	r3, [r7, #16]
 8000ca2:	fa42 f303 	asr.w	r3, r2, r3
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d006      	beq.n	8000cbc <write+0x90>
      control_pins->BSRR = GPIO_Pin[i];
 8000cae:	4a16      	ldr	r2, [pc, #88]	; (8000d08 <write+0xdc>)
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000cb6:	4b13      	ldr	r3, [pc, #76]	; (8000d04 <write+0xd8>)
 8000cb8:	619a      	str	r2, [r3, #24]
 8000cba:	e005      	b.n	8000cc8 <write+0x9c>
    } else {
      control_pins->BRR = GPIO_Pin[i];
 8000cbc:	4a12      	ldr	r2, [pc, #72]	; (8000d08 <write+0xdc>)
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000cc4:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <write+0xd8>)
 8000cc6:	629a      	str	r2, [r3, #40]	; 0x28
  for (int i = 0; i < 4; i++) { //loop through data bus and turn on or off
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	613b      	str	r3, [r7, #16]
 8000cce:	693b      	ldr	r3, [r7, #16]
 8000cd0:	2b03      	cmp	r3, #3
 8000cd2:	dde4      	ble.n	8000c9e <write+0x72>
    }
  }
  delay_us(1000);
 8000cd4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cd8:	f7ff fc56 	bl	8000588 <delay_us>
  Nybble(); //send pulse
 8000cdc:	f7ff ff2a 	bl	8000b34 <Nybble>
  control_pins->BRR = (RS);                    // set RS back to zero
 8000ce0:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <write+0xd8>)
 8000ce2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ce6:	629a      	str	r2, [r3, #40]	; 0x28
  control_pins->ODR &= ~((D4 | D5 | D6 | D7)); // Clears registers
 8000ce8:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <write+0xd8>)
 8000cea:	695b      	ldr	r3, [r3, #20]
 8000cec:	4a05      	ldr	r2, [pc, #20]	; (8000d04 <write+0xd8>)
 8000cee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000cf2:	6153      	str	r3, [r2, #20]
  delay_us(100);
 8000cf4:	2064      	movs	r0, #100	; 0x64
 8000cf6:	f7ff fc47 	bl	8000588 <delay_us>
}
 8000cfa:	bf00      	nop
 8000cfc:	3718      	adds	r7, #24
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	48001000 	.word	0x48001000
 8000d08:	20000000 	.word	0x20000000

08000d0c <lcd_set_cursor_position>:

void lcd_set_cursor_position(uint8_t row, uint8_t col) {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	460a      	mov	r2, r1
 8000d16:	71fb      	strb	r3, [r7, #7]
 8000d18:	4613      	mov	r3, r2
 8000d1a:	71bb      	strb	r3, [r7, #6]
  uint8_t address;

  // Calculate the address based on row and col values
  if (row == 0) {
 8000d1c:	79fb      	ldrb	r3, [r7, #7]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d103      	bne.n	8000d2a <lcd_set_cursor_position+0x1e>
    address = 0x80 + col; // For row 0, the address starts from 0x80
 8000d22:	79bb      	ldrb	r3, [r7, #6]
 8000d24:	3b80      	subs	r3, #128	; 0x80
 8000d26:	73fb      	strb	r3, [r7, #15]
 8000d28:	e002      	b.n	8000d30 <lcd_set_cursor_position+0x24>
  } else {
    address = 0xC0 + col; // For row 1, the address starts from 0xC0
 8000d2a:	79bb      	ldrb	r3, [r7, #6]
 8000d2c:	3b40      	subs	r3, #64	; 0x40
 8000d2e:	73fb      	strb	r3, [r7, #15]
  }

  // Send the command to set the cursor position
  command(address);
 8000d30:	7bfb      	ldrb	r3, [r7, #15]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff ff18 	bl	8000b68 <command>
}
 8000d38:	bf00      	nop
 8000d3a:	3710      	adds	r7, #16
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <str_write>:

void str_write(const char *str) { //writes a character array to LCD
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  for (int i = 0; str[i] != '\0'; i++) {
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	e00c      	b.n	8000d68 <str_write+0x28>
    write(str[i]);
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	687a      	ldr	r2, [r7, #4]
 8000d52:	4413      	add	r3, r2
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff ff68 	bl	8000c2c <write>
    delay_us(100);
 8000d5c:	2064      	movs	r0, #100	; 0x64
 8000d5e:	f7ff fc13 	bl	8000588 <delay_us>
  for (int i = 0; str[i] != '\0'; i++) {
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	3301      	adds	r3, #1
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	687a      	ldr	r2, [r7, #4]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d1ec      	bne.n	8000d4e <str_write+0xe>
  }
	delay_us(100);
 8000d74:	2064      	movs	r0, #100	; 0x64
 8000d76:	f7ff fc07 	bl	8000588 <delay_us>
}
 8000d7a:	bf00      	nop
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
	...

08000d84 <main>:

int flag = 0;
int flag10 = 0;
int FPIDrdy = 0;

int main(void) {
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0

	HAL_Init();
 8000d88:	f000 fabb 	bl	8001302 <HAL_Init>
	SystemClock_Config();
 8000d8c:	f000 f910 	bl	8000fb0 <SystemClock_Config>
	LPUART_init();
 8000d90:	f000 f9ba 	bl	8001108 <LPUART_init>
	LCD_init();
 8000d94:	f7ff fe7a 	bl	8000a8c <LCD_init>
	command(0x0C);
 8000d98:	200c      	movs	r0, #12
 8000d9a:	f7ff fee5 	bl	8000b68 <command>

	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;  // GPIOC clock init
 8000d9e:	4b32      	ldr	r3, [pc, #200]	; (8000e68 <main+0xe4>)
 8000da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da2:	4a31      	ldr	r2, [pc, #196]	; (8000e68 <main+0xe4>)
 8000da4:	f043 0304 	orr.w	r3, r3, #4
 8000da8:	64d3      	str	r3, [r2, #76]	; 0x4c
	GPIOC->MODER &= ~(GPIO_MODER_MODE13); // button init
 8000daa:	4b30      	ldr	r3, [pc, #192]	; (8000e6c <main+0xe8>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a2f      	ldr	r2, [pc, #188]	; (8000e6c <main+0xe8>)
 8000db0:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8000db4:	6013      	str	r3, [r2, #0]
	GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPD13_1);
 8000db6:	4b2d      	ldr	r3, [pc, #180]	; (8000e6c <main+0xe8>)
 8000db8:	68db      	ldr	r3, [r3, #12]
 8000dba:	4a2c      	ldr	r2, [pc, #176]	; (8000e6c <main+0xe8>)
 8000dbc:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000dc0:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR |= (GPIO_PUPDR_PUPD13_1);
 8000dc2:	4b2a      	ldr	r3, [pc, #168]	; (8000e6c <main+0xe8>)
 8000dc4:	68db      	ldr	r3, [r3, #12]
 8000dc6:	4a29      	ldr	r2, [pc, #164]	; (8000e6c <main+0xe8>)
 8000dc8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000dcc:	60d3      	str	r3, [r2, #12]
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;  // GPIOB clock init
 8000dce:	4b26      	ldr	r3, [pc, #152]	; (8000e68 <main+0xe4>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd2:	4a25      	ldr	r2, [pc, #148]	; (8000e68 <main+0xe4>)
 8000dd4:	f043 0302 	orr.w	r3, r3, #2
 8000dd8:	64d3      	str	r3, [r2, #76]	; 0x4c
	GPIOB->MODER &= ~(GPIO_MODER_MODE7);  // LD2 clear
 8000dda:	4b25      	ldr	r3, [pc, #148]	; (8000e70 <main+0xec>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a24      	ldr	r2, [pc, #144]	; (8000e70 <main+0xec>)
 8000de0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000de4:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (GPIO_MODER_MODE7_0); // LD2 output mode
 8000de6:	4b22      	ldr	r3, [pc, #136]	; (8000e70 <main+0xec>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a21      	ldr	r2, [pc, #132]	; (8000e70 <main+0xec>)
 8000dec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000df0:	6013      	str	r3, [r2, #0]

	delay_us(100);
 8000df2:	2064      	movs	r0, #100	; 0x64
 8000df4:	f7ff fbc8 	bl	8000588 <delay_us>
	USART_init();
 8000df8:	f000 f9f8 	bl	80011ec <USART_init>
	delay_us(10000);
 8000dfc:	f242 7010 	movw	r0, #10000	; 0x2710
 8000e00:	f7ff fbc2 	bl	8000588 <delay_us>

	//Fingerprint initialization
	FP_check();
 8000e04:	f7ff f9f2 	bl	80001ec <FP_check>

	//FOR DEBUGGING
	empty(); //empties entire database of FP
 8000e08:	f7ff fd90 	bl	800092c <empty>
//	//use gotos:
//	FP_search();

	while (1) {

		if (flag10) {
 8000e0c:	4b19      	ldr	r3, [pc, #100]	; (8000e74 <main+0xf0>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d0fb      	beq.n	8000e0c <main+0x88>
			GPIOB->BSRR = GPIO_PIN_7;
 8000e14:	4b16      	ldr	r3, [pc, #88]	; (8000e70 <main+0xec>)
 8000e16:	2280      	movs	r2, #128	; 0x80
 8000e18:	619a      	str	r2, [r3, #24]
			while (!(LPUART1->ISR & USART_ISR_TXE))
 8000e1a:	bf00      	nop
 8000e1c:	4b16      	ldr	r3, [pc, #88]	; (8000e78 <main+0xf4>)
 8000e1e:	69db      	ldr	r3, [r3, #28]
 8000e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d0f9      	beq.n	8000e1c <main+0x98>
				;  // wait for empty TX buffer
			LPUART1->TDR = errorbuffer[0]; // send received character
 8000e28:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <main+0xf8>)
 8000e2a:	781a      	ldrb	r2, [r3, #0]
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <main+0xf4>)
 8000e2e:	b292      	uxth	r2, r2
 8000e30:	851a      	strh	r2, [r3, #40]	; 0x28
			while (!(LPUART1->ISR & USART_ISR_TXE))
 8000e32:	bf00      	nop
 8000e34:	4b10      	ldr	r3, [pc, #64]	; (8000e78 <main+0xf4>)
 8000e36:	69db      	ldr	r3, [r3, #28]
 8000e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d0f9      	beq.n	8000e34 <main+0xb0>
				;  // wait for empty TX buffer
			LPUART1->TDR = errorbuffer[1]; // send received character
 8000e40:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <main+0xf8>)
 8000e42:	785a      	ldrb	r2, [r3, #1]
 8000e44:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <main+0xf4>)
 8000e46:	b292      	uxth	r2, r2
 8000e48:	851a      	strh	r2, [r3, #40]	; 0x28

			FP_enroll();	//section 0: only have 10 fingerprintss
 8000e4a:	f7ff fa39 	bl	80002c0 <FP_enroll>
			MEM_GLOBAL++;	//updates global array
 8000e4e:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <main+0xfc>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	3301      	adds	r3, #1
 8000e54:	b2da      	uxtb	r2, r3
 8000e56:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <main+0xfc>)
 8000e58:	701a      	strb	r2, [r3, #0]

			//delay for debugging
			delay_us(10000000);
 8000e5a:	480a      	ldr	r0, [pc, #40]	; (8000e84 <main+0x100>)
 8000e5c:	f7ff fb94 	bl	8000588 <delay_us>

//			FP_search();

			flag10 = 0;
 8000e60:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <main+0xf0>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
		if (flag10) {
 8000e66:	e7d1      	b.n	8000e0c <main+0x88>
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	48000800 	.word	0x48000800
 8000e70:	48000400 	.word	0x48000400
 8000e74:	20000164 	.word	0x20000164
 8000e78:	40008000 	.word	0x40008000
 8000e7c:	20000038 	.word	0x20000038
 8000e80:	20000030 	.word	0x20000030
 8000e84:	00989680 	.word	0x00989680

08000e88 <LPUART1_IRQHandler>:
//
	}
}

//Donna Updated need to test
void LPUART1_IRQHandler(void) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
	if (LPUART1->ISR & USART_ISR_RXNE) { // check if there is new data in the UART receiver
 8000e8e:	4b27      	ldr	r3, [pc, #156]	; (8000f2c <LPUART1_IRQHandler+0xa4>)
 8000e90:	69db      	ldr	r3, [r3, #28]
 8000e92:	f003 0320 	and.w	r3, r3, #32
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d044      	beq.n	8000f24 <LPUART1_IRQHandler+0x9c>
		uint8_t charRecv = USART2->RDR;        // read the received character
 8000e9a:	4b25      	ldr	r3, [pc, #148]	; (8000f30 <LPUART1_IRQHandler+0xa8>)
 8000e9c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	71fb      	strb	r3, [r7, #7]
		discordbuffer[index] = charRecv;      //buffer must be global variable
 8000ea2:	4b24      	ldr	r3, [pc, #144]	; (8000f34 <LPUART1_IRQHandler+0xac>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4924      	ldr	r1, [pc, #144]	; (8000f38 <LPUART1_IRQHandler+0xb0>)
 8000ea8:	79fa      	ldrb	r2, [r7, #7]
 8000eaa:	54ca      	strb	r2, [r1, r3]
		index++;                              //index must be global variable
 8000eac:	4b21      	ldr	r3, [pc, #132]	; (8000f34 <LPUART1_IRQHandler+0xac>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	4a20      	ldr	r2, [pc, #128]	; (8000f34 <LPUART1_IRQHandler+0xac>)
 8000eb4:	6013      	str	r3, [r2, #0]

		if (index == 1) {
 8000eb6:	4b1f      	ldr	r3, [pc, #124]	; (8000f34 <LPUART1_IRQHandler+0xac>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d106      	bne.n	8000ecc <LPUART1_IRQHandler+0x44>
			if (discordbuffer[0] == 0xEF) {
 8000ebe:	4b1e      	ldr	r3, [pc, #120]	; (8000f38 <LPUART1_IRQHandler+0xb0>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	2bef      	cmp	r3, #239	; 0xef
 8000ec4:	d002      	beq.n	8000ecc <LPUART1_IRQHandler+0x44>

			} else {
				index = 0;
 8000ec6:	4b1b      	ldr	r3, [pc, #108]	; (8000f34 <LPUART1_IRQHandler+0xac>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
			}
		}
		if (index == 2) {
 8000ecc:	4b19      	ldr	r3, [pc, #100]	; (8000f34 <LPUART1_IRQHandler+0xac>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d114      	bne.n	8000efe <LPUART1_IRQHandler+0x76>
			if (discordbuffer[0] == 0xEF && discordbuffer[1] == 0x02) { //wilson send 0xEF02 to indicate beginning of enrollment
 8000ed4:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <LPUART1_IRQHandler+0xb0>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2bef      	cmp	r3, #239	; 0xef
 8000eda:	d106      	bne.n	8000eea <LPUART1_IRQHandler+0x62>
 8000edc:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <LPUART1_IRQHandler+0xb0>)
 8000ede:	785b      	ldrb	r3, [r3, #1]
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	d102      	bne.n	8000eea <LPUART1_IRQHandler+0x62>
				flag10 = 1;
 8000ee4:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <LPUART1_IRQHandler+0xb4>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	601a      	str	r2, [r3, #0]
			}
			if (discordbuffer[0] == 0xEF && discordbuffer[1] == 0x03) { //wilson send 0xEF03 to indicate beginning of attendance?
 8000eea:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <LPUART1_IRQHandler+0xb0>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2bef      	cmp	r3, #239	; 0xef
 8000ef0:	d105      	bne.n	8000efe <LPUART1_IRQHandler+0x76>
 8000ef2:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <LPUART1_IRQHandler+0xb0>)
 8000ef4:	785b      	ldrb	r3, [r3, #1]
 8000ef6:	2b03      	cmp	r3, #3
 8000ef8:	d101      	bne.n	8000efe <LPUART1_IRQHandler+0x76>
				FP_search();
 8000efa:	f7ff fa85 	bl	8000408 <FP_search>
			}
		}
		if (charRecv == '\n') { //replace python null terminator with C null terminator
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	2b0a      	cmp	r3, #10
 8000f02:	d10f      	bne.n	8000f24 <LPUART1_IRQHandler+0x9c>
			flag = 1;
 8000f04:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <LPUART1_IRQHandler+0xb8>)
 8000f06:	2201      	movs	r2, #1
 8000f08:	601a      	str	r2, [r3, #0]
			index--;
 8000f0a:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <LPUART1_IRQHandler+0xac>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	4a08      	ldr	r2, [pc, #32]	; (8000f34 <LPUART1_IRQHandler+0xac>)
 8000f12:	6013      	str	r3, [r2, #0]
			discordbuffer[index] = '\0'; //place user name string into buffer to be written to LCD
 8000f14:	4b07      	ldr	r3, [pc, #28]	; (8000f34 <LPUART1_IRQHandler+0xac>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a07      	ldr	r2, [pc, #28]	; (8000f38 <LPUART1_IRQHandler+0xb0>)
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	54d1      	strb	r1, [r2, r3]
			index = 0;
 8000f1e:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <LPUART1_IRQHandler+0xac>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
		}
//		while (!(LPUART1->ISR & USART_ISR_TXE))
//					;  // wait for empty TX buffer
//			LPUART1->TDR = charRecv; // send received character
	}
}
 8000f24:	bf00      	nop
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40008000 	.word	0x40008000
 8000f30:	40004400 	.word	0x40004400
 8000f34:	2000005c 	.word	0x2000005c
 8000f38:	20000060 	.word	0x20000060
 8000f3c:	20000164 	.word	0x20000164
 8000f40:	20000160 	.word	0x20000160

08000f44 <USART2_IRQHandler>:
//
//		GPIOB->BRR = GPIO_PIN_7;
//	}
//}

void USART2_IRQHandler(void) { //[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27]
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
//	GPIOB->BSRR = GPIO_PIN_7;
	if (USART2->ISR & USART_ISR_RXNE) { // check if there is new data in the UART receiver
 8000f4a:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <USART2_IRQHandler+0x58>)
 8000f4c:	69db      	ldr	r3, [r3, #28]
 8000f4e:	f003 0320 	and.w	r3, r3, #32
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d01b      	beq.n	8000f8e <USART2_IRQHandler+0x4a>
		uint8_t charRecv = USART2->RDR;    // read the received character
 8000f56:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <USART2_IRQHandler+0x58>)
 8000f58:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	71fb      	strb	r3, [r7, #7]
		errorbuffer[index0] = charRecv; //buffer must be global variable
 8000f5e:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <USART2_IRQHandler+0x5c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4910      	ldr	r1, [pc, #64]	; (8000fa4 <USART2_IRQHandler+0x60>)
 8000f64:	79fa      	ldrb	r2, [r7, #7]
 8000f66:	54ca      	strb	r2, [r1, r3]
		index0++;                  //index must be global variable
 8000f68:	4b0d      	ldr	r3, [pc, #52]	; (8000fa0 <USART2_IRQHandler+0x5c>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	4a0c      	ldr	r2, [pc, #48]	; (8000fa0 <USART2_IRQHandler+0x5c>)
 8000f70:	6013      	str	r3, [r2, #0]
		if (index0 >= ACK_LENGTH) {
 8000f72:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <USART2_IRQHandler+0x5c>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	461a      	mov	r2, r3
 8000f78:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <USART2_IRQHandler+0x64>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d306      	bcc.n	8000f8e <USART2_IRQHandler+0x4a>
			ConfirmationCode = errorbuffer[9];    //must be global variable
 8000f80:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <USART2_IRQHandler+0x60>)
 8000f82:	7a5a      	ldrb	r2, [r3, #9]
 8000f84:	4b09      	ldr	r3, [pc, #36]	; (8000fac <USART2_IRQHandler+0x68>)
 8000f86:	701a      	strb	r2, [r3, #0]
//			FingerprintErrorHandler();
//			errorbuffer[1+index0] = '\n';
			index0 = 0;
 8000f88:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <USART2_IRQHandler+0x5c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	40004400 	.word	0x40004400
 8000fa0:	20000054 	.word	0x20000054
 8000fa4:	20000038 	.word	0x20000038
 8000fa8:	20000034 	.word	0x20000034
 8000fac:	20000058 	.word	0x20000058

08000fb0 <SystemClock_Config>:
//		lcd_set_cursor_position(1, 0);
//		str_write("library");
//	}
//}

void SystemClock_Config(void) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b096      	sub	sp, #88	; 0x58
 8000fb4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000fb6:	f107 0314 	add.w	r3, r7, #20
 8000fba:	2244      	movs	r2, #68	; 0x44
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f001 f988 	bl	80022d4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000fc4:	463b      	mov	r3, r7
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	605a      	str	r2, [r3, #4]
 8000fcc:	609a      	str	r2, [r3, #8]
 8000fce:	60da      	str	r2, [r3, #12]
 8000fd0:	611a      	str	r2, [r3, #16]

	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fd2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fd6:	f000 fafd 	bl	80015d4 <HAL_PWREx_ControlVoltageScaling>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8000fe0:	f000 f82c 	bl	800103c <Error_Handler>
	}

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000fe4:	2310      	movs	r3, #16
 8000fe6:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ff0:	2360      	movs	r3, #96	; 0x60
 8000ff2:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f000 fb3f 	bl	8001680 <HAL_RCC_OscConfig>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <SystemClock_Config+0x5c>
		Error_Handler();
 8001008:	f000 f818 	bl	800103c <Error_Handler>
	}

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800100c:	230f      	movs	r3, #15
 800100e:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001010:	2300      	movs	r3, #0
 8001012:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001014:	2300      	movs	r3, #0
 8001016:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001018:	2300      	movs	r3, #0
 800101a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800101c:	2300      	movs	r3, #0
 800101e:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001020:	463b      	mov	r3, r7
 8001022:	2100      	movs	r1, #0
 8001024:	4618      	mov	r0, r3
 8001026:	f000 ff45 	bl	8001eb4 <HAL_RCC_ClockConfig>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <SystemClock_Config+0x84>
		Error_Handler();
 8001030:	f000 f804 	bl	800103c <Error_Handler>
	}
}
 8001034:	bf00      	nop
 8001036:	3758      	adds	r7, #88	; 0x58
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <Error_Handler>:

void Error_Handler(void) {
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001040:	b672      	cpsid	i
}
 8001042:	bf00      	nop

	__disable_irq();
	while (1) {
 8001044:	e7fe      	b.n	8001044 <Error_Handler+0x8>
	...

08001048 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104e:	4b0f      	ldr	r3, [pc, #60]	; (800108c <HAL_MspInit+0x44>)
 8001050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001052:	4a0e      	ldr	r2, [pc, #56]	; (800108c <HAL_MspInit+0x44>)
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	6613      	str	r3, [r2, #96]	; 0x60
 800105a:	4b0c      	ldr	r3, [pc, #48]	; (800108c <HAL_MspInit+0x44>)
 800105c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	607b      	str	r3, [r7, #4]
 8001064:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001066:	4b09      	ldr	r3, [pc, #36]	; (800108c <HAL_MspInit+0x44>)
 8001068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800106a:	4a08      	ldr	r2, [pc, #32]	; (800108c <HAL_MspInit+0x44>)
 800106c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001070:	6593      	str	r3, [r2, #88]	; 0x58
 8001072:	4b06      	ldr	r3, [pc, #24]	; (800108c <HAL_MspInit+0x44>)
 8001074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800107a:	603b      	str	r3, [r7, #0]
 800107c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800107e:	bf00      	nop
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	40021000 	.word	0x40021000

08001090 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001094:	e7fe      	b.n	8001094 <NMI_Handler+0x4>

08001096 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800109a:	e7fe      	b.n	800109a <HardFault_Handler+0x4>

0800109c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a0:	e7fe      	b.n	80010a0 <MemManage_Handler+0x4>

080010a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010a6:	e7fe      	b.n	80010a6 <BusFault_Handler+0x4>

080010a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010ac:	e7fe      	b.n	80010ac <UsageFault_Handler+0x4>

080010ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ae:	b480      	push	{r7}
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr

080010ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010dc:	f000 f966 	bl	80013ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010e0:	bf00      	nop
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <SystemInit+0x20>)
 80010ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ee:	4a05      	ldr	r2, [pc, #20]	; (8001104 <SystemInit+0x20>)
 80010f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <LPUART_init>:

#include "main.h"
#include "uart.h"


void LPUART_init() {
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
	PWR->CR2 |= (PWR_CR2_IOSV);             // power avail on PG[15:2] (LPUART1)
 800110c:	4b31      	ldr	r3, [pc, #196]	; (80011d4 <LPUART_init+0xcc>)
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	4a30      	ldr	r2, [pc, #192]	; (80011d4 <LPUART_init+0xcc>)
 8001112:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001116:	6053      	str	r3, [r2, #4]
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOGEN);   // enable GPIOG clock
 8001118:	4b2f      	ldr	r3, [pc, #188]	; (80011d8 <LPUART_init+0xd0>)
 800111a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111c:	4a2e      	ldr	r2, [pc, #184]	; (80011d8 <LPUART_init+0xd0>)
 800111e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001122:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC->APB1ENR2 |= RCC_APB1ENR2_LPUART1EN; // enable LPUART clock bridge
 8001124:	4b2c      	ldr	r3, [pc, #176]	; (80011d8 <LPUART_init+0xd0>)
 8001126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001128:	4a2b      	ldr	r2, [pc, #172]	; (80011d8 <LPUART_init+0xd0>)
 800112a:	f043 0301 	orr.w	r3, r3, #1
 800112e:	65d3      	str	r3, [r2, #92]	; 0x5c
	GPIOG->MODER &= ~(GPIO_MODER_MODE5 | GPIO_MODER_MODE6 | GPIO_MODER_MODE7
 8001130:	4b2a      	ldr	r3, [pc, #168]	; (80011dc <LPUART_init+0xd4>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a29      	ldr	r2, [pc, #164]	; (80011dc <LPUART_init+0xd4>)
 8001136:	f423 337f 	bic.w	r3, r3, #261120	; 0x3fc00
 800113a:	6013      	str	r3, [r2, #0]
			| GPIO_MODER_MODE8); //clear bits
	GPIOG->MODER |= (GPIO_MODER_MODE5_1 | GPIO_MODER_MODE6_1
 800113c:	4b27      	ldr	r3, [pc, #156]	; (80011dc <LPUART_init+0xd4>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a26      	ldr	r2, [pc, #152]	; (80011dc <LPUART_init+0xd4>)
 8001142:	f443 332a 	orr.w	r3, r3, #174080	; 0x2a800
 8001146:	6013      	str	r3, [r2, #0]
			| GPIO_MODER_MODE7_1 | GPIO_MODER_MODE8_1); //set bits AF mode
	GPIOG->AFR[0] &= ~((0x000F << GPIO_AFRL_AFSEL5_Pos)
 8001148:	4b24      	ldr	r3, [pc, #144]	; (80011dc <LPUART_init+0xd4>)
 800114a:	6a1b      	ldr	r3, [r3, #32]
 800114c:	4a23      	ldr	r2, [pc, #140]	; (80011dc <LPUART_init+0xd4>)
 800114e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001152:	6213      	str	r3, [r2, #32]
			| (0x000F << GPIO_AFRL_AFSEL6_Pos)
			| (0x000F << GPIO_AFRL_AFSEL7_Pos));
	GPIOG->AFR[1] &= ~(0x000F << GPIO_AFRH_AFSEL8_Pos); //clear AF
 8001154:	4b21      	ldr	r3, [pc, #132]	; (80011dc <LPUART_init+0xd4>)
 8001156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001158:	4a20      	ldr	r2, [pc, #128]	; (80011dc <LPUART_init+0xd4>)
 800115a:	f023 030f 	bic.w	r3, r3, #15
 800115e:	6253      	str	r3, [r2, #36]	; 0x24

	GPIOG->AFR[0] |= ((0x0008 << GPIO_AFRL_AFSEL5_Pos)
 8001160:	4b1e      	ldr	r3, [pc, #120]	; (80011dc <LPUART_init+0xd4>)
 8001162:	6a1b      	ldr	r3, [r3, #32]
 8001164:	4a1d      	ldr	r2, [pc, #116]	; (80011dc <LPUART_init+0xd4>)
 8001166:	f043 4308 	orr.w	r3, r3, #2281701376	; 0x88000000
 800116a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800116e:	6213      	str	r3, [r2, #32]
			| (0x0008 << GPIO_AFRL_AFSEL6_Pos)
			| (0x0008 << GPIO_AFRL_AFSEL7_Pos));	//set bits AF 8

	GPIOG->AFR[1] |= (0x0008 << GPIO_AFRH_AFSEL8_Pos);
 8001170:	4b1a      	ldr	r3, [pc, #104]	; (80011dc <LPUART_init+0xd4>)
 8001172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001174:	4a19      	ldr	r2, [pc, #100]	; (80011dc <LPUART_init+0xd4>)
 8001176:	f043 0308 	orr.w	r3, r3, #8
 800117a:	6253      	str	r3, [r2, #36]	; 0x24
	/* USER: configure GPIOG registers MODER/PUPDR/OTYPER/OSPEEDR then
	 select AF mode and specify which function with AFR[0] and AFR[1] */
	LPUART1->CR1 &= ~(USART_CR1_M1 | USART_CR1_M0); // 8-bit data
 800117c:	4b18      	ldr	r3, [pc, #96]	; (80011e0 <LPUART_init+0xd8>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a17      	ldr	r2, [pc, #92]	; (80011e0 <LPUART_init+0xd8>)
 8001182:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 8001186:	6013      	str	r3, [r2, #0]
	LPUART1->CR1 |= USART_CR1_UE;                   // enable LPUART1
 8001188:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <LPUART_init+0xd8>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a14      	ldr	r2, [pc, #80]	; (80011e0 <LPUART_init+0xd8>)
 800118e:	f043 0301 	orr.w	r3, r3, #1
 8001192:	6013      	str	r3, [r2, #0]
	LPUART1->CR1 |= (USART_CR1_TE | USART_CR1_RE);  // enable xmit & recv
 8001194:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <LPUART_init+0xd8>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a11      	ldr	r2, [pc, #68]	; (80011e0 <LPUART_init+0xd8>)
 800119a:	f043 030c 	orr.w	r3, r3, #12
 800119e:	6013      	str	r3, [r2, #0]
	LPUART1->CR1 |= USART_CR1_RXNEIE;        // enable LPUART1 recv interrupt
 80011a0:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <LPUART_init+0xd8>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a0e      	ldr	r2, [pc, #56]	; (80011e0 <LPUART_init+0xd8>)
 80011a6:	f043 0320 	orr.w	r3, r3, #32
 80011aa:	6013      	str	r3, [r2, #0]
	LPUART1->ISR &= ~(USART_ISR_RXNE);       // clear Recv-Not-Empty flag
 80011ac:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <LPUART_init+0xd8>)
 80011ae:	69db      	ldr	r3, [r3, #28]
 80011b0:	4a0b      	ldr	r2, [pc, #44]	; (80011e0 <LPUART_init+0xd8>)
 80011b2:	f023 0320 	bic.w	r3, r3, #32
 80011b6:	61d3      	str	r3, [r2, #28]
	LPUART1->BRR = 106666;
 80011b8:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <LPUART_init+0xd8>)
 80011ba:	4a0a      	ldr	r2, [pc, #40]	; (80011e4 <LPUART_init+0xdc>)
 80011bc:	60da      	str	r2, [r3, #12]
	NVIC->ISER[2] = (1 << (LPUART1_IRQn & 0x1F));   // enable LPUART1 ISR
 80011be:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <LPUART_init+0xe0>)
 80011c0:	2240      	movs	r2, #64	; 0x40
 80011c2:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 80011c4:	b662      	cpsie	i
}
 80011c6:	bf00      	nop
	__enable_irq();                          // enable global interrupts
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	40007000 	.word	0x40007000
 80011d8:	40021000 	.word	0x40021000
 80011dc:	48001800 	.word	0x48001800
 80011e0:	40008000 	.word	0x40008000
 80011e4:	0001a0aa 	.word	0x0001a0aa
 80011e8:	e000e100 	.word	0xe000e100

080011ec <USART_init>:

void USART_init() {
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN; // enable GPIOA clock
 80011f0:	4b2c      	ldr	r3, [pc, #176]	; (80012a4 <USART_init+0xb8>)
 80011f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f4:	4a2b      	ldr	r2, [pc, #172]	; (80012a4 <USART_init+0xb8>)
 80011f6:	f043 0301 	orr.w	r3, r3, #1
 80011fa:	64d3      	str	r3, [r2, #76]	; 0x4c
    RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN; // enable USART2 clock
 80011fc:	4b29      	ldr	r3, [pc, #164]	; (80012a4 <USART_init+0xb8>)
 80011fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001200:	4a28      	ldr	r2, [pc, #160]	; (80012a4 <USART_init+0xb8>)
 8001202:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001206:	6593      	str	r3, [r2, #88]	; 0x58

    GPIOA->MODER &= ~(GPIO_MODER_MODE0 |GPIO_MODER_MODE1 |GPIO_MODER_MODE2 | GPIO_MODER_MODE3); //clear bits
 8001208:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001212:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001216:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (GPIO_MODER_MODE0_1 |GPIO_MODER_MODE1_1 |GPIO_MODER_MODE2_1 | GPIO_MODER_MODE3_1);
 8001218:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001222:	f043 03aa 	orr.w	r3, r3, #170	; 0xaa
 8001226:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] &= ~((0x000F << GPIO_AFRL_AFSEL0_Pos) |(0x000F << GPIO_AFRL_AFSEL1_Pos) |(0x000F << GPIO_AFRL_AFSEL2_Pos) | (0x000F << GPIO_AFRL_AFSEL3_Pos));
 8001228:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800122c:	6a1b      	ldr	r3, [r3, #32]
 800122e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001232:	0c1b      	lsrs	r3, r3, #16
 8001234:	041b      	lsls	r3, r3, #16
 8001236:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= ((0x0007 << GPIO_AFRL_AFSEL0_Pos) |(0x0007 << GPIO_AFRL_AFSEL1_Pos) |(0x0007 << GPIO_AFRL_AFSEL2_Pos) | (0x0007 << GPIO_AFRL_AFSEL3_Pos));
 8001238:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800123c:	6a1b      	ldr	r3, [r3, #32]
 800123e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001242:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8001246:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800124a:	6213      	str	r3, [r2, #32]

    USART2->CR1 &= ~(USART_CR1_M1 | USART_CR1_M0); // 8-bit data
 800124c:	4b16      	ldr	r3, [pc, #88]	; (80012a8 <USART_init+0xbc>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a15      	ldr	r2, [pc, #84]	; (80012a8 <USART_init+0xbc>)
 8001252:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 8001256:	6013      	str	r3, [r2, #0]
    USART2->CR1 |= USART_CR1_UE;                   // enable USART2
 8001258:	4b13      	ldr	r3, [pc, #76]	; (80012a8 <USART_init+0xbc>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a12      	ldr	r2, [pc, #72]	; (80012a8 <USART_init+0xbc>)
 800125e:	f043 0301 	orr.w	r3, r3, #1
 8001262:	6013      	str	r3, [r2, #0]
    USART2->CR1 |= (USART_CR1_TE | USART_CR1_RE);  // enable xmit & recv
 8001264:	4b10      	ldr	r3, [pc, #64]	; (80012a8 <USART_init+0xbc>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a0f      	ldr	r2, [pc, #60]	; (80012a8 <USART_init+0xbc>)
 800126a:	f043 030c 	orr.w	r3, r3, #12
 800126e:	6013      	str	r3, [r2, #0]
    USART2->CR1 |= USART_CR1_RXNEIE;        // enable USART2 recv interrupt
 8001270:	4b0d      	ldr	r3, [pc, #52]	; (80012a8 <USART_init+0xbc>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a0c      	ldr	r2, [pc, #48]	; (80012a8 <USART_init+0xbc>)
 8001276:	f043 0320 	orr.w	r3, r3, #32
 800127a:	6013      	str	r3, [r2, #0]
    USART2->ISR &= ~(USART_ISR_RXNE);       // clear Recv-Not-Empty flag
 800127c:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <USART_init+0xbc>)
 800127e:	69db      	ldr	r3, [r3, #28]
 8001280:	4a09      	ldr	r2, [pc, #36]	; (80012a8 <USART_init+0xbc>)
 8001282:	f023 0320 	bic.w	r3, r3, #32
 8001286:	61d3      	str	r3, [r2, #28]
    USART2->BRR = 69;                   // Set the correct baud rate
 8001288:	4b07      	ldr	r3, [pc, #28]	; (80012a8 <USART_init+0xbc>)
 800128a:	2245      	movs	r2, #69	; 0x45
 800128c:	60da      	str	r2, [r3, #12]
    NVIC->ISER[1] = (1 << (USART2_IRQn & 0x1F));   // enable USART2 ISR
 800128e:	4b07      	ldr	r3, [pc, #28]	; (80012ac <USART_init+0xc0>)
 8001290:	2240      	movs	r2, #64	; 0x40
 8001292:	605a      	str	r2, [r3, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 8001294:	b662      	cpsie	i
}
 8001296:	bf00      	nop
    __enable_irq();                          // enable global interrupts
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	40021000 	.word	0x40021000
 80012a8:	40004400 	.word	0x40004400
 80012ac:	e000e100 	.word	0xe000e100

080012b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80012b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012e8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012b4:	f7ff ff16 	bl	80010e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012b8:	480c      	ldr	r0, [pc, #48]	; (80012ec <LoopForever+0x6>)
  ldr r1, =_edata
 80012ba:	490d      	ldr	r1, [pc, #52]	; (80012f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012bc:	4a0d      	ldr	r2, [pc, #52]	; (80012f4 <LoopForever+0xe>)
  movs r3, #0
 80012be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012c0:	e002      	b.n	80012c8 <LoopCopyDataInit>

080012c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012c6:	3304      	adds	r3, #4

080012c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012cc:	d3f9      	bcc.n	80012c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ce:	4a0a      	ldr	r2, [pc, #40]	; (80012f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012d0:	4c0a      	ldr	r4, [pc, #40]	; (80012fc <LoopForever+0x16>)
  movs r3, #0
 80012d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012d4:	e001      	b.n	80012da <LoopFillZerobss>

080012d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012d8:	3204      	adds	r2, #4

080012da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012dc:	d3fb      	bcc.n	80012d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012de:	f000 ffd5 	bl	800228c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012e2:	f7ff fd4f 	bl	8000d84 <main>

080012e6 <LoopForever>:

LoopForever:
    b LoopForever
 80012e6:	e7fe      	b.n	80012e6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80012e8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80012ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012f0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80012f4:	0800259c 	.word	0x0800259c
  ldr r2, =_sbss
 80012f8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80012fc:	20000170 	.word	0x20000170

08001300 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001300:	e7fe      	b.n	8001300 <ADC1_2_IRQHandler>

08001302 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b082      	sub	sp, #8
 8001306:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001308:	2300      	movs	r3, #0
 800130a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800130c:	2003      	movs	r0, #3
 800130e:	f000 f91f 	bl	8001550 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001312:	200f      	movs	r0, #15
 8001314:	f000 f80e 	bl	8001334 <HAL_InitTick>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d002      	beq.n	8001324 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	71fb      	strb	r3, [r7, #7]
 8001322:	e001      	b.n	8001328 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001324:	f7ff fe90 	bl	8001048 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001328:	79fb      	ldrb	r3, [r7, #7]
}
 800132a:	4618      	mov	r0, r3
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
	...

08001334 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800133c:	2300      	movs	r3, #0
 800133e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001340:	4b17      	ldr	r3, [pc, #92]	; (80013a0 <HAL_InitTick+0x6c>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d023      	beq.n	8001390 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001348:	4b16      	ldr	r3, [pc, #88]	; (80013a4 <HAL_InitTick+0x70>)
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <HAL_InitTick+0x6c>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	4619      	mov	r1, r3
 8001352:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001356:	fbb3 f3f1 	udiv	r3, r3, r1
 800135a:	fbb2 f3f3 	udiv	r3, r2, r3
 800135e:	4618      	mov	r0, r3
 8001360:	f000 f91d 	bl	800159e <HAL_SYSTICK_Config>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d10f      	bne.n	800138a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2b0f      	cmp	r3, #15
 800136e:	d809      	bhi.n	8001384 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001370:	2200      	movs	r2, #0
 8001372:	6879      	ldr	r1, [r7, #4]
 8001374:	f04f 30ff 	mov.w	r0, #4294967295
 8001378:	f000 f8f5 	bl	8001566 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800137c:	4a0a      	ldr	r2, [pc, #40]	; (80013a8 <HAL_InitTick+0x74>)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6013      	str	r3, [r2, #0]
 8001382:	e007      	b.n	8001394 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	73fb      	strb	r3, [r7, #15]
 8001388:	e004      	b.n	8001394 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	73fb      	strb	r3, [r7, #15]
 800138e:	e001      	b.n	8001394 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001394:	7bfb      	ldrb	r3, [r7, #15]
}
 8001396:	4618      	mov	r0, r3
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000010 	.word	0x20000010
 80013a4:	20000008 	.word	0x20000008
 80013a8:	2000000c 	.word	0x2000000c

080013ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <HAL_IncTick+0x20>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	461a      	mov	r2, r3
 80013b6:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <HAL_IncTick+0x24>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4413      	add	r3, r2
 80013bc:	4a04      	ldr	r2, [pc, #16]	; (80013d0 <HAL_IncTick+0x24>)
 80013be:	6013      	str	r3, [r2, #0]
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	20000010 	.word	0x20000010
 80013d0:	2000016c 	.word	0x2000016c

080013d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  return uwTick;
 80013d8:	4b03      	ldr	r3, [pc, #12]	; (80013e8 <HAL_GetTick+0x14>)
 80013da:	681b      	ldr	r3, [r3, #0]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	2000016c 	.word	0x2000016c

080013ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013fc:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <__NVIC_SetPriorityGrouping+0x44>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001402:	68ba      	ldr	r2, [r7, #8]
 8001404:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001408:	4013      	ands	r3, r2
 800140a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001414:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001418:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800141c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800141e:	4a04      	ldr	r2, [pc, #16]	; (8001430 <__NVIC_SetPriorityGrouping+0x44>)
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	60d3      	str	r3, [r2, #12]
}
 8001424:	bf00      	nop
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001438:	4b04      	ldr	r3, [pc, #16]	; (800144c <__NVIC_GetPriorityGrouping+0x18>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	0a1b      	lsrs	r3, r3, #8
 800143e:	f003 0307 	and.w	r3, r3, #7
}
 8001442:	4618      	mov	r0, r3
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	6039      	str	r1, [r7, #0]
 800145a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800145c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001460:	2b00      	cmp	r3, #0
 8001462:	db0a      	blt.n	800147a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	b2da      	uxtb	r2, r3
 8001468:	490c      	ldr	r1, [pc, #48]	; (800149c <__NVIC_SetPriority+0x4c>)
 800146a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146e:	0112      	lsls	r2, r2, #4
 8001470:	b2d2      	uxtb	r2, r2
 8001472:	440b      	add	r3, r1
 8001474:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001478:	e00a      	b.n	8001490 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	b2da      	uxtb	r2, r3
 800147e:	4908      	ldr	r1, [pc, #32]	; (80014a0 <__NVIC_SetPriority+0x50>)
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	f003 030f 	and.w	r3, r3, #15
 8001486:	3b04      	subs	r3, #4
 8001488:	0112      	lsls	r2, r2, #4
 800148a:	b2d2      	uxtb	r2, r2
 800148c:	440b      	add	r3, r1
 800148e:	761a      	strb	r2, [r3, #24]
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	e000e100 	.word	0xe000e100
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b089      	sub	sp, #36	; 0x24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	f1c3 0307 	rsb	r3, r3, #7
 80014be:	2b04      	cmp	r3, #4
 80014c0:	bf28      	it	cs
 80014c2:	2304      	movcs	r3, #4
 80014c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	3304      	adds	r3, #4
 80014ca:	2b06      	cmp	r3, #6
 80014cc:	d902      	bls.n	80014d4 <NVIC_EncodePriority+0x30>
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	3b03      	subs	r3, #3
 80014d2:	e000      	b.n	80014d6 <NVIC_EncodePriority+0x32>
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d8:	f04f 32ff 	mov.w	r2, #4294967295
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43da      	mvns	r2, r3
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	401a      	ands	r2, r3
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014ec:	f04f 31ff 	mov.w	r1, #4294967295
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	fa01 f303 	lsl.w	r3, r1, r3
 80014f6:	43d9      	mvns	r1, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014fc:	4313      	orrs	r3, r2
         );
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3724      	adds	r7, #36	; 0x24
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
	...

0800150c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3b01      	subs	r3, #1
 8001518:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800151c:	d301      	bcc.n	8001522 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800151e:	2301      	movs	r3, #1
 8001520:	e00f      	b.n	8001542 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001522:	4a0a      	ldr	r2, [pc, #40]	; (800154c <SysTick_Config+0x40>)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3b01      	subs	r3, #1
 8001528:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800152a:	210f      	movs	r1, #15
 800152c:	f04f 30ff 	mov.w	r0, #4294967295
 8001530:	f7ff ff8e 	bl	8001450 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001534:	4b05      	ldr	r3, [pc, #20]	; (800154c <SysTick_Config+0x40>)
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800153a:	4b04      	ldr	r3, [pc, #16]	; (800154c <SysTick_Config+0x40>)
 800153c:	2207      	movs	r2, #7
 800153e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	e000e010 	.word	0xe000e010

08001550 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f7ff ff47 	bl	80013ec <__NVIC_SetPriorityGrouping>
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b086      	sub	sp, #24
 800156a:	af00      	add	r7, sp, #0
 800156c:	4603      	mov	r3, r0
 800156e:	60b9      	str	r1, [r7, #8]
 8001570:	607a      	str	r2, [r7, #4]
 8001572:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001578:	f7ff ff5c 	bl	8001434 <__NVIC_GetPriorityGrouping>
 800157c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	68b9      	ldr	r1, [r7, #8]
 8001582:	6978      	ldr	r0, [r7, #20]
 8001584:	f7ff ff8e 	bl	80014a4 <NVIC_EncodePriority>
 8001588:	4602      	mov	r2, r0
 800158a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800158e:	4611      	mov	r1, r2
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff ff5d 	bl	8001450 <__NVIC_SetPriority>
}
 8001596:	bf00      	nop
 8001598:	3718      	adds	r7, #24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b082      	sub	sp, #8
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff ffb0 	bl	800150c <SysTick_Config>
 80015ac:	4603      	mov	r3, r0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
	...

080015b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80015bc:	4b04      	ldr	r3, [pc, #16]	; (80015d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	40007000 	.word	0x40007000

080015d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015e2:	d130      	bne.n	8001646 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80015e4:	4b23      	ldr	r3, [pc, #140]	; (8001674 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015f0:	d038      	beq.n	8001664 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015f2:	4b20      	ldr	r3, [pc, #128]	; (8001674 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015fa:	4a1e      	ldr	r2, [pc, #120]	; (8001674 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001600:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001602:	4b1d      	ldr	r3, [pc, #116]	; (8001678 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2232      	movs	r2, #50	; 0x32
 8001608:	fb02 f303 	mul.w	r3, r2, r3
 800160c:	4a1b      	ldr	r2, [pc, #108]	; (800167c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800160e:	fba2 2303 	umull	r2, r3, r2, r3
 8001612:	0c9b      	lsrs	r3, r3, #18
 8001614:	3301      	adds	r3, #1
 8001616:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001618:	e002      	b.n	8001620 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	3b01      	subs	r3, #1
 800161e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001620:	4b14      	ldr	r3, [pc, #80]	; (8001674 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001622:	695b      	ldr	r3, [r3, #20]
 8001624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001628:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800162c:	d102      	bne.n	8001634 <HAL_PWREx_ControlVoltageScaling+0x60>
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d1f2      	bne.n	800161a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001634:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001636:	695b      	ldr	r3, [r3, #20]
 8001638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800163c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001640:	d110      	bne.n	8001664 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e00f      	b.n	8001666 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001646:	4b0b      	ldr	r3, [pc, #44]	; (8001674 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800164e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001652:	d007      	beq.n	8001664 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001654:	4b07      	ldr	r3, [pc, #28]	; (8001674 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800165c:	4a05      	ldr	r2, [pc, #20]	; (8001674 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800165e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001662:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3714      	adds	r7, #20
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	40007000 	.word	0x40007000
 8001678:	20000008 	.word	0x20000008
 800167c:	431bde83 	.word	0x431bde83

08001680 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b088      	sub	sp, #32
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d102      	bne.n	8001694 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	f000 bc08 	b.w	8001ea4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001694:	4b96      	ldr	r3, [pc, #600]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f003 030c 	and.w	r3, r3, #12
 800169c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800169e:	4b94      	ldr	r3, [pc, #592]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	f003 0303 	and.w	r3, r3, #3
 80016a6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0310 	and.w	r3, r3, #16
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	f000 80e4 	beq.w	800187e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d007      	beq.n	80016cc <HAL_RCC_OscConfig+0x4c>
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	2b0c      	cmp	r3, #12
 80016c0:	f040 808b 	bne.w	80017da <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	f040 8087 	bne.w	80017da <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016cc:	4b88      	ldr	r3, [pc, #544]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d005      	beq.n	80016e4 <HAL_RCC_OscConfig+0x64>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d101      	bne.n	80016e4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e3df      	b.n	8001ea4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a1a      	ldr	r2, [r3, #32]
 80016e8:	4b81      	ldr	r3, [pc, #516]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0308 	and.w	r3, r3, #8
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d004      	beq.n	80016fe <HAL_RCC_OscConfig+0x7e>
 80016f4:	4b7e      	ldr	r3, [pc, #504]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016fc:	e005      	b.n	800170a <HAL_RCC_OscConfig+0x8a>
 80016fe:	4b7c      	ldr	r3, [pc, #496]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001700:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001704:	091b      	lsrs	r3, r3, #4
 8001706:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800170a:	4293      	cmp	r3, r2
 800170c:	d223      	bcs.n	8001756 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a1b      	ldr	r3, [r3, #32]
 8001712:	4618      	mov	r0, r3
 8001714:	f000 fd5a 	bl	80021cc <RCC_SetFlashLatencyFromMSIRange>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e3c0      	b.n	8001ea4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001722:	4b73      	ldr	r3, [pc, #460]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a72      	ldr	r2, [pc, #456]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001728:	f043 0308 	orr.w	r3, r3, #8
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	4b70      	ldr	r3, [pc, #448]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a1b      	ldr	r3, [r3, #32]
 800173a:	496d      	ldr	r1, [pc, #436]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 800173c:	4313      	orrs	r3, r2
 800173e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001740:	4b6b      	ldr	r3, [pc, #428]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	69db      	ldr	r3, [r3, #28]
 800174c:	021b      	lsls	r3, r3, #8
 800174e:	4968      	ldr	r1, [pc, #416]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001750:	4313      	orrs	r3, r2
 8001752:	604b      	str	r3, [r1, #4]
 8001754:	e025      	b.n	80017a2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001756:	4b66      	ldr	r3, [pc, #408]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a65      	ldr	r2, [pc, #404]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 800175c:	f043 0308 	orr.w	r3, r3, #8
 8001760:	6013      	str	r3, [r2, #0]
 8001762:	4b63      	ldr	r3, [pc, #396]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a1b      	ldr	r3, [r3, #32]
 800176e:	4960      	ldr	r1, [pc, #384]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001770:	4313      	orrs	r3, r2
 8001772:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001774:	4b5e      	ldr	r3, [pc, #376]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	69db      	ldr	r3, [r3, #28]
 8001780:	021b      	lsls	r3, r3, #8
 8001782:	495b      	ldr	r1, [pc, #364]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001784:	4313      	orrs	r3, r2
 8001786:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d109      	bne.n	80017a2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a1b      	ldr	r3, [r3, #32]
 8001792:	4618      	mov	r0, r3
 8001794:	f000 fd1a 	bl	80021cc <RCC_SetFlashLatencyFromMSIRange>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e380      	b.n	8001ea4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017a2:	f000 fc87 	bl	80020b4 <HAL_RCC_GetSysClockFreq>
 80017a6:	4602      	mov	r2, r0
 80017a8:	4b51      	ldr	r3, [pc, #324]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	091b      	lsrs	r3, r3, #4
 80017ae:	f003 030f 	and.w	r3, r3, #15
 80017b2:	4950      	ldr	r1, [pc, #320]	; (80018f4 <HAL_RCC_OscConfig+0x274>)
 80017b4:	5ccb      	ldrb	r3, [r1, r3]
 80017b6:	f003 031f 	and.w	r3, r3, #31
 80017ba:	fa22 f303 	lsr.w	r3, r2, r3
 80017be:	4a4e      	ldr	r2, [pc, #312]	; (80018f8 <HAL_RCC_OscConfig+0x278>)
 80017c0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80017c2:	4b4e      	ldr	r3, [pc, #312]	; (80018fc <HAL_RCC_OscConfig+0x27c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff fdb4 	bl	8001334 <HAL_InitTick>
 80017cc:	4603      	mov	r3, r0
 80017ce:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d052      	beq.n	800187c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80017d6:	7bfb      	ldrb	r3, [r7, #15]
 80017d8:	e364      	b.n	8001ea4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d032      	beq.n	8001848 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017e2:	4b43      	ldr	r3, [pc, #268]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a42      	ldr	r2, [pc, #264]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017ee:	f7ff fdf1 	bl	80013d4 <HAL_GetTick>
 80017f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017f4:	e008      	b.n	8001808 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017f6:	f7ff fded 	bl	80013d4 <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e34d      	b.n	8001ea4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001808:	4b39      	ldr	r3, [pc, #228]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0302 	and.w	r3, r3, #2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d0f0      	beq.n	80017f6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001814:	4b36      	ldr	r3, [pc, #216]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a35      	ldr	r2, [pc, #212]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 800181a:	f043 0308 	orr.w	r3, r3, #8
 800181e:	6013      	str	r3, [r2, #0]
 8001820:	4b33      	ldr	r3, [pc, #204]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a1b      	ldr	r3, [r3, #32]
 800182c:	4930      	ldr	r1, [pc, #192]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 800182e:	4313      	orrs	r3, r2
 8001830:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001832:	4b2f      	ldr	r3, [pc, #188]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	69db      	ldr	r3, [r3, #28]
 800183e:	021b      	lsls	r3, r3, #8
 8001840:	492b      	ldr	r1, [pc, #172]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001842:	4313      	orrs	r3, r2
 8001844:	604b      	str	r3, [r1, #4]
 8001846:	e01a      	b.n	800187e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001848:	4b29      	ldr	r3, [pc, #164]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a28      	ldr	r2, [pc, #160]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 800184e:	f023 0301 	bic.w	r3, r3, #1
 8001852:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001854:	f7ff fdbe 	bl	80013d4 <HAL_GetTick>
 8001858:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800185a:	e008      	b.n	800186e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800185c:	f7ff fdba 	bl	80013d4 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b02      	cmp	r3, #2
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e31a      	b.n	8001ea4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800186e:	4b20      	ldr	r3, [pc, #128]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1f0      	bne.n	800185c <HAL_RCC_OscConfig+0x1dc>
 800187a:	e000      	b.n	800187e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800187c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	2b00      	cmp	r3, #0
 8001888:	d073      	beq.n	8001972 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	2b08      	cmp	r3, #8
 800188e:	d005      	beq.n	800189c <HAL_RCC_OscConfig+0x21c>
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	2b0c      	cmp	r3, #12
 8001894:	d10e      	bne.n	80018b4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	2b03      	cmp	r3, #3
 800189a:	d10b      	bne.n	80018b4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800189c:	4b14      	ldr	r3, [pc, #80]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d063      	beq.n	8001970 <HAL_RCC_OscConfig+0x2f0>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d15f      	bne.n	8001970 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e2f7      	b.n	8001ea4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018bc:	d106      	bne.n	80018cc <HAL_RCC_OscConfig+0x24c>
 80018be:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a0b      	ldr	r2, [pc, #44]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 80018c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c8:	6013      	str	r3, [r2, #0]
 80018ca:	e025      	b.n	8001918 <HAL_RCC_OscConfig+0x298>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018d4:	d114      	bne.n	8001900 <HAL_RCC_OscConfig+0x280>
 80018d6:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a05      	ldr	r2, [pc, #20]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 80018dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018e0:	6013      	str	r3, [r2, #0]
 80018e2:	4b03      	ldr	r3, [pc, #12]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a02      	ldr	r2, [pc, #8]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 80018e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ec:	6013      	str	r3, [r2, #0]
 80018ee:	e013      	b.n	8001918 <HAL_RCC_OscConfig+0x298>
 80018f0:	40021000 	.word	0x40021000
 80018f4:	08002554 	.word	0x08002554
 80018f8:	20000008 	.word	0x20000008
 80018fc:	2000000c 	.word	0x2000000c
 8001900:	4ba0      	ldr	r3, [pc, #640]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a9f      	ldr	r2, [pc, #636]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001906:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800190a:	6013      	str	r3, [r2, #0]
 800190c:	4b9d      	ldr	r3, [pc, #628]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a9c      	ldr	r2, [pc, #624]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001912:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001916:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d013      	beq.n	8001948 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001920:	f7ff fd58 	bl	80013d4 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001928:	f7ff fd54 	bl	80013d4 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b64      	cmp	r3, #100	; 0x64
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e2b4      	b.n	8001ea4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800193a:	4b92      	ldr	r3, [pc, #584]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d0f0      	beq.n	8001928 <HAL_RCC_OscConfig+0x2a8>
 8001946:	e014      	b.n	8001972 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001948:	f7ff fd44 	bl	80013d4 <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001950:	f7ff fd40 	bl	80013d4 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b64      	cmp	r3, #100	; 0x64
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e2a0      	b.n	8001ea4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001962:	4b88      	ldr	r3, [pc, #544]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1f0      	bne.n	8001950 <HAL_RCC_OscConfig+0x2d0>
 800196e:	e000      	b.n	8001972 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001970:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d060      	beq.n	8001a40 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	2b04      	cmp	r3, #4
 8001982:	d005      	beq.n	8001990 <HAL_RCC_OscConfig+0x310>
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	2b0c      	cmp	r3, #12
 8001988:	d119      	bne.n	80019be <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	2b02      	cmp	r3, #2
 800198e:	d116      	bne.n	80019be <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001990:	4b7c      	ldr	r3, [pc, #496]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001998:	2b00      	cmp	r3, #0
 800199a:	d005      	beq.n	80019a8 <HAL_RCC_OscConfig+0x328>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d101      	bne.n	80019a8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e27d      	b.n	8001ea4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a8:	4b76      	ldr	r3, [pc, #472]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	691b      	ldr	r3, [r3, #16]
 80019b4:	061b      	lsls	r3, r3, #24
 80019b6:	4973      	ldr	r1, [pc, #460]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 80019b8:	4313      	orrs	r3, r2
 80019ba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019bc:	e040      	b.n	8001a40 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d023      	beq.n	8001a0e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019c6:	4b6f      	ldr	r3, [pc, #444]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a6e      	ldr	r2, [pc, #440]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 80019cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d2:	f7ff fcff 	bl	80013d4 <HAL_GetTick>
 80019d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019d8:	e008      	b.n	80019ec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019da:	f7ff fcfb 	bl	80013d4 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e25b      	b.n	8001ea4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019ec:	4b65      	ldr	r3, [pc, #404]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d0f0      	beq.n	80019da <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f8:	4b62      	ldr	r3, [pc, #392]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	061b      	lsls	r3, r3, #24
 8001a06:	495f      	ldr	r1, [pc, #380]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	604b      	str	r3, [r1, #4]
 8001a0c:	e018      	b.n	8001a40 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a0e:	4b5d      	ldr	r3, [pc, #372]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a5c      	ldr	r2, [pc, #368]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001a14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1a:	f7ff fcdb 	bl	80013d4 <HAL_GetTick>
 8001a1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a20:	e008      	b.n	8001a34 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a22:	f7ff fcd7 	bl	80013d4 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e237      	b.n	8001ea4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a34:	4b53      	ldr	r3, [pc, #332]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1f0      	bne.n	8001a22 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0308 	and.w	r3, r3, #8
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d03c      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	695b      	ldr	r3, [r3, #20]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d01c      	beq.n	8001a8e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a54:	4b4b      	ldr	r3, [pc, #300]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001a56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a5a:	4a4a      	ldr	r2, [pc, #296]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001a5c:	f043 0301 	orr.w	r3, r3, #1
 8001a60:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a64:	f7ff fcb6 	bl	80013d4 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a6c:	f7ff fcb2 	bl	80013d4 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e212      	b.n	8001ea4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a7e:	4b41      	ldr	r3, [pc, #260]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001a80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d0ef      	beq.n	8001a6c <HAL_RCC_OscConfig+0x3ec>
 8001a8c:	e01b      	b.n	8001ac6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a8e:	4b3d      	ldr	r3, [pc, #244]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001a90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a94:	4a3b      	ldr	r2, [pc, #236]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001a96:	f023 0301 	bic.w	r3, r3, #1
 8001a9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a9e:	f7ff fc99 	bl	80013d4 <HAL_GetTick>
 8001aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001aa4:	e008      	b.n	8001ab8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aa6:	f7ff fc95 	bl	80013d4 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e1f5      	b.n	8001ea4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ab8:	4b32      	ldr	r3, [pc, #200]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1ef      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0304 	and.w	r3, r3, #4
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f000 80a6 	beq.w	8001c20 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ad8:	4b2a      	ldr	r3, [pc, #168]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d10d      	bne.n	8001b00 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ae4:	4b27      	ldr	r3, [pc, #156]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae8:	4a26      	ldr	r2, [pc, #152]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001aea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aee:	6593      	str	r3, [r2, #88]	; 0x58
 8001af0:	4b24      	ldr	r3, [pc, #144]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001afc:	2301      	movs	r3, #1
 8001afe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b00:	4b21      	ldr	r3, [pc, #132]	; (8001b88 <HAL_RCC_OscConfig+0x508>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d118      	bne.n	8001b3e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b0c:	4b1e      	ldr	r3, [pc, #120]	; (8001b88 <HAL_RCC_OscConfig+0x508>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a1d      	ldr	r2, [pc, #116]	; (8001b88 <HAL_RCC_OscConfig+0x508>)
 8001b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b18:	f7ff fc5c 	bl	80013d4 <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b20:	f7ff fc58 	bl	80013d4 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e1b8      	b.n	8001ea4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b32:	4b15      	ldr	r3, [pc, #84]	; (8001b88 <HAL_RCC_OscConfig+0x508>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d0f0      	beq.n	8001b20 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d108      	bne.n	8001b58 <HAL_RCC_OscConfig+0x4d8>
 8001b46:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b4c:	4a0d      	ldr	r2, [pc, #52]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b56:	e029      	b.n	8001bac <HAL_RCC_OscConfig+0x52c>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	2b05      	cmp	r3, #5
 8001b5e:	d115      	bne.n	8001b8c <HAL_RCC_OscConfig+0x50c>
 8001b60:	4b08      	ldr	r3, [pc, #32]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b66:	4a07      	ldr	r2, [pc, #28]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001b68:	f043 0304 	orr.w	r3, r3, #4
 8001b6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b70:	4b04      	ldr	r3, [pc, #16]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b76:	4a03      	ldr	r2, [pc, #12]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b80:	e014      	b.n	8001bac <HAL_RCC_OscConfig+0x52c>
 8001b82:	bf00      	nop
 8001b84:	40021000 	.word	0x40021000
 8001b88:	40007000 	.word	0x40007000
 8001b8c:	4b9d      	ldr	r3, [pc, #628]	; (8001e04 <HAL_RCC_OscConfig+0x784>)
 8001b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b92:	4a9c      	ldr	r2, [pc, #624]	; (8001e04 <HAL_RCC_OscConfig+0x784>)
 8001b94:	f023 0301 	bic.w	r3, r3, #1
 8001b98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b9c:	4b99      	ldr	r3, [pc, #612]	; (8001e04 <HAL_RCC_OscConfig+0x784>)
 8001b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ba2:	4a98      	ldr	r2, [pc, #608]	; (8001e04 <HAL_RCC_OscConfig+0x784>)
 8001ba4:	f023 0304 	bic.w	r3, r3, #4
 8001ba8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d016      	beq.n	8001be2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb4:	f7ff fc0e 	bl	80013d4 <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bba:	e00a      	b.n	8001bd2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bbc:	f7ff fc0a 	bl	80013d4 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e168      	b.n	8001ea4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bd2:	4b8c      	ldr	r3, [pc, #560]	; (8001e04 <HAL_RCC_OscConfig+0x784>)
 8001bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d0ed      	beq.n	8001bbc <HAL_RCC_OscConfig+0x53c>
 8001be0:	e015      	b.n	8001c0e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be2:	f7ff fbf7 	bl	80013d4 <HAL_GetTick>
 8001be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001be8:	e00a      	b.n	8001c00 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bea:	f7ff fbf3 	bl	80013d4 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e151      	b.n	8001ea4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c00:	4b80      	ldr	r3, [pc, #512]	; (8001e04 <HAL_RCC_OscConfig+0x784>)
 8001c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1ed      	bne.n	8001bea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c0e:	7ffb      	ldrb	r3, [r7, #31]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d105      	bne.n	8001c20 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c14:	4b7b      	ldr	r3, [pc, #492]	; (8001e04 <HAL_RCC_OscConfig+0x784>)
 8001c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c18:	4a7a      	ldr	r2, [pc, #488]	; (8001e04 <HAL_RCC_OscConfig+0x784>)
 8001c1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c1e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0320 	and.w	r3, r3, #32
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d03c      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d01c      	beq.n	8001c6e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c34:	4b73      	ldr	r3, [pc, #460]	; (8001e04 <HAL_RCC_OscConfig+0x784>)
 8001c36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c3a:	4a72      	ldr	r2, [pc, #456]	; (8001e04 <HAL_RCC_OscConfig+0x784>)
 8001c3c:	f043 0301 	orr.w	r3, r3, #1
 8001c40:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c44:	f7ff fbc6 	bl	80013d4 <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c4c:	f7ff fbc2 	bl	80013d4 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e122      	b.n	8001ea4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c5e:	4b69      	ldr	r3, [pc, #420]	; (8001e04 <HAL_RCC_OscConfig+0x784>)
 8001c60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d0ef      	beq.n	8001c4c <HAL_RCC_OscConfig+0x5cc>
 8001c6c:	e01b      	b.n	8001ca6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c6e:	4b65      	ldr	r3, [pc, #404]	; (8001e04 <HAL_RCC_OscConfig+0x784>)
 8001c70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c74:	4a63      	ldr	r2, [pc, #396]	; (8001e04 <HAL_RCC_OscConfig+0x784>)
 8001c76:	f023 0301 	bic.w	r3, r3, #1
 8001c7a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c7e:	f7ff fba9 	bl	80013d4 <HAL_GetTick>
 8001c82:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c84:	e008      	b.n	8001c98 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c86:	f7ff fba5 	bl	80013d4 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e105      	b.n	8001ea4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c98:	4b5a      	ldr	r3, [pc, #360]	; (8001e04 <HAL_RCC_OscConfig+0x784>)
 8001c9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1ef      	bne.n	8001c86 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f000 80f9 	beq.w	8001ea2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	f040 80cf 	bne.w	8001e58 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001cba:	4b52      	ldr	r3, [pc, #328]	; (8001e04 <HAL_RCC_OscConfig+0x784>)
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	f003 0203 	and.w	r2, r3, #3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d12c      	bne.n	8001d28 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d123      	bne.n	8001d28 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cea:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d11b      	bne.n	8001d28 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cfa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d113      	bne.n	8001d28 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d0a:	085b      	lsrs	r3, r3, #1
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d109      	bne.n	8001d28 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	085b      	lsrs	r3, r3, #1
 8001d20:	3b01      	subs	r3, #1
 8001d22:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d071      	beq.n	8001e0c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	2b0c      	cmp	r3, #12
 8001d2c:	d068      	beq.n	8001e00 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d2e:	4b35      	ldr	r3, [pc, #212]	; (8001e04 <HAL_RCC_OscConfig+0x784>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d105      	bne.n	8001d46 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001d3a:	4b32      	ldr	r3, [pc, #200]	; (8001e04 <HAL_RCC_OscConfig+0x784>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e0ac      	b.n	8001ea4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d4a:	4b2e      	ldr	r3, [pc, #184]	; (8001e04 <HAL_RCC_OscConfig+0x784>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a2d      	ldr	r2, [pc, #180]	; (8001e04 <HAL_RCC_OscConfig+0x784>)
 8001d50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d54:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d56:	f7ff fb3d 	bl	80013d4 <HAL_GetTick>
 8001d5a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d5c:	e008      	b.n	8001d70 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d5e:	f7ff fb39 	bl	80013d4 <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e099      	b.n	8001ea4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d70:	4b24      	ldr	r3, [pc, #144]	; (8001e04 <HAL_RCC_OscConfig+0x784>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d1f0      	bne.n	8001d5e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d7c:	4b21      	ldr	r3, [pc, #132]	; (8001e04 <HAL_RCC_OscConfig+0x784>)
 8001d7e:	68da      	ldr	r2, [r3, #12]
 8001d80:	4b21      	ldr	r3, [pc, #132]	; (8001e08 <HAL_RCC_OscConfig+0x788>)
 8001d82:	4013      	ands	r3, r2
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d8c:	3a01      	subs	r2, #1
 8001d8e:	0112      	lsls	r2, r2, #4
 8001d90:	4311      	orrs	r1, r2
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d96:	0212      	lsls	r2, r2, #8
 8001d98:	4311      	orrs	r1, r2
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d9e:	0852      	lsrs	r2, r2, #1
 8001da0:	3a01      	subs	r2, #1
 8001da2:	0552      	lsls	r2, r2, #21
 8001da4:	4311      	orrs	r1, r2
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001daa:	0852      	lsrs	r2, r2, #1
 8001dac:	3a01      	subs	r2, #1
 8001dae:	0652      	lsls	r2, r2, #25
 8001db0:	4311      	orrs	r1, r2
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001db6:	06d2      	lsls	r2, r2, #27
 8001db8:	430a      	orrs	r2, r1
 8001dba:	4912      	ldr	r1, [pc, #72]	; (8001e04 <HAL_RCC_OscConfig+0x784>)
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001dc0:	4b10      	ldr	r3, [pc, #64]	; (8001e04 <HAL_RCC_OscConfig+0x784>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a0f      	ldr	r2, [pc, #60]	; (8001e04 <HAL_RCC_OscConfig+0x784>)
 8001dc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001dcc:	4b0d      	ldr	r3, [pc, #52]	; (8001e04 <HAL_RCC_OscConfig+0x784>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	4a0c      	ldr	r2, [pc, #48]	; (8001e04 <HAL_RCC_OscConfig+0x784>)
 8001dd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dd6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001dd8:	f7ff fafc 	bl	80013d4 <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001de0:	f7ff faf8 	bl	80013d4 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e058      	b.n	8001ea4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001df2:	4b04      	ldr	r3, [pc, #16]	; (8001e04 <HAL_RCC_OscConfig+0x784>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d0f0      	beq.n	8001de0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dfe:	e050      	b.n	8001ea2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e04f      	b.n	8001ea4 <HAL_RCC_OscConfig+0x824>
 8001e04:	40021000 	.word	0x40021000
 8001e08:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e0c:	4b27      	ldr	r3, [pc, #156]	; (8001eac <HAL_RCC_OscConfig+0x82c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d144      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e18:	4b24      	ldr	r3, [pc, #144]	; (8001eac <HAL_RCC_OscConfig+0x82c>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a23      	ldr	r2, [pc, #140]	; (8001eac <HAL_RCC_OscConfig+0x82c>)
 8001e1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e22:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e24:	4b21      	ldr	r3, [pc, #132]	; (8001eac <HAL_RCC_OscConfig+0x82c>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	4a20      	ldr	r2, [pc, #128]	; (8001eac <HAL_RCC_OscConfig+0x82c>)
 8001e2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e2e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e30:	f7ff fad0 	bl	80013d4 <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e38:	f7ff facc 	bl	80013d4 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e02c      	b.n	8001ea4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e4a:	4b18      	ldr	r3, [pc, #96]	; (8001eac <HAL_RCC_OscConfig+0x82c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d0f0      	beq.n	8001e38 <HAL_RCC_OscConfig+0x7b8>
 8001e56:	e024      	b.n	8001ea2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	2b0c      	cmp	r3, #12
 8001e5c:	d01f      	beq.n	8001e9e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e5e:	4b13      	ldr	r3, [pc, #76]	; (8001eac <HAL_RCC_OscConfig+0x82c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a12      	ldr	r2, [pc, #72]	; (8001eac <HAL_RCC_OscConfig+0x82c>)
 8001e64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6a:	f7ff fab3 	bl	80013d4 <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e70:	e008      	b.n	8001e84 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e72:	f7ff faaf 	bl	80013d4 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e00f      	b.n	8001ea4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e84:	4b09      	ldr	r3, [pc, #36]	; (8001eac <HAL_RCC_OscConfig+0x82c>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d1f0      	bne.n	8001e72 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001e90:	4b06      	ldr	r3, [pc, #24]	; (8001eac <HAL_RCC_OscConfig+0x82c>)
 8001e92:	68da      	ldr	r2, [r3, #12]
 8001e94:	4905      	ldr	r1, [pc, #20]	; (8001eac <HAL_RCC_OscConfig+0x82c>)
 8001e96:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <HAL_RCC_OscConfig+0x830>)
 8001e98:	4013      	ands	r3, r2
 8001e9a:	60cb      	str	r3, [r1, #12]
 8001e9c:	e001      	b.n	8001ea2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e000      	b.n	8001ea4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3720      	adds	r7, #32
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	feeefffc 	.word	0xfeeefffc

08001eb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d101      	bne.n	8001ec8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e0e7      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ec8:	4b75      	ldr	r3, [pc, #468]	; (80020a0 <HAL_RCC_ClockConfig+0x1ec>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d910      	bls.n	8001ef8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ed6:	4b72      	ldr	r3, [pc, #456]	; (80020a0 <HAL_RCC_ClockConfig+0x1ec>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f023 0207 	bic.w	r2, r3, #7
 8001ede:	4970      	ldr	r1, [pc, #448]	; (80020a0 <HAL_RCC_ClockConfig+0x1ec>)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ee6:	4b6e      	ldr	r3, [pc, #440]	; (80020a0 <HAL_RCC_ClockConfig+0x1ec>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d001      	beq.n	8001ef8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e0cf      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d010      	beq.n	8001f26 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	4b66      	ldr	r3, [pc, #408]	; (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d908      	bls.n	8001f26 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f14:	4b63      	ldr	r3, [pc, #396]	; (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	4960      	ldr	r1, [pc, #384]	; (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d04c      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2b03      	cmp	r3, #3
 8001f38:	d107      	bne.n	8001f4a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f3a:	4b5a      	ldr	r3, [pc, #360]	; (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d121      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e0a6      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d107      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f52:	4b54      	ldr	r3, [pc, #336]	; (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d115      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e09a      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d107      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f6a:	4b4e      	ldr	r3, [pc, #312]	; (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d109      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e08e      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f7a:	4b4a      	ldr	r3, [pc, #296]	; (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e086      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f8a:	4b46      	ldr	r3, [pc, #280]	; (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f023 0203 	bic.w	r2, r3, #3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	4943      	ldr	r1, [pc, #268]	; (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f9c:	f7ff fa1a 	bl	80013d4 <HAL_GetTick>
 8001fa0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fa2:	e00a      	b.n	8001fba <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fa4:	f7ff fa16 	bl	80013d4 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e06e      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fba:	4b3a      	ldr	r3, [pc, #232]	; (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 020c 	and.w	r2, r3, #12
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d1eb      	bne.n	8001fa4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d010      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	4b31      	ldr	r3, [pc, #196]	; (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d208      	bcs.n	8001ffa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fe8:	4b2e      	ldr	r3, [pc, #184]	; (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	492b      	ldr	r1, [pc, #172]	; (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ffa:	4b29      	ldr	r3, [pc, #164]	; (80020a0 <HAL_RCC_ClockConfig+0x1ec>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	429a      	cmp	r2, r3
 8002006:	d210      	bcs.n	800202a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002008:	4b25      	ldr	r3, [pc, #148]	; (80020a0 <HAL_RCC_ClockConfig+0x1ec>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f023 0207 	bic.w	r2, r3, #7
 8002010:	4923      	ldr	r1, [pc, #140]	; (80020a0 <HAL_RCC_ClockConfig+0x1ec>)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	4313      	orrs	r3, r2
 8002016:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002018:	4b21      	ldr	r3, [pc, #132]	; (80020a0 <HAL_RCC_ClockConfig+0x1ec>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0307 	and.w	r3, r3, #7
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	429a      	cmp	r2, r3
 8002024:	d001      	beq.n	800202a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e036      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0304 	and.w	r3, r3, #4
 8002032:	2b00      	cmp	r3, #0
 8002034:	d008      	beq.n	8002048 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002036:	4b1b      	ldr	r3, [pc, #108]	; (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	4918      	ldr	r1, [pc, #96]	; (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002044:	4313      	orrs	r3, r2
 8002046:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0308 	and.w	r3, r3, #8
 8002050:	2b00      	cmp	r3, #0
 8002052:	d009      	beq.n	8002068 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002054:	4b13      	ldr	r3, [pc, #76]	; (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	4910      	ldr	r1, [pc, #64]	; (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002064:	4313      	orrs	r3, r2
 8002066:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002068:	f000 f824 	bl	80020b4 <HAL_RCC_GetSysClockFreq>
 800206c:	4602      	mov	r2, r0
 800206e:	4b0d      	ldr	r3, [pc, #52]	; (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	091b      	lsrs	r3, r3, #4
 8002074:	f003 030f 	and.w	r3, r3, #15
 8002078:	490b      	ldr	r1, [pc, #44]	; (80020a8 <HAL_RCC_ClockConfig+0x1f4>)
 800207a:	5ccb      	ldrb	r3, [r1, r3]
 800207c:	f003 031f 	and.w	r3, r3, #31
 8002080:	fa22 f303 	lsr.w	r3, r2, r3
 8002084:	4a09      	ldr	r2, [pc, #36]	; (80020ac <HAL_RCC_ClockConfig+0x1f8>)
 8002086:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002088:	4b09      	ldr	r3, [pc, #36]	; (80020b0 <HAL_RCC_ClockConfig+0x1fc>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff f951 	bl	8001334 <HAL_InitTick>
 8002092:	4603      	mov	r3, r0
 8002094:	72fb      	strb	r3, [r7, #11]

  return status;
 8002096:	7afb      	ldrb	r3, [r7, #11]
}
 8002098:	4618      	mov	r0, r3
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40022000 	.word	0x40022000
 80020a4:	40021000 	.word	0x40021000
 80020a8:	08002554 	.word	0x08002554
 80020ac:	20000008 	.word	0x20000008
 80020b0:	2000000c 	.word	0x2000000c

080020b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b089      	sub	sp, #36	; 0x24
 80020b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	61fb      	str	r3, [r7, #28]
 80020be:	2300      	movs	r3, #0
 80020c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020c2:	4b3e      	ldr	r3, [pc, #248]	; (80021bc <HAL_RCC_GetSysClockFreq+0x108>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f003 030c 	and.w	r3, r3, #12
 80020ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020cc:	4b3b      	ldr	r3, [pc, #236]	; (80021bc <HAL_RCC_GetSysClockFreq+0x108>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	f003 0303 	and.w	r3, r3, #3
 80020d4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d005      	beq.n	80020e8 <HAL_RCC_GetSysClockFreq+0x34>
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	2b0c      	cmp	r3, #12
 80020e0:	d121      	bne.n	8002126 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d11e      	bne.n	8002126 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80020e8:	4b34      	ldr	r3, [pc, #208]	; (80021bc <HAL_RCC_GetSysClockFreq+0x108>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0308 	and.w	r3, r3, #8
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d107      	bne.n	8002104 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80020f4:	4b31      	ldr	r3, [pc, #196]	; (80021bc <HAL_RCC_GetSysClockFreq+0x108>)
 80020f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020fa:	0a1b      	lsrs	r3, r3, #8
 80020fc:	f003 030f 	and.w	r3, r3, #15
 8002100:	61fb      	str	r3, [r7, #28]
 8002102:	e005      	b.n	8002110 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002104:	4b2d      	ldr	r3, [pc, #180]	; (80021bc <HAL_RCC_GetSysClockFreq+0x108>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	091b      	lsrs	r3, r3, #4
 800210a:	f003 030f 	and.w	r3, r3, #15
 800210e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002110:	4a2b      	ldr	r2, [pc, #172]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002118:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d10d      	bne.n	800213c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002124:	e00a      	b.n	800213c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	2b04      	cmp	r3, #4
 800212a:	d102      	bne.n	8002132 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800212c:	4b25      	ldr	r3, [pc, #148]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800212e:	61bb      	str	r3, [r7, #24]
 8002130:	e004      	b.n	800213c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	2b08      	cmp	r3, #8
 8002136:	d101      	bne.n	800213c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002138:	4b23      	ldr	r3, [pc, #140]	; (80021c8 <HAL_RCC_GetSysClockFreq+0x114>)
 800213a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	2b0c      	cmp	r3, #12
 8002140:	d134      	bne.n	80021ac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002142:	4b1e      	ldr	r3, [pc, #120]	; (80021bc <HAL_RCC_GetSysClockFreq+0x108>)
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	f003 0303 	and.w	r3, r3, #3
 800214a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	2b02      	cmp	r3, #2
 8002150:	d003      	beq.n	800215a <HAL_RCC_GetSysClockFreq+0xa6>
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	2b03      	cmp	r3, #3
 8002156:	d003      	beq.n	8002160 <HAL_RCC_GetSysClockFreq+0xac>
 8002158:	e005      	b.n	8002166 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800215a:	4b1a      	ldr	r3, [pc, #104]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800215c:	617b      	str	r3, [r7, #20]
      break;
 800215e:	e005      	b.n	800216c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002160:	4b19      	ldr	r3, [pc, #100]	; (80021c8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002162:	617b      	str	r3, [r7, #20]
      break;
 8002164:	e002      	b.n	800216c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	617b      	str	r3, [r7, #20]
      break;
 800216a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800216c:	4b13      	ldr	r3, [pc, #76]	; (80021bc <HAL_RCC_GetSysClockFreq+0x108>)
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	091b      	lsrs	r3, r3, #4
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	3301      	adds	r3, #1
 8002178:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800217a:	4b10      	ldr	r3, [pc, #64]	; (80021bc <HAL_RCC_GetSysClockFreq+0x108>)
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	0a1b      	lsrs	r3, r3, #8
 8002180:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002184:	697a      	ldr	r2, [r7, #20]
 8002186:	fb03 f202 	mul.w	r2, r3, r2
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002190:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002192:	4b0a      	ldr	r3, [pc, #40]	; (80021bc <HAL_RCC_GetSysClockFreq+0x108>)
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	0e5b      	lsrs	r3, r3, #25
 8002198:	f003 0303 	and.w	r3, r3, #3
 800219c:	3301      	adds	r3, #1
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80021ac:	69bb      	ldr	r3, [r7, #24]
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3724      	adds	r7, #36	; 0x24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	40021000 	.word	0x40021000
 80021c0:	08002564 	.word	0x08002564
 80021c4:	00f42400 	.word	0x00f42400
 80021c8:	007a1200 	.word	0x007a1200

080021cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80021d4:	2300      	movs	r3, #0
 80021d6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80021d8:	4b2a      	ldr	r3, [pc, #168]	; (8002284 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d003      	beq.n	80021ec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80021e4:	f7ff f9e8 	bl	80015b8 <HAL_PWREx_GetVoltageRange>
 80021e8:	6178      	str	r0, [r7, #20]
 80021ea:	e014      	b.n	8002216 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80021ec:	4b25      	ldr	r3, [pc, #148]	; (8002284 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f0:	4a24      	ldr	r2, [pc, #144]	; (8002284 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021f6:	6593      	str	r3, [r2, #88]	; 0x58
 80021f8:	4b22      	ldr	r3, [pc, #136]	; (8002284 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002204:	f7ff f9d8 	bl	80015b8 <HAL_PWREx_GetVoltageRange>
 8002208:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800220a:	4b1e      	ldr	r3, [pc, #120]	; (8002284 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800220c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800220e:	4a1d      	ldr	r2, [pc, #116]	; (8002284 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002210:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002214:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800221c:	d10b      	bne.n	8002236 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2b80      	cmp	r3, #128	; 0x80
 8002222:	d919      	bls.n	8002258 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2ba0      	cmp	r3, #160	; 0xa0
 8002228:	d902      	bls.n	8002230 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800222a:	2302      	movs	r3, #2
 800222c:	613b      	str	r3, [r7, #16]
 800222e:	e013      	b.n	8002258 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002230:	2301      	movs	r3, #1
 8002232:	613b      	str	r3, [r7, #16]
 8002234:	e010      	b.n	8002258 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b80      	cmp	r3, #128	; 0x80
 800223a:	d902      	bls.n	8002242 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800223c:	2303      	movs	r3, #3
 800223e:	613b      	str	r3, [r7, #16]
 8002240:	e00a      	b.n	8002258 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2b80      	cmp	r3, #128	; 0x80
 8002246:	d102      	bne.n	800224e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002248:	2302      	movs	r3, #2
 800224a:	613b      	str	r3, [r7, #16]
 800224c:	e004      	b.n	8002258 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2b70      	cmp	r3, #112	; 0x70
 8002252:	d101      	bne.n	8002258 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002254:	2301      	movs	r3, #1
 8002256:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002258:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f023 0207 	bic.w	r2, r3, #7
 8002260:	4909      	ldr	r1, [pc, #36]	; (8002288 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	4313      	orrs	r3, r2
 8002266:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002268:	4b07      	ldr	r3, [pc, #28]	; (8002288 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0307 	and.w	r3, r3, #7
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	429a      	cmp	r2, r3
 8002274:	d001      	beq.n	800227a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e000      	b.n	800227c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3718      	adds	r7, #24
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40021000 	.word	0x40021000
 8002288:	40022000 	.word	0x40022000

0800228c <__libc_init_array>:
 800228c:	b570      	push	{r4, r5, r6, lr}
 800228e:	4d0d      	ldr	r5, [pc, #52]	; (80022c4 <__libc_init_array+0x38>)
 8002290:	4c0d      	ldr	r4, [pc, #52]	; (80022c8 <__libc_init_array+0x3c>)
 8002292:	1b64      	subs	r4, r4, r5
 8002294:	10a4      	asrs	r4, r4, #2
 8002296:	2600      	movs	r6, #0
 8002298:	42a6      	cmp	r6, r4
 800229a:	d109      	bne.n	80022b0 <__libc_init_array+0x24>
 800229c:	4d0b      	ldr	r5, [pc, #44]	; (80022cc <__libc_init_array+0x40>)
 800229e:	4c0c      	ldr	r4, [pc, #48]	; (80022d0 <__libc_init_array+0x44>)
 80022a0:	f000 f820 	bl	80022e4 <_init>
 80022a4:	1b64      	subs	r4, r4, r5
 80022a6:	10a4      	asrs	r4, r4, #2
 80022a8:	2600      	movs	r6, #0
 80022aa:	42a6      	cmp	r6, r4
 80022ac:	d105      	bne.n	80022ba <__libc_init_array+0x2e>
 80022ae:	bd70      	pop	{r4, r5, r6, pc}
 80022b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80022b4:	4798      	blx	r3
 80022b6:	3601      	adds	r6, #1
 80022b8:	e7ee      	b.n	8002298 <__libc_init_array+0xc>
 80022ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80022be:	4798      	blx	r3
 80022c0:	3601      	adds	r6, #1
 80022c2:	e7f2      	b.n	80022aa <__libc_init_array+0x1e>
 80022c4:	08002594 	.word	0x08002594
 80022c8:	08002594 	.word	0x08002594
 80022cc:	08002594 	.word	0x08002594
 80022d0:	08002598 	.word	0x08002598

080022d4 <memset>:
 80022d4:	4402      	add	r2, r0
 80022d6:	4603      	mov	r3, r0
 80022d8:	4293      	cmp	r3, r2
 80022da:	d100      	bne.n	80022de <memset+0xa>
 80022dc:	4770      	bx	lr
 80022de:	f803 1b01 	strb.w	r1, [r3], #1
 80022e2:	e7f9      	b.n	80022d8 <memset+0x4>

080022e4 <_init>:
 80022e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022e6:	bf00      	nop
 80022e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022ea:	bc08      	pop	{r3}
 80022ec:	469e      	mov	lr, r3
 80022ee:	4770      	bx	lr

080022f0 <_fini>:
 80022f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022f2:	bf00      	nop
 80022f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022f6:	bc08      	pop	{r3}
 80022f8:	469e      	mov	lr, r3
 80022fa:	4770      	bx	lr
