
A7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000017bc  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08001968  08001968  00011968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080019b8  080019b8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080019b8  080019b8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080019b8  080019b8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080019b8  080019b8  000119b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080019bc  080019bc  000119bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080019c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  080019cc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  080019cc  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000053e4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001140  00000000  00000000  00025420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005d8  00000000  00000000  00026560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000530  00000000  00000000  00026b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002712a  00000000  00000000  00027068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005e74  00000000  00000000  0004e192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee66d  00000000  00000000  00054006  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00142673  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001534  00000000  00000000  001426c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08001950 	.word	0x08001950

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08001950 	.word	0x08001950

080001ec <LPUART_init>:
//Not needed for A7
//cursor position center
//int row = 20;
//int col = 40;

void LPUART_init(void) {
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0
	PWR->CR2 |= (PWR_CR2_IOSV);             // power avail on PG[15:2] (LPUART1)
 80001f0:	4b22      	ldr	r3, [pc, #136]	; (800027c <LPUART_init+0x90>)
 80001f2:	685b      	ldr	r3, [r3, #4]
 80001f4:	4a21      	ldr	r2, [pc, #132]	; (800027c <LPUART_init+0x90>)
 80001f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001fa:	6053      	str	r3, [r2, #4]
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOGEN);   // enable GPIOG clock
 80001fc:	4b20      	ldr	r3, [pc, #128]	; (8000280 <LPUART_init+0x94>)
 80001fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000200:	4a1f      	ldr	r2, [pc, #124]	; (8000280 <LPUART_init+0x94>)
 8000202:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000206:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC->APB1ENR2 |= RCC_APB1ENR2_LPUART1EN; // enable LPUART clock bridge
 8000208:	4b1d      	ldr	r3, [pc, #116]	; (8000280 <LPUART_init+0x94>)
 800020a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800020c:	4a1c      	ldr	r2, [pc, #112]	; (8000280 <LPUART_init+0x94>)
 800020e:	f043 0301 	orr.w	r3, r3, #1
 8000212:	65d3      	str	r3, [r2, #92]	; 0x5c

	//Initialize Pins for USART
	// Pin 7 = tx, pin 8 = rx,
	GPIOG->MODER &= ~(GPIO_MODER_MODE7 | GPIO_MODER_MODE8);	//clear bits
 8000214:	4b1b      	ldr	r3, [pc, #108]	; (8000284 <LPUART_init+0x98>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a1a      	ldr	r2, [pc, #104]	; (8000284 <LPUART_init+0x98>)
 800021a:	f423 3370 	bic.w	r3, r3, #245760	; 0x3c000
 800021e:	6013      	str	r3, [r2, #0]
	GPIOG->MODER |= (GPIO_MODER_MODE7_1 | GPIO_MODER_MODE8_1);//set to AFR mode
 8000220:	4b18      	ldr	r3, [pc, #96]	; (8000284 <LPUART_init+0x98>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a17      	ldr	r2, [pc, #92]	; (8000284 <LPUART_init+0x98>)
 8000226:	f443 3320 	orr.w	r3, r3, #163840	; 0x28000
 800022a:	6013      	str	r3, [r2, #0]
	GPIOG->AFR[0] |= (8 << GPIO_AFRL_AFSEL7_Pos);
 800022c:	4b15      	ldr	r3, [pc, #84]	; (8000284 <LPUART_init+0x98>)
 800022e:	6a1b      	ldr	r3, [r3, #32]
 8000230:	4a14      	ldr	r2, [pc, #80]	; (8000284 <LPUART_init+0x98>)
 8000232:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000236:	6213      	str	r3, [r2, #32]
	GPIOG->AFR[1] |= (8 << GPIO_AFRH_AFSEL8_Pos); //set to AF8 (USART)
 8000238:	4b12      	ldr	r3, [pc, #72]	; (8000284 <LPUART_init+0x98>)
 800023a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800023c:	4a11      	ldr	r2, [pc, #68]	; (8000284 <LPUART_init+0x98>)
 800023e:	f043 0308 	orr.w	r3, r3, #8
 8000242:	6253      	str	r3, [r2, #36]	; 0x24

	LPUART1->CR1 &= ~(USART_CR1_M1 | USART_CR1_M0); // 8-bit data
 8000244:	4b10      	ldr	r3, [pc, #64]	; (8000288 <LPUART_init+0x9c>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a0f      	ldr	r2, [pc, #60]	; (8000288 <LPUART_init+0x9c>)
 800024a:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 800024e:	6013      	str	r3, [r2, #0]
	LPUART1->CR1 |= USART_CR1_UE;                   // enable LPUART1
 8000250:	4b0d      	ldr	r3, [pc, #52]	; (8000288 <LPUART_init+0x9c>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a0c      	ldr	r2, [pc, #48]	; (8000288 <LPUART_init+0x9c>)
 8000256:	f043 0301 	orr.w	r3, r3, #1
 800025a:	6013      	str	r3, [r2, #0]
	LPUART1->CR1 |= (USART_CR1_TE | USART_CR1_RE);  // enable xmit & recv
 800025c:	4b0a      	ldr	r3, [pc, #40]	; (8000288 <LPUART_init+0x9c>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a09      	ldr	r2, [pc, #36]	; (8000288 <LPUART_init+0x9c>)
 8000262:	f043 030c 	orr.w	r3, r3, #12
 8000266:	6013      	str	r3, [r2, #0]
//	LPUART1->CR1 |= USART_CR1_RXNEIE;        // enable LPUART1 recv interrupt
//	LPUART1->ISR &= ~(USART_ISR_RXNE);       // clear Recv-Not-Empty flag

	LPUART1->BRR = 0x22B8;			//sets baud rate~VT100 11500
 8000268:	4b07      	ldr	r3, [pc, #28]	; (8000288 <LPUART_init+0x9c>)
 800026a:	f242 22b8 	movw	r2, #8888	; 0x22b8
 800026e:	60da      	str	r2, [r3, #12]

//	NVIC->ISER[2] = (1 << (LPUART1_IRQn & 0x1F));   // enable LPUART1 ISR
//	__enable_irq();                          // enable global interrupts
}
 8000270:	bf00      	nop
 8000272:	46bd      	mov	sp, r7
 8000274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000278:	4770      	bx	lr
 800027a:	bf00      	nop
 800027c:	40007000 	.word	0x40007000
 8000280:	40021000 	.word	0x40021000
 8000284:	48001800 	.word	0x48001800
 8000288:	40008000 	.word	0x40008000

0800028c <LPUART_Print>:

void LPUART_Print(const char *message) {
 800028c:	b580      	push	{r7, lr}
 800028e:	b084      	sub	sp, #16
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
	uint16_t iStrIdx = 0;
 8000294:	2300      	movs	r3, #0
 8000296:	81fb      	strh	r3, [r7, #14]
	while (message[iStrIdx] != 0) {
 8000298:	e013      	b.n	80002c2 <LPUART_Print+0x36>
		while (!(LPUART1->ISR & USART_ISR_TXE))
 800029a:	bf00      	nop
 800029c:	4b10      	ldr	r3, [pc, #64]	; (80002e0 <LPUART_Print+0x54>)
 800029e:	69db      	ldr	r3, [r3, #28]
 80002a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d0f9      	beq.n	800029c <LPUART_Print+0x10>
			; // wait for empty xmit buffer
		LPUART1->TDR = message[iStrIdx];       // send this character
 80002a8:	89fb      	ldrh	r3, [r7, #14]
 80002aa:	687a      	ldr	r2, [r7, #4]
 80002ac:	4413      	add	r3, r2
 80002ae:	781a      	ldrb	r2, [r3, #0]
 80002b0:	4b0b      	ldr	r3, [pc, #44]	; (80002e0 <LPUART_Print+0x54>)
 80002b2:	b292      	uxth	r2, r2
 80002b4:	851a      	strh	r2, [r3, #40]	; 0x28
		iStrIdx++;                             // index to next char
 80002b6:	89fb      	ldrh	r3, [r7, #14]
 80002b8:	3301      	adds	r3, #1
 80002ba:	81fb      	strh	r3, [r7, #14]
		delay_us(200);
 80002bc:	20c8      	movs	r0, #200	; 0xc8
 80002be:	f000 f8db 	bl	8000478 <delay_us>
	while (message[iStrIdx] != 0) {
 80002c2:	89fb      	ldrh	r3, [r7, #14]
 80002c4:	687a      	ldr	r2, [r7, #4]
 80002c6:	4413      	add	r3, r2
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d1e5      	bne.n	800029a <LPUART_Print+0xe>
	}
	delay_us(1000);
 80002ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002d2:	f000 f8d1 	bl	8000478 <delay_us>
}
 80002d6:	bf00      	nop
 80002d8:	3710      	adds	r7, #16
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	40008000 	.word	0x40008000

080002e4 <LPUART_ESC_Print>:

void LPUART_ESC_Print(const char *message) {
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b084      	sub	sp, #16
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
	uint16_t iStrIdx = 0;
 80002ec:	2300      	movs	r3, #0
 80002ee:	81fb      	strh	r3, [r7, #14]
	while (!(LPUART1->ISR & USART_ISR_TXE))
 80002f0:	bf00      	nop
 80002f2:	4b16      	ldr	r3, [pc, #88]	; (800034c <LPUART_ESC_Print+0x68>)
 80002f4:	69db      	ldr	r3, [r3, #28]
 80002f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d0f9      	beq.n	80002f2 <LPUART_ESC_Print+0xe>
		;
	LPUART1->TDR = 0x1b;
 80002fe:	4b13      	ldr	r3, [pc, #76]	; (800034c <LPUART_ESC_Print+0x68>)
 8000300:	221b      	movs	r2, #27
 8000302:	851a      	strh	r2, [r3, #40]	; 0x28
	while (message[iStrIdx] != 0) {
 8000304:	e013      	b.n	800032e <LPUART_ESC_Print+0x4a>
		while (!(LPUART1->ISR & USART_ISR_TXE))
 8000306:	bf00      	nop
 8000308:	4b10      	ldr	r3, [pc, #64]	; (800034c <LPUART_ESC_Print+0x68>)
 800030a:	69db      	ldr	r3, [r3, #28]
 800030c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000310:	2b00      	cmp	r3, #0
 8000312:	d0f9      	beq.n	8000308 <LPUART_ESC_Print+0x24>
			; // wait for empty xmit buffer
		LPUART1->TDR = message[iStrIdx];       // send this character
 8000314:	89fb      	ldrh	r3, [r7, #14]
 8000316:	687a      	ldr	r2, [r7, #4]
 8000318:	4413      	add	r3, r2
 800031a:	781a      	ldrb	r2, [r3, #0]
 800031c:	4b0b      	ldr	r3, [pc, #44]	; (800034c <LPUART_ESC_Print+0x68>)
 800031e:	b292      	uxth	r2, r2
 8000320:	851a      	strh	r2, [r3, #40]	; 0x28
		iStrIdx++;
 8000322:	89fb      	ldrh	r3, [r7, #14]
 8000324:	3301      	adds	r3, #1
 8000326:	81fb      	strh	r3, [r7, #14]
		delay_us(200);       // advance index to next char
 8000328:	20c8      	movs	r0, #200	; 0xc8
 800032a:	f000 f8a5 	bl	8000478 <delay_us>
	while (message[iStrIdx] != 0) {
 800032e:	89fb      	ldrh	r3, [r7, #14]
 8000330:	687a      	ldr	r2, [r7, #4]
 8000332:	4413      	add	r3, r2
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	2b00      	cmp	r3, #0
 8000338:	d1e5      	bne.n	8000306 <LPUART_ESC_Print+0x22>
	}
	delay_us(1000);
 800033a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800033e:	f000 f89b 	bl	8000478 <delay_us>
}
 8000342:	bf00      	nop
 8000344:	3710      	adds	r7, #16
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	40008000 	.word	0x40008000

08000350 <update_position>:

//works only for row and col values less than 100
void update_position(uint8_t row, uint8_t col) {
 8000350:	b580      	push	{r7, lr}
 8000352:	b08a      	sub	sp, #40	; 0x28
 8000354:	af00      	add	r7, sp, #0
 8000356:	4603      	mov	r3, r0
 8000358:	460a      	mov	r2, r1
 800035a:	71fb      	strb	r3, [r7, #7]
 800035c:	4613      	mov	r3, r2
 800035e:	71bb      	strb	r3, [r7, #6]
	char str[8];
	int i = 0; //pointer to increment if row and col values are greater than 10
 8000360:	2300      	movs	r3, #0
 8000362:	627b      	str	r3, [r7, #36]	; 0x24
	int rone, rten, cone, cten;
	rone = row % 10;
 8000364:	79fa      	ldrb	r2, [r7, #7]
 8000366:	4b38      	ldr	r3, [pc, #224]	; (8000448 <update_position+0xf8>)
 8000368:	fba3 1302 	umull	r1, r3, r3, r2
 800036c:	08d9      	lsrs	r1, r3, #3
 800036e:	460b      	mov	r3, r1
 8000370:	009b      	lsls	r3, r3, #2
 8000372:	440b      	add	r3, r1
 8000374:	005b      	lsls	r3, r3, #1
 8000376:	1ad3      	subs	r3, r2, r3
 8000378:	b2db      	uxtb	r3, r3
 800037a:	623b      	str	r3, [r7, #32]
	rten = row / 10;
 800037c:	79fb      	ldrb	r3, [r7, #7]
 800037e:	4a32      	ldr	r2, [pc, #200]	; (8000448 <update_position+0xf8>)
 8000380:	fba2 2303 	umull	r2, r3, r2, r3
 8000384:	08db      	lsrs	r3, r3, #3
 8000386:	b2db      	uxtb	r3, r3
 8000388:	61fb      	str	r3, [r7, #28]
	cone = col % 10;
 800038a:	79ba      	ldrb	r2, [r7, #6]
 800038c:	4b2e      	ldr	r3, [pc, #184]	; (8000448 <update_position+0xf8>)
 800038e:	fba3 1302 	umull	r1, r3, r3, r2
 8000392:	08d9      	lsrs	r1, r3, #3
 8000394:	460b      	mov	r3, r1
 8000396:	009b      	lsls	r3, r3, #2
 8000398:	440b      	add	r3, r1
 800039a:	005b      	lsls	r3, r3, #1
 800039c:	1ad3      	subs	r3, r2, r3
 800039e:	b2db      	uxtb	r3, r3
 80003a0:	61bb      	str	r3, [r7, #24]
	cten = col / 10;
 80003a2:	79bb      	ldrb	r3, [r7, #6]
 80003a4:	4a28      	ldr	r2, [pc, #160]	; (8000448 <update_position+0xf8>)
 80003a6:	fba2 2303 	umull	r2, r3, r2, r3
 80003aa:	08db      	lsrs	r3, r3, #3
 80003ac:	b2db      	uxtb	r3, r3
 80003ae:	617b      	str	r3, [r7, #20]

	//converts row and col int values to char
	char row_one = rone + '0';
 80003b0:	6a3b      	ldr	r3, [r7, #32]
 80003b2:	b2db      	uxtb	r3, r3
 80003b4:	3330      	adds	r3, #48	; 0x30
 80003b6:	74fb      	strb	r3, [r7, #19]
	char row_ten = rten + '0';
 80003b8:	69fb      	ldr	r3, [r7, #28]
 80003ba:	b2db      	uxtb	r3, r3
 80003bc:	3330      	adds	r3, #48	; 0x30
 80003be:	74bb      	strb	r3, [r7, #18]
	char col_one = cone + '0';
 80003c0:	69bb      	ldr	r3, [r7, #24]
 80003c2:	b2db      	uxtb	r3, r3
 80003c4:	3330      	adds	r3, #48	; 0x30
 80003c6:	747b      	strb	r3, [r7, #17]
	char col_ten = cten + '0';
 80003c8:	697b      	ldr	r3, [r7, #20]
 80003ca:	b2db      	uxtb	r3, r3
 80003cc:	3330      	adds	r3, #48	; 0x30
 80003ce:	743b      	strb	r3, [r7, #16]

	//Writes position value
	str[0] = '[';
 80003d0:	235b      	movs	r3, #91	; 0x5b
 80003d2:	723b      	strb	r3, [r7, #8]
	if (row > 9){
 80003d4:	79fb      	ldrb	r3, [r7, #7]
 80003d6:	2b09      	cmp	r3, #9
 80003d8:	d904      	bls.n	80003e4 <update_position+0x94>
		i++;
 80003da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003dc:	3301      	adds	r3, #1
 80003de:	627b      	str	r3, [r7, #36]	; 0x24
		str[1] = row_ten;
 80003e0:	7cbb      	ldrb	r3, [r7, #18]
 80003e2:	727b      	strb	r3, [r7, #9]
	}
	str[1+i] = row_one;
 80003e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003e6:	3301      	adds	r3, #1
 80003e8:	3328      	adds	r3, #40	; 0x28
 80003ea:	443b      	add	r3, r7
 80003ec:	7cfa      	ldrb	r2, [r7, #19]
 80003ee:	f803 2c20 	strb.w	r2, [r3, #-32]
	str[2+i] = ';';
 80003f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003f4:	3302      	adds	r3, #2
 80003f6:	3328      	adds	r3, #40	; 0x28
 80003f8:	443b      	add	r3, r7
 80003fa:	223b      	movs	r2, #59	; 0x3b
 80003fc:	f803 2c20 	strb.w	r2, [r3, #-32]
	if (col > 9){
 8000400:	79bb      	ldrb	r3, [r7, #6]
 8000402:	2b09      	cmp	r3, #9
 8000404:	d909      	bls.n	800041a <update_position+0xca>
		str[3+i] = col_ten;
 8000406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000408:	3303      	adds	r3, #3
 800040a:	3328      	adds	r3, #40	; 0x28
 800040c:	443b      	add	r3, r7
 800040e:	7c3a      	ldrb	r2, [r7, #16]
 8000410:	f803 2c20 	strb.w	r2, [r3, #-32]
		i++;
 8000414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000416:	3301      	adds	r3, #1
 8000418:	627b      	str	r3, [r7, #36]	; 0x24
	}
	str[3+i] = col_one;
 800041a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800041c:	3303      	adds	r3, #3
 800041e:	3328      	adds	r3, #40	; 0x28
 8000420:	443b      	add	r3, r7
 8000422:	7c7a      	ldrb	r2, [r7, #17]
 8000424:	f803 2c20 	strb.w	r2, [r3, #-32]
	str[4+i] = 'H';
 8000428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800042a:	3304      	adds	r3, #4
 800042c:	3328      	adds	r3, #40	; 0x28
 800042e:	443b      	add	r3, r7
 8000430:	2248      	movs	r2, #72	; 0x48
 8000432:	f803 2c20 	strb.w	r2, [r3, #-32]
	LPUART_ESC_Print(str);
 8000436:	f107 0308 	add.w	r3, r7, #8
 800043a:	4618      	mov	r0, r3
 800043c:	f7ff ff52 	bl	80002e4 <LPUART_ESC_Print>
}
 8000440:	bf00      	nop
 8000442:	3728      	adds	r7, #40	; 0x28
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}
 8000448:	cccccccd 	.word	0xcccccccd

0800044c <SysTick_Init>:
#include "stm32l4xx_hal.h"


// configure SysTick timer for use with delay_us(). This will break
// warning: breaks HAL_delay() by disabling interrupts for shorter delay timing.
void SysTick_Init(void){
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
    SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |	       // enable SysTick Timer
 8000450:	4b08      	ldr	r3, [pc, #32]	; (8000474 <SysTick_Init+0x28>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	4a07      	ldr	r2, [pc, #28]	; (8000474 <SysTick_Init+0x28>)
 8000456:	f043 0305 	orr.w	r3, r3, #5
 800045a:	6013      	str	r3, [r2, #0]
                      SysTick_CTRL_CLKSOURCE_Msk);     // select CPU clock
    SysTick->CTRL &= ~(SysTick_CTRL_TICKINT_Msk);      // disable interrupt
 800045c:	4b05      	ldr	r3, [pc, #20]	; (8000474 <SysTick_Init+0x28>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a04      	ldr	r2, [pc, #16]	; (8000474 <SysTick_Init+0x28>)
 8000462:	f023 0302 	bic.w	r3, r3, #2
 8000466:	6013      	str	r3, [r2, #0]
}
 8000468:	bf00      	nop
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop
 8000474:	e000e010 	.word	0xe000e010

08000478 <delay_us>:

// delay in microseconds using SysTick timer to count CPU clock cycles
// do not call with 0 : error, maximum delay.
// careful calling with small nums : result in longer delays than specified:
//    e.g. @4MHz, delay_us(1) = 10=15 us delay.
void delay_us(const uint32_t time_us) {  // time_us = target delay, microseconds
 8000478:	b480      	push	{r7}
 800047a:	b083      	sub	sp, #12
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
    SysTick->LOAD = (uint32_t)((time_us * (SystemCoreClock / 1000000)) - 1);
 8000480:	4b11      	ldr	r3, [pc, #68]	; (80004c8 <delay_us+0x50>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a11      	ldr	r2, [pc, #68]	; (80004cc <delay_us+0x54>)
 8000486:	fba2 2303 	umull	r2, r3, r2, r3
 800048a:	0c9b      	lsrs	r3, r3, #18
 800048c:	687a      	ldr	r2, [r7, #4]
 800048e:	fb02 f303 	mul.w	r3, r2, r3
 8000492:	4a0f      	ldr	r2, [pc, #60]	; (80004d0 <delay_us+0x58>)
 8000494:	3b01      	subs	r3, #1
 8000496:	6053      	str	r3, [r2, #4]
    SysTick->VAL = 0;                                      // clear the timer count
 8000498:	4b0d      	ldr	r3, [pc, #52]	; (80004d0 <delay_us+0x58>)
 800049a:	2200      	movs	r2, #0
 800049c:	609a      	str	r2, [r3, #8]
    SysTick->CTRL &= ~(SysTick_CTRL_COUNTFLAG_Msk);        // clear the count flag
 800049e:	4b0c      	ldr	r3, [pc, #48]	; (80004d0 <delay_us+0x58>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4a0b      	ldr	r2, [pc, #44]	; (80004d0 <delay_us+0x58>)
 80004a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80004a8:	6013      	str	r3, [r2, #0]
    while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)); // wait for the flag
 80004aa:	bf00      	nop
 80004ac:	4b08      	ldr	r3, [pc, #32]	; (80004d0 <delay_us+0x58>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d0f9      	beq.n	80004ac <delay_us+0x34>
}
 80004b8:	bf00      	nop
 80004ba:	bf00      	nop
 80004bc:	370c      	adds	r7, #12
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop
 80004c8:	20000000 	.word	0x20000000
 80004cc:	431bde83 	.word	0x431bde83
 80004d0:	e000e010 	.word	0xe000e010

080004d4 <main>:
void ADC_countConversion(int value);
int count_to_volts(int value);
void ADC_voltsConversion(int value);
void ADC_print();

int main(void) {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
	//Initialization
	HAL_Init();
 80004d8:	f000 fa49 	bl	800096e <HAL_Init>
	SystemClock_Config();
 80004dc:	f000 f972 	bl	80007c4 <SystemClock_Config>
	SysTick_Init();
 80004e0:	f7ff ffb4 	bl	800044c <SysTick_Init>

	LPUART_init();
 80004e4:	f7ff fe82 	bl	80001ec <LPUART_init>

	//LPUART Live Terminal Display
//	LPUART_ESC_Print("[2J");	//clear all
	update_position(1, 1);
 80004e8:	2101      	movs	r1, #1
 80004ea:	2001      	movs	r0, #1
 80004ec:	f7ff ff30 	bl	8000350 <update_position>
//	LPUART_Print("MAX  0000  0.000 V");
//	update_position(4, 1);
//	LPUART_Print("AVG  0000  0.000 V");
//	LPUART_ESC_Print("[?25l"); //turns off cursor

	ADC_init(); //ADC initialization
 80004f0:	f000 f8c2 	bl	8000678 <ADC_init>

	while (1) {
		if (done) {
 80004f4:	4b0e      	ldr	r3, [pc, #56]	; (8000530 <main+0x5c>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d0fb      	beq.n	80004f4 <main+0x20>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004fc:	b672      	cpsid	i
}
 80004fe:	bf00      	nop
			__disable_irq(); //disable interrupt
			LPUART_Print("PEPEE"); //for debugging to see if it interrupt even gets triggered
 8000500:	480c      	ldr	r0, [pc, #48]	; (8000534 <main+0x60>)
 8000502:	f7ff fec3 	bl	800028c <LPUART_Print>
			ADC_updateArray();
 8000506:	f000 f819 	bl	800053c <ADC_updateArray>
			ADC_getAverage();
 800050a:	f000 f83d 	bl	8000588 <ADC_getAverage>
			ADC_getMin();
 800050e:	f000 f863 	bl	80005d8 <ADC_getMin>
			ADC_getMax();
 8000512:	f000 f889 	bl	8000628 <ADC_getMax>
			ADC1->CR |= ADC_CR_ADSTART;  // start conversion
 8000516:	4b08      	ldr	r3, [pc, #32]	; (8000538 <main+0x64>)
 8000518:	689b      	ldr	r3, [r3, #8]
 800051a:	4a07      	ldr	r2, [pc, #28]	; (8000538 <main+0x64>)
 800051c:	f043 0304 	orr.w	r3, r3, #4
 8000520:	6093      	str	r3, [r2, #8]
			done = 0;	//resets flag
 8000522:	4b03      	ldr	r3, [pc, #12]	; (8000530 <main+0x5c>)
 8000524:	2200      	movs	r2, #0
 8000526:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000528:	b662      	cpsie	i
}
 800052a:	bf00      	nop
		if (done) {
 800052c:	e7e2      	b.n	80004f4 <main+0x20>
 800052e:	bf00      	nop
 8000530:	20000088 	.word	0x20000088
 8000534:	08001968 	.word	0x08001968
 8000538:	50040000 	.word	0x50040000

0800053c <ADC_updateArray>:
	if (value > 999)
		str[0] = thousand + '0';
	LPUART_Print(str);
}

void ADC_updateArray() {
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
	for (int i = 0; i < SAMPLE - 1; i++) { //shifts array to the left, deletes leftmost to update
 8000542:	2300      	movs	r3, #0
 8000544:	607b      	str	r3, [r7, #4]
 8000546:	e00b      	b.n	8000560 <ADC_updateArray+0x24>
		ADC_sample[i] = ADC_sample[i + 1];
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	3301      	adds	r3, #1
 800054c:	4a0c      	ldr	r2, [pc, #48]	; (8000580 <ADC_updateArray+0x44>)
 800054e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000552:	490b      	ldr	r1, [pc, #44]	; (8000580 <ADC_updateArray+0x44>)
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < SAMPLE - 1; i++) { //shifts array to the left, deletes leftmost to update
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	3301      	adds	r3, #1
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	2b12      	cmp	r3, #18
 8000564:	ddf0      	ble.n	8000548 <ADC_updateArray+0xc>
	}
	ADC_sample[SAMPLE] = ADC_input;	//loads value to the rightmost part in the array
 8000566:	4b07      	ldr	r3, [pc, #28]	; (8000584 <ADC_updateArray+0x48>)
 8000568:	f9b3 3000 	ldrsh.w	r3, [r3]
 800056c:	461a      	mov	r2, r3
 800056e:	4b04      	ldr	r3, [pc, #16]	; (8000580 <ADC_updateArray+0x44>)
 8000570:	651a      	str	r2, [r3, #80]	; 0x50
}
 8000572:	bf00      	nop
 8000574:	370c      	adds	r7, #12
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	20000038 	.word	0x20000038
 8000584:	20000028 	.word	0x20000028

08000588 <ADC_getAverage>:

//calculates the average of an array
void ADC_getAverage() {
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
	uint32_t sum = 0;
 800058e:	2300      	movs	r3, #0
 8000590:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < SAMPLE; i++) {//loads and adds each value in the sample
 8000592:	2300      	movs	r3, #0
 8000594:	603b      	str	r3, [r7, #0]
 8000596:	e009      	b.n	80005ac <ADC_getAverage+0x24>
		sum += ADC_sample[i];
 8000598:	4a0c      	ldr	r2, [pc, #48]	; (80005cc <ADC_getAverage+0x44>)
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005a0:	687a      	ldr	r2, [r7, #4]
 80005a2:	4413      	add	r3, r2
 80005a4:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < SAMPLE; i++) {//loads and adds each value in the sample
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	3301      	adds	r3, #1
 80005aa:	603b      	str	r3, [r7, #0]
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	2b13      	cmp	r3, #19
 80005b0:	ddf2      	ble.n	8000598 <ADC_getAverage+0x10>
	}
	ADC_avg = sum / SAMPLE;	//updates and gets average value
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4a06      	ldr	r2, [pc, #24]	; (80005d0 <ADC_getAverage+0x48>)
 80005b6:	fba2 2303 	umull	r2, r3, r2, r3
 80005ba:	091b      	lsrs	r3, r3, #4
 80005bc:	4a05      	ldr	r2, [pc, #20]	; (80005d4 <ADC_getAverage+0x4c>)
 80005be:	6013      	str	r3, [r2, #0]
}
 80005c0:	bf00      	nop
 80005c2:	370c      	adds	r7, #12
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr
 80005cc:	20000038 	.word	0x20000038
 80005d0:	cccccccd 	.word	0xcccccccd
 80005d4:	2000002c 	.word	0x2000002c

080005d8 <ADC_getMin>:

void ADC_getMin() {
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
	uint32_t smallest = ADC_sample[0];
 80005de:	4b10      	ldr	r3, [pc, #64]	; (8000620 <ADC_getMin+0x48>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < SAMPLE; i++) {//scans through and checks if input is the smallest
 80005e4:	2300      	movs	r3, #0
 80005e6:	603b      	str	r3, [r7, #0]
 80005e8:	e00e      	b.n	8000608 <ADC_getMin+0x30>
		if (ADC_sample[i] < smallest) {
 80005ea:	4a0d      	ldr	r2, [pc, #52]	; (8000620 <ADC_getMin+0x48>)
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005f2:	687a      	ldr	r2, [r7, #4]
 80005f4:	429a      	cmp	r2, r3
 80005f6:	d904      	bls.n	8000602 <ADC_getMin+0x2a>
			smallest = ADC_sample[i];
 80005f8:	4a09      	ldr	r2, [pc, #36]	; (8000620 <ADC_getMin+0x48>)
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000600:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < SAMPLE; i++) {//scans through and checks if input is the smallest
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	3301      	adds	r3, #1
 8000606:	603b      	str	r3, [r7, #0]
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	2b13      	cmp	r3, #19
 800060c:	dded      	ble.n	80005ea <ADC_getMin+0x12>
		}
	}
	ADC_min = smallest; //updates and gets smallest value
 800060e:	4a05      	ldr	r2, [pc, #20]	; (8000624 <ADC_getMin+0x4c>)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	6013      	str	r3, [r2, #0]
}
 8000614:	bf00      	nop
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	20000038 	.word	0x20000038
 8000624:	20000030 	.word	0x20000030

08000628 <ADC_getMax>:

void ADC_getMax() {
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
	uint32_t largest = ADC_sample[0];
 800062e:	4b10      	ldr	r3, [pc, #64]	; (8000670 <ADC_getMax+0x48>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < SAMPLE; i++) { //scans through and checks if input is the largest
 8000634:	2300      	movs	r3, #0
 8000636:	603b      	str	r3, [r7, #0]
 8000638:	e00e      	b.n	8000658 <ADC_getMax+0x30>
		if (ADC_sample[i] > largest) {
 800063a:	4a0d      	ldr	r2, [pc, #52]	; (8000670 <ADC_getMax+0x48>)
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000642:	687a      	ldr	r2, [r7, #4]
 8000644:	429a      	cmp	r2, r3
 8000646:	d204      	bcs.n	8000652 <ADC_getMax+0x2a>
			largest = ADC_sample[i];
 8000648:	4a09      	ldr	r2, [pc, #36]	; (8000670 <ADC_getMax+0x48>)
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000650:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < SAMPLE; i++) { //scans through and checks if input is the largest
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	3301      	adds	r3, #1
 8000656:	603b      	str	r3, [r7, #0]
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	2b13      	cmp	r3, #19
 800065c:	dded      	ble.n	800063a <ADC_getMax+0x12>
		}
	}
	ADC_max = largest; //updates and gets largest value
 800065e:	4a05      	ldr	r2, [pc, #20]	; (8000674 <ADC_getMax+0x4c>)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6013      	str	r3, [r2, #0]
}
 8000664:	bf00      	nop
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	20000038 	.word	0x20000038
 8000674:	20000034 	.word	0x20000034

08000678 <ADC_init>:

void ADC_init() {
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= RCC_AHB2ENR_ADCEN;         // turn on clock for ADC
 800067c:	4b4d      	ldr	r3, [pc, #308]	; (80007b4 <ADC_init+0x13c>)
 800067e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000680:	4a4c      	ldr	r2, [pc, #304]	; (80007b4 <ADC_init+0x13c>)
 8000682:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000686:	64d3      	str	r3, [r2, #76]	; 0x4c
	// power up & calibrate ADC
	ADC123_COMMON->CCR |= (1 << ADC_CCR_CKMODE_Pos); // clock source = HCLK/1
 8000688:	4b4b      	ldr	r3, [pc, #300]	; (80007b8 <ADC_init+0x140>)
 800068a:	689b      	ldr	r3, [r3, #8]
 800068c:	4a4a      	ldr	r2, [pc, #296]	; (80007b8 <ADC_init+0x140>)
 800068e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000692:	6093      	str	r3, [r2, #8]
	ADC1->CR &= ~(ADC_CR_DEEPPWD);             // disable deep-power-down
 8000694:	4b49      	ldr	r3, [pc, #292]	; (80007bc <ADC_init+0x144>)
 8000696:	689b      	ldr	r3, [r3, #8]
 8000698:	4a48      	ldr	r2, [pc, #288]	; (80007bc <ADC_init+0x144>)
 800069a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800069e:	6093      	str	r3, [r2, #8]
	ADC1->CR |= (ADC_CR_ADVREGEN);         // enable V regulator - see RM 18.4.6
 80006a0:	4b46      	ldr	r3, [pc, #280]	; (80007bc <ADC_init+0x144>)
 80006a2:	689b      	ldr	r3, [r3, #8]
 80006a4:	4a45      	ldr	r2, [pc, #276]	; (80007bc <ADC_init+0x144>)
 80006a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006aa:	6093      	str	r3, [r2, #8]
	delay_us(20);                              // wait 20us for ADC to power up
 80006ac:	2014      	movs	r0, #20
 80006ae:	f7ff fee3 	bl	8000478 <delay_us>
	ADC1->DIFSEL &= ~(ADC_DIFSEL_DIFSEL_5);    // PA0=ADC1_IN5, single-ended
 80006b2:	4b42      	ldr	r3, [pc, #264]	; (80007bc <ADC_init+0x144>)
 80006b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80006b8:	4a40      	ldr	r2, [pc, #256]	; (80007bc <ADC_init+0x144>)
 80006ba:	f023 0320 	bic.w	r3, r3, #32
 80006be:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	ADC1->CR &= ~(ADC_CR_ADEN | ADC_CR_ADCALDIF); // disable ADC, single-end calib
 80006c2:	4b3e      	ldr	r3, [pc, #248]	; (80007bc <ADC_init+0x144>)
 80006c4:	689b      	ldr	r3, [r3, #8]
 80006c6:	4a3d      	ldr	r2, [pc, #244]	; (80007bc <ADC_init+0x144>)
 80006c8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80006cc:	f023 0301 	bic.w	r3, r3, #1
 80006d0:	6093      	str	r3, [r2, #8]
	ADC1->CR |= ADC_CR_ADCAL;                  // start calibration
 80006d2:	4b3a      	ldr	r3, [pc, #232]	; (80007bc <ADC_init+0x144>)
 80006d4:	689b      	ldr	r3, [r3, #8]
 80006d6:	4a39      	ldr	r2, [pc, #228]	; (80007bc <ADC_init+0x144>)
 80006d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80006dc:	6093      	str	r3, [r2, #8]
	while (ADC1->CR & ADC_CR_ADCAL) {
 80006de:	bf00      	nop
 80006e0:	4b36      	ldr	r3, [pc, #216]	; (80007bc <ADC_init+0x144>)
 80006e2:	689b      	ldr	r3, [r3, #8]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	dbfb      	blt.n	80006e0 <ADC_init+0x68>
		;
	}        // wait for calib to finish
	// enable ADC
	ADC1->ISR |= (ADC_ISR_ADRDY);              // set to clr ADC Ready flag
 80006e8:	4b34      	ldr	r3, [pc, #208]	; (80007bc <ADC_init+0x144>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a33      	ldr	r2, [pc, #204]	; (80007bc <ADC_init+0x144>)
 80006ee:	f043 0301 	orr.w	r3, r3, #1
 80006f2:	6013      	str	r3, [r2, #0]
	ADC1->CR |= ADC_CR_ADEN;                   // enable ADC
 80006f4:	4b31      	ldr	r3, [pc, #196]	; (80007bc <ADC_init+0x144>)
 80006f6:	689b      	ldr	r3, [r3, #8]
 80006f8:	4a30      	ldr	r2, [pc, #192]	; (80007bc <ADC_init+0x144>)
 80006fa:	f043 0301 	orr.w	r3, r3, #1
 80006fe:	6093      	str	r3, [r2, #8]
	while (!(ADC1->ISR & ADC_ISR_ADRDY)) {
 8000700:	bf00      	nop
 8000702:	4b2e      	ldr	r3, [pc, #184]	; (80007bc <ADC_init+0x144>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	2b00      	cmp	r3, #0
 800070c:	d0f9      	beq.n	8000702 <ADC_init+0x8a>
		;
	}    // wait for ADC Ready flag
	ADC1->ISR |= (ADC_ISR_ADRDY);              // set to clr ADC Ready flag
 800070e:	4b2b      	ldr	r3, [pc, #172]	; (80007bc <ADC_init+0x144>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4a2a      	ldr	r2, [pc, #168]	; (80007bc <ADC_init+0x144>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	6013      	str	r3, [r2, #0]
	// configure ADC sampling & sequencing
	ADC1->SQR1 |= (5 << ADC_SQR1_SQ1_Pos);    // sequence = 1 conv., ch 5
 800071a:	4b28      	ldr	r3, [pc, #160]	; (80007bc <ADC_init+0x144>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a27      	ldr	r2, [pc, #156]	; (80007bc <ADC_init+0x144>)
 8000720:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
	ADC1->SMPR1 |= (1 << ADC_SMPR1_SMP5_Pos);  // ch 5 sample time = 6.5 clocks
 8000726:	4b25      	ldr	r3, [pc, #148]	; (80007bc <ADC_init+0x144>)
 8000728:	695b      	ldr	r3, [r3, #20]
 800072a:	4a24      	ldr	r2, [pc, #144]	; (80007bc <ADC_init+0x144>)
 800072c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000730:	6153      	str	r3, [r2, #20]
	ADC1->CFGR &= ~( ADC_CFGR_CONT |         // single conversion mode
 8000732:	4b22      	ldr	r3, [pc, #136]	; (80007bc <ADC_init+0x144>)
 8000734:	68db      	ldr	r3, [r3, #12]
 8000736:	4a21      	ldr	r2, [pc, #132]	; (80007bc <ADC_init+0x144>)
 8000738:	f423 5330 	bic.w	r3, r3, #11264	; 0x2c00
 800073c:	f023 0318 	bic.w	r3, r3, #24
 8000740:	60d3      	str	r3, [r2, #12]
			ADC_CFGR_EXTEN |         // h/w trig disabled for s/w trig
			ADC_CFGR_RES);        // 12-bit resolution
	// configure & enable ADC interrupt
	ADC1->IER |= ADC_IER_EOCIE;                // enable end-of-conv interrupt
 8000742:	4b1e      	ldr	r3, [pc, #120]	; (80007bc <ADC_init+0x144>)
 8000744:	685b      	ldr	r3, [r3, #4]
 8000746:	4a1d      	ldr	r2, [pc, #116]	; (80007bc <ADC_init+0x144>)
 8000748:	f043 0304 	orr.w	r3, r3, #4
 800074c:	6053      	str	r3, [r2, #4]
	ADC1->ISR &= ~(ADC_ISR_EOC);               // clear EOC flag
 800074e:	4b1b      	ldr	r3, [pc, #108]	; (80007bc <ADC_init+0x144>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a1a      	ldr	r2, [pc, #104]	; (80007bc <ADC_init+0x144>)
 8000754:	f023 0304 	bic.w	r3, r3, #4
 8000758:	6013      	str	r3, [r2, #0]
	NVIC->ISER[0] = (1 << (ADC1_2_IRQn & 0x1F)); // enable ADC interrupt service
 800075a:	4b19      	ldr	r3, [pc, #100]	; (80007c0 <ADC_init+0x148>)
 800075c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000760:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000762:	b662      	cpsie	i
}
 8000764:	bf00      	nop
	__enable_irq();                            // enable global interrupts
	// configure GPIO pin PA0
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN);    // connect clock to GPIOA
 8000766:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <ADC_init+0x13c>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	4a12      	ldr	r2, [pc, #72]	; (80007b4 <ADC_init+0x13c>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	64d3      	str	r3, [r2, #76]	; 0x4c
	GPIOA->AFR[0] &= ~(GPIO_AFRL_AFSEL0);      // clear alt. function select
 8000772:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000776:	6a1b      	ldr	r3, [r3, #32]
 8000778:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800077c:	f023 030f 	bic.w	r3, r3, #15
 8000780:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (7 << GPIO_AFRL_AFSEL0_Pos); // choose AF 7 (PA0=ADC1_IN5)
 8000782:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000786:	6a1b      	ldr	r3, [r3, #32]
 8000788:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800078c:	f043 0307 	orr.w	r3, r3, #7
 8000790:	6213      	str	r3, [r2, #32]
	GPIOA->MODER |= (GPIO_MODER_MODE0);	 // analog mode for PA0 (set MODER last)
 8000792:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800079c:	f043 0303 	orr.w	r3, r3, #3
 80007a0:	6013      	str	r3, [r2, #0]

	ADC1->CR |= ADC_CR_ADSTART;                // start 1st conversion
 80007a2:	4b06      	ldr	r3, [pc, #24]	; (80007bc <ADC_init+0x144>)
 80007a4:	689b      	ldr	r3, [r3, #8]
 80007a6:	4a05      	ldr	r2, [pc, #20]	; (80007bc <ADC_init+0x144>)
 80007a8:	f043 0304 	orr.w	r3, r3, #4
 80007ac:	6093      	str	r3, [r2, #8]
}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40021000 	.word	0x40021000
 80007b8:	50040300 	.word	0x50040300
 80007bc:	50040000 	.word	0x50040000
 80007c0:	e000e100 	.word	0xe000e100

080007c4 <SystemClock_Config>:
		ADC1->ISR &= ~(ADC_ISR_EOC); //clear
	}
}

//Has this been adjusted to 8 MHz?
void SystemClock_Config(void) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b096      	sub	sp, #88	; 0x58
 80007c8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	2244      	movs	r2, #68	; 0x44
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f001 f8b4 	bl	8001940 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80007d8:	463b      	mov	r3, r7
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]

	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 80007e6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007ea:	f000 fa29 	bl	8000c40 <HAL_PWREx_ControlVoltageScaling>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 80007f4:	f000 f82c 	bl	8000850 <Error_Handler>
	}

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80007f8:	2310      	movs	r3, #16
 80007fa:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007fc:	2301      	movs	r3, #1
 80007fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8000800:	2300      	movs	r3, #0
 8000802:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000804:	2360      	movs	r3, #96	; 0x60
 8000806:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000808:	2300      	movs	r3, #0
 800080a:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	4618      	mov	r0, r3
 8000812:	f000 fa6b 	bl	8000cec <HAL_RCC_OscConfig>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0x5c>
		Error_Handler();
 800081c:	f000 f818 	bl	8000850 <Error_Handler>
	}

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000820:	230f      	movs	r3, #15
 8000822:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000824:	2300      	movs	r3, #0
 8000826:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000828:	2300      	movs	r3, #0
 800082a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000830:	2300      	movs	r3, #0
 8000832:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000834:	463b      	mov	r3, r7
 8000836:	2100      	movs	r1, #0
 8000838:	4618      	mov	r0, r3
 800083a:	f000 fe71 	bl	8001520 <HAL_RCC_ClockConfig>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <SystemClock_Config+0x84>
		Error_Handler();
 8000844:	f000 f804 	bl	8000850 <Error_Handler>
	}
}
 8000848:	bf00      	nop
 800084a:	3758      	adds	r7, #88	; 0x58
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <Error_Handler>:

void Error_Handler(void) {
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000854:	b672      	cpsid	i
}
 8000856:	bf00      	nop

	__disable_irq();
	while (1) {
 8000858:	e7fe      	b.n	8000858 <Error_Handler+0x8>
	...

0800085c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000862:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <HAL_MspInit+0x44>)
 8000864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000866:	4a0e      	ldr	r2, [pc, #56]	; (80008a0 <HAL_MspInit+0x44>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6613      	str	r3, [r2, #96]	; 0x60
 800086e:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <HAL_MspInit+0x44>)
 8000870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800087a:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <HAL_MspInit+0x44>)
 800087c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800087e:	4a08      	ldr	r2, [pc, #32]	; (80008a0 <HAL_MspInit+0x44>)
 8000880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000884:	6593      	str	r3, [r2, #88]	; 0x58
 8000886:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <HAL_MspInit+0x44>)
 8000888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800088a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800088e:	603b      	str	r3, [r7, #0]
 8000890:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000892:	bf00      	nop
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	40021000 	.word	0x40021000

080008a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <NMI_Handler+0x4>

080008aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ae:	e7fe      	b.n	80008ae <HardFault_Handler+0x4>

080008b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <MemManage_Handler+0x4>

080008b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ba:	e7fe      	b.n	80008ba <BusFault_Handler+0x4>

080008bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <UsageFault_Handler+0x4>

080008c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr

080008d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr

080008de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr

080008ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008f0:	f000 f892 	bl	8000a18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <SystemInit+0x20>)
 80008fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000902:	4a05      	ldr	r2, [pc, #20]	; (8000918 <SystemInit+0x20>)
 8000904:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000908:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800091c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000954 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000920:	f7ff ffea 	bl	80008f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000924:	480c      	ldr	r0, [pc, #48]	; (8000958 <LoopForever+0x6>)
  ldr r1, =_edata
 8000926:	490d      	ldr	r1, [pc, #52]	; (800095c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000928:	4a0d      	ldr	r2, [pc, #52]	; (8000960 <LoopForever+0xe>)
  movs r3, #0
 800092a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800092c:	e002      	b.n	8000934 <LoopCopyDataInit>

0800092e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800092e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000930:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000932:	3304      	adds	r3, #4

08000934 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000934:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000936:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000938:	d3f9      	bcc.n	800092e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800093a:	4a0a      	ldr	r2, [pc, #40]	; (8000964 <LoopForever+0x12>)
  ldr r4, =_ebss
 800093c:	4c0a      	ldr	r4, [pc, #40]	; (8000968 <LoopForever+0x16>)
  movs r3, #0
 800093e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000940:	e001      	b.n	8000946 <LoopFillZerobss>

08000942 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000942:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000944:	3204      	adds	r2, #4

08000946 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000946:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000948:	d3fb      	bcc.n	8000942 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800094a:	f000 ffd5 	bl	80018f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800094e:	f7ff fdc1 	bl	80004d4 <main>

08000952 <LoopForever>:

LoopForever:
    b LoopForever
 8000952:	e7fe      	b.n	8000952 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000954:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800095c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000960:	080019c0 	.word	0x080019c0
  ldr r2, =_sbss
 8000964:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000968:	20000090 	.word	0x20000090

0800096c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800096c:	e7fe      	b.n	800096c <ADC1_2_IRQHandler>

0800096e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800096e:	b580      	push	{r7, lr}
 8000970:	b082      	sub	sp, #8
 8000972:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000974:	2300      	movs	r3, #0
 8000976:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000978:	2003      	movs	r0, #3
 800097a:	f000 f91f 	bl	8000bbc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800097e:	200f      	movs	r0, #15
 8000980:	f000 f80e 	bl	80009a0 <HAL_InitTick>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d002      	beq.n	8000990 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800098a:	2301      	movs	r3, #1
 800098c:	71fb      	strb	r3, [r7, #7]
 800098e:	e001      	b.n	8000994 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000990:	f7ff ff64 	bl	800085c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000994:	79fb      	ldrb	r3, [r7, #7]
}
 8000996:	4618      	mov	r0, r3
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
	...

080009a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009a8:	2300      	movs	r3, #0
 80009aa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80009ac:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <HAL_InitTick+0x6c>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d023      	beq.n	80009fc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80009b4:	4b16      	ldr	r3, [pc, #88]	; (8000a10 <HAL_InitTick+0x70>)
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <HAL_InitTick+0x6c>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	4619      	mov	r1, r3
 80009be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ca:	4618      	mov	r0, r3
 80009cc:	f000 f91d 	bl	8000c0a <HAL_SYSTICK_Config>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d10f      	bne.n	80009f6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2b0f      	cmp	r3, #15
 80009da:	d809      	bhi.n	80009f0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009dc:	2200      	movs	r2, #0
 80009de:	6879      	ldr	r1, [r7, #4]
 80009e0:	f04f 30ff 	mov.w	r0, #4294967295
 80009e4:	f000 f8f5 	bl	8000bd2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009e8:	4a0a      	ldr	r2, [pc, #40]	; (8000a14 <HAL_InitTick+0x74>)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	6013      	str	r3, [r2, #0]
 80009ee:	e007      	b.n	8000a00 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80009f0:	2301      	movs	r3, #1
 80009f2:	73fb      	strb	r3, [r7, #15]
 80009f4:	e004      	b.n	8000a00 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009f6:	2301      	movs	r3, #1
 80009f8:	73fb      	strb	r3, [r7, #15]
 80009fa:	e001      	b.n	8000a00 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009fc:	2301      	movs	r3, #1
 80009fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3710      	adds	r7, #16
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000008 	.word	0x20000008
 8000a10:	20000000 	.word	0x20000000
 8000a14:	20000004 	.word	0x20000004

08000a18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <HAL_IncTick+0x20>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	461a      	mov	r2, r3
 8000a22:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <HAL_IncTick+0x24>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4413      	add	r3, r2
 8000a28:	4a04      	ldr	r2, [pc, #16]	; (8000a3c <HAL_IncTick+0x24>)
 8000a2a:	6013      	str	r3, [r2, #0]
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	20000008 	.word	0x20000008
 8000a3c:	2000008c 	.word	0x2000008c

08000a40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  return uwTick;
 8000a44:	4b03      	ldr	r3, [pc, #12]	; (8000a54 <HAL_GetTick+0x14>)
 8000a46:	681b      	ldr	r3, [r3, #0]
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	2000008c 	.word	0x2000008c

08000a58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b085      	sub	sp, #20
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	f003 0307 	and.w	r3, r3, #7
 8000a66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a68:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <__NVIC_SetPriorityGrouping+0x44>)
 8000a6a:	68db      	ldr	r3, [r3, #12]
 8000a6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a6e:	68ba      	ldr	r2, [r7, #8]
 8000a70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a74:	4013      	ands	r3, r2
 8000a76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a8a:	4a04      	ldr	r2, [pc, #16]	; (8000a9c <__NVIC_SetPriorityGrouping+0x44>)
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	60d3      	str	r3, [r2, #12]
}
 8000a90:	bf00      	nop
 8000a92:	3714      	adds	r7, #20
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aa4:	4b04      	ldr	r3, [pc, #16]	; (8000ab8 <__NVIC_GetPriorityGrouping+0x18>)
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	0a1b      	lsrs	r3, r3, #8
 8000aaa:	f003 0307 	and.w	r3, r3, #7
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	6039      	str	r1, [r7, #0]
 8000ac6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	db0a      	blt.n	8000ae6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	b2da      	uxtb	r2, r3
 8000ad4:	490c      	ldr	r1, [pc, #48]	; (8000b08 <__NVIC_SetPriority+0x4c>)
 8000ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ada:	0112      	lsls	r2, r2, #4
 8000adc:	b2d2      	uxtb	r2, r2
 8000ade:	440b      	add	r3, r1
 8000ae0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ae4:	e00a      	b.n	8000afc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	b2da      	uxtb	r2, r3
 8000aea:	4908      	ldr	r1, [pc, #32]	; (8000b0c <__NVIC_SetPriority+0x50>)
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	f003 030f 	and.w	r3, r3, #15
 8000af2:	3b04      	subs	r3, #4
 8000af4:	0112      	lsls	r2, r2, #4
 8000af6:	b2d2      	uxtb	r2, r2
 8000af8:	440b      	add	r3, r1
 8000afa:	761a      	strb	r2, [r3, #24]
}
 8000afc:	bf00      	nop
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	e000e100 	.word	0xe000e100
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b089      	sub	sp, #36	; 0x24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	60b9      	str	r1, [r7, #8]
 8000b1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	f003 0307 	and.w	r3, r3, #7
 8000b22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b24:	69fb      	ldr	r3, [r7, #28]
 8000b26:	f1c3 0307 	rsb	r3, r3, #7
 8000b2a:	2b04      	cmp	r3, #4
 8000b2c:	bf28      	it	cs
 8000b2e:	2304      	movcs	r3, #4
 8000b30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	3304      	adds	r3, #4
 8000b36:	2b06      	cmp	r3, #6
 8000b38:	d902      	bls.n	8000b40 <NVIC_EncodePriority+0x30>
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	3b03      	subs	r3, #3
 8000b3e:	e000      	b.n	8000b42 <NVIC_EncodePriority+0x32>
 8000b40:	2300      	movs	r3, #0
 8000b42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b44:	f04f 32ff 	mov.w	r2, #4294967295
 8000b48:	69bb      	ldr	r3, [r7, #24]
 8000b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4e:	43da      	mvns	r2, r3
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	401a      	ands	r2, r3
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b58:	f04f 31ff 	mov.w	r1, #4294967295
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b62:	43d9      	mvns	r1, r3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b68:	4313      	orrs	r3, r2
         );
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3724      	adds	r7, #36	; 0x24
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
	...

08000b78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3b01      	subs	r3, #1
 8000b84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b88:	d301      	bcc.n	8000b8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e00f      	b.n	8000bae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b8e:	4a0a      	ldr	r2, [pc, #40]	; (8000bb8 <SysTick_Config+0x40>)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	3b01      	subs	r3, #1
 8000b94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b96:	210f      	movs	r1, #15
 8000b98:	f04f 30ff 	mov.w	r0, #4294967295
 8000b9c:	f7ff ff8e 	bl	8000abc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ba0:	4b05      	ldr	r3, [pc, #20]	; (8000bb8 <SysTick_Config+0x40>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ba6:	4b04      	ldr	r3, [pc, #16]	; (8000bb8 <SysTick_Config+0x40>)
 8000ba8:	2207      	movs	r2, #7
 8000baa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bac:	2300      	movs	r3, #0
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	e000e010 	.word	0xe000e010

08000bbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f7ff ff47 	bl	8000a58 <__NVIC_SetPriorityGrouping>
}
 8000bca:	bf00      	nop
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b086      	sub	sp, #24
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	4603      	mov	r3, r0
 8000bda:	60b9      	str	r1, [r7, #8]
 8000bdc:	607a      	str	r2, [r7, #4]
 8000bde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000be0:	2300      	movs	r3, #0
 8000be2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000be4:	f7ff ff5c 	bl	8000aa0 <__NVIC_GetPriorityGrouping>
 8000be8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bea:	687a      	ldr	r2, [r7, #4]
 8000bec:	68b9      	ldr	r1, [r7, #8]
 8000bee:	6978      	ldr	r0, [r7, #20]
 8000bf0:	f7ff ff8e 	bl	8000b10 <NVIC_EncodePriority>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bfa:	4611      	mov	r1, r2
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff ff5d 	bl	8000abc <__NVIC_SetPriority>
}
 8000c02:	bf00      	nop
 8000c04:	3718      	adds	r7, #24
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b082      	sub	sp, #8
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c12:	6878      	ldr	r0, [r7, #4]
 8000c14:	f7ff ffb0 	bl	8000b78 <SysTick_Config>
 8000c18:	4603      	mov	r3, r0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
	...

08000c24 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000c28:	4b04      	ldr	r3, [pc, #16]	; (8000c3c <HAL_PWREx_GetVoltageRange+0x18>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	40007000 	.word	0x40007000

08000c40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c4e:	d130      	bne.n	8000cb2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c50:	4b23      	ldr	r3, [pc, #140]	; (8000ce0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c5c:	d038      	beq.n	8000cd0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c5e:	4b20      	ldr	r3, [pc, #128]	; (8000ce0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c66:	4a1e      	ldr	r2, [pc, #120]	; (8000ce0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c6c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000c6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ce4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	2232      	movs	r2, #50	; 0x32
 8000c74:	fb02 f303 	mul.w	r3, r2, r3
 8000c78:	4a1b      	ldr	r2, [pc, #108]	; (8000ce8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c7e:	0c9b      	lsrs	r3, r3, #18
 8000c80:	3301      	adds	r3, #1
 8000c82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c84:	e002      	b.n	8000c8c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	3b01      	subs	r3, #1
 8000c8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c8c:	4b14      	ldr	r3, [pc, #80]	; (8000ce0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c8e:	695b      	ldr	r3, [r3, #20]
 8000c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c98:	d102      	bne.n	8000ca0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d1f2      	bne.n	8000c86 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ca0:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ca2:	695b      	ldr	r3, [r3, #20]
 8000ca4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ca8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cac:	d110      	bne.n	8000cd0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	e00f      	b.n	8000cd2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000cb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000cba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cbe:	d007      	beq.n	8000cd0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000cc0:	4b07      	ldr	r3, [pc, #28]	; (8000ce0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000cc8:	4a05      	ldr	r2, [pc, #20]	; (8000ce0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3714      	adds	r7, #20
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	40007000 	.word	0x40007000
 8000ce4:	20000000 	.word	0x20000000
 8000ce8:	431bde83 	.word	0x431bde83

08000cec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b088      	sub	sp, #32
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d102      	bne.n	8000d00 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	f000 bc08 	b.w	8001510 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d00:	4b96      	ldr	r3, [pc, #600]	; (8000f5c <HAL_RCC_OscConfig+0x270>)
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	f003 030c 	and.w	r3, r3, #12
 8000d08:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d0a:	4b94      	ldr	r3, [pc, #592]	; (8000f5c <HAL_RCC_OscConfig+0x270>)
 8000d0c:	68db      	ldr	r3, [r3, #12]
 8000d0e:	f003 0303 	and.w	r3, r3, #3
 8000d12:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f003 0310 	and.w	r3, r3, #16
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	f000 80e4 	beq.w	8000eea <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000d22:	69bb      	ldr	r3, [r7, #24]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d007      	beq.n	8000d38 <HAL_RCC_OscConfig+0x4c>
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	2b0c      	cmp	r3, #12
 8000d2c:	f040 808b 	bne.w	8000e46 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	f040 8087 	bne.w	8000e46 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d38:	4b88      	ldr	r3, [pc, #544]	; (8000f5c <HAL_RCC_OscConfig+0x270>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f003 0302 	and.w	r3, r3, #2
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d005      	beq.n	8000d50 <HAL_RCC_OscConfig+0x64>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d101      	bne.n	8000d50 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	e3df      	b.n	8001510 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6a1a      	ldr	r2, [r3, #32]
 8000d54:	4b81      	ldr	r3, [pc, #516]	; (8000f5c <HAL_RCC_OscConfig+0x270>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f003 0308 	and.w	r3, r3, #8
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d004      	beq.n	8000d6a <HAL_RCC_OscConfig+0x7e>
 8000d60:	4b7e      	ldr	r3, [pc, #504]	; (8000f5c <HAL_RCC_OscConfig+0x270>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d68:	e005      	b.n	8000d76 <HAL_RCC_OscConfig+0x8a>
 8000d6a:	4b7c      	ldr	r3, [pc, #496]	; (8000f5c <HAL_RCC_OscConfig+0x270>)
 8000d6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d70:	091b      	lsrs	r3, r3, #4
 8000d72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d223      	bcs.n	8000dc2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6a1b      	ldr	r3, [r3, #32]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 fd5a 	bl	8001838 <RCC_SetFlashLatencyFromMSIRange>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e3c0      	b.n	8001510 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d8e:	4b73      	ldr	r3, [pc, #460]	; (8000f5c <HAL_RCC_OscConfig+0x270>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a72      	ldr	r2, [pc, #456]	; (8000f5c <HAL_RCC_OscConfig+0x270>)
 8000d94:	f043 0308 	orr.w	r3, r3, #8
 8000d98:	6013      	str	r3, [r2, #0]
 8000d9a:	4b70      	ldr	r3, [pc, #448]	; (8000f5c <HAL_RCC_OscConfig+0x270>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6a1b      	ldr	r3, [r3, #32]
 8000da6:	496d      	ldr	r1, [pc, #436]	; (8000f5c <HAL_RCC_OscConfig+0x270>)
 8000da8:	4313      	orrs	r3, r2
 8000daa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000dac:	4b6b      	ldr	r3, [pc, #428]	; (8000f5c <HAL_RCC_OscConfig+0x270>)
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	69db      	ldr	r3, [r3, #28]
 8000db8:	021b      	lsls	r3, r3, #8
 8000dba:	4968      	ldr	r1, [pc, #416]	; (8000f5c <HAL_RCC_OscConfig+0x270>)
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	604b      	str	r3, [r1, #4]
 8000dc0:	e025      	b.n	8000e0e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000dc2:	4b66      	ldr	r3, [pc, #408]	; (8000f5c <HAL_RCC_OscConfig+0x270>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a65      	ldr	r2, [pc, #404]	; (8000f5c <HAL_RCC_OscConfig+0x270>)
 8000dc8:	f043 0308 	orr.w	r3, r3, #8
 8000dcc:	6013      	str	r3, [r2, #0]
 8000dce:	4b63      	ldr	r3, [pc, #396]	; (8000f5c <HAL_RCC_OscConfig+0x270>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6a1b      	ldr	r3, [r3, #32]
 8000dda:	4960      	ldr	r1, [pc, #384]	; (8000f5c <HAL_RCC_OscConfig+0x270>)
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000de0:	4b5e      	ldr	r3, [pc, #376]	; (8000f5c <HAL_RCC_OscConfig+0x270>)
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	69db      	ldr	r3, [r3, #28]
 8000dec:	021b      	lsls	r3, r3, #8
 8000dee:	495b      	ldr	r1, [pc, #364]	; (8000f5c <HAL_RCC_OscConfig+0x270>)
 8000df0:	4313      	orrs	r3, r2
 8000df2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d109      	bne.n	8000e0e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6a1b      	ldr	r3, [r3, #32]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 fd1a 	bl	8001838 <RCC_SetFlashLatencyFromMSIRange>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e380      	b.n	8001510 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000e0e:	f000 fc87 	bl	8001720 <HAL_RCC_GetSysClockFreq>
 8000e12:	4602      	mov	r2, r0
 8000e14:	4b51      	ldr	r3, [pc, #324]	; (8000f5c <HAL_RCC_OscConfig+0x270>)
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	091b      	lsrs	r3, r3, #4
 8000e1a:	f003 030f 	and.w	r3, r3, #15
 8000e1e:	4950      	ldr	r1, [pc, #320]	; (8000f60 <HAL_RCC_OscConfig+0x274>)
 8000e20:	5ccb      	ldrb	r3, [r1, r3]
 8000e22:	f003 031f 	and.w	r3, r3, #31
 8000e26:	fa22 f303 	lsr.w	r3, r2, r3
 8000e2a:	4a4e      	ldr	r2, [pc, #312]	; (8000f64 <HAL_RCC_OscConfig+0x278>)
 8000e2c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000e2e:	4b4e      	ldr	r3, [pc, #312]	; (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fdb4 	bl	80009a0 <HAL_InitTick>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000e3c:	7bfb      	ldrb	r3, [r7, #15]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d052      	beq.n	8000ee8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000e42:	7bfb      	ldrb	r3, [r7, #15]
 8000e44:	e364      	b.n	8001510 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	699b      	ldr	r3, [r3, #24]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d032      	beq.n	8000eb4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000e4e:	4b43      	ldr	r3, [pc, #268]	; (8000f5c <HAL_RCC_OscConfig+0x270>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a42      	ldr	r2, [pc, #264]	; (8000f5c <HAL_RCC_OscConfig+0x270>)
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e5a:	f7ff fdf1 	bl	8000a40 <HAL_GetTick>
 8000e5e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e60:	e008      	b.n	8000e74 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e62:	f7ff fded 	bl	8000a40 <HAL_GetTick>
 8000e66:	4602      	mov	r2, r0
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	1ad3      	subs	r3, r2, r3
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d901      	bls.n	8000e74 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000e70:	2303      	movs	r3, #3
 8000e72:	e34d      	b.n	8001510 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e74:	4b39      	ldr	r3, [pc, #228]	; (8000f5c <HAL_RCC_OscConfig+0x270>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f003 0302 	and.w	r3, r3, #2
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d0f0      	beq.n	8000e62 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e80:	4b36      	ldr	r3, [pc, #216]	; (8000f5c <HAL_RCC_OscConfig+0x270>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a35      	ldr	r2, [pc, #212]	; (8000f5c <HAL_RCC_OscConfig+0x270>)
 8000e86:	f043 0308 	orr.w	r3, r3, #8
 8000e8a:	6013      	str	r3, [r2, #0]
 8000e8c:	4b33      	ldr	r3, [pc, #204]	; (8000f5c <HAL_RCC_OscConfig+0x270>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6a1b      	ldr	r3, [r3, #32]
 8000e98:	4930      	ldr	r1, [pc, #192]	; (8000f5c <HAL_RCC_OscConfig+0x270>)
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e9e:	4b2f      	ldr	r3, [pc, #188]	; (8000f5c <HAL_RCC_OscConfig+0x270>)
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	69db      	ldr	r3, [r3, #28]
 8000eaa:	021b      	lsls	r3, r3, #8
 8000eac:	492b      	ldr	r1, [pc, #172]	; (8000f5c <HAL_RCC_OscConfig+0x270>)
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	604b      	str	r3, [r1, #4]
 8000eb2:	e01a      	b.n	8000eea <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000eb4:	4b29      	ldr	r3, [pc, #164]	; (8000f5c <HAL_RCC_OscConfig+0x270>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a28      	ldr	r2, [pc, #160]	; (8000f5c <HAL_RCC_OscConfig+0x270>)
 8000eba:	f023 0301 	bic.w	r3, r3, #1
 8000ebe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000ec0:	f7ff fdbe 	bl	8000a40 <HAL_GetTick>
 8000ec4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000ec6:	e008      	b.n	8000eda <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ec8:	f7ff fdba 	bl	8000a40 <HAL_GetTick>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d901      	bls.n	8000eda <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	e31a      	b.n	8001510 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000eda:	4b20      	ldr	r3, [pc, #128]	; (8000f5c <HAL_RCC_OscConfig+0x270>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f003 0302 	and.w	r3, r3, #2
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d1f0      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x1dc>
 8000ee6:	e000      	b.n	8000eea <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000ee8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d073      	beq.n	8000fde <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000ef6:	69bb      	ldr	r3, [r7, #24]
 8000ef8:	2b08      	cmp	r3, #8
 8000efa:	d005      	beq.n	8000f08 <HAL_RCC_OscConfig+0x21c>
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	2b0c      	cmp	r3, #12
 8000f00:	d10e      	bne.n	8000f20 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	2b03      	cmp	r3, #3
 8000f06:	d10b      	bne.n	8000f20 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f08:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <HAL_RCC_OscConfig+0x270>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d063      	beq.n	8000fdc <HAL_RCC_OscConfig+0x2f0>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d15f      	bne.n	8000fdc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e2f7      	b.n	8001510 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f28:	d106      	bne.n	8000f38 <HAL_RCC_OscConfig+0x24c>
 8000f2a:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <HAL_RCC_OscConfig+0x270>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a0b      	ldr	r2, [pc, #44]	; (8000f5c <HAL_RCC_OscConfig+0x270>)
 8000f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f34:	6013      	str	r3, [r2, #0]
 8000f36:	e025      	b.n	8000f84 <HAL_RCC_OscConfig+0x298>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f40:	d114      	bne.n	8000f6c <HAL_RCC_OscConfig+0x280>
 8000f42:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <HAL_RCC_OscConfig+0x270>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a05      	ldr	r2, [pc, #20]	; (8000f5c <HAL_RCC_OscConfig+0x270>)
 8000f48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f4c:	6013      	str	r3, [r2, #0]
 8000f4e:	4b03      	ldr	r3, [pc, #12]	; (8000f5c <HAL_RCC_OscConfig+0x270>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a02      	ldr	r2, [pc, #8]	; (8000f5c <HAL_RCC_OscConfig+0x270>)
 8000f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f58:	6013      	str	r3, [r2, #0]
 8000f5a:	e013      	b.n	8000f84 <HAL_RCC_OscConfig+0x298>
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	08001978 	.word	0x08001978
 8000f64:	20000000 	.word	0x20000000
 8000f68:	20000004 	.word	0x20000004
 8000f6c:	4ba0      	ldr	r3, [pc, #640]	; (80011f0 <HAL_RCC_OscConfig+0x504>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a9f      	ldr	r2, [pc, #636]	; (80011f0 <HAL_RCC_OscConfig+0x504>)
 8000f72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f76:	6013      	str	r3, [r2, #0]
 8000f78:	4b9d      	ldr	r3, [pc, #628]	; (80011f0 <HAL_RCC_OscConfig+0x504>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a9c      	ldr	r2, [pc, #624]	; (80011f0 <HAL_RCC_OscConfig+0x504>)
 8000f7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d013      	beq.n	8000fb4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f8c:	f7ff fd58 	bl	8000a40 <HAL_GetTick>
 8000f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f92:	e008      	b.n	8000fa6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f94:	f7ff fd54 	bl	8000a40 <HAL_GetTick>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	2b64      	cmp	r3, #100	; 0x64
 8000fa0:	d901      	bls.n	8000fa6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	e2b4      	b.n	8001510 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fa6:	4b92      	ldr	r3, [pc, #584]	; (80011f0 <HAL_RCC_OscConfig+0x504>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d0f0      	beq.n	8000f94 <HAL_RCC_OscConfig+0x2a8>
 8000fb2:	e014      	b.n	8000fde <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fb4:	f7ff fd44 	bl	8000a40 <HAL_GetTick>
 8000fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000fba:	e008      	b.n	8000fce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fbc:	f7ff fd40 	bl	8000a40 <HAL_GetTick>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	2b64      	cmp	r3, #100	; 0x64
 8000fc8:	d901      	bls.n	8000fce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	e2a0      	b.n	8001510 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000fce:	4b88      	ldr	r3, [pc, #544]	; (80011f0 <HAL_RCC_OscConfig+0x504>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d1f0      	bne.n	8000fbc <HAL_RCC_OscConfig+0x2d0>
 8000fda:	e000      	b.n	8000fde <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d060      	beq.n	80010ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	2b04      	cmp	r3, #4
 8000fee:	d005      	beq.n	8000ffc <HAL_RCC_OscConfig+0x310>
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	2b0c      	cmp	r3, #12
 8000ff4:	d119      	bne.n	800102a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	d116      	bne.n	800102a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ffc:	4b7c      	ldr	r3, [pc, #496]	; (80011f0 <HAL_RCC_OscConfig+0x504>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001004:	2b00      	cmp	r3, #0
 8001006:	d005      	beq.n	8001014 <HAL_RCC_OscConfig+0x328>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d101      	bne.n	8001014 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	e27d      	b.n	8001510 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001014:	4b76      	ldr	r3, [pc, #472]	; (80011f0 <HAL_RCC_OscConfig+0x504>)
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	691b      	ldr	r3, [r3, #16]
 8001020:	061b      	lsls	r3, r3, #24
 8001022:	4973      	ldr	r1, [pc, #460]	; (80011f0 <HAL_RCC_OscConfig+0x504>)
 8001024:	4313      	orrs	r3, r2
 8001026:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001028:	e040      	b.n	80010ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	68db      	ldr	r3, [r3, #12]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d023      	beq.n	800107a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001032:	4b6f      	ldr	r3, [pc, #444]	; (80011f0 <HAL_RCC_OscConfig+0x504>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a6e      	ldr	r2, [pc, #440]	; (80011f0 <HAL_RCC_OscConfig+0x504>)
 8001038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800103c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800103e:	f7ff fcff 	bl	8000a40 <HAL_GetTick>
 8001042:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001044:	e008      	b.n	8001058 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001046:	f7ff fcfb 	bl	8000a40 <HAL_GetTick>
 800104a:	4602      	mov	r2, r0
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	2b02      	cmp	r3, #2
 8001052:	d901      	bls.n	8001058 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001054:	2303      	movs	r3, #3
 8001056:	e25b      	b.n	8001510 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001058:	4b65      	ldr	r3, [pc, #404]	; (80011f0 <HAL_RCC_OscConfig+0x504>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001060:	2b00      	cmp	r3, #0
 8001062:	d0f0      	beq.n	8001046 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001064:	4b62      	ldr	r3, [pc, #392]	; (80011f0 <HAL_RCC_OscConfig+0x504>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	691b      	ldr	r3, [r3, #16]
 8001070:	061b      	lsls	r3, r3, #24
 8001072:	495f      	ldr	r1, [pc, #380]	; (80011f0 <HAL_RCC_OscConfig+0x504>)
 8001074:	4313      	orrs	r3, r2
 8001076:	604b      	str	r3, [r1, #4]
 8001078:	e018      	b.n	80010ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800107a:	4b5d      	ldr	r3, [pc, #372]	; (80011f0 <HAL_RCC_OscConfig+0x504>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a5c      	ldr	r2, [pc, #368]	; (80011f0 <HAL_RCC_OscConfig+0x504>)
 8001080:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001084:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001086:	f7ff fcdb 	bl	8000a40 <HAL_GetTick>
 800108a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800108c:	e008      	b.n	80010a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800108e:	f7ff fcd7 	bl	8000a40 <HAL_GetTick>
 8001092:	4602      	mov	r2, r0
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	2b02      	cmp	r3, #2
 800109a:	d901      	bls.n	80010a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800109c:	2303      	movs	r3, #3
 800109e:	e237      	b.n	8001510 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010a0:	4b53      	ldr	r3, [pc, #332]	; (80011f0 <HAL_RCC_OscConfig+0x504>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d1f0      	bne.n	800108e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 0308 	and.w	r3, r3, #8
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d03c      	beq.n	8001132 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	695b      	ldr	r3, [r3, #20]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d01c      	beq.n	80010fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010c0:	4b4b      	ldr	r3, [pc, #300]	; (80011f0 <HAL_RCC_OscConfig+0x504>)
 80010c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010c6:	4a4a      	ldr	r2, [pc, #296]	; (80011f0 <HAL_RCC_OscConfig+0x504>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010d0:	f7ff fcb6 	bl	8000a40 <HAL_GetTick>
 80010d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010d6:	e008      	b.n	80010ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010d8:	f7ff fcb2 	bl	8000a40 <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d901      	bls.n	80010ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e212      	b.n	8001510 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010ea:	4b41      	ldr	r3, [pc, #260]	; (80011f0 <HAL_RCC_OscConfig+0x504>)
 80010ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010f0:	f003 0302 	and.w	r3, r3, #2
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d0ef      	beq.n	80010d8 <HAL_RCC_OscConfig+0x3ec>
 80010f8:	e01b      	b.n	8001132 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010fa:	4b3d      	ldr	r3, [pc, #244]	; (80011f0 <HAL_RCC_OscConfig+0x504>)
 80010fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001100:	4a3b      	ldr	r2, [pc, #236]	; (80011f0 <HAL_RCC_OscConfig+0x504>)
 8001102:	f023 0301 	bic.w	r3, r3, #1
 8001106:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800110a:	f7ff fc99 	bl	8000a40 <HAL_GetTick>
 800110e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001110:	e008      	b.n	8001124 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001112:	f7ff fc95 	bl	8000a40 <HAL_GetTick>
 8001116:	4602      	mov	r2, r0
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	2b02      	cmp	r3, #2
 800111e:	d901      	bls.n	8001124 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001120:	2303      	movs	r3, #3
 8001122:	e1f5      	b.n	8001510 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001124:	4b32      	ldr	r3, [pc, #200]	; (80011f0 <HAL_RCC_OscConfig+0x504>)
 8001126:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	2b00      	cmp	r3, #0
 8001130:	d1ef      	bne.n	8001112 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0304 	and.w	r3, r3, #4
 800113a:	2b00      	cmp	r3, #0
 800113c:	f000 80a6 	beq.w	800128c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001140:	2300      	movs	r3, #0
 8001142:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001144:	4b2a      	ldr	r3, [pc, #168]	; (80011f0 <HAL_RCC_OscConfig+0x504>)
 8001146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d10d      	bne.n	800116c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001150:	4b27      	ldr	r3, [pc, #156]	; (80011f0 <HAL_RCC_OscConfig+0x504>)
 8001152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001154:	4a26      	ldr	r2, [pc, #152]	; (80011f0 <HAL_RCC_OscConfig+0x504>)
 8001156:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800115a:	6593      	str	r3, [r2, #88]	; 0x58
 800115c:	4b24      	ldr	r3, [pc, #144]	; (80011f0 <HAL_RCC_OscConfig+0x504>)
 800115e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001164:	60bb      	str	r3, [r7, #8]
 8001166:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001168:	2301      	movs	r3, #1
 800116a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800116c:	4b21      	ldr	r3, [pc, #132]	; (80011f4 <HAL_RCC_OscConfig+0x508>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001174:	2b00      	cmp	r3, #0
 8001176:	d118      	bne.n	80011aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001178:	4b1e      	ldr	r3, [pc, #120]	; (80011f4 <HAL_RCC_OscConfig+0x508>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a1d      	ldr	r2, [pc, #116]	; (80011f4 <HAL_RCC_OscConfig+0x508>)
 800117e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001182:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001184:	f7ff fc5c 	bl	8000a40 <HAL_GetTick>
 8001188:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800118a:	e008      	b.n	800119e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800118c:	f7ff fc58 	bl	8000a40 <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	2b02      	cmp	r3, #2
 8001198:	d901      	bls.n	800119e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e1b8      	b.n	8001510 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800119e:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <HAL_RCC_OscConfig+0x508>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d0f0      	beq.n	800118c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d108      	bne.n	80011c4 <HAL_RCC_OscConfig+0x4d8>
 80011b2:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <HAL_RCC_OscConfig+0x504>)
 80011b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011b8:	4a0d      	ldr	r2, [pc, #52]	; (80011f0 <HAL_RCC_OscConfig+0x504>)
 80011ba:	f043 0301 	orr.w	r3, r3, #1
 80011be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011c2:	e029      	b.n	8001218 <HAL_RCC_OscConfig+0x52c>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	2b05      	cmp	r3, #5
 80011ca:	d115      	bne.n	80011f8 <HAL_RCC_OscConfig+0x50c>
 80011cc:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <HAL_RCC_OscConfig+0x504>)
 80011ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011d2:	4a07      	ldr	r2, [pc, #28]	; (80011f0 <HAL_RCC_OscConfig+0x504>)
 80011d4:	f043 0304 	orr.w	r3, r3, #4
 80011d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011dc:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <HAL_RCC_OscConfig+0x504>)
 80011de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011e2:	4a03      	ldr	r2, [pc, #12]	; (80011f0 <HAL_RCC_OscConfig+0x504>)
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011ec:	e014      	b.n	8001218 <HAL_RCC_OscConfig+0x52c>
 80011ee:	bf00      	nop
 80011f0:	40021000 	.word	0x40021000
 80011f4:	40007000 	.word	0x40007000
 80011f8:	4b9d      	ldr	r3, [pc, #628]	; (8001470 <HAL_RCC_OscConfig+0x784>)
 80011fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011fe:	4a9c      	ldr	r2, [pc, #624]	; (8001470 <HAL_RCC_OscConfig+0x784>)
 8001200:	f023 0301 	bic.w	r3, r3, #1
 8001204:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001208:	4b99      	ldr	r3, [pc, #612]	; (8001470 <HAL_RCC_OscConfig+0x784>)
 800120a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800120e:	4a98      	ldr	r2, [pc, #608]	; (8001470 <HAL_RCC_OscConfig+0x784>)
 8001210:	f023 0304 	bic.w	r3, r3, #4
 8001214:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d016      	beq.n	800124e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001220:	f7ff fc0e 	bl	8000a40 <HAL_GetTick>
 8001224:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001226:	e00a      	b.n	800123e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001228:	f7ff fc0a 	bl	8000a40 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	f241 3288 	movw	r2, #5000	; 0x1388
 8001236:	4293      	cmp	r3, r2
 8001238:	d901      	bls.n	800123e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e168      	b.n	8001510 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800123e:	4b8c      	ldr	r3, [pc, #560]	; (8001470 <HAL_RCC_OscConfig+0x784>)
 8001240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001244:	f003 0302 	and.w	r3, r3, #2
 8001248:	2b00      	cmp	r3, #0
 800124a:	d0ed      	beq.n	8001228 <HAL_RCC_OscConfig+0x53c>
 800124c:	e015      	b.n	800127a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800124e:	f7ff fbf7 	bl	8000a40 <HAL_GetTick>
 8001252:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001254:	e00a      	b.n	800126c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001256:	f7ff fbf3 	bl	8000a40 <HAL_GetTick>
 800125a:	4602      	mov	r2, r0
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	f241 3288 	movw	r2, #5000	; 0x1388
 8001264:	4293      	cmp	r3, r2
 8001266:	d901      	bls.n	800126c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001268:	2303      	movs	r3, #3
 800126a:	e151      	b.n	8001510 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800126c:	4b80      	ldr	r3, [pc, #512]	; (8001470 <HAL_RCC_OscConfig+0x784>)
 800126e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	2b00      	cmp	r3, #0
 8001278:	d1ed      	bne.n	8001256 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800127a:	7ffb      	ldrb	r3, [r7, #31]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d105      	bne.n	800128c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001280:	4b7b      	ldr	r3, [pc, #492]	; (8001470 <HAL_RCC_OscConfig+0x784>)
 8001282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001284:	4a7a      	ldr	r2, [pc, #488]	; (8001470 <HAL_RCC_OscConfig+0x784>)
 8001286:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800128a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 0320 	and.w	r3, r3, #32
 8001294:	2b00      	cmp	r3, #0
 8001296:	d03c      	beq.n	8001312 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129c:	2b00      	cmp	r3, #0
 800129e:	d01c      	beq.n	80012da <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80012a0:	4b73      	ldr	r3, [pc, #460]	; (8001470 <HAL_RCC_OscConfig+0x784>)
 80012a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012a6:	4a72      	ldr	r2, [pc, #456]	; (8001470 <HAL_RCC_OscConfig+0x784>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012b0:	f7ff fbc6 	bl	8000a40 <HAL_GetTick>
 80012b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80012b6:	e008      	b.n	80012ca <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012b8:	f7ff fbc2 	bl	8000a40 <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d901      	bls.n	80012ca <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e122      	b.n	8001510 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80012ca:	4b69      	ldr	r3, [pc, #420]	; (8001470 <HAL_RCC_OscConfig+0x784>)
 80012cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012d0:	f003 0302 	and.w	r3, r3, #2
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d0ef      	beq.n	80012b8 <HAL_RCC_OscConfig+0x5cc>
 80012d8:	e01b      	b.n	8001312 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80012da:	4b65      	ldr	r3, [pc, #404]	; (8001470 <HAL_RCC_OscConfig+0x784>)
 80012dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012e0:	4a63      	ldr	r2, [pc, #396]	; (8001470 <HAL_RCC_OscConfig+0x784>)
 80012e2:	f023 0301 	bic.w	r3, r3, #1
 80012e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012ea:	f7ff fba9 	bl	8000a40 <HAL_GetTick>
 80012ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80012f0:	e008      	b.n	8001304 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012f2:	f7ff fba5 	bl	8000a40 <HAL_GetTick>
 80012f6:	4602      	mov	r2, r0
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d901      	bls.n	8001304 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001300:	2303      	movs	r3, #3
 8001302:	e105      	b.n	8001510 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001304:	4b5a      	ldr	r3, [pc, #360]	; (8001470 <HAL_RCC_OscConfig+0x784>)
 8001306:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	2b00      	cmp	r3, #0
 8001310:	d1ef      	bne.n	80012f2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001316:	2b00      	cmp	r3, #0
 8001318:	f000 80f9 	beq.w	800150e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001320:	2b02      	cmp	r3, #2
 8001322:	f040 80cf 	bne.w	80014c4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001326:	4b52      	ldr	r3, [pc, #328]	; (8001470 <HAL_RCC_OscConfig+0x784>)
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	f003 0203 	and.w	r2, r3, #3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001336:	429a      	cmp	r2, r3
 8001338:	d12c      	bne.n	8001394 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001344:	3b01      	subs	r3, #1
 8001346:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001348:	429a      	cmp	r2, r3
 800134a:	d123      	bne.n	8001394 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001356:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001358:	429a      	cmp	r2, r3
 800135a:	d11b      	bne.n	8001394 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001366:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001368:	429a      	cmp	r2, r3
 800136a:	d113      	bne.n	8001394 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001376:	085b      	lsrs	r3, r3, #1
 8001378:	3b01      	subs	r3, #1
 800137a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800137c:	429a      	cmp	r2, r3
 800137e:	d109      	bne.n	8001394 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	085b      	lsrs	r3, r3, #1
 800138c:	3b01      	subs	r3, #1
 800138e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001390:	429a      	cmp	r2, r3
 8001392:	d071      	beq.n	8001478 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	2b0c      	cmp	r3, #12
 8001398:	d068      	beq.n	800146c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800139a:	4b35      	ldr	r3, [pc, #212]	; (8001470 <HAL_RCC_OscConfig+0x784>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d105      	bne.n	80013b2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80013a6:	4b32      	ldr	r3, [pc, #200]	; (8001470 <HAL_RCC_OscConfig+0x784>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e0ac      	b.n	8001510 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80013b6:	4b2e      	ldr	r3, [pc, #184]	; (8001470 <HAL_RCC_OscConfig+0x784>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a2d      	ldr	r2, [pc, #180]	; (8001470 <HAL_RCC_OscConfig+0x784>)
 80013bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013c0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80013c2:	f7ff fb3d 	bl	8000a40 <HAL_GetTick>
 80013c6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013c8:	e008      	b.n	80013dc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ca:	f7ff fb39 	bl	8000a40 <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e099      	b.n	8001510 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013dc:	4b24      	ldr	r3, [pc, #144]	; (8001470 <HAL_RCC_OscConfig+0x784>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1f0      	bne.n	80013ca <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013e8:	4b21      	ldr	r3, [pc, #132]	; (8001470 <HAL_RCC_OscConfig+0x784>)
 80013ea:	68da      	ldr	r2, [r3, #12]
 80013ec:	4b21      	ldr	r3, [pc, #132]	; (8001474 <HAL_RCC_OscConfig+0x788>)
 80013ee:	4013      	ands	r3, r2
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80013f8:	3a01      	subs	r2, #1
 80013fa:	0112      	lsls	r2, r2, #4
 80013fc:	4311      	orrs	r1, r2
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001402:	0212      	lsls	r2, r2, #8
 8001404:	4311      	orrs	r1, r2
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800140a:	0852      	lsrs	r2, r2, #1
 800140c:	3a01      	subs	r2, #1
 800140e:	0552      	lsls	r2, r2, #21
 8001410:	4311      	orrs	r1, r2
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001416:	0852      	lsrs	r2, r2, #1
 8001418:	3a01      	subs	r2, #1
 800141a:	0652      	lsls	r2, r2, #25
 800141c:	4311      	orrs	r1, r2
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001422:	06d2      	lsls	r2, r2, #27
 8001424:	430a      	orrs	r2, r1
 8001426:	4912      	ldr	r1, [pc, #72]	; (8001470 <HAL_RCC_OscConfig+0x784>)
 8001428:	4313      	orrs	r3, r2
 800142a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800142c:	4b10      	ldr	r3, [pc, #64]	; (8001470 <HAL_RCC_OscConfig+0x784>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a0f      	ldr	r2, [pc, #60]	; (8001470 <HAL_RCC_OscConfig+0x784>)
 8001432:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001436:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001438:	4b0d      	ldr	r3, [pc, #52]	; (8001470 <HAL_RCC_OscConfig+0x784>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	4a0c      	ldr	r2, [pc, #48]	; (8001470 <HAL_RCC_OscConfig+0x784>)
 800143e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001442:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001444:	f7ff fafc 	bl	8000a40 <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800144c:	f7ff faf8 	bl	8000a40 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e058      	b.n	8001510 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800145e:	4b04      	ldr	r3, [pc, #16]	; (8001470 <HAL_RCC_OscConfig+0x784>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d0f0      	beq.n	800144c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800146a:	e050      	b.n	800150e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e04f      	b.n	8001510 <HAL_RCC_OscConfig+0x824>
 8001470:	40021000 	.word	0x40021000
 8001474:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001478:	4b27      	ldr	r3, [pc, #156]	; (8001518 <HAL_RCC_OscConfig+0x82c>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d144      	bne.n	800150e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001484:	4b24      	ldr	r3, [pc, #144]	; (8001518 <HAL_RCC_OscConfig+0x82c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a23      	ldr	r2, [pc, #140]	; (8001518 <HAL_RCC_OscConfig+0x82c>)
 800148a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800148e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001490:	4b21      	ldr	r3, [pc, #132]	; (8001518 <HAL_RCC_OscConfig+0x82c>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	4a20      	ldr	r2, [pc, #128]	; (8001518 <HAL_RCC_OscConfig+0x82c>)
 8001496:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800149a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800149c:	f7ff fad0 	bl	8000a40 <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014a4:	f7ff facc 	bl	8000a40 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e02c      	b.n	8001510 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014b6:	4b18      	ldr	r3, [pc, #96]	; (8001518 <HAL_RCC_OscConfig+0x82c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d0f0      	beq.n	80014a4 <HAL_RCC_OscConfig+0x7b8>
 80014c2:	e024      	b.n	800150e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	2b0c      	cmp	r3, #12
 80014c8:	d01f      	beq.n	800150a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ca:	4b13      	ldr	r3, [pc, #76]	; (8001518 <HAL_RCC_OscConfig+0x82c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a12      	ldr	r2, [pc, #72]	; (8001518 <HAL_RCC_OscConfig+0x82c>)
 80014d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d6:	f7ff fab3 	bl	8000a40 <HAL_GetTick>
 80014da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014dc:	e008      	b.n	80014f0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014de:	f7ff faaf 	bl	8000a40 <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d901      	bls.n	80014f0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80014ec:	2303      	movs	r3, #3
 80014ee:	e00f      	b.n	8001510 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014f0:	4b09      	ldr	r3, [pc, #36]	; (8001518 <HAL_RCC_OscConfig+0x82c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d1f0      	bne.n	80014de <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80014fc:	4b06      	ldr	r3, [pc, #24]	; (8001518 <HAL_RCC_OscConfig+0x82c>)
 80014fe:	68da      	ldr	r2, [r3, #12]
 8001500:	4905      	ldr	r1, [pc, #20]	; (8001518 <HAL_RCC_OscConfig+0x82c>)
 8001502:	4b06      	ldr	r3, [pc, #24]	; (800151c <HAL_RCC_OscConfig+0x830>)
 8001504:	4013      	ands	r3, r2
 8001506:	60cb      	str	r3, [r1, #12]
 8001508:	e001      	b.n	800150e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e000      	b.n	8001510 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800150e:	2300      	movs	r3, #0
}
 8001510:	4618      	mov	r0, r3
 8001512:	3720      	adds	r7, #32
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40021000 	.word	0x40021000
 800151c:	feeefffc 	.word	0xfeeefffc

08001520 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d101      	bne.n	8001534 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e0e7      	b.n	8001704 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001534:	4b75      	ldr	r3, [pc, #468]	; (800170c <HAL_RCC_ClockConfig+0x1ec>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0307 	and.w	r3, r3, #7
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	429a      	cmp	r2, r3
 8001540:	d910      	bls.n	8001564 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001542:	4b72      	ldr	r3, [pc, #456]	; (800170c <HAL_RCC_ClockConfig+0x1ec>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f023 0207 	bic.w	r2, r3, #7
 800154a:	4970      	ldr	r1, [pc, #448]	; (800170c <HAL_RCC_ClockConfig+0x1ec>)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	4313      	orrs	r3, r2
 8001550:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001552:	4b6e      	ldr	r3, [pc, #440]	; (800170c <HAL_RCC_ClockConfig+0x1ec>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	683a      	ldr	r2, [r7, #0]
 800155c:	429a      	cmp	r2, r3
 800155e:	d001      	beq.n	8001564 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e0cf      	b.n	8001704 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0302 	and.w	r3, r3, #2
 800156c:	2b00      	cmp	r3, #0
 800156e:	d010      	beq.n	8001592 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689a      	ldr	r2, [r3, #8]
 8001574:	4b66      	ldr	r3, [pc, #408]	; (8001710 <HAL_RCC_ClockConfig+0x1f0>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800157c:	429a      	cmp	r2, r3
 800157e:	d908      	bls.n	8001592 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001580:	4b63      	ldr	r3, [pc, #396]	; (8001710 <HAL_RCC_ClockConfig+0x1f0>)
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	4960      	ldr	r1, [pc, #384]	; (8001710 <HAL_RCC_ClockConfig+0x1f0>)
 800158e:	4313      	orrs	r3, r2
 8001590:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	2b00      	cmp	r3, #0
 800159c:	d04c      	beq.n	8001638 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	2b03      	cmp	r3, #3
 80015a4:	d107      	bne.n	80015b6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015a6:	4b5a      	ldr	r3, [pc, #360]	; (8001710 <HAL_RCC_ClockConfig+0x1f0>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d121      	bne.n	80015f6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e0a6      	b.n	8001704 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d107      	bne.n	80015ce <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015be:	4b54      	ldr	r3, [pc, #336]	; (8001710 <HAL_RCC_ClockConfig+0x1f0>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d115      	bne.n	80015f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e09a      	b.n	8001704 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d107      	bne.n	80015e6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015d6:	4b4e      	ldr	r3, [pc, #312]	; (8001710 <HAL_RCC_ClockConfig+0x1f0>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d109      	bne.n	80015f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e08e      	b.n	8001704 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015e6:	4b4a      	ldr	r3, [pc, #296]	; (8001710 <HAL_RCC_ClockConfig+0x1f0>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d101      	bne.n	80015f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e086      	b.n	8001704 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80015f6:	4b46      	ldr	r3, [pc, #280]	; (8001710 <HAL_RCC_ClockConfig+0x1f0>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f023 0203 	bic.w	r2, r3, #3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	4943      	ldr	r1, [pc, #268]	; (8001710 <HAL_RCC_ClockConfig+0x1f0>)
 8001604:	4313      	orrs	r3, r2
 8001606:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001608:	f7ff fa1a 	bl	8000a40 <HAL_GetTick>
 800160c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800160e:	e00a      	b.n	8001626 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001610:	f7ff fa16 	bl	8000a40 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	f241 3288 	movw	r2, #5000	; 0x1388
 800161e:	4293      	cmp	r3, r2
 8001620:	d901      	bls.n	8001626 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e06e      	b.n	8001704 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001626:	4b3a      	ldr	r3, [pc, #232]	; (8001710 <HAL_RCC_ClockConfig+0x1f0>)
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	f003 020c 	and.w	r2, r3, #12
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	429a      	cmp	r2, r3
 8001636:	d1eb      	bne.n	8001610 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d010      	beq.n	8001666 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689a      	ldr	r2, [r3, #8]
 8001648:	4b31      	ldr	r3, [pc, #196]	; (8001710 <HAL_RCC_ClockConfig+0x1f0>)
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001650:	429a      	cmp	r2, r3
 8001652:	d208      	bcs.n	8001666 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001654:	4b2e      	ldr	r3, [pc, #184]	; (8001710 <HAL_RCC_ClockConfig+0x1f0>)
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	492b      	ldr	r1, [pc, #172]	; (8001710 <HAL_RCC_ClockConfig+0x1f0>)
 8001662:	4313      	orrs	r3, r2
 8001664:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001666:	4b29      	ldr	r3, [pc, #164]	; (800170c <HAL_RCC_ClockConfig+0x1ec>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	429a      	cmp	r2, r3
 8001672:	d210      	bcs.n	8001696 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001674:	4b25      	ldr	r3, [pc, #148]	; (800170c <HAL_RCC_ClockConfig+0x1ec>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f023 0207 	bic.w	r2, r3, #7
 800167c:	4923      	ldr	r1, [pc, #140]	; (800170c <HAL_RCC_ClockConfig+0x1ec>)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	4313      	orrs	r3, r2
 8001682:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001684:	4b21      	ldr	r3, [pc, #132]	; (800170c <HAL_RCC_ClockConfig+0x1ec>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0307 	and.w	r3, r3, #7
 800168c:	683a      	ldr	r2, [r7, #0]
 800168e:	429a      	cmp	r2, r3
 8001690:	d001      	beq.n	8001696 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e036      	b.n	8001704 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0304 	and.w	r3, r3, #4
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d008      	beq.n	80016b4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016a2:	4b1b      	ldr	r3, [pc, #108]	; (8001710 <HAL_RCC_ClockConfig+0x1f0>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	4918      	ldr	r1, [pc, #96]	; (8001710 <HAL_RCC_ClockConfig+0x1f0>)
 80016b0:	4313      	orrs	r3, r2
 80016b2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0308 	and.w	r3, r3, #8
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d009      	beq.n	80016d4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016c0:	4b13      	ldr	r3, [pc, #76]	; (8001710 <HAL_RCC_ClockConfig+0x1f0>)
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	691b      	ldr	r3, [r3, #16]
 80016cc:	00db      	lsls	r3, r3, #3
 80016ce:	4910      	ldr	r1, [pc, #64]	; (8001710 <HAL_RCC_ClockConfig+0x1f0>)
 80016d0:	4313      	orrs	r3, r2
 80016d2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016d4:	f000 f824 	bl	8001720 <HAL_RCC_GetSysClockFreq>
 80016d8:	4602      	mov	r2, r0
 80016da:	4b0d      	ldr	r3, [pc, #52]	; (8001710 <HAL_RCC_ClockConfig+0x1f0>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	091b      	lsrs	r3, r3, #4
 80016e0:	f003 030f 	and.w	r3, r3, #15
 80016e4:	490b      	ldr	r1, [pc, #44]	; (8001714 <HAL_RCC_ClockConfig+0x1f4>)
 80016e6:	5ccb      	ldrb	r3, [r1, r3]
 80016e8:	f003 031f 	and.w	r3, r3, #31
 80016ec:	fa22 f303 	lsr.w	r3, r2, r3
 80016f0:	4a09      	ldr	r2, [pc, #36]	; (8001718 <HAL_RCC_ClockConfig+0x1f8>)
 80016f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80016f4:	4b09      	ldr	r3, [pc, #36]	; (800171c <HAL_RCC_ClockConfig+0x1fc>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff f951 	bl	80009a0 <HAL_InitTick>
 80016fe:	4603      	mov	r3, r0
 8001700:	72fb      	strb	r3, [r7, #11]

  return status;
 8001702:	7afb      	ldrb	r3, [r7, #11]
}
 8001704:	4618      	mov	r0, r3
 8001706:	3710      	adds	r7, #16
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40022000 	.word	0x40022000
 8001710:	40021000 	.word	0x40021000
 8001714:	08001978 	.word	0x08001978
 8001718:	20000000 	.word	0x20000000
 800171c:	20000004 	.word	0x20000004

08001720 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001720:	b480      	push	{r7}
 8001722:	b089      	sub	sp, #36	; 0x24
 8001724:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001726:	2300      	movs	r3, #0
 8001728:	61fb      	str	r3, [r7, #28]
 800172a:	2300      	movs	r3, #0
 800172c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800172e:	4b3e      	ldr	r3, [pc, #248]	; (8001828 <HAL_RCC_GetSysClockFreq+0x108>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f003 030c 	and.w	r3, r3, #12
 8001736:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001738:	4b3b      	ldr	r3, [pc, #236]	; (8001828 <HAL_RCC_GetSysClockFreq+0x108>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	f003 0303 	and.w	r3, r3, #3
 8001740:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d005      	beq.n	8001754 <HAL_RCC_GetSysClockFreq+0x34>
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	2b0c      	cmp	r3, #12
 800174c:	d121      	bne.n	8001792 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d11e      	bne.n	8001792 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001754:	4b34      	ldr	r3, [pc, #208]	; (8001828 <HAL_RCC_GetSysClockFreq+0x108>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0308 	and.w	r3, r3, #8
 800175c:	2b00      	cmp	r3, #0
 800175e:	d107      	bne.n	8001770 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001760:	4b31      	ldr	r3, [pc, #196]	; (8001828 <HAL_RCC_GetSysClockFreq+0x108>)
 8001762:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001766:	0a1b      	lsrs	r3, r3, #8
 8001768:	f003 030f 	and.w	r3, r3, #15
 800176c:	61fb      	str	r3, [r7, #28]
 800176e:	e005      	b.n	800177c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001770:	4b2d      	ldr	r3, [pc, #180]	; (8001828 <HAL_RCC_GetSysClockFreq+0x108>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	091b      	lsrs	r3, r3, #4
 8001776:	f003 030f 	and.w	r3, r3, #15
 800177a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800177c:	4a2b      	ldr	r2, [pc, #172]	; (800182c <HAL_RCC_GetSysClockFreq+0x10c>)
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001784:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d10d      	bne.n	80017a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001790:	e00a      	b.n	80017a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	2b04      	cmp	r3, #4
 8001796:	d102      	bne.n	800179e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001798:	4b25      	ldr	r3, [pc, #148]	; (8001830 <HAL_RCC_GetSysClockFreq+0x110>)
 800179a:	61bb      	str	r3, [r7, #24]
 800179c:	e004      	b.n	80017a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	2b08      	cmp	r3, #8
 80017a2:	d101      	bne.n	80017a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80017a4:	4b23      	ldr	r3, [pc, #140]	; (8001834 <HAL_RCC_GetSysClockFreq+0x114>)
 80017a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	2b0c      	cmp	r3, #12
 80017ac:	d134      	bne.n	8001818 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80017ae:	4b1e      	ldr	r3, [pc, #120]	; (8001828 <HAL_RCC_GetSysClockFreq+0x108>)
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	f003 0303 	and.w	r3, r3, #3
 80017b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d003      	beq.n	80017c6 <HAL_RCC_GetSysClockFreq+0xa6>
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	2b03      	cmp	r3, #3
 80017c2:	d003      	beq.n	80017cc <HAL_RCC_GetSysClockFreq+0xac>
 80017c4:	e005      	b.n	80017d2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80017c6:	4b1a      	ldr	r3, [pc, #104]	; (8001830 <HAL_RCC_GetSysClockFreq+0x110>)
 80017c8:	617b      	str	r3, [r7, #20]
      break;
 80017ca:	e005      	b.n	80017d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80017cc:	4b19      	ldr	r3, [pc, #100]	; (8001834 <HAL_RCC_GetSysClockFreq+0x114>)
 80017ce:	617b      	str	r3, [r7, #20]
      break;
 80017d0:	e002      	b.n	80017d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	617b      	str	r3, [r7, #20]
      break;
 80017d6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80017d8:	4b13      	ldr	r3, [pc, #76]	; (8001828 <HAL_RCC_GetSysClockFreq+0x108>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	091b      	lsrs	r3, r3, #4
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	3301      	adds	r3, #1
 80017e4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80017e6:	4b10      	ldr	r3, [pc, #64]	; (8001828 <HAL_RCC_GetSysClockFreq+0x108>)
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	0a1b      	lsrs	r3, r3, #8
 80017ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017f0:	697a      	ldr	r2, [r7, #20]
 80017f2:	fb03 f202 	mul.w	r2, r3, r2
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017fc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80017fe:	4b0a      	ldr	r3, [pc, #40]	; (8001828 <HAL_RCC_GetSysClockFreq+0x108>)
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	0e5b      	lsrs	r3, r3, #25
 8001804:	f003 0303 	and.w	r3, r3, #3
 8001808:	3301      	adds	r3, #1
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800180e:	697a      	ldr	r2, [r7, #20]
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	fbb2 f3f3 	udiv	r3, r2, r3
 8001816:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001818:	69bb      	ldr	r3, [r7, #24]
}
 800181a:	4618      	mov	r0, r3
 800181c:	3724      	adds	r7, #36	; 0x24
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	40021000 	.word	0x40021000
 800182c:	08001988 	.word	0x08001988
 8001830:	00f42400 	.word	0x00f42400
 8001834:	007a1200 	.word	0x007a1200

08001838 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001840:	2300      	movs	r3, #0
 8001842:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001844:	4b2a      	ldr	r3, [pc, #168]	; (80018f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d003      	beq.n	8001858 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001850:	f7ff f9e8 	bl	8000c24 <HAL_PWREx_GetVoltageRange>
 8001854:	6178      	str	r0, [r7, #20]
 8001856:	e014      	b.n	8001882 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001858:	4b25      	ldr	r3, [pc, #148]	; (80018f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800185a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800185c:	4a24      	ldr	r2, [pc, #144]	; (80018f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800185e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001862:	6593      	str	r3, [r2, #88]	; 0x58
 8001864:	4b22      	ldr	r3, [pc, #136]	; (80018f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001870:	f7ff f9d8 	bl	8000c24 <HAL_PWREx_GetVoltageRange>
 8001874:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001876:	4b1e      	ldr	r3, [pc, #120]	; (80018f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187a:	4a1d      	ldr	r2, [pc, #116]	; (80018f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800187c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001880:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001888:	d10b      	bne.n	80018a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2b80      	cmp	r3, #128	; 0x80
 800188e:	d919      	bls.n	80018c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2ba0      	cmp	r3, #160	; 0xa0
 8001894:	d902      	bls.n	800189c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001896:	2302      	movs	r3, #2
 8001898:	613b      	str	r3, [r7, #16]
 800189a:	e013      	b.n	80018c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800189c:	2301      	movs	r3, #1
 800189e:	613b      	str	r3, [r7, #16]
 80018a0:	e010      	b.n	80018c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2b80      	cmp	r3, #128	; 0x80
 80018a6:	d902      	bls.n	80018ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80018a8:	2303      	movs	r3, #3
 80018aa:	613b      	str	r3, [r7, #16]
 80018ac:	e00a      	b.n	80018c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b80      	cmp	r3, #128	; 0x80
 80018b2:	d102      	bne.n	80018ba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80018b4:	2302      	movs	r3, #2
 80018b6:	613b      	str	r3, [r7, #16]
 80018b8:	e004      	b.n	80018c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2b70      	cmp	r3, #112	; 0x70
 80018be:	d101      	bne.n	80018c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80018c0:	2301      	movs	r3, #1
 80018c2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80018c4:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f023 0207 	bic.w	r2, r3, #7
 80018cc:	4909      	ldr	r1, [pc, #36]	; (80018f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80018d4:	4b07      	ldr	r3, [pc, #28]	; (80018f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0307 	and.w	r3, r3, #7
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d001      	beq.n	80018e6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e000      	b.n	80018e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3718      	adds	r7, #24
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40021000 	.word	0x40021000
 80018f4:	40022000 	.word	0x40022000

080018f8 <__libc_init_array>:
 80018f8:	b570      	push	{r4, r5, r6, lr}
 80018fa:	4d0d      	ldr	r5, [pc, #52]	; (8001930 <__libc_init_array+0x38>)
 80018fc:	4c0d      	ldr	r4, [pc, #52]	; (8001934 <__libc_init_array+0x3c>)
 80018fe:	1b64      	subs	r4, r4, r5
 8001900:	10a4      	asrs	r4, r4, #2
 8001902:	2600      	movs	r6, #0
 8001904:	42a6      	cmp	r6, r4
 8001906:	d109      	bne.n	800191c <__libc_init_array+0x24>
 8001908:	4d0b      	ldr	r5, [pc, #44]	; (8001938 <__libc_init_array+0x40>)
 800190a:	4c0c      	ldr	r4, [pc, #48]	; (800193c <__libc_init_array+0x44>)
 800190c:	f000 f820 	bl	8001950 <_init>
 8001910:	1b64      	subs	r4, r4, r5
 8001912:	10a4      	asrs	r4, r4, #2
 8001914:	2600      	movs	r6, #0
 8001916:	42a6      	cmp	r6, r4
 8001918:	d105      	bne.n	8001926 <__libc_init_array+0x2e>
 800191a:	bd70      	pop	{r4, r5, r6, pc}
 800191c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001920:	4798      	blx	r3
 8001922:	3601      	adds	r6, #1
 8001924:	e7ee      	b.n	8001904 <__libc_init_array+0xc>
 8001926:	f855 3b04 	ldr.w	r3, [r5], #4
 800192a:	4798      	blx	r3
 800192c:	3601      	adds	r6, #1
 800192e:	e7f2      	b.n	8001916 <__libc_init_array+0x1e>
 8001930:	080019b8 	.word	0x080019b8
 8001934:	080019b8 	.word	0x080019b8
 8001938:	080019b8 	.word	0x080019b8
 800193c:	080019bc 	.word	0x080019bc

08001940 <memset>:
 8001940:	4402      	add	r2, r0
 8001942:	4603      	mov	r3, r0
 8001944:	4293      	cmp	r3, r2
 8001946:	d100      	bne.n	800194a <memset+0xa>
 8001948:	4770      	bx	lr
 800194a:	f803 1b01 	strb.w	r1, [r3], #1
 800194e:	e7f9      	b.n	8001944 <memset+0x4>

08001950 <_init>:
 8001950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001952:	bf00      	nop
 8001954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001956:	bc08      	pop	{r3}
 8001958:	469e      	mov	lr, r3
 800195a:	4770      	bx	lr

0800195c <_fini>:
 800195c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800195e:	bf00      	nop
 8001960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001962:	bc08      	pop	{r3}
 8001964:	469e      	mov	lr, r3
 8001966:	4770      	bx	lr
