
P4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001bc8  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  08001d74  08001d74  00011d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001fa0  08001fa0  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08001fa0  08001fa0  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001fa0  08001fa0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001fa0  08001fa0  00011fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001fa4  08001fa4  00011fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08001fa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  20000014  08001fbc  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  08001fbc  00020164  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000626f  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001477  00000000  00000000  000262b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c0  00000000  00000000  00027730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005f8  00000000  00000000  00027df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000274d3  00000000  00000000  000283e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000722c  00000000  00000000  0004f8bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee8b1  00000000  00000000  00056ae7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00145398  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018b4  00000000  00000000  001453e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000014 	.word	0x20000014
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08001d5c 	.word	0x08001d5c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000018 	.word	0x20000018
 80001e8:	08001d5c 	.word	0x08001d5c

080001ec <delay_us>:

// delay in microseconds using SysTick timer to count CPU clock cycles
// do not call with 0 : error, maximum delay.
// careful calling with small nums : result in longer delays than specified:
//    e.g. @4MHz, delay_us(1) = 10=15 us delay.
void delay_us(const uint32_t time_us) {  // time_us = target delay, microseconds
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
    SysTick->LOAD = (uint32_t)((time_us * (SystemCoreClock / 1000000)) - 1);
 80001f4:	4b11      	ldr	r3, [pc, #68]	; (800023c <delay_us+0x50>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a11      	ldr	r2, [pc, #68]	; (8000240 <delay_us+0x54>)
 80001fa:	fba2 2303 	umull	r2, r3, r2, r3
 80001fe:	0c9b      	lsrs	r3, r3, #18
 8000200:	687a      	ldr	r2, [r7, #4]
 8000202:	fb02 f303 	mul.w	r3, r2, r3
 8000206:	4a0f      	ldr	r2, [pc, #60]	; (8000244 <delay_us+0x58>)
 8000208:	3b01      	subs	r3, #1
 800020a:	6053      	str	r3, [r2, #4]
    SysTick->VAL = 0;                                      // clear the timer count
 800020c:	4b0d      	ldr	r3, [pc, #52]	; (8000244 <delay_us+0x58>)
 800020e:	2200      	movs	r2, #0
 8000210:	609a      	str	r2, [r3, #8]
    SysTick->CTRL &= ~(SysTick_CTRL_COUNTFLAG_Msk);        // clear the count flag
 8000212:	4b0c      	ldr	r3, [pc, #48]	; (8000244 <delay_us+0x58>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	4a0b      	ldr	r2, [pc, #44]	; (8000244 <delay_us+0x58>)
 8000218:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800021c:	6013      	str	r3, [r2, #0]
    while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)); // wait for the flag
 800021e:	bf00      	nop
 8000220:	4b08      	ldr	r3, [pc, #32]	; (8000244 <delay_us+0x58>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000228:	2b00      	cmp	r3, #0
 800022a:	d0f9      	beq.n	8000220 <delay_us+0x34>
}
 800022c:	bf00      	nop
 800022e:	bf00      	nop
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	20000008 	.word	0x20000008
 8000240:	431bde83 	.word	0x431bde83
 8000244:	e000e010 	.word	0xe000e010

08000248 <handshake>:
void FP_init(void) {
}

//--------------------Instructions to transmit
//Command to confirm if fingerprint is connected to upper computer
void handshake(void) {
 8000248:	b490      	push	{r4, r7}
 800024a:	b084      	sub	sp, #16
 800024c:	af00      	add	r7, sp, #0
	char handshake[13] = { 0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF,	//instruction
 800024e:	4b11      	ldr	r3, [pc, #68]	; (8000294 <handshake+0x4c>)
 8000250:	463c      	mov	r4, r7
 8000252:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000254:	c407      	stmia	r4!, {r0, r1, r2}
 8000256:	7023      	strb	r3, [r4, #0]
			0x01, 0x00, 0x04, 0x17, 0x00, 0x00, 0x1C }; //a 0x00 after 0x01 before 0x04
	uint8_t i = 0;		//iteration counter
 8000258:	2300      	movs	r3, #0
 800025a:	73fb      	strb	r3, [r7, #15]
	while (i < 13) { //sends data from lowest byte to highest byte
 800025c:	e011      	b.n	8000282 <handshake+0x3a>
		while (!(USART2->ISR & USART_ISR_TXE))
 800025e:	bf00      	nop
 8000260:	4b0d      	ldr	r3, [pc, #52]	; (8000298 <handshake+0x50>)
 8000262:	69db      	ldr	r3, [r3, #28]
 8000264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000268:	2b00      	cmp	r3, #0
 800026a:	d0f9      	beq.n	8000260 <handshake+0x18>
			; //waits for empty transmit
		USART2->TDR = handshake[i];
 800026c:	7bfb      	ldrb	r3, [r7, #15]
 800026e:	3310      	adds	r3, #16
 8000270:	443b      	add	r3, r7
 8000272:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8000276:	4b08      	ldr	r3, [pc, #32]	; (8000298 <handshake+0x50>)
 8000278:	b292      	uxth	r2, r2
 800027a:	851a      	strh	r2, [r3, #40]	; 0x28
		i++;	//increments array
 800027c:	7bfb      	ldrb	r3, [r7, #15]
 800027e:	3301      	adds	r3, #1
 8000280:	73fb      	strb	r3, [r7, #15]
	while (i < 13) { //sends data from lowest byte to highest byte
 8000282:	7bfb      	ldrb	r3, [r7, #15]
 8000284:	2b0c      	cmp	r3, #12
 8000286:	d9ea      	bls.n	800025e <handshake+0x16>
	}
}
 8000288:	bf00      	nop
 800028a:	bf00      	nop
 800028c:	3710      	adds	r7, #16
 800028e:	46bd      	mov	sp, r7
 8000290:	bc90      	pop	{r4, r7}
 8000292:	4770      	bx	lr
 8000294:	08001d74 	.word	0x08001d74
 8000298:	40004400 	.word	0x40004400

0800029c <LCD_init>:
int LCD_convert_ascii_to_time ( uint8_t asctime );

//data bus array
uint16_t GPIO_Pin[] = {D4, D5, D6, D7};

void LCD_init(void) {
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
  delay_us(100000);
 80002a0:	4825      	ldr	r0, [pc, #148]	; (8000338 <LCD_init+0x9c>)
 80002a2:	f7ff ffa3 	bl	80001ec <delay_us>
  RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOEEN); // enable GPIOA clock on bus
 80002a6:	4b25      	ldr	r3, [pc, #148]	; (800033c <LCD_init+0xa0>)
 80002a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002aa:	4a24      	ldr	r2, [pc, #144]	; (800033c <LCD_init+0xa0>)
 80002ac:	f043 0310 	orr.w	r3, r3, #16
 80002b0:	64d3      	str	r3, [r2, #76]	; 0x4c

  // Making control pins output mode bits(01)
  control_pins->MODER &=
 80002b2:	4b23      	ldr	r3, [pc, #140]	; (8000340 <LCD_init+0xa4>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	4a22      	ldr	r2, [pc, #136]	; (8000340 <LCD_init+0xa4>)
 80002b8:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80002bc:	6013      	str	r3, [r2, #0]
      ~(GPIO_MODER_MODE9 | GPIO_MODER_MODE10 | GPIO_MODER_MODE11 |
        GPIO_MODER_MODE12 | GPIO_MODER_MODE13 | GPIO_MODER_MODE14 |
        GPIO_MODER_MODE15); // clear bits for PA
  control_pins->MODER |=
 80002be:	4b20      	ldr	r3, [pc, #128]	; (8000340 <LCD_init+0xa4>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	4a1f      	ldr	r2, [pc, #124]	; (8000340 <LCD_init+0xa4>)
 80002c4:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 80002c8:	f443 03a8 	orr.w	r3, r3, #5505024	; 0x540000
 80002cc:	6013      	str	r3, [r2, #0]
      (GPIO_MODER_MODE9_0 | GPIO_MODER_MODE10_0 | GPIO_MODER_MODE11_0 |
       GPIO_MODER_MODE12_0 | GPIO_MODER_MODE13_0 | GPIO_MODER_MODE14_0 |
       GPIO_MODER_MODE15_0); // set up DB4 to DB7, RS, RW, E as outputs
  control_pins->OTYPER &=
 80002ce:	4b1c      	ldr	r3, [pc, #112]	; (8000340 <LCD_init+0xa4>)
 80002d0:	685b      	ldr	r3, [r3, #4]
 80002d2:	4a1b      	ldr	r2, [pc, #108]	; (8000340 <LCD_init+0xa4>)
 80002d4:	f423 437e 	bic.w	r3, r3, #65024	; 0xfe00
 80002d8:	6053      	str	r3, [r2, #4]
      ~(GPIO_OTYPER_OT9 | GPIO_OTYPER_OT10 | GPIO_OTYPER_OT11 | GPIO_OTYPER_OT12 |
        GPIO_OTYPER_OT13 | GPIO_OTYPER_OT14 | GPIO_OTYPER_OT15);
  control_pins->OSPEEDR |=
 80002da:	4b19      	ldr	r3, [pc, #100]	; (8000340 <LCD_init+0xa4>)
 80002dc:	689b      	ldr	r3, [r3, #8]
 80002de:	4a18      	ldr	r2, [pc, #96]	; (8000340 <LCD_init+0xa4>)
 80002e0:	ea6f 3383 	mvn.w	r3, r3, lsl #14
 80002e4:	ea6f 3393 	mvn.w	r3, r3, lsr #14
 80002e8:	6093      	str	r3, [r2, #8]
      ((3 << GPIO_OSPEEDR_OSPEED9_Pos) | (3 << GPIO_OSPEEDR_OSPEED10_Pos) |
       (3 << GPIO_OSPEEDR_OSPEED11_Pos) | (3 << GPIO_OSPEEDR_OSPEED12_Pos) |
       (3 << GPIO_OSPEEDR_OSPEED13_Pos) | (3 << GPIO_OSPEEDR_OSPEED14_Pos) |
       (3 << GPIO_OSPEEDR_OSPEED15_Pos));
  control_pins->BRR =
 80002ea:	4b15      	ldr	r3, [pc, #84]	; (8000340 <LCD_init+0xa4>)
 80002ec:	f44f 427e 	mov.w	r2, #65024	; 0xfe00
 80002f0:	629a      	str	r2, [r3, #40]	; 0x28
      (D4 | D5 | D6 | D7 | EN | RW | RS); // Initializes data to all 0

  //LCD init commands based on the LCD datasheet
  delay_us(100000);
 80002f2:	4811      	ldr	r0, [pc, #68]	; (8000338 <LCD_init+0x9c>)
 80002f4:	f7ff ff7a 	bl	80001ec <delay_us>
  command(0x30);
 80002f8:	2030      	movs	r0, #48	; 0x30
 80002fa:	f000 f83d 	bl	8000378 <command>
  delay_us(100);
 80002fe:	2064      	movs	r0, #100	; 0x64
 8000300:	f7ff ff74 	bl	80001ec <delay_us>
  command(0x30);
 8000304:	2030      	movs	r0, #48	; 0x30
 8000306:	f000 f837 	bl	8000378 <command>
  delay_us(100);
 800030a:	2064      	movs	r0, #100	; 0x64
 800030c:	f7ff ff6e 	bl	80001ec <delay_us>
  command(0x30);
 8000310:	2030      	movs	r0, #48	; 0x30
 8000312:	f000 f831 	bl	8000378 <command>
  delay_us(100);
 8000316:	2064      	movs	r0, #100	; 0x64
 8000318:	f7ff ff68 	bl	80001ec <delay_us>
  command(0x20);
 800031c:	2020      	movs	r0, #32
 800031e:	f000 f82b 	bl	8000378 <command>
  delay_us(100);
 8000322:	2064      	movs	r0, #100	; 0x64
 8000324:	f7ff ff62 	bl	80001ec <delay_us>
  command(0x02);
 8000328:	2002      	movs	r0, #2
 800032a:	f000 f825 	bl	8000378 <command>
  delay_us(100);
 800032e:	2064      	movs	r0, #100	; 0x64
 8000330:	f7ff ff5c 	bl	80001ec <delay_us>
}
 8000334:	bf00      	nop
 8000336:	bd80      	pop	{r7, pc}
 8000338:	000186a0 	.word	0x000186a0
 800033c:	40021000 	.word	0x40021000
 8000340:	48001000 	.word	0x48001000

08000344 <Nybble>:

void Nybble() {
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
  control_pins->BSRR = EN;  //turn on EN for pulse
 8000348:	4b0a      	ldr	r3, [pc, #40]	; (8000374 <Nybble+0x30>)
 800034a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800034e:	619a      	str	r2, [r3, #24]
  delay_us(50); // wait
 8000350:	2032      	movs	r0, #50	; 0x32
 8000352:	f7ff ff4b 	bl	80001ec <delay_us>
  control_pins->BRR = EN;   //turn off EN for pulse
 8000356:	4b07      	ldr	r3, [pc, #28]	; (8000374 <Nybble+0x30>)
 8000358:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800035c:	629a      	str	r2, [r3, #40]	; 0x28
  delay_us(50);                                // wait
 800035e:	2032      	movs	r0, #50	; 0x32
 8000360:	f7ff ff44 	bl	80001ec <delay_us>
  control_pins->ODR &= ~((D4 | D5 | D6 | D7)); // clear data registers
 8000364:	4b03      	ldr	r3, [pc, #12]	; (8000374 <Nybble+0x30>)
 8000366:	695b      	ldr	r3, [r3, #20]
 8000368:	4a02      	ldr	r2, [pc, #8]	; (8000374 <Nybble+0x30>)
 800036a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800036e:	6153      	str	r3, [r2, #20]
}
 8000370:	bf00      	nop
 8000372:	bd80      	pop	{r7, pc}
 8000374:	48001000 	.word	0x48001000

08000378 <command>:

void command(uint8_t command) {
 8000378:	b580      	push	{r7, lr}
 800037a:	b086      	sub	sp, #24
 800037c:	af00      	add	r7, sp, #0
 800037e:	4603      	mov	r3, r0
 8000380:	71fb      	strb	r3, [r7, #7]
  uint8_t command2 = command >> 4; //shift higher nibbles to lower nibbles
 8000382:	79fb      	ldrb	r3, [r7, #7]
 8000384:	091b      	lsrs	r3, r3, #4
 8000386:	73fb      	strb	r3, [r7, #15]
  control_pins->BRR = (RS | RW); // set RS and RW to zero
 8000388:	4b2a      	ldr	r3, [pc, #168]	; (8000434 <command+0xbc>)
 800038a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800038e:	629a      	str	r2, [r3, #40]	; 0x28

  for (int i = 0; i < 4; i++) {  //loop through data bus and turn on or off
 8000390:	2300      	movs	r3, #0
 8000392:	617b      	str	r3, [r7, #20]
 8000394:	e017      	b.n	80003c6 <command+0x4e>
    if ((command2 >> i) & 0x01) {
 8000396:	7bfa      	ldrb	r2, [r7, #15]
 8000398:	697b      	ldr	r3, [r7, #20]
 800039a:	fa42 f303 	asr.w	r3, r2, r3
 800039e:	f003 0301 	and.w	r3, r3, #1
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d006      	beq.n	80003b4 <command+0x3c>
      control_pins->BSRR = GPIO_Pin[i];
 80003a6:	4a24      	ldr	r2, [pc, #144]	; (8000438 <command+0xc0>)
 80003a8:	697b      	ldr	r3, [r7, #20]
 80003aa:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80003ae:	4b21      	ldr	r3, [pc, #132]	; (8000434 <command+0xbc>)
 80003b0:	619a      	str	r2, [r3, #24]
 80003b2:	e005      	b.n	80003c0 <command+0x48>
    } else {
      control_pins->BRR = GPIO_Pin[i];
 80003b4:	4a20      	ldr	r2, [pc, #128]	; (8000438 <command+0xc0>)
 80003b6:	697b      	ldr	r3, [r7, #20]
 80003b8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80003bc:	4b1d      	ldr	r3, [pc, #116]	; (8000434 <command+0xbc>)
 80003be:	629a      	str	r2, [r3, #40]	; 0x28
  for (int i = 0; i < 4; i++) {  //loop through data bus and turn on or off
 80003c0:	697b      	ldr	r3, [r7, #20]
 80003c2:	3301      	adds	r3, #1
 80003c4:	617b      	str	r3, [r7, #20]
 80003c6:	697b      	ldr	r3, [r7, #20]
 80003c8:	2b03      	cmp	r3, #3
 80003ca:	dde4      	ble.n	8000396 <command+0x1e>
    }
  }

  delay_us(1000);
 80003cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003d0:	f7ff ff0c 	bl	80001ec <delay_us>
  Nybble(); // Send pulse
 80003d4:	f7ff ffb6 	bl	8000344 <Nybble>

  for (int i = 0; i < 4; i++) {
 80003d8:	2300      	movs	r3, #0
 80003da:	613b      	str	r3, [r7, #16]
 80003dc:	e017      	b.n	800040e <command+0x96>
    if ((command >> i) & 0x01) { //loop through data bus and turn on or off
 80003de:	79fa      	ldrb	r2, [r7, #7]
 80003e0:	693b      	ldr	r3, [r7, #16]
 80003e2:	fa42 f303 	asr.w	r3, r2, r3
 80003e6:	f003 0301 	and.w	r3, r3, #1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d006      	beq.n	80003fc <command+0x84>
      control_pins->BSRR = GPIO_Pin[i];
 80003ee:	4a12      	ldr	r2, [pc, #72]	; (8000438 <command+0xc0>)
 80003f0:	693b      	ldr	r3, [r7, #16]
 80003f2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80003f6:	4b0f      	ldr	r3, [pc, #60]	; (8000434 <command+0xbc>)
 80003f8:	619a      	str	r2, [r3, #24]
 80003fa:	e005      	b.n	8000408 <command+0x90>
    } else {
      control_pins->BRR = GPIO_Pin[i];
 80003fc:	4a0e      	ldr	r2, [pc, #56]	; (8000438 <command+0xc0>)
 80003fe:	693b      	ldr	r3, [r7, #16]
 8000400:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000404:	4b0b      	ldr	r3, [pc, #44]	; (8000434 <command+0xbc>)
 8000406:	629a      	str	r2, [r3, #40]	; 0x28
  for (int i = 0; i < 4; i++) {
 8000408:	693b      	ldr	r3, [r7, #16]
 800040a:	3301      	adds	r3, #1
 800040c:	613b      	str	r3, [r7, #16]
 800040e:	693b      	ldr	r3, [r7, #16]
 8000410:	2b03      	cmp	r3, #3
 8000412:	dde4      	ble.n	80003de <command+0x66>
    }
  }
  delay_us(1000);
 8000414:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000418:	f7ff fee8 	bl	80001ec <delay_us>
  Nybble();                                    // Send pulse
 800041c:	f7ff ff92 	bl	8000344 <Nybble>
  control_pins->ODR &= ~((D4 | D5 | D6 | D7)); // Clears registers
 8000420:	4b04      	ldr	r3, [pc, #16]	; (8000434 <command+0xbc>)
 8000422:	695b      	ldr	r3, [r3, #20]
 8000424:	4a03      	ldr	r2, [pc, #12]	; (8000434 <command+0xbc>)
 8000426:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800042a:	6153      	str	r3, [r2, #20]
}
 800042c:	bf00      	nop
 800042e:	3718      	adds	r7, #24
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	48001000 	.word	0x48001000
 8000438:	20000000 	.word	0x20000000

0800043c <write>:

void write(char letter) {  //write 1 character on the LCD display
 800043c:	b580      	push	{r7, lr}
 800043e:	b086      	sub	sp, #24
 8000440:	af00      	add	r7, sp, #0
 8000442:	4603      	mov	r3, r0
 8000444:	71fb      	strb	r3, [r7, #7]
  uint8_t c = letter;
 8000446:	79fb      	ldrb	r3, [r7, #7]
 8000448:	73fb      	strb	r3, [r7, #15]
  uint8_t c2 = c >> 4;
 800044a:	7bfb      	ldrb	r3, [r7, #15]
 800044c:	091b      	lsrs	r3, r3, #4
 800044e:	73bb      	strb	r3, [r7, #14]
  control_pins->BSRR = (RS); // set RS on
 8000450:	4b30      	ldr	r3, [pc, #192]	; (8000514 <write+0xd8>)
 8000452:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000456:	619a      	str	r2, [r3, #24]
  control_pins->BRR = (RW);  // set RW off
 8000458:	4b2e      	ldr	r3, [pc, #184]	; (8000514 <write+0xd8>)
 800045a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800045e:	629a      	str	r2, [r3, #40]	; 0x28
  for (int i = 0; i < 4; i++) { //loop through data bus and turn on or off
 8000460:	2300      	movs	r3, #0
 8000462:	617b      	str	r3, [r7, #20]
 8000464:	e017      	b.n	8000496 <write+0x5a>
    if ((c2 >> i) & 0x01) {
 8000466:	7bba      	ldrb	r2, [r7, #14]
 8000468:	697b      	ldr	r3, [r7, #20]
 800046a:	fa42 f303 	asr.w	r3, r2, r3
 800046e:	f003 0301 	and.w	r3, r3, #1
 8000472:	2b00      	cmp	r3, #0
 8000474:	d006      	beq.n	8000484 <write+0x48>
      control_pins->BSRR = GPIO_Pin[i];
 8000476:	4a28      	ldr	r2, [pc, #160]	; (8000518 <write+0xdc>)
 8000478:	697b      	ldr	r3, [r7, #20]
 800047a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800047e:	4b25      	ldr	r3, [pc, #148]	; (8000514 <write+0xd8>)
 8000480:	619a      	str	r2, [r3, #24]
 8000482:	e005      	b.n	8000490 <write+0x54>
    } else {
      control_pins->BRR = GPIO_Pin[i];
 8000484:	4a24      	ldr	r2, [pc, #144]	; (8000518 <write+0xdc>)
 8000486:	697b      	ldr	r3, [r7, #20]
 8000488:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800048c:	4b21      	ldr	r3, [pc, #132]	; (8000514 <write+0xd8>)
 800048e:	629a      	str	r2, [r3, #40]	; 0x28
  for (int i = 0; i < 4; i++) { //loop through data bus and turn on or off
 8000490:	697b      	ldr	r3, [r7, #20]
 8000492:	3301      	adds	r3, #1
 8000494:	617b      	str	r3, [r7, #20]
 8000496:	697b      	ldr	r3, [r7, #20]
 8000498:	2b03      	cmp	r3, #3
 800049a:	dde4      	ble.n	8000466 <write+0x2a>
    }
  }

  delay_us(1000);
 800049c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004a0:	f7ff fea4 	bl	80001ec <delay_us>
  Nybble(); //send pulse
 80004a4:	f7ff ff4e 	bl	8000344 <Nybble>

  for (int i = 0; i < 4; i++) { //loop through data bus and turn on or off
 80004a8:	2300      	movs	r3, #0
 80004aa:	613b      	str	r3, [r7, #16]
 80004ac:	e017      	b.n	80004de <write+0xa2>
    if ((c >> i) & 0x01) {
 80004ae:	7bfa      	ldrb	r2, [r7, #15]
 80004b0:	693b      	ldr	r3, [r7, #16]
 80004b2:	fa42 f303 	asr.w	r3, r2, r3
 80004b6:	f003 0301 	and.w	r3, r3, #1
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d006      	beq.n	80004cc <write+0x90>
      control_pins->BSRR = GPIO_Pin[i];
 80004be:	4a16      	ldr	r2, [pc, #88]	; (8000518 <write+0xdc>)
 80004c0:	693b      	ldr	r3, [r7, #16]
 80004c2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80004c6:	4b13      	ldr	r3, [pc, #76]	; (8000514 <write+0xd8>)
 80004c8:	619a      	str	r2, [r3, #24]
 80004ca:	e005      	b.n	80004d8 <write+0x9c>
    } else {
      control_pins->BRR = GPIO_Pin[i];
 80004cc:	4a12      	ldr	r2, [pc, #72]	; (8000518 <write+0xdc>)
 80004ce:	693b      	ldr	r3, [r7, #16]
 80004d0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80004d4:	4b0f      	ldr	r3, [pc, #60]	; (8000514 <write+0xd8>)
 80004d6:	629a      	str	r2, [r3, #40]	; 0x28
  for (int i = 0; i < 4; i++) { //loop through data bus and turn on or off
 80004d8:	693b      	ldr	r3, [r7, #16]
 80004da:	3301      	adds	r3, #1
 80004dc:	613b      	str	r3, [r7, #16]
 80004de:	693b      	ldr	r3, [r7, #16]
 80004e0:	2b03      	cmp	r3, #3
 80004e2:	dde4      	ble.n	80004ae <write+0x72>
    }
  }
  delay_us(1000);
 80004e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004e8:	f7ff fe80 	bl	80001ec <delay_us>
  Nybble(); //send pulse
 80004ec:	f7ff ff2a 	bl	8000344 <Nybble>
  control_pins->BRR = (RS);                    // set RS back to zero
 80004f0:	4b08      	ldr	r3, [pc, #32]	; (8000514 <write+0xd8>)
 80004f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004f6:	629a      	str	r2, [r3, #40]	; 0x28
  control_pins->ODR &= ~((D4 | D5 | D6 | D7)); // Clears registers
 80004f8:	4b06      	ldr	r3, [pc, #24]	; (8000514 <write+0xd8>)
 80004fa:	695b      	ldr	r3, [r3, #20]
 80004fc:	4a05      	ldr	r2, [pc, #20]	; (8000514 <write+0xd8>)
 80004fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000502:	6153      	str	r3, [r2, #20]
  delay_us(100);
 8000504:	2064      	movs	r0, #100	; 0x64
 8000506:	f7ff fe71 	bl	80001ec <delay_us>
}
 800050a:	bf00      	nop
 800050c:	3718      	adds	r7, #24
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	48001000 	.word	0x48001000
 8000518:	20000000 	.word	0x20000000

0800051c <lcd_set_cursor_position>:

void lcd_set_cursor_position(uint8_t row, uint8_t col) {
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
 8000522:	4603      	mov	r3, r0
 8000524:	460a      	mov	r2, r1
 8000526:	71fb      	strb	r3, [r7, #7]
 8000528:	4613      	mov	r3, r2
 800052a:	71bb      	strb	r3, [r7, #6]
  uint8_t address;

  // Calculate the address based on row and col values
  if (row == 0) {
 800052c:	79fb      	ldrb	r3, [r7, #7]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d103      	bne.n	800053a <lcd_set_cursor_position+0x1e>
    address = 0x80 + col; // For row 0, the address starts from 0x80
 8000532:	79bb      	ldrb	r3, [r7, #6]
 8000534:	3b80      	subs	r3, #128	; 0x80
 8000536:	73fb      	strb	r3, [r7, #15]
 8000538:	e002      	b.n	8000540 <lcd_set_cursor_position+0x24>
  } else {
    address = 0xC0 + col; // For row 1, the address starts from 0xC0
 800053a:	79bb      	ldrb	r3, [r7, #6]
 800053c:	3b40      	subs	r3, #64	; 0x40
 800053e:	73fb      	strb	r3, [r7, #15]
  }

  // Send the command to set the cursor position
  command(address);
 8000540:	7bfb      	ldrb	r3, [r7, #15]
 8000542:	4618      	mov	r0, r3
 8000544:	f7ff ff18 	bl	8000378 <command>
}
 8000548:	bf00      	nop
 800054a:	3710      	adds	r7, #16
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}

08000550 <str_write>:

void str_write(const char *str) { //writes a character array to LCD
 8000550:	b580      	push	{r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  for (int i = 0; str[i] != '\0'; i++) {
 8000558:	2300      	movs	r3, #0
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	e00c      	b.n	8000578 <str_write+0x28>
    write(str[i]);
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	687a      	ldr	r2, [r7, #4]
 8000562:	4413      	add	r3, r2
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	4618      	mov	r0, r3
 8000568:	f7ff ff68 	bl	800043c <write>
    delay_us(100);
 800056c:	2064      	movs	r0, #100	; 0x64
 800056e:	f7ff fe3d 	bl	80001ec <delay_us>
  for (int i = 0; str[i] != '\0'; i++) {
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	3301      	adds	r3, #1
 8000576:	60fb      	str	r3, [r7, #12]
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	687a      	ldr	r2, [r7, #4]
 800057c:	4413      	add	r3, r2
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d1ec      	bne.n	800055e <str_write+0xe>
  }
	delay_us(100);
 8000584:	2064      	movs	r0, #100	; 0x64
 8000586:	f7ff fe31 	bl	80001ec <delay_us>
}
 800058a:	bf00      	nop
 800058c:	3710      	adds	r7, #16
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
	...

08000594 <main>:
static char errorbuffer[ERROR_BUFFER_SIZE];
static int index0 = 0;
static int bufferLength = 0;
uint8_t ConfirmationCode = 0;

int main(void) {
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0

	HAL_Init();
 8000598:	f000 fbef 	bl	8000d7a <HAL_Init>
	SystemClock_Config();
 800059c:	f000 fa10 	bl	80009c0 <SystemClock_Config>
	LPUART_init();
 80005a0:	f000 faba 	bl	8000b18 <LPUART_init>
	LCD_init();
 80005a4:	f7ff fe7a 	bl	800029c <LCD_init>
	command(0x0C);
 80005a8:	200c      	movs	r0, #12
 80005aa:	f7ff fee5 	bl	8000378 <command>

	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;  // GPIOC clock init
 80005ae:	4b3a      	ldr	r3, [pc, #232]	; (8000698 <main+0x104>)
 80005b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b2:	4a39      	ldr	r2, [pc, #228]	; (8000698 <main+0x104>)
 80005b4:	f043 0304 	orr.w	r3, r3, #4
 80005b8:	64d3      	str	r3, [r2, #76]	; 0x4c
	GPIOC->MODER &= ~(GPIO_MODER_MODE13); // button init
 80005ba:	4b38      	ldr	r3, [pc, #224]	; (800069c <main+0x108>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a37      	ldr	r2, [pc, #220]	; (800069c <main+0x108>)
 80005c0:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80005c4:	6013      	str	r3, [r2, #0]
	GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPD13_1);
 80005c6:	4b35      	ldr	r3, [pc, #212]	; (800069c <main+0x108>)
 80005c8:	68db      	ldr	r3, [r3, #12]
 80005ca:	4a34      	ldr	r2, [pc, #208]	; (800069c <main+0x108>)
 80005cc:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80005d0:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR |= (GPIO_PUPDR_PUPD13_1);
 80005d2:	4b32      	ldr	r3, [pc, #200]	; (800069c <main+0x108>)
 80005d4:	68db      	ldr	r3, [r3, #12]
 80005d6:	4a31      	ldr	r2, [pc, #196]	; (800069c <main+0x108>)
 80005d8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80005dc:	60d3      	str	r3, [r2, #12]
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;  // GPIOB clock init
 80005de:	4b2e      	ldr	r3, [pc, #184]	; (8000698 <main+0x104>)
 80005e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e2:	4a2d      	ldr	r2, [pc, #180]	; (8000698 <main+0x104>)
 80005e4:	f043 0302 	orr.w	r3, r3, #2
 80005e8:	64d3      	str	r3, [r2, #76]	; 0x4c
	GPIOB->MODER &= ~(GPIO_MODER_MODE7);  // LD2 clear
 80005ea:	4b2d      	ldr	r3, [pc, #180]	; (80006a0 <main+0x10c>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a2c      	ldr	r2, [pc, #176]	; (80006a0 <main+0x10c>)
 80005f0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005f4:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (GPIO_MODER_MODE7_0); // LD2 output mode
 80005f6:	4b2a      	ldr	r3, [pc, #168]	; (80006a0 <main+0x10c>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4a29      	ldr	r2, [pc, #164]	; (80006a0 <main+0x10c>)
 80005fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000600:	6013      	str	r3, [r2, #0]

	delay_us(100);
 8000602:	2064      	movs	r0, #100	; 0x64
 8000604:	f7ff fdf2 	bl	80001ec <delay_us>
	USART_init();
 8000608:	f000 faf8 	bl	8000bfc <USART_init>
	delay_us(100);
 800060c:	2064      	movs	r0, #100	; 0x64
 800060e:	f7ff fded 	bl	80001ec <delay_us>
	lcd_set_cursor_position(1, 0); // set cursor to second row, first column
 8000612:	2100      	movs	r1, #0
 8000614:	2001      	movs	r0, #1
 8000616:	f7ff ff81 	bl	800051c <lcd_set_cursor_position>
	delay_us(100);
 800061a:	2064      	movs	r0, #100	; 0x64
 800061c:	f7ff fde6 	bl	80001ec <delay_us>
//	str_write("Put fngr on sens");

	//Fingerprint initialization
	handshake();
 8000620:	f7ff fe12 	bl	8000248 <handshake>



		//=--------------WILLIE POGGIE ATTRIBUTION
//		USART_print("Hello");
		if (flag) {
 8000624:	4b1f      	ldr	r3, [pc, #124]	; (80006a4 <main+0x110>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d017      	beq.n	800065c <main+0xc8>
			delay_us(10000);
 800062c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000630:	f7ff fddc 	bl	80001ec <delay_us>
			flag = 0;
 8000634:	4b1b      	ldr	r3, [pc, #108]	; (80006a4 <main+0x110>)
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
			str_write("Welcome ");
 800063a:	481b      	ldr	r0, [pc, #108]	; (80006a8 <main+0x114>)
 800063c:	f7ff ff88 	bl	8000550 <str_write>
			str_write(buffer);  // process the string
 8000640:	481a      	ldr	r0, [pc, #104]	; (80006ac <main+0x118>)
 8000642:	f7ff ff85 	bl	8000550 <str_write>

			lcd_set_cursor_position(1, 0); // set cursor to second row, first column
 8000646:	2100      	movs	r1, #0
 8000648:	2001      	movs	r0, #1
 800064a:	f7ff ff67 	bl	800051c <lcd_set_cursor_position>
			str_write("Put fngr on sens");
 800064e:	4818      	ldr	r0, [pc, #96]	; (80006b0 <main+0x11c>)
 8000650:	f7ff ff7e 	bl	8000550 <str_write>
			lcd_set_cursor_position(0, 0); // set cursor to second row, first column
 8000654:	2100      	movs	r1, #0
 8000656:	2000      	movs	r0, #0
 8000658:	f7ff ff60 	bl	800051c <lcd_set_cursor_position>
		}
		if (GPIOC->IDR & GPIO_IDR_ID13) { // Check if the button is pressed
 800065c:	4b0f      	ldr	r3, [pc, #60]	; (800069c <main+0x108>)
 800065e:	691b      	ldr	r3, [r3, #16]
 8000660:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000664:	2b00      	cmp	r3, #0
 8000666:	d013      	beq.n	8000690 <main+0xfc>
			GPIOB->BSRR = GPIO_PIN_7;
 8000668:	4b0d      	ldr	r3, [pc, #52]	; (80006a0 <main+0x10c>)
 800066a:	2280      	movs	r2, #128	; 0x80
 800066c:	619a      	str	r2, [r3, #24]
			delay_us(10000);
 800066e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000672:	f7ff fdbb 	bl	80001ec <delay_us>
			while (!(LPUART1->ISR & USART_ISR_TXE));
 8000676:	bf00      	nop
 8000678:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <main+0x120>)
 800067a:	69db      	ldr	r3, [r3, #28]
 800067c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000680:	2b00      	cmp	r3, #0
 8000682:	d0f9      	beq.n	8000678 <main+0xe4>
			LPUART_Print("WILSON\n");
 8000684:	480c      	ldr	r0, [pc, #48]	; (80006b8 <main+0x124>)
 8000686:	f000 fb33 	bl	8000cf0 <LPUART_Print>
			delay_us(1000000);
 800068a:	480c      	ldr	r0, [pc, #48]	; (80006bc <main+0x128>)
 800068c:	f7ff fdae 	bl	80001ec <delay_us>
		}
		GPIOB->BRR = GPIO_PIN_7;
 8000690:	4b03      	ldr	r3, [pc, #12]	; (80006a0 <main+0x10c>)
 8000692:	2280      	movs	r2, #128	; 0x80
 8000694:	629a      	str	r2, [r3, #40]	; 0x28
		if (flag) {
 8000696:	e7c5      	b.n	8000624 <main+0x90>
 8000698:	40021000 	.word	0x40021000
 800069c:	48000800 	.word	0x48000800
 80006a0:	48000400 	.word	0x48000400
 80006a4:	20000134 	.word	0x20000134
 80006a8:	08001dc0 	.word	0x08001dc0
 80006ac:	20000030 	.word	0x20000030
 80006b0:	08001dcc 	.word	0x08001dcc
 80006b4:	40008000 	.word	0x40008000
 80006b8:	08001de0 	.word	0x08001de0
 80006bc:	000f4240 	.word	0x000f4240

080006c0 <LPUART1_IRQHandler>:

	}
}

void LPUART1_IRQHandler(void) {
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
	if (LPUART1->ISR & USART_ISR_RXNE) { // check if there is new data in the UART receiver
 80006c6:	4b1f      	ldr	r3, [pc, #124]	; (8000744 <LPUART1_IRQHandler+0x84>)
 80006c8:	69db      	ldr	r3, [r3, #28]
 80006ca:	f003 0320 	and.w	r3, r3, #32
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d031      	beq.n	8000736 <LPUART1_IRQHandler+0x76>
		GPIOB->BSRR = GPIO_PIN_7;
 80006d2:	4b1d      	ldr	r3, [pc, #116]	; (8000748 <LPUART1_IRQHandler+0x88>)
 80006d4:	2280      	movs	r2, #128	; 0x80
 80006d6:	619a      	str	r2, [r3, #24]

		char charRecv = LPUART1->RDR;  // read the received character
 80006d8:	4b1a      	ldr	r3, [pc, #104]	; (8000744 <LPUART1_IRQHandler+0x84>)
 80006da:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80006dc:	b29b      	uxth	r3, r3
 80006de:	71fb      	strb	r3, [r7, #7]
		buffer[index] = charRecv;
 80006e0:	4b1a      	ldr	r3, [pc, #104]	; (800074c <LPUART1_IRQHandler+0x8c>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	491a      	ldr	r1, [pc, #104]	; (8000750 <LPUART1_IRQHandler+0x90>)
 80006e6:	79fa      	ldrb	r2, [r7, #7]
 80006e8:	54ca      	strb	r2, [r1, r3]
		index++;
 80006ea:	4b18      	ldr	r3, [pc, #96]	; (800074c <LPUART1_IRQHandler+0x8c>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	3301      	adds	r3, #1
 80006f0:	4a16      	ldr	r2, [pc, #88]	; (800074c <LPUART1_IRQHandler+0x8c>)
 80006f2:	6013      	str	r3, [r2, #0]

		if (charRecv == '\n') {
 80006f4:	79fb      	ldrb	r3, [r7, #7]
 80006f6:	2b0a      	cmp	r3, #10
 80006f8:	d10f      	bne.n	800071a <LPUART1_IRQHandler+0x5a>
			flag = 1;
 80006fa:	4b16      	ldr	r3, [pc, #88]	; (8000754 <LPUART1_IRQHandler+0x94>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	601a      	str	r2, [r3, #0]
			index--;
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <LPUART1_IRQHandler+0x8c>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	3b01      	subs	r3, #1
 8000706:	4a11      	ldr	r2, [pc, #68]	; (800074c <LPUART1_IRQHandler+0x8c>)
 8000708:	6013      	str	r3, [r2, #0]
			buffer[index] = '\0';
 800070a:	4b10      	ldr	r3, [pc, #64]	; (800074c <LPUART1_IRQHandler+0x8c>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4a10      	ldr	r2, [pc, #64]	; (8000750 <LPUART1_IRQHandler+0x90>)
 8000710:	2100      	movs	r1, #0
 8000712:	54d1      	strb	r1, [r2, r3]
			index = 0;
 8000714:	4b0d      	ldr	r3, [pc, #52]	; (800074c <LPUART1_IRQHandler+0x8c>)
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
		}
		while (!(LPUART1->ISR & USART_ISR_TXE))
 800071a:	bf00      	nop
 800071c:	4b09      	ldr	r3, [pc, #36]	; (8000744 <LPUART1_IRQHandler+0x84>)
 800071e:	69db      	ldr	r3, [r3, #28]
 8000720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000724:	2b00      	cmp	r3, #0
 8000726:	d0f9      	beq.n	800071c <LPUART1_IRQHandler+0x5c>
			;  // wait for empty TX buffer
		LPUART1->TDR = charRecv; // send received character
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <LPUART1_IRQHandler+0x84>)
 800072a:	79fa      	ldrb	r2, [r7, #7]
 800072c:	b292      	uxth	r2, r2
 800072e:	851a      	strh	r2, [r3, #40]	; 0x28

		GPIOB->BRR = GPIO_PIN_7;
 8000730:	4b05      	ldr	r3, [pc, #20]	; (8000748 <LPUART1_IRQHandler+0x88>)
 8000732:	2280      	movs	r2, #128	; 0x80
 8000734:	629a      	str	r2, [r3, #40]	; 0x28
	}
}
 8000736:	bf00      	nop
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	40008000 	.word	0x40008000
 8000748:	48000400 	.word	0x48000400
 800074c:	20000130 	.word	0x20000130
 8000750:	20000030 	.word	0x20000030
 8000754:	20000134 	.word	0x20000134

08000758 <USART2_IRQHandler>:
//        lcd_set_cursor_position(1,0);
//        write(bufferLength + '0');
//    }
// }

void USART2_IRQHandler(void) { //[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27]
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
    if (USART2->ISR & USART_ISR_RXNE) { // check if there is new data in the UART receiver
 800075e:	4b22      	ldr	r3, [pc, #136]	; (80007e8 <USART2_IRQHandler+0x90>)
 8000760:	69db      	ldr	r3, [r3, #28]
 8000762:	f003 0320 	and.w	r3, r3, #32
 8000766:	2b00      	cmp	r3, #0
 8000768:	d03a      	beq.n	80007e0 <USART2_IRQHandler+0x88>
        char charRecv = USART2->RDR;    // read the received character
 800076a:	4b1f      	ldr	r3, [pc, #124]	; (80007e8 <USART2_IRQHandler+0x90>)
 800076c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800076e:	b29b      	uxth	r3, r3
 8000770:	70fb      	strb	r3, [r7, #3]
        errorbuffer[index0] = charRecv; //buffer must be global variable
 8000772:	4b1e      	ldr	r3, [pc, #120]	; (80007ec <USART2_IRQHandler+0x94>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	491e      	ldr	r1, [pc, #120]	; (80007f0 <USART2_IRQHandler+0x98>)
 8000778:	78fa      	ldrb	r2, [r7, #3]
 800077a:	54ca      	strb	r2, [r1, r3]
        index0++;                  //index must be global variable
 800077c:	4b1b      	ldr	r3, [pc, #108]	; (80007ec <USART2_IRQHandler+0x94>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	3301      	adds	r3, #1
 8000782:	4a1a      	ldr	r2, [pc, #104]	; (80007ec <USART2_IRQHandler+0x94>)
 8000784:	6013      	str	r3, [r2, #0]
        bufferLength++;			   //buffer length must be global variable
 8000786:	4b1b      	ldr	r3, [pc, #108]	; (80007f4 <USART2_IRQHandler+0x9c>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	3301      	adds	r3, #1
 800078c:	4a19      	ldr	r2, [pc, #100]	; (80007f4 <USART2_IRQHandler+0x9c>)
 800078e:	6013      	str	r3, [r2, #0]

        lcd_set_cursor_position(1,0);
 8000790:	2100      	movs	r1, #0
 8000792:	2001      	movs	r0, #1
 8000794:	f7ff fec2 	bl	800051c <lcd_set_cursor_position>
        write(index0 + '0');
 8000798:	4b14      	ldr	r3, [pc, #80]	; (80007ec <USART2_IRQHandler+0x94>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	3330      	adds	r3, #48	; 0x30
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff fe4c 	bl	800043c <write>

        if(bufferLength == ERROR_BUFFER_SIZE){
 80007a4:	4b13      	ldr	r3, [pc, #76]	; (80007f4 <USART2_IRQHandler+0x9c>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	2b1c      	cmp	r3, #28
 80007aa:	d119      	bne.n	80007e0 <USART2_IRQHandler+0x88>
			ConfirmationCode = errorbuffer[9];    //must be global variable
 80007ac:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <USART2_IRQHandler+0x98>)
 80007ae:	7a5a      	ldrb	r2, [r3, #9]
 80007b0:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <USART2_IRQHandler+0xa0>)
 80007b2:	701a      	strb	r2, [r3, #0]
//			lcd_set_cursor_position(1,5);
//			str_write("yay");
			FingerprintErrorHandler();
 80007b4:	f000 f822 	bl	80007fc <FingerprintErrorHandler>
			bufferLength = 0;
 80007b8:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <USART2_IRQHandler+0x9c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
			index0 = 0;
 80007be:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <USART2_IRQHandler+0x94>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
			for (int i = 0;i<ERROR_BUFFER_SIZE ;i++){   //clear buffer
 80007c4:	2300      	movs	r3, #0
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	e007      	b.n	80007da <USART2_IRQHandler+0x82>
				errorbuffer[i] = 0;
 80007ca:	4a09      	ldr	r2, [pc, #36]	; (80007f0 <USART2_IRQHandler+0x98>)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4413      	add	r3, r2
 80007d0:	2200      	movs	r2, #0
 80007d2:	701a      	strb	r2, [r3, #0]
			for (int i = 0;i<ERROR_BUFFER_SIZE ;i++){   //clear buffer
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	3301      	adds	r3, #1
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2b1b      	cmp	r3, #27
 80007de:	ddf4      	ble.n	80007ca <USART2_IRQHandler+0x72>
          }
        }
    }
 }
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40004400 	.word	0x40004400
 80007ec:	20000154 	.word	0x20000154
 80007f0:	20000138 	.word	0x20000138
 80007f4:	20000158 	.word	0x20000158
 80007f8:	2000015c 	.word	0x2000015c

080007fc <FingerprintErrorHandler>:



void FingerprintErrorHandler(void){
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
lcd_set_cursor_position(0,0);
 8000800:	2100      	movs	r1, #0
 8000802:	2000      	movs	r0, #0
 8000804:	f7ff fe8a 	bl	800051c <lcd_set_cursor_position>
//16 characters per line
	if (ConfirmationCode==0x00){
 8000808:	4b56      	ldr	r3, [pc, #344]	; (8000964 <FingerprintErrorHandler+0x168>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d103      	bne.n	8000818 <FingerprintErrorHandler+0x1c>
		str_write("command successful");
 8000810:	4855      	ldr	r0, [pc, #340]	; (8000968 <FingerprintErrorHandler+0x16c>)
 8000812:	f7ff fe9d 	bl	8000550 <str_write>
	else if (ConfirmationCode==0x09){
		str_write("no match in");
		lcd_set_cursor_position(1,0);
		str_write("library");
	}
}
 8000816:	e0a3      	b.n	8000960 <FingerprintErrorHandler+0x164>
	else if (ConfirmationCode==0x01){
 8000818:	4b52      	ldr	r3, [pc, #328]	; (8000964 <FingerprintErrorHandler+0x168>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b01      	cmp	r3, #1
 800081e:	d10a      	bne.n	8000836 <FingerprintErrorHandler+0x3a>
		str_write("error receiving");
 8000820:	4852      	ldr	r0, [pc, #328]	; (800096c <FingerprintErrorHandler+0x170>)
 8000822:	f7ff fe95 	bl	8000550 <str_write>
		lcd_set_cursor_position(1,0);
 8000826:	2100      	movs	r1, #0
 8000828:	2001      	movs	r0, #1
 800082a:	f7ff fe77 	bl	800051c <lcd_set_cursor_position>
		str_write("or storing data");
 800082e:	4850      	ldr	r0, [pc, #320]	; (8000970 <FingerprintErrorHandler+0x174>)
 8000830:	f7ff fe8e 	bl	8000550 <str_write>
}
 8000834:	e094      	b.n	8000960 <FingerprintErrorHandler+0x164>
	else if (ConfirmationCode==0x0A){
 8000836:	4b4b      	ldr	r3, [pc, #300]	; (8000964 <FingerprintErrorHandler+0x168>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	2b0a      	cmp	r3, #10
 800083c:	d10a      	bne.n	8000854 <FingerprintErrorHandler+0x58>
		str_write("failure to");
 800083e:	484d      	ldr	r0, [pc, #308]	; (8000974 <FingerprintErrorHandler+0x178>)
 8000840:	f7ff fe86 	bl	8000550 <str_write>
		lcd_set_cursor_position(1,0);
 8000844:	2100      	movs	r1, #0
 8000846:	2001      	movs	r0, #1
 8000848:	f7ff fe68 	bl	800051c <lcd_set_cursor_position>
		str_write("combine data");
 800084c:	484a      	ldr	r0, [pc, #296]	; (8000978 <FingerprintErrorHandler+0x17c>)
 800084e:	f7ff fe7f 	bl	8000550 <str_write>
}
 8000852:	e085      	b.n	8000960 <FingerprintErrorHandler+0x164>
	else if (ConfirmationCode==0x1A){
 8000854:	4b43      	ldr	r3, [pc, #268]	; (8000964 <FingerprintErrorHandler+0x168>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	2b1a      	cmp	r3, #26
 800085a:	d10a      	bne.n	8000872 <FingerprintErrorHandler+0x76>
		str_write("invalid register");
 800085c:	4847      	ldr	r0, [pc, #284]	; (800097c <FingerprintErrorHandler+0x180>)
 800085e:	f7ff fe77 	bl	8000550 <str_write>
		lcd_set_cursor_position(1,0);
 8000862:	2100      	movs	r1, #0
 8000864:	2001      	movs	r0, #1
 8000866:	f7ff fe59 	bl	800051c <lcd_set_cursor_position>
		str_write("number");
 800086a:	4845      	ldr	r0, [pc, #276]	; (8000980 <FingerprintErrorHandler+0x184>)
 800086c:	f7ff fe70 	bl	8000550 <str_write>
}
 8000870:	e076      	b.n	8000960 <FingerprintErrorHandler+0x164>
	else if (ConfirmationCode==0x0D){
 8000872:	4b3c      	ldr	r3, [pc, #240]	; (8000964 <FingerprintErrorHandler+0x168>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	2b0d      	cmp	r3, #13
 8000878:	d10a      	bne.n	8000890 <FingerprintErrorHandler+0x94>
		str_write("error uploading");
 800087a:	4842      	ldr	r0, [pc, #264]	; (8000984 <FingerprintErrorHandler+0x188>)
 800087c:	f7ff fe68 	bl	8000550 <str_write>
		lcd_set_cursor_position(1,0);
 8000880:	2100      	movs	r1, #0
 8000882:	2001      	movs	r0, #1
 8000884:	f7ff fe4a 	bl	800051c <lcd_set_cursor_position>
		str_write("fingerprint");
 8000888:	483f      	ldr	r0, [pc, #252]	; (8000988 <FingerprintErrorHandler+0x18c>)
 800088a:	f7ff fe61 	bl	8000550 <str_write>
}
 800088e:	e067      	b.n	8000960 <FingerprintErrorHandler+0x164>
	else if (ConfirmationCode==0x1D){
 8000890:	4b34      	ldr	r3, [pc, #208]	; (8000964 <FingerprintErrorHandler+0x168>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	2b1d      	cmp	r3, #29
 8000896:	d10a      	bne.n	80008ae <FingerprintErrorHandler+0xb2>
		str_write("failure to operate");
 8000898:	483c      	ldr	r0, [pc, #240]	; (800098c <FingerprintErrorHandler+0x190>)
 800089a:	f7ff fe59 	bl	8000550 <str_write>
		lcd_set_cursor_position(1,0);
 800089e:	2100      	movs	r1, #0
 80008a0:	2001      	movs	r0, #1
 80008a2:	f7ff fe3b 	bl	800051c <lcd_set_cursor_position>
		str_write("communication port");
 80008a6:	483a      	ldr	r0, [pc, #232]	; (8000990 <FingerprintErrorHandler+0x194>)
 80008a8:	f7ff fe52 	bl	8000550 <str_write>
}
 80008ac:	e058      	b.n	8000960 <FingerprintErrorHandler+0x164>
	else if (ConfirmationCode==0x0B){
 80008ae:	4b2d      	ldr	r3, [pc, #180]	; (8000964 <FingerprintErrorHandler+0x168>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	2b0b      	cmp	r3, #11
 80008b4:	d10a      	bne.n	80008cc <FingerprintErrorHandler+0xd0>
		str_write("addressing PageID");
 80008b6:	4837      	ldr	r0, [pc, #220]	; (8000994 <FingerprintErrorHandler+0x198>)
 80008b8:	f7ff fe4a 	bl	8000550 <str_write>
		lcd_set_cursor_position(1,0);
 80008bc:	2100      	movs	r1, #0
 80008be:	2001      	movs	r0, #1
 80008c0:	f7ff fe2c 	bl	800051c <lcd_set_cursor_position>
		str_write("beyond finger library");
 80008c4:	4834      	ldr	r0, [pc, #208]	; (8000998 <FingerprintErrorHandler+0x19c>)
 80008c6:	f7ff fe43 	bl	8000550 <str_write>
}
 80008ca:	e049      	b.n	8000960 <FingerprintErrorHandler+0x164>
	else if (ConfirmationCode==0x18){
 80008cc:	4b25      	ldr	r3, [pc, #148]	; (8000964 <FingerprintErrorHandler+0x168>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b18      	cmp	r3, #24
 80008d2:	d10a      	bne.n	80008ea <FingerprintErrorHandler+0xee>
		str_write("error when writing");
 80008d4:	4831      	ldr	r0, [pc, #196]	; (800099c <FingerprintErrorHandler+0x1a0>)
 80008d6:	f7ff fe3b 	bl	8000550 <str_write>
		lcd_set_cursor_position(1,0);
 80008da:	2100      	movs	r1, #0
 80008dc:	2001      	movs	r0, #1
 80008de:	f7ff fe1d 	bl	800051c <lcd_set_cursor_position>
		str_write("flash");
 80008e2:	482f      	ldr	r0, [pc, #188]	; (80009a0 <FingerprintErrorHandler+0x1a4>)
 80008e4:	f7ff fe34 	bl	8000550 <str_write>
}
 80008e8:	e03a      	b.n	8000960 <FingerprintErrorHandler+0x164>
	else if (ConfirmationCode==0x0C){
 80008ea:	4b1e      	ldr	r3, [pc, #120]	; (8000964 <FingerprintErrorHandler+0x168>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	2b0c      	cmp	r3, #12
 80008f0:	d10a      	bne.n	8000908 <FingerprintErrorHandler+0x10c>
		str_write("error reading template");
 80008f2:	482c      	ldr	r0, [pc, #176]	; (80009a4 <FingerprintErrorHandler+0x1a8>)
 80008f4:	f7ff fe2c 	bl	8000550 <str_write>
		lcd_set_cursor_position(1,0);
 80008f8:	2100      	movs	r1, #0
 80008fa:	2001      	movs	r0, #1
 80008fc:	f7ff fe0e 	bl	800051c <lcd_set_cursor_position>
		str_write("from lib or template invalid");
 8000900:	4829      	ldr	r0, [pc, #164]	; (80009a8 <FingerprintErrorHandler+0x1ac>)
 8000902:	f7ff fe25 	bl	8000550 <str_write>
}
 8000906:	e02b      	b.n	8000960 <FingerprintErrorHandler+0x164>
	else if (ConfirmationCode==0x11){
 8000908:	4b16      	ldr	r3, [pc, #88]	; (8000964 <FingerprintErrorHandler+0x168>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b11      	cmp	r3, #17
 800090e:	d10a      	bne.n	8000926 <FingerprintErrorHandler+0x12a>
		str_write("failure to clear");
 8000910:	4826      	ldr	r0, [pc, #152]	; (80009ac <FingerprintErrorHandler+0x1b0>)
 8000912:	f7ff fe1d 	bl	8000550 <str_write>
		lcd_set_cursor_position(1,0);
 8000916:	2100      	movs	r1, #0
 8000918:	2001      	movs	r0, #1
 800091a:	f7ff fdff 	bl	800051c <lcd_set_cursor_position>
		str_write("library");
 800091e:	4824      	ldr	r0, [pc, #144]	; (80009b0 <FingerprintErrorHandler+0x1b4>)
 8000920:	f7ff fe16 	bl	8000550 <str_write>
}
 8000924:	e01c      	b.n	8000960 <FingerprintErrorHandler+0x164>
	else if (ConfirmationCode==0x08){
 8000926:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <FingerprintErrorHandler+0x168>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	2b08      	cmp	r3, #8
 800092c:	d10a      	bne.n	8000944 <FingerprintErrorHandler+0x148>
		str_write("buffer templates");
 800092e:	4821      	ldr	r0, [pc, #132]	; (80009b4 <FingerprintErrorHandler+0x1b8>)
 8000930:	f7ff fe0e 	bl	8000550 <str_write>
		lcd_set_cursor_position(1,0);
 8000934:	2100      	movs	r1, #0
 8000936:	2001      	movs	r0, #1
 8000938:	f7ff fdf0 	bl	800051c <lcd_set_cursor_position>
		str_write("dont match");
 800093c:	481e      	ldr	r0, [pc, #120]	; (80009b8 <FingerprintErrorHandler+0x1bc>)
 800093e:	f7ff fe07 	bl	8000550 <str_write>
}
 8000942:	e00d      	b.n	8000960 <FingerprintErrorHandler+0x164>
	else if (ConfirmationCode==0x09){
 8000944:	4b07      	ldr	r3, [pc, #28]	; (8000964 <FingerprintErrorHandler+0x168>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2b09      	cmp	r3, #9
 800094a:	d109      	bne.n	8000960 <FingerprintErrorHandler+0x164>
		str_write("no match in");
 800094c:	481b      	ldr	r0, [pc, #108]	; (80009bc <FingerprintErrorHandler+0x1c0>)
 800094e:	f7ff fdff 	bl	8000550 <str_write>
		lcd_set_cursor_position(1,0);
 8000952:	2100      	movs	r1, #0
 8000954:	2001      	movs	r0, #1
 8000956:	f7ff fde1 	bl	800051c <lcd_set_cursor_position>
		str_write("library");
 800095a:	4815      	ldr	r0, [pc, #84]	; (80009b0 <FingerprintErrorHandler+0x1b4>)
 800095c:	f7ff fdf8 	bl	8000550 <str_write>
}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}
 8000964:	2000015c 	.word	0x2000015c
 8000968:	08001de8 	.word	0x08001de8
 800096c:	08001dfc 	.word	0x08001dfc
 8000970:	08001e0c 	.word	0x08001e0c
 8000974:	08001e1c 	.word	0x08001e1c
 8000978:	08001e28 	.word	0x08001e28
 800097c:	08001e38 	.word	0x08001e38
 8000980:	08001e4c 	.word	0x08001e4c
 8000984:	08001e54 	.word	0x08001e54
 8000988:	08001e64 	.word	0x08001e64
 800098c:	08001e70 	.word	0x08001e70
 8000990:	08001e84 	.word	0x08001e84
 8000994:	08001e98 	.word	0x08001e98
 8000998:	08001eac 	.word	0x08001eac
 800099c:	08001ec4 	.word	0x08001ec4
 80009a0:	08001ed8 	.word	0x08001ed8
 80009a4:	08001ee0 	.word	0x08001ee0
 80009a8:	08001ef8 	.word	0x08001ef8
 80009ac:	08001f18 	.word	0x08001f18
 80009b0:	08001f2c 	.word	0x08001f2c
 80009b4:	08001f34 	.word	0x08001f34
 80009b8:	08001f48 	.word	0x08001f48
 80009bc:	08001f54 	.word	0x08001f54

080009c0 <SystemClock_Config>:

void SystemClock_Config(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b096      	sub	sp, #88	; 0x58
 80009c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c6:	f107 0314 	add.w	r3, r7, #20
 80009ca:	2244      	movs	r2, #68	; 0x44
 80009cc:	2100      	movs	r1, #0
 80009ce:	4618      	mov	r0, r3
 80009d0:	f001 f9bc 	bl	8001d4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d4:	463b      	mov	r3, r7
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
 80009dc:	609a      	str	r2, [r3, #8]
 80009de:	60da      	str	r2, [r3, #12]
 80009e0:	611a      	str	r2, [r3, #16]

  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009e2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80009e6:	f000 fb31 	bl	800104c <HAL_PWREx_ControlVoltageScaling>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009f0:	f000 f82c 	bl	8000a4c <Error_Handler>
  }

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80009f4:	2310      	movs	r3, #16
 80009f6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009f8:	2301      	movs	r3, #1
 80009fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80009fc:	2300      	movs	r3, #0
 80009fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000a00:	2360      	movs	r3, #96	; 0x60
 8000a02:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a04:	2300      	movs	r3, #0
 8000a06:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f000 fb73 	bl	80010f8 <HAL_RCC_OscConfig>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000a18:	f000 f818 	bl	8000a4c <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a1c:	230f      	movs	r3, #15
 8000a1e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000a20:	2300      	movs	r3, #0
 8000a22:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a24:	2300      	movs	r3, #0
 8000a26:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a30:	463b      	mov	r3, r7
 8000a32:	2100      	movs	r1, #0
 8000a34:	4618      	mov	r0, r3
 8000a36:	f000 ff79 	bl	800192c <HAL_RCC_ClockConfig>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000a40:	f000 f804 	bl	8000a4c <Error_Handler>
  }
}
 8000a44:	bf00      	nop
 8000a46:	3758      	adds	r7, #88	; 0x58
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <Error_Handler>:

void Error_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a50:	b672      	cpsid	i
}
 8000a52:	bf00      	nop

  __disable_irq();
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <Error_Handler+0x8>
	...

08000a58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5e:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <HAL_MspInit+0x44>)
 8000a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a62:	4a0e      	ldr	r2, [pc, #56]	; (8000a9c <HAL_MspInit+0x44>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6613      	str	r3, [r2, #96]	; 0x60
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <HAL_MspInit+0x44>)
 8000a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a76:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <HAL_MspInit+0x44>)
 8000a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a7a:	4a08      	ldr	r2, [pc, #32]	; (8000a9c <HAL_MspInit+0x44>)
 8000a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a80:	6593      	str	r3, [r2, #88]	; 0x58
 8000a82:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <HAL_MspInit+0x44>)
 8000a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	40021000 	.word	0x40021000

08000aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <NMI_Handler+0x4>

08000aa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <HardFault_Handler+0x4>

08000aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <MemManage_Handler+0x4>

08000ab2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab6:	e7fe      	b.n	8000ab6 <BusFault_Handler+0x4>

08000ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <UsageFault_Handler+0x4>

08000abe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aec:	f000 f99a 	bl	8000e24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000af8:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <SystemInit+0x20>)
 8000afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000afe:	4a05      	ldr	r2, [pc, #20]	; (8000b14 <SystemInit+0x20>)
 8000b00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <LPUART_init>:

#include "main.h"
#include "uart.h"


void LPUART_init() {
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
	PWR->CR2 |= (PWR_CR2_IOSV);             // power avail on PG[15:2] (LPUART1)
 8000b1c:	4b31      	ldr	r3, [pc, #196]	; (8000be4 <LPUART_init+0xcc>)
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	4a30      	ldr	r2, [pc, #192]	; (8000be4 <LPUART_init+0xcc>)
 8000b22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b26:	6053      	str	r3, [r2, #4]
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOGEN);   // enable GPIOG clock
 8000b28:	4b2f      	ldr	r3, [pc, #188]	; (8000be8 <LPUART_init+0xd0>)
 8000b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2c:	4a2e      	ldr	r2, [pc, #184]	; (8000be8 <LPUART_init+0xd0>)
 8000b2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b32:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC->APB1ENR2 |= RCC_APB1ENR2_LPUART1EN; // enable LPUART clock bridge
 8000b34:	4b2c      	ldr	r3, [pc, #176]	; (8000be8 <LPUART_init+0xd0>)
 8000b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b38:	4a2b      	ldr	r2, [pc, #172]	; (8000be8 <LPUART_init+0xd0>)
 8000b3a:	f043 0301 	orr.w	r3, r3, #1
 8000b3e:	65d3      	str	r3, [r2, #92]	; 0x5c
	GPIOG->MODER &= ~(GPIO_MODER_MODE5 | GPIO_MODER_MODE6 | GPIO_MODER_MODE7
 8000b40:	4b2a      	ldr	r3, [pc, #168]	; (8000bec <LPUART_init+0xd4>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a29      	ldr	r2, [pc, #164]	; (8000bec <LPUART_init+0xd4>)
 8000b46:	f423 337f 	bic.w	r3, r3, #261120	; 0x3fc00
 8000b4a:	6013      	str	r3, [r2, #0]
			| GPIO_MODER_MODE8); //clear bits
	GPIOG->MODER |= (GPIO_MODER_MODE5_1 | GPIO_MODER_MODE6_1
 8000b4c:	4b27      	ldr	r3, [pc, #156]	; (8000bec <LPUART_init+0xd4>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a26      	ldr	r2, [pc, #152]	; (8000bec <LPUART_init+0xd4>)
 8000b52:	f443 332a 	orr.w	r3, r3, #174080	; 0x2a800
 8000b56:	6013      	str	r3, [r2, #0]
			| GPIO_MODER_MODE7_1 | GPIO_MODER_MODE8_1); //set bits AF mode
	GPIOG->AFR[0] &= ~((0x000F << GPIO_AFRL_AFSEL5_Pos)
 8000b58:	4b24      	ldr	r3, [pc, #144]	; (8000bec <LPUART_init+0xd4>)
 8000b5a:	6a1b      	ldr	r3, [r3, #32]
 8000b5c:	4a23      	ldr	r2, [pc, #140]	; (8000bec <LPUART_init+0xd4>)
 8000b5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000b62:	6213      	str	r3, [r2, #32]
			| (0x000F << GPIO_AFRL_AFSEL6_Pos)
			| (0x000F << GPIO_AFRL_AFSEL7_Pos));
	GPIOG->AFR[1] &= ~(0x000F << GPIO_AFRH_AFSEL8_Pos); //clear AF
 8000b64:	4b21      	ldr	r3, [pc, #132]	; (8000bec <LPUART_init+0xd4>)
 8000b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b68:	4a20      	ldr	r2, [pc, #128]	; (8000bec <LPUART_init+0xd4>)
 8000b6a:	f023 030f 	bic.w	r3, r3, #15
 8000b6e:	6253      	str	r3, [r2, #36]	; 0x24

	GPIOG->AFR[0] |= ((0x0008 << GPIO_AFRL_AFSEL5_Pos)
 8000b70:	4b1e      	ldr	r3, [pc, #120]	; (8000bec <LPUART_init+0xd4>)
 8000b72:	6a1b      	ldr	r3, [r3, #32]
 8000b74:	4a1d      	ldr	r2, [pc, #116]	; (8000bec <LPUART_init+0xd4>)
 8000b76:	f043 4308 	orr.w	r3, r3, #2281701376	; 0x88000000
 8000b7a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000b7e:	6213      	str	r3, [r2, #32]
			| (0x0008 << GPIO_AFRL_AFSEL6_Pos)
			| (0x0008 << GPIO_AFRL_AFSEL7_Pos));	//set bits AF 8

	GPIOG->AFR[1] |= (0x0008 << GPIO_AFRH_AFSEL8_Pos);
 8000b80:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <LPUART_init+0xd4>)
 8000b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b84:	4a19      	ldr	r2, [pc, #100]	; (8000bec <LPUART_init+0xd4>)
 8000b86:	f043 0308 	orr.w	r3, r3, #8
 8000b8a:	6253      	str	r3, [r2, #36]	; 0x24
	/* USER: configure GPIOG registers MODER/PUPDR/OTYPER/OSPEEDR then
	 select AF mode and specify which function with AFR[0] and AFR[1] */
	LPUART1->CR1 &= ~(USART_CR1_M1 | USART_CR1_M0); // 8-bit data
 8000b8c:	4b18      	ldr	r3, [pc, #96]	; (8000bf0 <LPUART_init+0xd8>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a17      	ldr	r2, [pc, #92]	; (8000bf0 <LPUART_init+0xd8>)
 8000b92:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 8000b96:	6013      	str	r3, [r2, #0]
	LPUART1->CR1 |= USART_CR1_UE;                   // enable LPUART1
 8000b98:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <LPUART_init+0xd8>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a14      	ldr	r2, [pc, #80]	; (8000bf0 <LPUART_init+0xd8>)
 8000b9e:	f043 0301 	orr.w	r3, r3, #1
 8000ba2:	6013      	str	r3, [r2, #0]
	LPUART1->CR1 |= (USART_CR1_TE | USART_CR1_RE);  // enable xmit & recv
 8000ba4:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <LPUART_init+0xd8>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a11      	ldr	r2, [pc, #68]	; (8000bf0 <LPUART_init+0xd8>)
 8000baa:	f043 030c 	orr.w	r3, r3, #12
 8000bae:	6013      	str	r3, [r2, #0]
	LPUART1->CR1 |= USART_CR1_RXNEIE;        // enable LPUART1 recv interrupt
 8000bb0:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <LPUART_init+0xd8>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a0e      	ldr	r2, [pc, #56]	; (8000bf0 <LPUART_init+0xd8>)
 8000bb6:	f043 0320 	orr.w	r3, r3, #32
 8000bba:	6013      	str	r3, [r2, #0]
	LPUART1->ISR &= ~(USART_ISR_RXNE);       // clear Recv-Not-Empty flag
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <LPUART_init+0xd8>)
 8000bbe:	69db      	ldr	r3, [r3, #28]
 8000bc0:	4a0b      	ldr	r2, [pc, #44]	; (8000bf0 <LPUART_init+0xd8>)
 8000bc2:	f023 0320 	bic.w	r3, r3, #32
 8000bc6:	61d3      	str	r3, [r2, #28]
	LPUART1->BRR = 106666;
 8000bc8:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <LPUART_init+0xd8>)
 8000bca:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <LPUART_init+0xdc>)
 8000bcc:	60da      	str	r2, [r3, #12]
	NVIC->ISER[2] = (1 << (LPUART1_IRQn & 0x1F));   // enable LPUART1 ISR
 8000bce:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <LPUART_init+0xe0>)
 8000bd0:	2240      	movs	r2, #64	; 0x40
 8000bd2:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8000bd4:	b662      	cpsie	i
}
 8000bd6:	bf00      	nop
	__enable_irq();                          // enable global interrupts
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	40007000 	.word	0x40007000
 8000be8:	40021000 	.word	0x40021000
 8000bec:	48001800 	.word	0x48001800
 8000bf0:	40008000 	.word	0x40008000
 8000bf4:	0001a0aa 	.word	0x0001a0aa
 8000bf8:	e000e100 	.word	0xe000e100

08000bfc <USART_init>:

void USART_init() {
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN; // enable GPIOA clock
 8000c00:	4b2c      	ldr	r3, [pc, #176]	; (8000cb4 <USART_init+0xb8>)
 8000c02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c04:	4a2b      	ldr	r2, [pc, #172]	; (8000cb4 <USART_init+0xb8>)
 8000c06:	f043 0301 	orr.w	r3, r3, #1
 8000c0a:	64d3      	str	r3, [r2, #76]	; 0x4c
    RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN; // enable USART2 clock
 8000c0c:	4b29      	ldr	r3, [pc, #164]	; (8000cb4 <USART_init+0xb8>)
 8000c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c10:	4a28      	ldr	r2, [pc, #160]	; (8000cb4 <USART_init+0xb8>)
 8000c12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c16:	6593      	str	r3, [r2, #88]	; 0x58

    GPIOA->MODER &= ~(GPIO_MODER_MODE0 |GPIO_MODER_MODE1 |GPIO_MODER_MODE2 | GPIO_MODER_MODE3); //clear bits
 8000c18:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000c26:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (GPIO_MODER_MODE0_1 |GPIO_MODER_MODE1_1 |GPIO_MODER_MODE2_1 | GPIO_MODER_MODE3_1);
 8000c28:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c32:	f043 03aa 	orr.w	r3, r3, #170	; 0xaa
 8000c36:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] &= ~((0x000F << GPIO_AFRL_AFSEL0_Pos) |(0x000F << GPIO_AFRL_AFSEL1_Pos) |(0x000F << GPIO_AFRL_AFSEL2_Pos) | (0x000F << GPIO_AFRL_AFSEL3_Pos));
 8000c38:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c3c:	6a1b      	ldr	r3, [r3, #32]
 8000c3e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c42:	0c1b      	lsrs	r3, r3, #16
 8000c44:	041b      	lsls	r3, r3, #16
 8000c46:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= ((0x0007 << GPIO_AFRL_AFSEL0_Pos) |(0x0007 << GPIO_AFRL_AFSEL1_Pos) |(0x0007 << GPIO_AFRL_AFSEL2_Pos) | (0x0007 << GPIO_AFRL_AFSEL3_Pos));
 8000c48:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c4c:	6a1b      	ldr	r3, [r3, #32]
 8000c4e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c52:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8000c56:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8000c5a:	6213      	str	r3, [r2, #32]

    USART2->CR1 &= ~(USART_CR1_M1 | USART_CR1_M0); // 8-bit data
 8000c5c:	4b16      	ldr	r3, [pc, #88]	; (8000cb8 <USART_init+0xbc>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a15      	ldr	r2, [pc, #84]	; (8000cb8 <USART_init+0xbc>)
 8000c62:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 8000c66:	6013      	str	r3, [r2, #0]
    USART2->CR1 |= USART_CR1_UE;                   // enable USART2
 8000c68:	4b13      	ldr	r3, [pc, #76]	; (8000cb8 <USART_init+0xbc>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a12      	ldr	r2, [pc, #72]	; (8000cb8 <USART_init+0xbc>)
 8000c6e:	f043 0301 	orr.w	r3, r3, #1
 8000c72:	6013      	str	r3, [r2, #0]
    USART2->CR1 |= (USART_CR1_TE | USART_CR1_RE);  // enable xmit & recv
 8000c74:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <USART_init+0xbc>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a0f      	ldr	r2, [pc, #60]	; (8000cb8 <USART_init+0xbc>)
 8000c7a:	f043 030c 	orr.w	r3, r3, #12
 8000c7e:	6013      	str	r3, [r2, #0]
    USART2->CR1 |= USART_CR1_RXNEIE;        // enable USART2 recv interrupt
 8000c80:	4b0d      	ldr	r3, [pc, #52]	; (8000cb8 <USART_init+0xbc>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a0c      	ldr	r2, [pc, #48]	; (8000cb8 <USART_init+0xbc>)
 8000c86:	f043 0320 	orr.w	r3, r3, #32
 8000c8a:	6013      	str	r3, [r2, #0]
    USART2->ISR &= ~(USART_ISR_RXNE);       // clear Recv-Not-Empty flag
 8000c8c:	4b0a      	ldr	r3, [pc, #40]	; (8000cb8 <USART_init+0xbc>)
 8000c8e:	69db      	ldr	r3, [r3, #28]
 8000c90:	4a09      	ldr	r2, [pc, #36]	; (8000cb8 <USART_init+0xbc>)
 8000c92:	f023 0320 	bic.w	r3, r3, #32
 8000c96:	61d3      	str	r3, [r2, #28]
    USART2->BRR = 69;                   // Set the correct baud rate
 8000c98:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <USART_init+0xbc>)
 8000c9a:	2245      	movs	r2, #69	; 0x45
 8000c9c:	60da      	str	r2, [r3, #12]
    NVIC->ISER[1] = (1 << (USART2_IRQn & 0x1F));   // enable USART2 ISR
 8000c9e:	4b07      	ldr	r3, [pc, #28]	; (8000cbc <USART_init+0xc0>)
 8000ca0:	2240      	movs	r2, #64	; 0x40
 8000ca2:	605a      	str	r2, [r3, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 8000ca4:	b662      	cpsie	i
}
 8000ca6:	bf00      	nop
    __enable_irq();                          // enable global interrupts
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	40021000 	.word	0x40021000
 8000cb8:	40004400 	.word	0x40004400
 8000cbc:	e000e100 	.word	0xe000e100

08000cc0 <LPUART_Print_Char>:
        USART2->TDR = c[i];
    }
}


void LPUART_Print_Char(char ch) {
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
	while (!(LPUART1->ISR & USART_ISR_TXE))
 8000cca:	bf00      	nop
 8000ccc:	4b07      	ldr	r3, [pc, #28]	; (8000cec <LPUART_Print_Char+0x2c>)
 8000cce:	69db      	ldr	r3, [r3, #28]
 8000cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d0f9      	beq.n	8000ccc <LPUART_Print_Char+0xc>
		;   // wait for empty transmit buffer
	LPUART1->TDR = ch;                        // send the character
 8000cd8:	4b04      	ldr	r3, [pc, #16]	; (8000cec <LPUART_Print_Char+0x2c>)
 8000cda:	79fa      	ldrb	r2, [r7, #7]
 8000cdc:	b292      	uxth	r2, r2
 8000cde:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	40008000 	.word	0x40008000

08000cf0 <LPUART_Print>:

void LPUART_Print(const char *message) {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	uint16_t iStrIdx = 0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	81fb      	strh	r3, [r7, #14]
	while (message[iStrIdx] != '\0') {
 8000cfc:	e009      	b.n	8000d12 <LPUART_Print+0x22>
		LPUART_Print_Char(message[iStrIdx]);
 8000cfe:	89fb      	ldrh	r3, [r7, #14]
 8000d00:	687a      	ldr	r2, [r7, #4]
 8000d02:	4413      	add	r3, r2
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff ffda 	bl	8000cc0 <LPUART_Print_Char>
		iStrIdx++;
 8000d0c:	89fb      	ldrh	r3, [r7, #14]
 8000d0e:	3301      	adds	r3, #1
 8000d10:	81fb      	strh	r3, [r7, #14]
	while (message[iStrIdx] != '\0') {
 8000d12:	89fb      	ldrh	r3, [r7, #14]
 8000d14:	687a      	ldr	r2, [r7, #4]
 8000d16:	4413      	add	r3, r2
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d1ef      	bne.n	8000cfe <LPUART_Print+0xe>
	}
}
 8000d1e:	bf00      	nop
 8000d20:	bf00      	nop
 8000d22:	3710      	adds	r7, #16
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d60 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d2c:	f7ff fee2 	bl	8000af4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d30:	480c      	ldr	r0, [pc, #48]	; (8000d64 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d32:	490d      	ldr	r1, [pc, #52]	; (8000d68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d34:	4a0d      	ldr	r2, [pc, #52]	; (8000d6c <LoopForever+0xe>)
  movs r3, #0
 8000d36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d38:	e002      	b.n	8000d40 <LoopCopyDataInit>

08000d3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d3e:	3304      	adds	r3, #4

08000d40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d44:	d3f9      	bcc.n	8000d3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d46:	4a0a      	ldr	r2, [pc, #40]	; (8000d70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d48:	4c0a      	ldr	r4, [pc, #40]	; (8000d74 <LoopForever+0x16>)
  movs r3, #0
 8000d4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d4c:	e001      	b.n	8000d52 <LoopFillZerobss>

08000d4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d50:	3204      	adds	r2, #4

08000d52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d54:	d3fb      	bcc.n	8000d4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d56:	f000 ffd5 	bl	8001d04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d5a:	f7ff fc1b 	bl	8000594 <main>

08000d5e <LoopForever>:

LoopForever:
    b LoopForever
 8000d5e:	e7fe      	b.n	8000d5e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d60:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000d64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d68:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000d6c:	08001fa8 	.word	0x08001fa8
  ldr r2, =_sbss
 8000d70:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000d74:	20000164 	.word	0x20000164

08000d78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d78:	e7fe      	b.n	8000d78 <ADC1_2_IRQHandler>

08000d7a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b082      	sub	sp, #8
 8000d7e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d80:	2300      	movs	r3, #0
 8000d82:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d84:	2003      	movs	r0, #3
 8000d86:	f000 f91f 	bl	8000fc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d8a:	200f      	movs	r0, #15
 8000d8c:	f000 f80e 	bl	8000dac <HAL_InitTick>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d002      	beq.n	8000d9c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	71fb      	strb	r3, [r7, #7]
 8000d9a:	e001      	b.n	8000da0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d9c:	f7ff fe5c 	bl	8000a58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000da0:	79fb      	ldrb	r3, [r7, #7]
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
	...

08000dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000db4:	2300      	movs	r3, #0
 8000db6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000db8:	4b17      	ldr	r3, [pc, #92]	; (8000e18 <HAL_InitTick+0x6c>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d023      	beq.n	8000e08 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000dc0:	4b16      	ldr	r3, [pc, #88]	; (8000e1c <HAL_InitTick+0x70>)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	4b14      	ldr	r3, [pc, #80]	; (8000e18 <HAL_InitTick+0x6c>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f000 f91d 	bl	8001016 <HAL_SYSTICK_Config>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d10f      	bne.n	8000e02 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2b0f      	cmp	r3, #15
 8000de6:	d809      	bhi.n	8000dfc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de8:	2200      	movs	r2, #0
 8000dea:	6879      	ldr	r1, [r7, #4]
 8000dec:	f04f 30ff 	mov.w	r0, #4294967295
 8000df0:	f000 f8f5 	bl	8000fde <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000df4:	4a0a      	ldr	r2, [pc, #40]	; (8000e20 <HAL_InitTick+0x74>)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6013      	str	r3, [r2, #0]
 8000dfa:	e007      	b.n	8000e0c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	73fb      	strb	r3, [r7, #15]
 8000e00:	e004      	b.n	8000e0c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	73fb      	strb	r3, [r7, #15]
 8000e06:	e001      	b.n	8000e0c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000010 	.word	0x20000010
 8000e1c:	20000008 	.word	0x20000008
 8000e20:	2000000c 	.word	0x2000000c

08000e24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e28:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <HAL_IncTick+0x20>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <HAL_IncTick+0x24>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4413      	add	r3, r2
 8000e34:	4a04      	ldr	r2, [pc, #16]	; (8000e48 <HAL_IncTick+0x24>)
 8000e36:	6013      	str	r3, [r2, #0]
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	20000010 	.word	0x20000010
 8000e48:	20000160 	.word	0x20000160

08000e4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e50:	4b03      	ldr	r3, [pc, #12]	; (8000e60 <HAL_GetTick+0x14>)
 8000e52:	681b      	ldr	r3, [r3, #0]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	20000160 	.word	0x20000160

08000e64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e74:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e7a:	68ba      	ldr	r2, [r7, #8]
 8000e7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e80:	4013      	ands	r3, r2
 8000e82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e96:	4a04      	ldr	r2, [pc, #16]	; (8000ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	60d3      	str	r3, [r2, #12]
}
 8000e9c:	bf00      	nop
 8000e9e:	3714      	adds	r7, #20
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb0:	4b04      	ldr	r3, [pc, #16]	; (8000ec4 <__NVIC_GetPriorityGrouping+0x18>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	0a1b      	lsrs	r3, r3, #8
 8000eb6:	f003 0307 	and.w	r3, r3, #7
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	6039      	str	r1, [r7, #0]
 8000ed2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	db0a      	blt.n	8000ef2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	b2da      	uxtb	r2, r3
 8000ee0:	490c      	ldr	r1, [pc, #48]	; (8000f14 <__NVIC_SetPriority+0x4c>)
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	0112      	lsls	r2, r2, #4
 8000ee8:	b2d2      	uxtb	r2, r2
 8000eea:	440b      	add	r3, r1
 8000eec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ef0:	e00a      	b.n	8000f08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	4908      	ldr	r1, [pc, #32]	; (8000f18 <__NVIC_SetPriority+0x50>)
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	f003 030f 	and.w	r3, r3, #15
 8000efe:	3b04      	subs	r3, #4
 8000f00:	0112      	lsls	r2, r2, #4
 8000f02:	b2d2      	uxtb	r2, r2
 8000f04:	440b      	add	r3, r1
 8000f06:	761a      	strb	r2, [r3, #24]
}
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	e000e100 	.word	0xe000e100
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b089      	sub	sp, #36	; 0x24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	f003 0307 	and.w	r3, r3, #7
 8000f2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	f1c3 0307 	rsb	r3, r3, #7
 8000f36:	2b04      	cmp	r3, #4
 8000f38:	bf28      	it	cs
 8000f3a:	2304      	movcs	r3, #4
 8000f3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	3304      	adds	r3, #4
 8000f42:	2b06      	cmp	r3, #6
 8000f44:	d902      	bls.n	8000f4c <NVIC_EncodePriority+0x30>
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	3b03      	subs	r3, #3
 8000f4a:	e000      	b.n	8000f4e <NVIC_EncodePriority+0x32>
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f50:	f04f 32ff 	mov.w	r2, #4294967295
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43da      	mvns	r2, r3
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	401a      	ands	r2, r3
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f64:	f04f 31ff 	mov.w	r1, #4294967295
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6e:	43d9      	mvns	r1, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f74:	4313      	orrs	r3, r2
         );
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3724      	adds	r7, #36	; 0x24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
	...

08000f84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f94:	d301      	bcc.n	8000f9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f96:	2301      	movs	r3, #1
 8000f98:	e00f      	b.n	8000fba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f9a:	4a0a      	ldr	r2, [pc, #40]	; (8000fc4 <SysTick_Config+0x40>)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fa2:	210f      	movs	r1, #15
 8000fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa8:	f7ff ff8e 	bl	8000ec8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fac:	4b05      	ldr	r3, [pc, #20]	; (8000fc4 <SysTick_Config+0x40>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fb2:	4b04      	ldr	r3, [pc, #16]	; (8000fc4 <SysTick_Config+0x40>)
 8000fb4:	2207      	movs	r2, #7
 8000fb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	e000e010 	.word	0xe000e010

08000fc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f7ff ff47 	bl	8000e64 <__NVIC_SetPriorityGrouping>
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b086      	sub	sp, #24
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	60b9      	str	r1, [r7, #8]
 8000fe8:	607a      	str	r2, [r7, #4]
 8000fea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ff0:	f7ff ff5c 	bl	8000eac <__NVIC_GetPriorityGrouping>
 8000ff4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	68b9      	ldr	r1, [r7, #8]
 8000ffa:	6978      	ldr	r0, [r7, #20]
 8000ffc:	f7ff ff8e 	bl	8000f1c <NVIC_EncodePriority>
 8001000:	4602      	mov	r2, r0
 8001002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001006:	4611      	mov	r1, r2
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff ff5d 	bl	8000ec8 <__NVIC_SetPriority>
}
 800100e:	bf00      	nop
 8001010:	3718      	adds	r7, #24
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b082      	sub	sp, #8
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f7ff ffb0 	bl	8000f84 <SysTick_Config>
 8001024:	4603      	mov	r3, r0
}
 8001026:	4618      	mov	r0, r3
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
	...

08001030 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001034:	4b04      	ldr	r3, [pc, #16]	; (8001048 <HAL_PWREx_GetVoltageRange+0x18>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800103c:	4618      	mov	r0, r3
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	40007000 	.word	0x40007000

0800104c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800105a:	d130      	bne.n	80010be <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800105c:	4b23      	ldr	r3, [pc, #140]	; (80010ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001064:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001068:	d038      	beq.n	80010dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800106a:	4b20      	ldr	r3, [pc, #128]	; (80010ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001072:	4a1e      	ldr	r2, [pc, #120]	; (80010ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001074:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001078:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800107a:	4b1d      	ldr	r3, [pc, #116]	; (80010f0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2232      	movs	r2, #50	; 0x32
 8001080:	fb02 f303 	mul.w	r3, r2, r3
 8001084:	4a1b      	ldr	r2, [pc, #108]	; (80010f4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001086:	fba2 2303 	umull	r2, r3, r2, r3
 800108a:	0c9b      	lsrs	r3, r3, #18
 800108c:	3301      	adds	r3, #1
 800108e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001090:	e002      	b.n	8001098 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	3b01      	subs	r3, #1
 8001096:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001098:	4b14      	ldr	r3, [pc, #80]	; (80010ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800109a:	695b      	ldr	r3, [r3, #20]
 800109c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010a4:	d102      	bne.n	80010ac <HAL_PWREx_ControlVoltageScaling+0x60>
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d1f2      	bne.n	8001092 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010ac:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010ae:	695b      	ldr	r3, [r3, #20]
 80010b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010b8:	d110      	bne.n	80010dc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	e00f      	b.n	80010de <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80010be:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010ca:	d007      	beq.n	80010dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80010cc:	4b07      	ldr	r3, [pc, #28]	; (80010ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010d4:	4a05      	ldr	r2, [pc, #20]	; (80010ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010da:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3714      	adds	r7, #20
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	40007000 	.word	0x40007000
 80010f0:	20000008 	.word	0x20000008
 80010f4:	431bde83 	.word	0x431bde83

080010f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b088      	sub	sp, #32
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d102      	bne.n	800110c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	f000 bc08 	b.w	800191c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800110c:	4b96      	ldr	r3, [pc, #600]	; (8001368 <HAL_RCC_OscConfig+0x270>)
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	f003 030c 	and.w	r3, r3, #12
 8001114:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001116:	4b94      	ldr	r3, [pc, #592]	; (8001368 <HAL_RCC_OscConfig+0x270>)
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	f003 0303 	and.w	r3, r3, #3
 800111e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 0310 	and.w	r3, r3, #16
 8001128:	2b00      	cmp	r3, #0
 800112a:	f000 80e4 	beq.w	80012f6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d007      	beq.n	8001144 <HAL_RCC_OscConfig+0x4c>
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	2b0c      	cmp	r3, #12
 8001138:	f040 808b 	bne.w	8001252 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	2b01      	cmp	r3, #1
 8001140:	f040 8087 	bne.w	8001252 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001144:	4b88      	ldr	r3, [pc, #544]	; (8001368 <HAL_RCC_OscConfig+0x270>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 0302 	and.w	r3, r3, #2
 800114c:	2b00      	cmp	r3, #0
 800114e:	d005      	beq.n	800115c <HAL_RCC_OscConfig+0x64>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d101      	bne.n	800115c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	e3df      	b.n	800191c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6a1a      	ldr	r2, [r3, #32]
 8001160:	4b81      	ldr	r3, [pc, #516]	; (8001368 <HAL_RCC_OscConfig+0x270>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 0308 	and.w	r3, r3, #8
 8001168:	2b00      	cmp	r3, #0
 800116a:	d004      	beq.n	8001176 <HAL_RCC_OscConfig+0x7e>
 800116c:	4b7e      	ldr	r3, [pc, #504]	; (8001368 <HAL_RCC_OscConfig+0x270>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001174:	e005      	b.n	8001182 <HAL_RCC_OscConfig+0x8a>
 8001176:	4b7c      	ldr	r3, [pc, #496]	; (8001368 <HAL_RCC_OscConfig+0x270>)
 8001178:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800117c:	091b      	lsrs	r3, r3, #4
 800117e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001182:	4293      	cmp	r3, r2
 8001184:	d223      	bcs.n	80011ce <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6a1b      	ldr	r3, [r3, #32]
 800118a:	4618      	mov	r0, r3
 800118c:	f000 fd5a 	bl	8001c44 <RCC_SetFlashLatencyFromMSIRange>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e3c0      	b.n	800191c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800119a:	4b73      	ldr	r3, [pc, #460]	; (8001368 <HAL_RCC_OscConfig+0x270>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a72      	ldr	r2, [pc, #456]	; (8001368 <HAL_RCC_OscConfig+0x270>)
 80011a0:	f043 0308 	orr.w	r3, r3, #8
 80011a4:	6013      	str	r3, [r2, #0]
 80011a6:	4b70      	ldr	r3, [pc, #448]	; (8001368 <HAL_RCC_OscConfig+0x270>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6a1b      	ldr	r3, [r3, #32]
 80011b2:	496d      	ldr	r1, [pc, #436]	; (8001368 <HAL_RCC_OscConfig+0x270>)
 80011b4:	4313      	orrs	r3, r2
 80011b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011b8:	4b6b      	ldr	r3, [pc, #428]	; (8001368 <HAL_RCC_OscConfig+0x270>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	69db      	ldr	r3, [r3, #28]
 80011c4:	021b      	lsls	r3, r3, #8
 80011c6:	4968      	ldr	r1, [pc, #416]	; (8001368 <HAL_RCC_OscConfig+0x270>)
 80011c8:	4313      	orrs	r3, r2
 80011ca:	604b      	str	r3, [r1, #4]
 80011cc:	e025      	b.n	800121a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011ce:	4b66      	ldr	r3, [pc, #408]	; (8001368 <HAL_RCC_OscConfig+0x270>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a65      	ldr	r2, [pc, #404]	; (8001368 <HAL_RCC_OscConfig+0x270>)
 80011d4:	f043 0308 	orr.w	r3, r3, #8
 80011d8:	6013      	str	r3, [r2, #0]
 80011da:	4b63      	ldr	r3, [pc, #396]	; (8001368 <HAL_RCC_OscConfig+0x270>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6a1b      	ldr	r3, [r3, #32]
 80011e6:	4960      	ldr	r1, [pc, #384]	; (8001368 <HAL_RCC_OscConfig+0x270>)
 80011e8:	4313      	orrs	r3, r2
 80011ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011ec:	4b5e      	ldr	r3, [pc, #376]	; (8001368 <HAL_RCC_OscConfig+0x270>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	69db      	ldr	r3, [r3, #28]
 80011f8:	021b      	lsls	r3, r3, #8
 80011fa:	495b      	ldr	r1, [pc, #364]	; (8001368 <HAL_RCC_OscConfig+0x270>)
 80011fc:	4313      	orrs	r3, r2
 80011fe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d109      	bne.n	800121a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6a1b      	ldr	r3, [r3, #32]
 800120a:	4618      	mov	r0, r3
 800120c:	f000 fd1a 	bl	8001c44 <RCC_SetFlashLatencyFromMSIRange>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e380      	b.n	800191c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800121a:	f000 fc87 	bl	8001b2c <HAL_RCC_GetSysClockFreq>
 800121e:	4602      	mov	r2, r0
 8001220:	4b51      	ldr	r3, [pc, #324]	; (8001368 <HAL_RCC_OscConfig+0x270>)
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	091b      	lsrs	r3, r3, #4
 8001226:	f003 030f 	and.w	r3, r3, #15
 800122a:	4950      	ldr	r1, [pc, #320]	; (800136c <HAL_RCC_OscConfig+0x274>)
 800122c:	5ccb      	ldrb	r3, [r1, r3]
 800122e:	f003 031f 	and.w	r3, r3, #31
 8001232:	fa22 f303 	lsr.w	r3, r2, r3
 8001236:	4a4e      	ldr	r2, [pc, #312]	; (8001370 <HAL_RCC_OscConfig+0x278>)
 8001238:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800123a:	4b4e      	ldr	r3, [pc, #312]	; (8001374 <HAL_RCC_OscConfig+0x27c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff fdb4 	bl	8000dac <HAL_InitTick>
 8001244:	4603      	mov	r3, r0
 8001246:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001248:	7bfb      	ldrb	r3, [r7, #15]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d052      	beq.n	80012f4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800124e:	7bfb      	ldrb	r3, [r7, #15]
 8001250:	e364      	b.n	800191c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	699b      	ldr	r3, [r3, #24]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d032      	beq.n	80012c0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800125a:	4b43      	ldr	r3, [pc, #268]	; (8001368 <HAL_RCC_OscConfig+0x270>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a42      	ldr	r2, [pc, #264]	; (8001368 <HAL_RCC_OscConfig+0x270>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001266:	f7ff fdf1 	bl	8000e4c <HAL_GetTick>
 800126a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800126c:	e008      	b.n	8001280 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800126e:	f7ff fded 	bl	8000e4c <HAL_GetTick>
 8001272:	4602      	mov	r2, r0
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	2b02      	cmp	r3, #2
 800127a:	d901      	bls.n	8001280 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800127c:	2303      	movs	r3, #3
 800127e:	e34d      	b.n	800191c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001280:	4b39      	ldr	r3, [pc, #228]	; (8001368 <HAL_RCC_OscConfig+0x270>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0302 	and.w	r3, r3, #2
 8001288:	2b00      	cmp	r3, #0
 800128a:	d0f0      	beq.n	800126e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800128c:	4b36      	ldr	r3, [pc, #216]	; (8001368 <HAL_RCC_OscConfig+0x270>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a35      	ldr	r2, [pc, #212]	; (8001368 <HAL_RCC_OscConfig+0x270>)
 8001292:	f043 0308 	orr.w	r3, r3, #8
 8001296:	6013      	str	r3, [r2, #0]
 8001298:	4b33      	ldr	r3, [pc, #204]	; (8001368 <HAL_RCC_OscConfig+0x270>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6a1b      	ldr	r3, [r3, #32]
 80012a4:	4930      	ldr	r1, [pc, #192]	; (8001368 <HAL_RCC_OscConfig+0x270>)
 80012a6:	4313      	orrs	r3, r2
 80012a8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012aa:	4b2f      	ldr	r3, [pc, #188]	; (8001368 <HAL_RCC_OscConfig+0x270>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	021b      	lsls	r3, r3, #8
 80012b8:	492b      	ldr	r1, [pc, #172]	; (8001368 <HAL_RCC_OscConfig+0x270>)
 80012ba:	4313      	orrs	r3, r2
 80012bc:	604b      	str	r3, [r1, #4]
 80012be:	e01a      	b.n	80012f6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80012c0:	4b29      	ldr	r3, [pc, #164]	; (8001368 <HAL_RCC_OscConfig+0x270>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a28      	ldr	r2, [pc, #160]	; (8001368 <HAL_RCC_OscConfig+0x270>)
 80012c6:	f023 0301 	bic.w	r3, r3, #1
 80012ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012cc:	f7ff fdbe 	bl	8000e4c <HAL_GetTick>
 80012d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80012d2:	e008      	b.n	80012e6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012d4:	f7ff fdba 	bl	8000e4c <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e31a      	b.n	800191c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80012e6:	4b20      	ldr	r3, [pc, #128]	; (8001368 <HAL_RCC_OscConfig+0x270>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d1f0      	bne.n	80012d4 <HAL_RCC_OscConfig+0x1dc>
 80012f2:	e000      	b.n	80012f6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d073      	beq.n	80013ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	2b08      	cmp	r3, #8
 8001306:	d005      	beq.n	8001314 <HAL_RCC_OscConfig+0x21c>
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	2b0c      	cmp	r3, #12
 800130c:	d10e      	bne.n	800132c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	2b03      	cmp	r3, #3
 8001312:	d10b      	bne.n	800132c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001314:	4b14      	ldr	r3, [pc, #80]	; (8001368 <HAL_RCC_OscConfig+0x270>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d063      	beq.n	80013e8 <HAL_RCC_OscConfig+0x2f0>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d15f      	bne.n	80013e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	e2f7      	b.n	800191c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001334:	d106      	bne.n	8001344 <HAL_RCC_OscConfig+0x24c>
 8001336:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <HAL_RCC_OscConfig+0x270>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a0b      	ldr	r2, [pc, #44]	; (8001368 <HAL_RCC_OscConfig+0x270>)
 800133c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001340:	6013      	str	r3, [r2, #0]
 8001342:	e025      	b.n	8001390 <HAL_RCC_OscConfig+0x298>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800134c:	d114      	bne.n	8001378 <HAL_RCC_OscConfig+0x280>
 800134e:	4b06      	ldr	r3, [pc, #24]	; (8001368 <HAL_RCC_OscConfig+0x270>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a05      	ldr	r2, [pc, #20]	; (8001368 <HAL_RCC_OscConfig+0x270>)
 8001354:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	4b03      	ldr	r3, [pc, #12]	; (8001368 <HAL_RCC_OscConfig+0x270>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a02      	ldr	r2, [pc, #8]	; (8001368 <HAL_RCC_OscConfig+0x270>)
 8001360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001364:	6013      	str	r3, [r2, #0]
 8001366:	e013      	b.n	8001390 <HAL_RCC_OscConfig+0x298>
 8001368:	40021000 	.word	0x40021000
 800136c:	08001f60 	.word	0x08001f60
 8001370:	20000008 	.word	0x20000008
 8001374:	2000000c 	.word	0x2000000c
 8001378:	4ba0      	ldr	r3, [pc, #640]	; (80015fc <HAL_RCC_OscConfig+0x504>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a9f      	ldr	r2, [pc, #636]	; (80015fc <HAL_RCC_OscConfig+0x504>)
 800137e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001382:	6013      	str	r3, [r2, #0]
 8001384:	4b9d      	ldr	r3, [pc, #628]	; (80015fc <HAL_RCC_OscConfig+0x504>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a9c      	ldr	r2, [pc, #624]	; (80015fc <HAL_RCC_OscConfig+0x504>)
 800138a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800138e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d013      	beq.n	80013c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001398:	f7ff fd58 	bl	8000e4c <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013a0:	f7ff fd54 	bl	8000e4c <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b64      	cmp	r3, #100	; 0x64
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e2b4      	b.n	800191c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013b2:	4b92      	ldr	r3, [pc, #584]	; (80015fc <HAL_RCC_OscConfig+0x504>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d0f0      	beq.n	80013a0 <HAL_RCC_OscConfig+0x2a8>
 80013be:	e014      	b.n	80013ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c0:	f7ff fd44 	bl	8000e4c <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013c8:	f7ff fd40 	bl	8000e4c <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b64      	cmp	r3, #100	; 0x64
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e2a0      	b.n	800191c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013da:	4b88      	ldr	r3, [pc, #544]	; (80015fc <HAL_RCC_OscConfig+0x504>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1f0      	bne.n	80013c8 <HAL_RCC_OscConfig+0x2d0>
 80013e6:	e000      	b.n	80013ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d060      	beq.n	80014b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	2b04      	cmp	r3, #4
 80013fa:	d005      	beq.n	8001408 <HAL_RCC_OscConfig+0x310>
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	2b0c      	cmp	r3, #12
 8001400:	d119      	bne.n	8001436 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	2b02      	cmp	r3, #2
 8001406:	d116      	bne.n	8001436 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001408:	4b7c      	ldr	r3, [pc, #496]	; (80015fc <HAL_RCC_OscConfig+0x504>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001410:	2b00      	cmp	r3, #0
 8001412:	d005      	beq.n	8001420 <HAL_RCC_OscConfig+0x328>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d101      	bne.n	8001420 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e27d      	b.n	800191c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001420:	4b76      	ldr	r3, [pc, #472]	; (80015fc <HAL_RCC_OscConfig+0x504>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	691b      	ldr	r3, [r3, #16]
 800142c:	061b      	lsls	r3, r3, #24
 800142e:	4973      	ldr	r1, [pc, #460]	; (80015fc <HAL_RCC_OscConfig+0x504>)
 8001430:	4313      	orrs	r3, r2
 8001432:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001434:	e040      	b.n	80014b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d023      	beq.n	8001486 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800143e:	4b6f      	ldr	r3, [pc, #444]	; (80015fc <HAL_RCC_OscConfig+0x504>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a6e      	ldr	r2, [pc, #440]	; (80015fc <HAL_RCC_OscConfig+0x504>)
 8001444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001448:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800144a:	f7ff fcff 	bl	8000e4c <HAL_GetTick>
 800144e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001450:	e008      	b.n	8001464 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001452:	f7ff fcfb 	bl	8000e4c <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	2b02      	cmp	r3, #2
 800145e:	d901      	bls.n	8001464 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	e25b      	b.n	800191c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001464:	4b65      	ldr	r3, [pc, #404]	; (80015fc <HAL_RCC_OscConfig+0x504>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800146c:	2b00      	cmp	r3, #0
 800146e:	d0f0      	beq.n	8001452 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001470:	4b62      	ldr	r3, [pc, #392]	; (80015fc <HAL_RCC_OscConfig+0x504>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	691b      	ldr	r3, [r3, #16]
 800147c:	061b      	lsls	r3, r3, #24
 800147e:	495f      	ldr	r1, [pc, #380]	; (80015fc <HAL_RCC_OscConfig+0x504>)
 8001480:	4313      	orrs	r3, r2
 8001482:	604b      	str	r3, [r1, #4]
 8001484:	e018      	b.n	80014b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001486:	4b5d      	ldr	r3, [pc, #372]	; (80015fc <HAL_RCC_OscConfig+0x504>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a5c      	ldr	r2, [pc, #368]	; (80015fc <HAL_RCC_OscConfig+0x504>)
 800148c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001490:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001492:	f7ff fcdb 	bl	8000e4c <HAL_GetTick>
 8001496:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001498:	e008      	b.n	80014ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800149a:	f7ff fcd7 	bl	8000e4c <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d901      	bls.n	80014ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e237      	b.n	800191c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014ac:	4b53      	ldr	r3, [pc, #332]	; (80015fc <HAL_RCC_OscConfig+0x504>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d1f0      	bne.n	800149a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0308 	and.w	r3, r3, #8
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d03c      	beq.n	800153e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	695b      	ldr	r3, [r3, #20]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d01c      	beq.n	8001506 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014cc:	4b4b      	ldr	r3, [pc, #300]	; (80015fc <HAL_RCC_OscConfig+0x504>)
 80014ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014d2:	4a4a      	ldr	r2, [pc, #296]	; (80015fc <HAL_RCC_OscConfig+0x504>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014dc:	f7ff fcb6 	bl	8000e4c <HAL_GetTick>
 80014e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014e4:	f7ff fcb2 	bl	8000e4c <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e212      	b.n	800191c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014f6:	4b41      	ldr	r3, [pc, #260]	; (80015fc <HAL_RCC_OscConfig+0x504>)
 80014f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014fc:	f003 0302 	and.w	r3, r3, #2
 8001500:	2b00      	cmp	r3, #0
 8001502:	d0ef      	beq.n	80014e4 <HAL_RCC_OscConfig+0x3ec>
 8001504:	e01b      	b.n	800153e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001506:	4b3d      	ldr	r3, [pc, #244]	; (80015fc <HAL_RCC_OscConfig+0x504>)
 8001508:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800150c:	4a3b      	ldr	r2, [pc, #236]	; (80015fc <HAL_RCC_OscConfig+0x504>)
 800150e:	f023 0301 	bic.w	r3, r3, #1
 8001512:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001516:	f7ff fc99 	bl	8000e4c <HAL_GetTick>
 800151a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800151c:	e008      	b.n	8001530 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800151e:	f7ff fc95 	bl	8000e4c <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d901      	bls.n	8001530 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e1f5      	b.n	800191c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001530:	4b32      	ldr	r3, [pc, #200]	; (80015fc <HAL_RCC_OscConfig+0x504>)
 8001532:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1ef      	bne.n	800151e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0304 	and.w	r3, r3, #4
 8001546:	2b00      	cmp	r3, #0
 8001548:	f000 80a6 	beq.w	8001698 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800154c:	2300      	movs	r3, #0
 800154e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001550:	4b2a      	ldr	r3, [pc, #168]	; (80015fc <HAL_RCC_OscConfig+0x504>)
 8001552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d10d      	bne.n	8001578 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800155c:	4b27      	ldr	r3, [pc, #156]	; (80015fc <HAL_RCC_OscConfig+0x504>)
 800155e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001560:	4a26      	ldr	r2, [pc, #152]	; (80015fc <HAL_RCC_OscConfig+0x504>)
 8001562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001566:	6593      	str	r3, [r2, #88]	; 0x58
 8001568:	4b24      	ldr	r3, [pc, #144]	; (80015fc <HAL_RCC_OscConfig+0x504>)
 800156a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800156c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001574:	2301      	movs	r3, #1
 8001576:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001578:	4b21      	ldr	r3, [pc, #132]	; (8001600 <HAL_RCC_OscConfig+0x508>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001580:	2b00      	cmp	r3, #0
 8001582:	d118      	bne.n	80015b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001584:	4b1e      	ldr	r3, [pc, #120]	; (8001600 <HAL_RCC_OscConfig+0x508>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a1d      	ldr	r2, [pc, #116]	; (8001600 <HAL_RCC_OscConfig+0x508>)
 800158a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800158e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001590:	f7ff fc5c 	bl	8000e4c <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001598:	f7ff fc58 	bl	8000e4c <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e1b8      	b.n	800191c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015aa:	4b15      	ldr	r3, [pc, #84]	; (8001600 <HAL_RCC_OscConfig+0x508>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d0f0      	beq.n	8001598 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d108      	bne.n	80015d0 <HAL_RCC_OscConfig+0x4d8>
 80015be:	4b0f      	ldr	r3, [pc, #60]	; (80015fc <HAL_RCC_OscConfig+0x504>)
 80015c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015c4:	4a0d      	ldr	r2, [pc, #52]	; (80015fc <HAL_RCC_OscConfig+0x504>)
 80015c6:	f043 0301 	orr.w	r3, r3, #1
 80015ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015ce:	e029      	b.n	8001624 <HAL_RCC_OscConfig+0x52c>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	2b05      	cmp	r3, #5
 80015d6:	d115      	bne.n	8001604 <HAL_RCC_OscConfig+0x50c>
 80015d8:	4b08      	ldr	r3, [pc, #32]	; (80015fc <HAL_RCC_OscConfig+0x504>)
 80015da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015de:	4a07      	ldr	r2, [pc, #28]	; (80015fc <HAL_RCC_OscConfig+0x504>)
 80015e0:	f043 0304 	orr.w	r3, r3, #4
 80015e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015e8:	4b04      	ldr	r3, [pc, #16]	; (80015fc <HAL_RCC_OscConfig+0x504>)
 80015ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015ee:	4a03      	ldr	r2, [pc, #12]	; (80015fc <HAL_RCC_OscConfig+0x504>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015f8:	e014      	b.n	8001624 <HAL_RCC_OscConfig+0x52c>
 80015fa:	bf00      	nop
 80015fc:	40021000 	.word	0x40021000
 8001600:	40007000 	.word	0x40007000
 8001604:	4b9d      	ldr	r3, [pc, #628]	; (800187c <HAL_RCC_OscConfig+0x784>)
 8001606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800160a:	4a9c      	ldr	r2, [pc, #624]	; (800187c <HAL_RCC_OscConfig+0x784>)
 800160c:	f023 0301 	bic.w	r3, r3, #1
 8001610:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001614:	4b99      	ldr	r3, [pc, #612]	; (800187c <HAL_RCC_OscConfig+0x784>)
 8001616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800161a:	4a98      	ldr	r2, [pc, #608]	; (800187c <HAL_RCC_OscConfig+0x784>)
 800161c:	f023 0304 	bic.w	r3, r3, #4
 8001620:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d016      	beq.n	800165a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800162c:	f7ff fc0e 	bl	8000e4c <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001632:	e00a      	b.n	800164a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001634:	f7ff fc0a 	bl	8000e4c <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001642:	4293      	cmp	r3, r2
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e168      	b.n	800191c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800164a:	4b8c      	ldr	r3, [pc, #560]	; (800187c <HAL_RCC_OscConfig+0x784>)
 800164c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001650:	f003 0302 	and.w	r3, r3, #2
 8001654:	2b00      	cmp	r3, #0
 8001656:	d0ed      	beq.n	8001634 <HAL_RCC_OscConfig+0x53c>
 8001658:	e015      	b.n	8001686 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800165a:	f7ff fbf7 	bl	8000e4c <HAL_GetTick>
 800165e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001660:	e00a      	b.n	8001678 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001662:	f7ff fbf3 	bl	8000e4c <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001670:	4293      	cmp	r3, r2
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e151      	b.n	800191c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001678:	4b80      	ldr	r3, [pc, #512]	; (800187c <HAL_RCC_OscConfig+0x784>)
 800167a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1ed      	bne.n	8001662 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001686:	7ffb      	ldrb	r3, [r7, #31]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d105      	bne.n	8001698 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800168c:	4b7b      	ldr	r3, [pc, #492]	; (800187c <HAL_RCC_OscConfig+0x784>)
 800168e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001690:	4a7a      	ldr	r2, [pc, #488]	; (800187c <HAL_RCC_OscConfig+0x784>)
 8001692:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001696:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0320 	and.w	r3, r3, #32
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d03c      	beq.n	800171e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d01c      	beq.n	80016e6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80016ac:	4b73      	ldr	r3, [pc, #460]	; (800187c <HAL_RCC_OscConfig+0x784>)
 80016ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016b2:	4a72      	ldr	r2, [pc, #456]	; (800187c <HAL_RCC_OscConfig+0x784>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016bc:	f7ff fbc6 	bl	8000e4c <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016c4:	f7ff fbc2 	bl	8000e4c <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e122      	b.n	800191c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80016d6:	4b69      	ldr	r3, [pc, #420]	; (800187c <HAL_RCC_OscConfig+0x784>)
 80016d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d0ef      	beq.n	80016c4 <HAL_RCC_OscConfig+0x5cc>
 80016e4:	e01b      	b.n	800171e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80016e6:	4b65      	ldr	r3, [pc, #404]	; (800187c <HAL_RCC_OscConfig+0x784>)
 80016e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016ec:	4a63      	ldr	r2, [pc, #396]	; (800187c <HAL_RCC_OscConfig+0x784>)
 80016ee:	f023 0301 	bic.w	r3, r3, #1
 80016f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f6:	f7ff fba9 	bl	8000e4c <HAL_GetTick>
 80016fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80016fc:	e008      	b.n	8001710 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016fe:	f7ff fba5 	bl	8000e4c <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d901      	bls.n	8001710 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e105      	b.n	800191c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001710:	4b5a      	ldr	r3, [pc, #360]	; (800187c <HAL_RCC_OscConfig+0x784>)
 8001712:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1ef      	bne.n	80016fe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001722:	2b00      	cmp	r3, #0
 8001724:	f000 80f9 	beq.w	800191a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800172c:	2b02      	cmp	r3, #2
 800172e:	f040 80cf 	bne.w	80018d0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001732:	4b52      	ldr	r3, [pc, #328]	; (800187c <HAL_RCC_OscConfig+0x784>)
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	f003 0203 	and.w	r2, r3, #3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001742:	429a      	cmp	r2, r3
 8001744:	d12c      	bne.n	80017a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001750:	3b01      	subs	r3, #1
 8001752:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001754:	429a      	cmp	r2, r3
 8001756:	d123      	bne.n	80017a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001762:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001764:	429a      	cmp	r2, r3
 8001766:	d11b      	bne.n	80017a0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001772:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001774:	429a      	cmp	r2, r3
 8001776:	d113      	bne.n	80017a0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001782:	085b      	lsrs	r3, r3, #1
 8001784:	3b01      	subs	r3, #1
 8001786:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001788:	429a      	cmp	r2, r3
 800178a:	d109      	bne.n	80017a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	085b      	lsrs	r3, r3, #1
 8001798:	3b01      	subs	r3, #1
 800179a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800179c:	429a      	cmp	r2, r3
 800179e:	d071      	beq.n	8001884 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	2b0c      	cmp	r3, #12
 80017a4:	d068      	beq.n	8001878 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80017a6:	4b35      	ldr	r3, [pc, #212]	; (800187c <HAL_RCC_OscConfig+0x784>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d105      	bne.n	80017be <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80017b2:	4b32      	ldr	r3, [pc, #200]	; (800187c <HAL_RCC_OscConfig+0x784>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e0ac      	b.n	800191c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80017c2:	4b2e      	ldr	r3, [pc, #184]	; (800187c <HAL_RCC_OscConfig+0x784>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a2d      	ldr	r2, [pc, #180]	; (800187c <HAL_RCC_OscConfig+0x784>)
 80017c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017cc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017ce:	f7ff fb3d 	bl	8000e4c <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017d6:	f7ff fb39 	bl	8000e4c <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e099      	b.n	800191c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017e8:	4b24      	ldr	r3, [pc, #144]	; (800187c <HAL_RCC_OscConfig+0x784>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1f0      	bne.n	80017d6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017f4:	4b21      	ldr	r3, [pc, #132]	; (800187c <HAL_RCC_OscConfig+0x784>)
 80017f6:	68da      	ldr	r2, [r3, #12]
 80017f8:	4b21      	ldr	r3, [pc, #132]	; (8001880 <HAL_RCC_OscConfig+0x788>)
 80017fa:	4013      	ands	r3, r2
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001804:	3a01      	subs	r2, #1
 8001806:	0112      	lsls	r2, r2, #4
 8001808:	4311      	orrs	r1, r2
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800180e:	0212      	lsls	r2, r2, #8
 8001810:	4311      	orrs	r1, r2
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001816:	0852      	lsrs	r2, r2, #1
 8001818:	3a01      	subs	r2, #1
 800181a:	0552      	lsls	r2, r2, #21
 800181c:	4311      	orrs	r1, r2
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001822:	0852      	lsrs	r2, r2, #1
 8001824:	3a01      	subs	r2, #1
 8001826:	0652      	lsls	r2, r2, #25
 8001828:	4311      	orrs	r1, r2
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800182e:	06d2      	lsls	r2, r2, #27
 8001830:	430a      	orrs	r2, r1
 8001832:	4912      	ldr	r1, [pc, #72]	; (800187c <HAL_RCC_OscConfig+0x784>)
 8001834:	4313      	orrs	r3, r2
 8001836:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001838:	4b10      	ldr	r3, [pc, #64]	; (800187c <HAL_RCC_OscConfig+0x784>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a0f      	ldr	r2, [pc, #60]	; (800187c <HAL_RCC_OscConfig+0x784>)
 800183e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001842:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001844:	4b0d      	ldr	r3, [pc, #52]	; (800187c <HAL_RCC_OscConfig+0x784>)
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	4a0c      	ldr	r2, [pc, #48]	; (800187c <HAL_RCC_OscConfig+0x784>)
 800184a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800184e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001850:	f7ff fafc 	bl	8000e4c <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001858:	f7ff faf8 	bl	8000e4c <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e058      	b.n	800191c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800186a:	4b04      	ldr	r3, [pc, #16]	; (800187c <HAL_RCC_OscConfig+0x784>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d0f0      	beq.n	8001858 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001876:	e050      	b.n	800191a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e04f      	b.n	800191c <HAL_RCC_OscConfig+0x824>
 800187c:	40021000 	.word	0x40021000
 8001880:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001884:	4b27      	ldr	r3, [pc, #156]	; (8001924 <HAL_RCC_OscConfig+0x82c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d144      	bne.n	800191a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001890:	4b24      	ldr	r3, [pc, #144]	; (8001924 <HAL_RCC_OscConfig+0x82c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a23      	ldr	r2, [pc, #140]	; (8001924 <HAL_RCC_OscConfig+0x82c>)
 8001896:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800189a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800189c:	4b21      	ldr	r3, [pc, #132]	; (8001924 <HAL_RCC_OscConfig+0x82c>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	4a20      	ldr	r2, [pc, #128]	; (8001924 <HAL_RCC_OscConfig+0x82c>)
 80018a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018a8:	f7ff fad0 	bl	8000e4c <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b0:	f7ff facc 	bl	8000e4c <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e02c      	b.n	800191c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018c2:	4b18      	ldr	r3, [pc, #96]	; (8001924 <HAL_RCC_OscConfig+0x82c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d0f0      	beq.n	80018b0 <HAL_RCC_OscConfig+0x7b8>
 80018ce:	e024      	b.n	800191a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	2b0c      	cmp	r3, #12
 80018d4:	d01f      	beq.n	8001916 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018d6:	4b13      	ldr	r3, [pc, #76]	; (8001924 <HAL_RCC_OscConfig+0x82c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a12      	ldr	r2, [pc, #72]	; (8001924 <HAL_RCC_OscConfig+0x82c>)
 80018dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e2:	f7ff fab3 	bl	8000e4c <HAL_GetTick>
 80018e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018e8:	e008      	b.n	80018fc <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ea:	f7ff faaf 	bl	8000e4c <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e00f      	b.n	800191c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018fc:	4b09      	ldr	r3, [pc, #36]	; (8001924 <HAL_RCC_OscConfig+0x82c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1f0      	bne.n	80018ea <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001908:	4b06      	ldr	r3, [pc, #24]	; (8001924 <HAL_RCC_OscConfig+0x82c>)
 800190a:	68da      	ldr	r2, [r3, #12]
 800190c:	4905      	ldr	r1, [pc, #20]	; (8001924 <HAL_RCC_OscConfig+0x82c>)
 800190e:	4b06      	ldr	r3, [pc, #24]	; (8001928 <HAL_RCC_OscConfig+0x830>)
 8001910:	4013      	ands	r3, r2
 8001912:	60cb      	str	r3, [r1, #12]
 8001914:	e001      	b.n	800191a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e000      	b.n	800191c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	3720      	adds	r7, #32
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40021000 	.word	0x40021000
 8001928:	feeefffc 	.word	0xfeeefffc

0800192c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d101      	bne.n	8001940 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e0e7      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001940:	4b75      	ldr	r3, [pc, #468]	; (8001b18 <HAL_RCC_ClockConfig+0x1ec>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0307 	and.w	r3, r3, #7
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	429a      	cmp	r2, r3
 800194c:	d910      	bls.n	8001970 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194e:	4b72      	ldr	r3, [pc, #456]	; (8001b18 <HAL_RCC_ClockConfig+0x1ec>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f023 0207 	bic.w	r2, r3, #7
 8001956:	4970      	ldr	r1, [pc, #448]	; (8001b18 <HAL_RCC_ClockConfig+0x1ec>)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	4313      	orrs	r3, r2
 800195c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800195e:	4b6e      	ldr	r3, [pc, #440]	; (8001b18 <HAL_RCC_ClockConfig+0x1ec>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	429a      	cmp	r2, r3
 800196a:	d001      	beq.n	8001970 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e0cf      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d010      	beq.n	800199e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	4b66      	ldr	r3, [pc, #408]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001988:	429a      	cmp	r2, r3
 800198a:	d908      	bls.n	800199e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800198c:	4b63      	ldr	r3, [pc, #396]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	4960      	ldr	r1, [pc, #384]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 800199a:	4313      	orrs	r3, r2
 800199c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d04c      	beq.n	8001a44 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	2b03      	cmp	r3, #3
 80019b0:	d107      	bne.n	80019c2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019b2:	4b5a      	ldr	r3, [pc, #360]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d121      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e0a6      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d107      	bne.n	80019da <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019ca:	4b54      	ldr	r3, [pc, #336]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d115      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e09a      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d107      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019e2:	4b4e      	ldr	r3, [pc, #312]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d109      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e08e      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019f2:	4b4a      	ldr	r3, [pc, #296]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e086      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a02:	4b46      	ldr	r3, [pc, #280]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f023 0203 	bic.w	r2, r3, #3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	4943      	ldr	r1, [pc, #268]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a14:	f7ff fa1a 	bl	8000e4c <HAL_GetTick>
 8001a18:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a1a:	e00a      	b.n	8001a32 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a1c:	f7ff fa16 	bl	8000e4c <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e06e      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a32:	4b3a      	ldr	r3, [pc, #232]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f003 020c 	and.w	r2, r3, #12
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d1eb      	bne.n	8001a1c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d010      	beq.n	8001a72 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689a      	ldr	r2, [r3, #8]
 8001a54:	4b31      	ldr	r3, [pc, #196]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d208      	bcs.n	8001a72 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a60:	4b2e      	ldr	r3, [pc, #184]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	492b      	ldr	r1, [pc, #172]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a72:	4b29      	ldr	r3, [pc, #164]	; (8001b18 <HAL_RCC_ClockConfig+0x1ec>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d210      	bcs.n	8001aa2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a80:	4b25      	ldr	r3, [pc, #148]	; (8001b18 <HAL_RCC_ClockConfig+0x1ec>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f023 0207 	bic.w	r2, r3, #7
 8001a88:	4923      	ldr	r1, [pc, #140]	; (8001b18 <HAL_RCC_ClockConfig+0x1ec>)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a90:	4b21      	ldr	r3, [pc, #132]	; (8001b18 <HAL_RCC_ClockConfig+0x1ec>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0307 	and.w	r3, r3, #7
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d001      	beq.n	8001aa2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e036      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0304 	and.w	r3, r3, #4
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d008      	beq.n	8001ac0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aae:	4b1b      	ldr	r3, [pc, #108]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	4918      	ldr	r1, [pc, #96]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001abc:	4313      	orrs	r3, r2
 8001abe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0308 	and.w	r3, r3, #8
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d009      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001acc:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	00db      	lsls	r3, r3, #3
 8001ada:	4910      	ldr	r1, [pc, #64]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ae0:	f000 f824 	bl	8001b2c <HAL_RCC_GetSysClockFreq>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	4b0d      	ldr	r3, [pc, #52]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	091b      	lsrs	r3, r3, #4
 8001aec:	f003 030f 	and.w	r3, r3, #15
 8001af0:	490b      	ldr	r1, [pc, #44]	; (8001b20 <HAL_RCC_ClockConfig+0x1f4>)
 8001af2:	5ccb      	ldrb	r3, [r1, r3]
 8001af4:	f003 031f 	and.w	r3, r3, #31
 8001af8:	fa22 f303 	lsr.w	r3, r2, r3
 8001afc:	4a09      	ldr	r2, [pc, #36]	; (8001b24 <HAL_RCC_ClockConfig+0x1f8>)
 8001afe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b00:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <HAL_RCC_ClockConfig+0x1fc>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff f951 	bl	8000dac <HAL_InitTick>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b0e:	7afb      	ldrb	r3, [r7, #11]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3710      	adds	r7, #16
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40022000 	.word	0x40022000
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	08001f60 	.word	0x08001f60
 8001b24:	20000008 	.word	0x20000008
 8001b28:	2000000c 	.word	0x2000000c

08001b2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b089      	sub	sp, #36	; 0x24
 8001b30:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61fb      	str	r3, [r7, #28]
 8001b36:	2300      	movs	r3, #0
 8001b38:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b3a:	4b3e      	ldr	r3, [pc, #248]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f003 030c 	and.w	r3, r3, #12
 8001b42:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b44:	4b3b      	ldr	r3, [pc, #236]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	f003 0303 	and.w	r3, r3, #3
 8001b4c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d005      	beq.n	8001b60 <HAL_RCC_GetSysClockFreq+0x34>
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	2b0c      	cmp	r3, #12
 8001b58:	d121      	bne.n	8001b9e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d11e      	bne.n	8001b9e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b60:	4b34      	ldr	r3, [pc, #208]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0308 	and.w	r3, r3, #8
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d107      	bne.n	8001b7c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b6c:	4b31      	ldr	r3, [pc, #196]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b72:	0a1b      	lsrs	r3, r3, #8
 8001b74:	f003 030f 	and.w	r3, r3, #15
 8001b78:	61fb      	str	r3, [r7, #28]
 8001b7a:	e005      	b.n	8001b88 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b7c:	4b2d      	ldr	r3, [pc, #180]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	091b      	lsrs	r3, r3, #4
 8001b82:	f003 030f 	and.w	r3, r3, #15
 8001b86:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001b88:	4a2b      	ldr	r2, [pc, #172]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b90:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d10d      	bne.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b9c:	e00a      	b.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	2b04      	cmp	r3, #4
 8001ba2:	d102      	bne.n	8001baa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ba4:	4b25      	ldr	r3, [pc, #148]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x110>)
 8001ba6:	61bb      	str	r3, [r7, #24]
 8001ba8:	e004      	b.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	2b08      	cmp	r3, #8
 8001bae:	d101      	bne.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bb0:	4b23      	ldr	r3, [pc, #140]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x114>)
 8001bb2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	2b0c      	cmp	r3, #12
 8001bb8:	d134      	bne.n	8001c24 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001bba:	4b1e      	ldr	r3, [pc, #120]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	f003 0303 	and.w	r3, r3, #3
 8001bc2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d003      	beq.n	8001bd2 <HAL_RCC_GetSysClockFreq+0xa6>
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	2b03      	cmp	r3, #3
 8001bce:	d003      	beq.n	8001bd8 <HAL_RCC_GetSysClockFreq+0xac>
 8001bd0:	e005      	b.n	8001bde <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001bd2:	4b1a      	ldr	r3, [pc, #104]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x110>)
 8001bd4:	617b      	str	r3, [r7, #20]
      break;
 8001bd6:	e005      	b.n	8001be4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001bd8:	4b19      	ldr	r3, [pc, #100]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x114>)
 8001bda:	617b      	str	r3, [r7, #20]
      break;
 8001bdc:	e002      	b.n	8001be4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	617b      	str	r3, [r7, #20]
      break;
 8001be2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001be4:	4b13      	ldr	r3, [pc, #76]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	091b      	lsrs	r3, r3, #4
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	3301      	adds	r3, #1
 8001bf0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001bf2:	4b10      	ldr	r3, [pc, #64]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	0a1b      	lsrs	r3, r3, #8
 8001bf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bfc:	697a      	ldr	r2, [r7, #20]
 8001bfe:	fb03 f202 	mul.w	r2, r3, r2
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c08:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c0a:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	0e5b      	lsrs	r3, r3, #25
 8001c10:	f003 0303 	and.w	r3, r3, #3
 8001c14:	3301      	adds	r3, #1
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c1a:	697a      	ldr	r2, [r7, #20]
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c22:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c24:	69bb      	ldr	r3, [r7, #24]
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3724      	adds	r7, #36	; 0x24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	40021000 	.word	0x40021000
 8001c38:	08001f70 	.word	0x08001f70
 8001c3c:	00f42400 	.word	0x00f42400
 8001c40:	007a1200 	.word	0x007a1200

08001c44 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c50:	4b2a      	ldr	r3, [pc, #168]	; (8001cfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d003      	beq.n	8001c64 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001c5c:	f7ff f9e8 	bl	8001030 <HAL_PWREx_GetVoltageRange>
 8001c60:	6178      	str	r0, [r7, #20]
 8001c62:	e014      	b.n	8001c8e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c64:	4b25      	ldr	r3, [pc, #148]	; (8001cfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c68:	4a24      	ldr	r2, [pc, #144]	; (8001cfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c6e:	6593      	str	r3, [r2, #88]	; 0x58
 8001c70:	4b22      	ldr	r3, [pc, #136]	; (8001cfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001c7c:	f7ff f9d8 	bl	8001030 <HAL_PWREx_GetVoltageRange>
 8001c80:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001c82:	4b1e      	ldr	r3, [pc, #120]	; (8001cfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c86:	4a1d      	ldr	r2, [pc, #116]	; (8001cfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c8c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c94:	d10b      	bne.n	8001cae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2b80      	cmp	r3, #128	; 0x80
 8001c9a:	d919      	bls.n	8001cd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2ba0      	cmp	r3, #160	; 0xa0
 8001ca0:	d902      	bls.n	8001ca8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	613b      	str	r3, [r7, #16]
 8001ca6:	e013      	b.n	8001cd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ca8:	2301      	movs	r3, #1
 8001caa:	613b      	str	r3, [r7, #16]
 8001cac:	e010      	b.n	8001cd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2b80      	cmp	r3, #128	; 0x80
 8001cb2:	d902      	bls.n	8001cba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	613b      	str	r3, [r7, #16]
 8001cb8:	e00a      	b.n	8001cd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2b80      	cmp	r3, #128	; 0x80
 8001cbe:	d102      	bne.n	8001cc6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	613b      	str	r3, [r7, #16]
 8001cc4:	e004      	b.n	8001cd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2b70      	cmp	r3, #112	; 0x70
 8001cca:	d101      	bne.n	8001cd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ccc:	2301      	movs	r3, #1
 8001cce:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001cd0:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f023 0207 	bic.w	r2, r3, #7
 8001cd8:	4909      	ldr	r1, [pc, #36]	; (8001d00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ce0:	4b07      	ldr	r3, [pc, #28]	; (8001d00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0307 	and.w	r3, r3, #7
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d001      	beq.n	8001cf2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e000      	b.n	8001cf4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3718      	adds	r7, #24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	40022000 	.word	0x40022000

08001d04 <__libc_init_array>:
 8001d04:	b570      	push	{r4, r5, r6, lr}
 8001d06:	4d0d      	ldr	r5, [pc, #52]	; (8001d3c <__libc_init_array+0x38>)
 8001d08:	4c0d      	ldr	r4, [pc, #52]	; (8001d40 <__libc_init_array+0x3c>)
 8001d0a:	1b64      	subs	r4, r4, r5
 8001d0c:	10a4      	asrs	r4, r4, #2
 8001d0e:	2600      	movs	r6, #0
 8001d10:	42a6      	cmp	r6, r4
 8001d12:	d109      	bne.n	8001d28 <__libc_init_array+0x24>
 8001d14:	4d0b      	ldr	r5, [pc, #44]	; (8001d44 <__libc_init_array+0x40>)
 8001d16:	4c0c      	ldr	r4, [pc, #48]	; (8001d48 <__libc_init_array+0x44>)
 8001d18:	f000 f820 	bl	8001d5c <_init>
 8001d1c:	1b64      	subs	r4, r4, r5
 8001d1e:	10a4      	asrs	r4, r4, #2
 8001d20:	2600      	movs	r6, #0
 8001d22:	42a6      	cmp	r6, r4
 8001d24:	d105      	bne.n	8001d32 <__libc_init_array+0x2e>
 8001d26:	bd70      	pop	{r4, r5, r6, pc}
 8001d28:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d2c:	4798      	blx	r3
 8001d2e:	3601      	adds	r6, #1
 8001d30:	e7ee      	b.n	8001d10 <__libc_init_array+0xc>
 8001d32:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d36:	4798      	blx	r3
 8001d38:	3601      	adds	r6, #1
 8001d3a:	e7f2      	b.n	8001d22 <__libc_init_array+0x1e>
 8001d3c:	08001fa0 	.word	0x08001fa0
 8001d40:	08001fa0 	.word	0x08001fa0
 8001d44:	08001fa0 	.word	0x08001fa0
 8001d48:	08001fa4 	.word	0x08001fa4

08001d4c <memset>:
 8001d4c:	4402      	add	r2, r0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d100      	bne.n	8001d56 <memset+0xa>
 8001d54:	4770      	bx	lr
 8001d56:	f803 1b01 	strb.w	r1, [r3], #1
 8001d5a:	e7f9      	b.n	8001d50 <memset+0x4>

08001d5c <_init>:
 8001d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d5e:	bf00      	nop
 8001d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d62:	bc08      	pop	{r3}
 8001d64:	469e      	mov	lr, r3
 8001d66:	4770      	bx	lr

08001d68 <_fini>:
 8001d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d6a:	bf00      	nop
 8001d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d6e:	bc08      	pop	{r3}
 8001d70:	469e      	mov	lr, r3
 8001d72:	4770      	bx	lr
