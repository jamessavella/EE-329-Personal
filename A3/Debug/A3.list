
A3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004a8  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08000654  08000654  00010654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000678  08000678  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08000678  08000678  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000678  08000678  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000678  08000678  00010678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800067c  0800067c  0001067c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08000680  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000008  08000688  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000688  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001ba2  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006bb  00000000  00000000  00021bda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000298  00000000  00000000  00022298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000240  00000000  00000000  00022530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000271de  00000000  00000000  00022770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002af3  00000000  00000000  0004994e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0626  00000000  00000000  0004c441  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013ca67  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000088c  00000000  00000000  0013cab8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000008 	.word	0x20000008
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800063c 	.word	0x0800063c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000000c 	.word	0x2000000c
 80001e8:	0800063c 	.word	0x0800063c

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <SysTick_Init>:

void SystemClock_Config( void );


//From Lab Manual
void SysTick_Init( void ) {
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |     	// enable SysTick Timer
 8000200:	4b08      	ldr	r3, [pc, #32]	; (8000224 <SysTick_Init+0x28>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a07      	ldr	r2, [pc, #28]	; (8000224 <SysTick_Init+0x28>)
 8000206:	f043 0305 	orr.w	r3, r3, #5
 800020a:	6013      	str	r3, [r2, #0]
                      SysTick_CTRL_CLKSOURCE_Msk); 	// select CPU clock
	SysTick->CTRL &= ~(SysTick_CTRL_TICKINT_Msk);  	// disable interrupt
 800020c:	4b05      	ldr	r3, [pc, #20]	; (8000224 <SysTick_Init+0x28>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a04      	ldr	r2, [pc, #16]	; (8000224 <SysTick_Init+0x28>)
 8000212:	f023 0302 	bic.w	r3, r3, #2
 8000216:	6013      	str	r3, [r2, #0]
}
 8000218:	bf00      	nop
 800021a:	46bd      	mov	sp, r7
 800021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop
 8000224:	e000e010 	.word	0xe000e010

08000228 <delay_us>:
//From Lab Manual
// delay in microseconds using SysTick timer to count CPU clock cycles
// do not call with 0 : error, maximum delay.
// careful calling with small nums : results in longer delays than specified:
//	   e.g. @4MHz, delay_us(1) = 10=15 us delay.
void delay_us(const uint32_t time_us) {
 8000228:	b480      	push	{r7}
 800022a:	b083      	sub	sp, #12
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
	// set the counts for the specified delay
	SysTick->LOAD = (uint32_t)((time_us * (SystemCoreClock / 1000000)) - 1);
 8000230:	4b11      	ldr	r3, [pc, #68]	; (8000278 <delay_us+0x50>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a11      	ldr	r2, [pc, #68]	; (800027c <delay_us+0x54>)
 8000236:	fba2 2303 	umull	r2, r3, r2, r3
 800023a:	0c9b      	lsrs	r3, r3, #18
 800023c:	687a      	ldr	r2, [r7, #4]
 800023e:	fb02 f303 	mul.w	r3, r2, r3
 8000242:	4a0f      	ldr	r2, [pc, #60]	; (8000280 <delay_us+0x58>)
 8000244:	3b01      	subs	r3, #1
 8000246:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;                                  	 // clear timer count
 8000248:	4b0d      	ldr	r3, [pc, #52]	; (8000280 <delay_us+0x58>)
 800024a:	2200      	movs	r2, #0
 800024c:	609a      	str	r2, [r3, #8]
	SysTick->CTRL &= ~(SysTick_CTRL_COUNTFLAG_Msk);    	 // clear count flag
 800024e:	4b0c      	ldr	r3, [pc, #48]	; (8000280 <delay_us+0x58>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	4a0b      	ldr	r2, [pc, #44]	; (8000280 <delay_us+0x58>)
 8000254:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000258:	6013      	str	r3, [r2, #0]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)); // wait for flag
 800025a:	bf00      	nop
 800025c:	4b08      	ldr	r3, [pc, #32]	; (8000280 <delay_us+0x58>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000264:	2b00      	cmp	r3, #0
 8000266:	d0f9      	beq.n	800025c <delay_us+0x34>
}
 8000268:	bf00      	nop
 800026a:	bf00      	nop
 800026c:	370c      	adds	r7, #12
 800026e:	46bd      	mov	sp, r7
 8000270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	20000000 	.word	0x20000000
 800027c:	431bde83 	.word	0x431bde83
 8000280:	e000e010 	.word	0xe000e010

08000284 <LCD_outputConfig>:

void LCD_outputConfig(){   		 //configuring output bits PB0, PB1, PB2, PB3, PB4, PB5, PB6, PB8, PB9, PB10, PB11  --> columns
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
	RCC->AHB2ENR   |=  (RCC_AHB2ENR_GPIOBEN);
 8000288:	4b1b      	ldr	r3, [pc, #108]	; (80002f8 <LCD_outputConfig+0x74>)
 800028a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800028c:	4a1a      	ldr	r2, [pc, #104]	; (80002f8 <LCD_outputConfig+0x74>)
 800028e:	f043 0302 	orr.w	r3, r3, #2
 8000292:	64d3      	str	r3, [r2, #76]	; 0x4c
	LCD_PORT->MODER   &= ~(GPIO_MODER_MODE0 | GPIO_MODER_MODE1| GPIO_MODER_MODE2| GPIO_MODER_MODE3| GPIO_MODER_MODE9| GPIO_MODER_MODE10| GPIO_MODER_MODE11);//sets each mode to 0
 8000294:	4b19      	ldr	r3, [pc, #100]	; (80002fc <LCD_outputConfig+0x78>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a18      	ldr	r2, [pc, #96]	; (80002fc <LCD_outputConfig+0x78>)
 800029a:	f423 037c 	bic.w	r3, r3, #16515072	; 0xfc0000
 800029e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80002a2:	6013      	str	r3, [r2, #0]
	LCD_PORT->MODER   |=  (GPIO_MODER_MODE0_0 | GPIO_MODER_MODE1_0 | GPIO_MODER_MODE2_0 | GPIO_MODER_MODE3_0|GPIO_MODER_MODE9_0| GPIO_MODER_MODE10_0| GPIO_MODER_MODE11_0);
 80002a4:	4b15      	ldr	r3, [pc, #84]	; (80002fc <LCD_outputConfig+0x78>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a14      	ldr	r2, [pc, #80]	; (80002fc <LCD_outputConfig+0x78>)
 80002aa:	f443 03a8 	orr.w	r3, r3, #5505024	; 0x540000
 80002ae:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 80002b2:	6013      	str	r3, [r2, #0]


	LCD_PORT->OTYPER  &= ~(GPIO_OTYPER_OT0 | GPIO_OTYPER_OT1 | GPIO_OTYPER_OT2 | GPIO_OTYPER_OT3| GPIO_OTYPER_OT9| GPIO_OTYPER_OT10| GPIO_OTYPER_OT11);
 80002b4:	4b11      	ldr	r3, [pc, #68]	; (80002fc <LCD_outputConfig+0x78>)
 80002b6:	685b      	ldr	r3, [r3, #4]
 80002b8:	4a10      	ldr	r2, [pc, #64]	; (80002fc <LCD_outputConfig+0x78>)
 80002ba:	f423 6360 	bic.w	r3, r3, #3584	; 0xe00
 80002be:	f023 030f 	bic.w	r3, r3, #15
 80002c2:	6053      	str	r3, [r2, #4]
	LCD_PORT->PUPDR   &= ~(GPIO_PUPDR_PUPD0 | GPIO_PUPDR_PUPD1 | GPIO_PUPDR_PUPD2 | GPIO_PUPDR_PUPD3 | GPIO_PUPDR_PUPD9| GPIO_PUPDR_PUPD10| GPIO_PUPDR_PUPD11);
 80002c4:	4b0d      	ldr	r3, [pc, #52]	; (80002fc <LCD_outputConfig+0x78>)
 80002c6:	68db      	ldr	r3, [r3, #12]
 80002c8:	4a0c      	ldr	r2, [pc, #48]	; (80002fc <LCD_outputConfig+0x78>)
 80002ca:	f423 037c 	bic.w	r3, r3, #16515072	; 0xfc0000
 80002ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80002d2:	60d3      	str	r3, [r2, #12]
	LCD_PORT->OSPEEDR |=  ((3 << GPIO_OSPEEDR_OSPEED0_Pos)|
 80002d4:	4b09      	ldr	r3, [pc, #36]	; (80002fc <LCD_outputConfig+0x78>)
 80002d6:	689b      	ldr	r3, [r3, #8]
 80002d8:	4a08      	ldr	r2, [pc, #32]	; (80002fc <LCD_outputConfig+0x78>)
 80002da:	f443 037c 	orr.w	r3, r3, #16515072	; 0xfc0000
 80002de:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 80002e2:	6093      	str	r3, [r2, #8]
					 (3 << GPIO_OSPEEDR_OSPEED3_Pos)|
					 (3 << GPIO_OSPEEDR_OSPEED9_Pos)|
					 (3 << GPIO_OSPEEDR_OSPEED10_Pos)|
					 (3 << GPIO_OSPEEDR_OSPEED11_Pos));

	LCD_PORT->BRR = ( DB4 | DB5 | DB6 | DB7 | LCD_EN | LCD_RW | LCD_RS ); //Initializes data to all 0
 80002e4:	4b05      	ldr	r3, [pc, #20]	; (80002fc <LCD_outputConfig+0x78>)
 80002e6:	f640 620f 	movw	r2, #3599	; 0xe0f
 80002ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80002ec:	bf00      	nop
 80002ee:	46bd      	mov	sp, r7
 80002f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	40021000 	.word	0x40021000
 80002fc:	48000400 	.word	0x48000400

08000300 <LCD_init>:
//KELVIN DEBUG SHIT UP TOP



//From Lab Manual (Altered)
void LCD_init( void )  {   // RCC & GPIO config removed - leverage A1, A2 code
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
	delay_us( 100000000 );                     // power-up wait 40 ms
 8000306:	4812      	ldr	r0, [pc, #72]	; (8000350 <LCD_init+0x50>)
 8000308:	f7ff ff8e 	bl	8000228 <delay_us>
	for ( int idx = 0; idx < 3; idx++ ) {  // wake up 1,2,3: DATA = 0011 XXXX
 800030c:	2300      	movs	r3, #0
 800030e:	607b      	str	r3, [r7, #4]
 8000310:	e008      	b.n	8000324 <LCD_init+0x24>
		LCD_command(0x30);             // HI 4b of 8b cmd, low nibble = X //was changed from 0x30 to 0x03
 8000312:	2030      	movs	r0, #48	; 0x30
 8000314:	f000 f836 	bl	8000384 <LCD_command>
		delay_us( 200 );
 8000318:	20c8      	movs	r0, #200	; 0xc8
 800031a:	f7ff ff85 	bl	8000228 <delay_us>
	for ( int idx = 0; idx < 3; idx++ ) {  // wake up 1,2,3: DATA = 0011 XXXX
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	3301      	adds	r3, #1
 8000322:	607b      	str	r3, [r7, #4]
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	2b02      	cmp	r3, #2
 8000328:	ddf3      	ble.n	8000312 <LCD_init+0x12>
	}
	//sequence from data sheet
	LCD_command(0x28);
 800032a:	2028      	movs	r0, #40	; 0x28
 800032c:	f000 f82a 	bl	8000384 <LCD_command>
	LCD_command(0x10);
 8000330:	2010      	movs	r0, #16
 8000332:	f000 f827 	bl	8000384 <LCD_command>
	LCD_command(0x0F);
 8000336:	200f      	movs	r0, #15
 8000338:	f000 f824 	bl	8000384 <LCD_command>
	LCD_command(0x06);
 800033c:	2006      	movs	r0, #6
 800033e:	f000 f821 	bl	8000384 <LCD_command>
	LCD_command(0x02);
 8000342:	2002      	movs	r0, #2
 8000344:	f000 f81e 	bl	8000384 <LCD_command>
}
 8000348:	bf00      	nop
 800034a:	3708      	adds	r7, #8
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}
 8000350:	05f5e100 	.word	0x05f5e100

08000354 <LCD_pulse_ENA>:
////KELVIN DEBUG SHIT STOP---------------------------------------------------------------------------------



//From Lab Manual
void LCD_pulse_ENA( void )  {	//pulses ENABLE signal to write data
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
	LCD_PORT->ODR   |= ( LCD_EN );         	// ENABLE = HI
 8000358:	4b09      	ldr	r3, [pc, #36]	; (8000380 <LCD_pulse_ENA+0x2c>)
 800035a:	695b      	ldr	r3, [r3, #20]
 800035c:	4a08      	ldr	r2, [pc, #32]	; (8000380 <LCD_pulse_ENA+0x2c>)
 800035e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000362:	6153      	str	r3, [r2, #20]
	delay_us( 5 );                         // TDDR > 320 ns
 8000364:	2005      	movs	r0, #5
 8000366:	f7ff ff5f 	bl	8000228 <delay_us>
	LCD_PORT->ODR   &= ~( LCD_EN );        // ENABLE = LOW
 800036a:	4b05      	ldr	r3, [pc, #20]	; (8000380 <LCD_pulse_ENA+0x2c>)
 800036c:	695b      	ldr	r3, [r3, #20]
 800036e:	4a04      	ldr	r2, [pc, #16]	; (8000380 <LCD_pulse_ENA+0x2c>)
 8000370:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000374:	6153      	str	r3, [r2, #20]
	delay_us( 5 );
 8000376:	2005      	movs	r0, #5
 8000378:	f7ff ff56 	bl	8000228 <delay_us>
}
 800037c:	bf00      	nop
 800037e:	bd80      	pop	{r7, pc}
 8000380:	48000400 	.word	0x48000400

08000384 <LCD_command>:



//From Lab Manual (altered)
void LCD_command( uint8_t command )  { // send command to LCD in 4-bit instruction mode
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
 800038a:	4603      	mov	r3, r0
 800038c:	71fb      	strb	r3, [r7, #7]
	// HIGH nibble then LOW nibble, timing sensitive
	LCD_PORT->ODR   &= ~( (DB4 | DB5 | DB6 | DB7) );               	// Clears registers
 800038e:	4b18      	ldr	r3, [pc, #96]	; (80003f0 <LCD_command+0x6c>)
 8000390:	695b      	ldr	r3, [r3, #20]
 8000392:	4a17      	ldr	r2, [pc, #92]	; (80003f0 <LCD_command+0x6c>)
 8000394:	f023 030f 	bic.w	r3, r3, #15
 8000398:	6153      	str	r3, [r2, #20]
	LCD_PORT->ODR   |= ( (0xF0 & command) >> 4); 					// sets HIGH nibble to register
 800039a:	4b15      	ldr	r3, [pc, #84]	; (80003f0 <LCD_command+0x6c>)
 800039c:	695b      	ldr	r3, [r3, #20]
 800039e:	79fa      	ldrb	r2, [r7, #7]
 80003a0:	0912      	lsrs	r2, r2, #4
 80003a2:	b2d2      	uxtb	r2, r2
 80003a4:	4611      	mov	r1, r2
 80003a6:	4a12      	ldr	r2, [pc, #72]	; (80003f0 <LCD_command+0x6c>)
 80003a8:	430b      	orrs	r3, r1
 80003aa:	6153      	str	r3, [r2, #20]
	delay_us( 500000 );
 80003ac:	4811      	ldr	r0, [pc, #68]	; (80003f4 <LCD_command+0x70>)
 80003ae:	f7ff ff3b 	bl	8000228 <delay_us>
	LCD_pulse_ENA( );                                    			//latch HIGH NIBBLE
 80003b2:	f7ff ffcf 	bl	8000354 <LCD_pulse_ENA>

	LCD_PORT->ODR   &= ~( (DB4 | DB5 | DB6 | DB7) );               	// clear
 80003b6:	4b0e      	ldr	r3, [pc, #56]	; (80003f0 <LCD_command+0x6c>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	4a0d      	ldr	r2, [pc, #52]	; (80003f0 <LCD_command+0x6c>)
 80003bc:	f023 030f 	bic.w	r3, r3, #15
 80003c0:	6153      	str	r3, [r2, #20]
	//Added mask to ensure isolated lower nibble. Redundant?
	LCD_PORT->ODR   |= (0x0F & command);							// sets LOW nibble to register
 80003c2:	4b0b      	ldr	r3, [pc, #44]	; (80003f0 <LCD_command+0x6c>)
 80003c4:	695a      	ldr	r2, [r3, #20]
 80003c6:	79fb      	ldrb	r3, [r7, #7]
 80003c8:	f003 030f 	and.w	r3, r3, #15
 80003cc:	4908      	ldr	r1, [pc, #32]	; (80003f0 <LCD_command+0x6c>)
 80003ce:	4313      	orrs	r3, r2
 80003d0:	614b      	str	r3, [r1, #20]
	delay_us(  500000 );
 80003d2:	4808      	ldr	r0, [pc, #32]	; (80003f4 <LCD_command+0x70>)
 80003d4:	f7ff ff28 	bl	8000228 <delay_us>
	LCD_pulse_ENA( );                                    			// latch LOW NIBBLE
 80003d8:	f7ff ffbc 	bl	8000354 <LCD_pulse_ENA>
	LCD_PORT->ODR   &= ~( (DB4 | DB5 | DB6 | DB7) );               	// clear; redundant but to lock it
 80003dc:	4b04      	ldr	r3, [pc, #16]	; (80003f0 <LCD_command+0x6c>)
 80003de:	695b      	ldr	r3, [r3, #20]
 80003e0:	4a03      	ldr	r2, [pc, #12]	; (80003f0 <LCD_command+0x6c>)
 80003e2:	f023 030f 	bic.w	r3, r3, #15
 80003e6:	6153      	str	r3, [r2, #20]
}
 80003e8:	bf00      	nop
 80003ea:	3708      	adds	r7, #8
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	48000400 	.word	0x48000400
 80003f4:	0007a120 	.word	0x0007a120

080003f8 <LCD_write_char>:
//}
////KELVIN DEBUG SHIT END


//From Lab Manual
void LCD_write_char( uint8_t letter )  {
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	4603      	mov	r3, r0
 8000400:	71fb      	strb	r3, [r7, #7]
	// calls LCD_command() w/char data; assumes all ctrl bits set LO in LCD_init()
	LCD_PORT->ODR   |= (LCD_RS);       // RS = HI for data to address
 8000402:	4b0b      	ldr	r3, [pc, #44]	; (8000430 <LCD_write_char+0x38>)
 8000404:	695b      	ldr	r3, [r3, #20]
 8000406:	4a0a      	ldr	r2, [pc, #40]	; (8000430 <LCD_write_char+0x38>)
 8000408:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800040c:	6153      	str	r3, [r2, #20]
	delay_us( 5 );
 800040e:	2005      	movs	r0, #5
 8000410:	f7ff ff0a 	bl	8000228 <delay_us>
	LCD_command( letter );             // character to print
 8000414:	79fb      	ldrb	r3, [r7, #7]
 8000416:	4618      	mov	r0, r3
 8000418:	f7ff ffb4 	bl	8000384 <LCD_command>
	LCD_PORT->ODR   &= ~(LCD_RS);      // RS = LO
 800041c:	4b04      	ldr	r3, [pc, #16]	; (8000430 <LCD_write_char+0x38>)
 800041e:	695b      	ldr	r3, [r3, #20]
 8000420:	4a03      	ldr	r2, [pc, #12]	; (8000430 <LCD_write_char+0x38>)
 8000422:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000426:	6153      	str	r3, [r2, #20]
}
 8000428:	bf00      	nop
 800042a:	3708      	adds	r7, #8
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}
 8000430:	48000400 	.word	0x48000400

08000434 <LCD_set_cursor>:

//NEW FUNCTIONS

//TEST
//To set cursor
void LCD_set_cursor( uint8_t col, uint8_t row ){
 8000434:	b580      	push	{r7, lr}
 8000436:	b084      	sub	sp, #16
 8000438:	af00      	add	r7, sp, #0
 800043a:	4603      	mov	r3, r0
 800043c:	460a      	mov	r2, r1
 800043e:	71fb      	strb	r3, [r7, #7]
 8000440:	4613      	mov	r3, r2
 8000442:	71bb      	strb	r3, [r7, #6]
	uint8_t row_address; 				//row address initialize variable
	uint8_t address = 0x80 + col;		//To load address to set DDRAM instruction
 8000444:	79fb      	ldrb	r3, [r7, #7]
 8000446:	3b80      	subs	r3, #128	; 0x80
 8000448:	73fb      	strb	r3, [r7, #15]

	switch(row){
 800044a:	79bb      	ldrb	r3, [r7, #6]
 800044c:	2b00      	cmp	r3, #0
 800044e:	d002      	beq.n	8000456 <LCD_set_cursor+0x22>
 8000450:	2b01      	cmp	r3, #1
 8000452:	d007      	beq.n	8000464 <LCD_set_cursor+0x30>
 8000454:	e00d      	b.n	8000472 <LCD_set_cursor+0x3e>
	case 0:		//lower row range 00 to 0F
		row_address = 0x00;
 8000456:	2300      	movs	r3, #0
 8000458:	73bb      	strb	r3, [r7, #14]
		address = row_address + address;
 800045a:	7bba      	ldrb	r2, [r7, #14]
 800045c:	7bfb      	ldrb	r3, [r7, #15]
 800045e:	4413      	add	r3, r2
 8000460:	73fb      	strb	r3, [r7, #15]
		break;
 8000462:	e006      	b.n	8000472 <LCD_set_cursor+0x3e>

	case 1:		//upper row range 40 to 4F
		row_address = 0x40;
 8000464:	2340      	movs	r3, #64	; 0x40
 8000466:	73bb      	strb	r3, [r7, #14]
		address = row_address + address;
 8000468:	7bba      	ldrb	r2, [r7, #14]
 800046a:	7bfb      	ldrb	r3, [r7, #15]
 800046c:	4413      	add	r3, r2
 800046e:	73fb      	strb	r3, [r7, #15]
		break;
 8000470:	bf00      	nop
	}
	LCD_command(address);	//sends address to be set to LCD
 8000472:	7bfb      	ldrb	r3, [r7, #15]
 8000474:	4618      	mov	r0, r3
 8000476:	f7ff ff85 	bl	8000384 <LCD_command>
}
 800047a:	bf00      	nop
 800047c:	3710      	adds	r7, #16
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}

08000482 <LCD_write_string>:

//TEST
//From ChatGPT "How to index through a string to access each element"
//write string to LCD
void LCD_write_string( char *str ) {
 8000482:	b580      	push	{r7, lr}
 8000484:	b084      	sub	sp, #16
 8000486:	af00      	add	r7, sp, #0
 8000488:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < strlen(str); i++){
 800048a:	2300      	movs	r3, #0
 800048c:	60fb      	str	r3, [r7, #12]
 800048e:	e009      	b.n	80004a4 <LCD_write_string+0x22>
		LCD_write_char((uint8_t) str[i]);
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	687a      	ldr	r2, [r7, #4]
 8000494:	4413      	add	r3, r2
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	4618      	mov	r0, r3
 800049a:	f7ff ffad 	bl	80003f8 <LCD_write_char>
	for (int i = 0; i < strlen(str); i++){
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	3301      	adds	r3, #1
 80004a2:	60fb      	str	r3, [r7, #12]
 80004a4:	6878      	ldr	r0, [r7, #4]
 80004a6:	f7ff fea1 	bl	80001ec <strlen>
 80004aa:	4602      	mov	r2, r0
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	429a      	cmp	r2, r3
 80004b0:	d8ee      	bhi.n	8000490 <LCD_write_string+0xe>
	}
}
 80004b2:	bf00      	nop
 80004b4:	bf00      	nop
 80004b6:	3710      	adds	r7, #16
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}

080004bc <main>:
#include <string.h>		//for string stuff
#include "stm32l4a6xx.h"
#include "stm32l4xx_hal.h"

int main(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
	//Initialize
	SysTick_Init();		//initialize hardware clock
 80004c0:	f7ff fe9c 	bl	80001fc <SysTick_Init>
	LCD_outputConfig(); //initialize LCD output pins
 80004c4:	f7ff fede 	bl	8000284 <LCD_outputConfig>
	LCD_init();			//initialize LCD for display
 80004c8:	f7ff ff1a 	bl	8000300 <LCD_init>

	//Writes predetermined message
	LCD_set_cursor(0, 0); 					//col 0, row 0 - Top left
 80004cc:	2100      	movs	r1, #0
 80004ce:	2000      	movs	r0, #0
 80004d0:	f7ff ffb0 	bl	8000434 <LCD_set_cursor>
	LCD_write_string("EE 329 A3 TIMER");
 80004d4:	4808      	ldr	r0, [pc, #32]	; (80004f8 <main+0x3c>)
 80004d6:	f7ff ffd4 	bl	8000482 <LCD_write_string>
	LCD_set_cursor(0, 1); 					//col 0, row 1 - Bottom left
 80004da:	2101      	movs	r1, #1
 80004dc:	2000      	movs	r0, #0
 80004de:	f7ff ffa9 	bl	8000434 <LCD_set_cursor>
	LCD_write_string("*=SET #=GO 00:00");
 80004e2:	4806      	ldr	r0, [pc, #24]	; (80004fc <main+0x40>)
 80004e4:	f7ff ffcd 	bl	8000482 <LCD_write_string>
	LCD_set_cursor(11, 1); 					//Leftmost value of 00:00
 80004e8:	2101      	movs	r1, #1
 80004ea:	200b      	movs	r0, #11
 80004ec:	f7ff ffa2 	bl	8000434 <LCD_set_cursor>
	LCD_command(0x0D); 						//Turns blinking cursor on
 80004f0:	200d      	movs	r0, #13
 80004f2:	f7ff ff47 	bl	8000384 <LCD_command>


  while (1)
 80004f6:	e7fe      	b.n	80004f6 <main+0x3a>
 80004f8:	08000654 	.word	0x08000654
 80004fc:	08000664 	.word	0x08000664

08000500 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000504:	e7fe      	b.n	8000504 <NMI_Handler+0x4>

08000506 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000506:	b480      	push	{r7}
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800050a:	e7fe      	b.n	800050a <HardFault_Handler+0x4>

0800050c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000510:	e7fe      	b.n	8000510 <MemManage_Handler+0x4>

08000512 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000512:	b480      	push	{r7}
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000516:	e7fe      	b.n	8000516 <BusFault_Handler+0x4>

08000518 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800051c:	e7fe      	b.n	800051c <UsageFault_Handler+0x4>

0800051e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800051e:	b480      	push	{r7}
 8000520:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000522:	bf00      	nop
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr

0800052c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000530:	bf00      	nop
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr

0800053a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800053a:	b480      	push	{r7}
 800053c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800053e:	bf00      	nop
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr

08000548 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800054c:	f000 f83e 	bl	80005cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000550:	bf00      	nop
 8000552:	bd80      	pop	{r7, pc}

08000554 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000558:	4b06      	ldr	r3, [pc, #24]	; (8000574 <SystemInit+0x20>)
 800055a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800055e:	4a05      	ldr	r2, [pc, #20]	; (8000574 <SystemInit+0x20>)
 8000560:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000564:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000568:	bf00      	nop
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	e000ed00 	.word	0xe000ed00

08000578 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000578:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005b0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800057c:	f7ff ffea 	bl	8000554 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000580:	480c      	ldr	r0, [pc, #48]	; (80005b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000582:	490d      	ldr	r1, [pc, #52]	; (80005b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000584:	4a0d      	ldr	r2, [pc, #52]	; (80005bc <LoopForever+0xe>)
  movs r3, #0
 8000586:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000588:	e002      	b.n	8000590 <LoopCopyDataInit>

0800058a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800058a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800058c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800058e:	3304      	adds	r3, #4

08000590 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000590:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000592:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000594:	d3f9      	bcc.n	800058a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000596:	4a0a      	ldr	r2, [pc, #40]	; (80005c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000598:	4c0a      	ldr	r4, [pc, #40]	; (80005c4 <LoopForever+0x16>)
  movs r3, #0
 800059a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800059c:	e001      	b.n	80005a2 <LoopFillZerobss>

0800059e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800059e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005a0:	3204      	adds	r2, #4

080005a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005a4:	d3fb      	bcc.n	800059e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005a6:	f000 f825 	bl	80005f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005aa:	f7ff ff87 	bl	80004bc <main>

080005ae <LoopForever>:

LoopForever:
    b LoopForever
 80005ae:	e7fe      	b.n	80005ae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80005b0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80005b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005b8:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 80005bc:	08000680 	.word	0x08000680
  ldr r2, =_sbss
 80005c0:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 80005c4:	20000028 	.word	0x20000028

080005c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005c8:	e7fe      	b.n	80005c8 <ADC1_2_IRQHandler>
	...

080005cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005d0:	4b06      	ldr	r3, [pc, #24]	; (80005ec <HAL_IncTick+0x20>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	461a      	mov	r2, r3
 80005d6:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <HAL_IncTick+0x24>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4413      	add	r3, r2
 80005dc:	4a04      	ldr	r2, [pc, #16]	; (80005f0 <HAL_IncTick+0x24>)
 80005de:	6013      	str	r3, [r2, #0]
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	20000004 	.word	0x20000004
 80005f0:	20000024 	.word	0x20000024

080005f4 <__libc_init_array>:
 80005f4:	b570      	push	{r4, r5, r6, lr}
 80005f6:	4d0d      	ldr	r5, [pc, #52]	; (800062c <__libc_init_array+0x38>)
 80005f8:	4c0d      	ldr	r4, [pc, #52]	; (8000630 <__libc_init_array+0x3c>)
 80005fa:	1b64      	subs	r4, r4, r5
 80005fc:	10a4      	asrs	r4, r4, #2
 80005fe:	2600      	movs	r6, #0
 8000600:	42a6      	cmp	r6, r4
 8000602:	d109      	bne.n	8000618 <__libc_init_array+0x24>
 8000604:	4d0b      	ldr	r5, [pc, #44]	; (8000634 <__libc_init_array+0x40>)
 8000606:	4c0c      	ldr	r4, [pc, #48]	; (8000638 <__libc_init_array+0x44>)
 8000608:	f000 f818 	bl	800063c <_init>
 800060c:	1b64      	subs	r4, r4, r5
 800060e:	10a4      	asrs	r4, r4, #2
 8000610:	2600      	movs	r6, #0
 8000612:	42a6      	cmp	r6, r4
 8000614:	d105      	bne.n	8000622 <__libc_init_array+0x2e>
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	f855 3b04 	ldr.w	r3, [r5], #4
 800061c:	4798      	blx	r3
 800061e:	3601      	adds	r6, #1
 8000620:	e7ee      	b.n	8000600 <__libc_init_array+0xc>
 8000622:	f855 3b04 	ldr.w	r3, [r5], #4
 8000626:	4798      	blx	r3
 8000628:	3601      	adds	r6, #1
 800062a:	e7f2      	b.n	8000612 <__libc_init_array+0x1e>
 800062c:	08000678 	.word	0x08000678
 8000630:	08000678 	.word	0x08000678
 8000634:	08000678 	.word	0x08000678
 8000638:	0800067c 	.word	0x0800067c

0800063c <_init>:
 800063c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800063e:	bf00      	nop
 8000640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000642:	bc08      	pop	{r3}
 8000644:	469e      	mov	lr, r3
 8000646:	4770      	bx	lr

08000648 <_fini>:
 8000648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800064a:	bf00      	nop
 800064c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800064e:	bc08      	pop	{r3}
 8000650:	469e      	mov	lr, r3
 8000652:	4770      	bx	lr
