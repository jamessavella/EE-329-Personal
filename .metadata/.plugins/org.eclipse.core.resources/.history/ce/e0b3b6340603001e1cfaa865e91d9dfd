/*
 ***************************************************************************************
 * file      : I2C.c
 * project   : EE 329 S'23 A8
 * group     : GB
 * details   : I2C setup with single byte write and read functions
 * authors   : Rushabh Shah - rshah49@calpoly.edu
 *      Current Project Partner(s)
 *           : James Savella - jsavella@calpoly.edu
 *      Original project partner(s)
 *           : Jack Shaffer - jdshaffer@calpoly.edu
 *           : Mason McMguire - mmcgui09@calpoly.edu
 *           : Hardit Singh - hsingh51@calpoly.edu
 *           : Zachary Numa - znuma@calpoly.edu
 *           : Steve Tran - stran100@calpoly.edu
 *           : Zach Kwast - zkwast@calpoly.edu
 * version   : 1
 * date      : 6/2/2023
 * compiler  : STM32CubeIDE Version: 1.12.0
 * target    : NUCLEO-L4A6ZG
 ***************************************************************************************
 */
#include "main.h"
#include "I2C.h"


void I2C_setup() {
    /* USER configure GPIO pins for I2C alternate functions SCL and SDA */
    // Configure I2C
    RCC->APB1ENR1 |= RCC_APB1ENR1_I2C1EN;  // enable I2C bus clock
    RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOBEN); // setup for I2C
    RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOCEN); // setup for WP pin


    // setup alternate functions for I2C


//  GPIOB->OTYPER |= (GPIO_OTYPER_OT8 | GPIO_OTYPER_OT9);
    GPIOB->AFR[1] &= ~(GPIO_AFRH_AFSEL8 | GPIO_AFRH_AFSEL9); // clear alt. function select
    GPIOB->AFR[1] |= (0x4 << GPIO_AFRH_AFSEL8_Pos)
            | (0x4 << GPIO_AFRH_AFSEL9_Pos); // choose AF 4 on pins 8 and 9
    GPIOB->MODER &= ~(GPIO_MODER_MODE8 | GPIO_MODER_MODE9);
    GPIOB->MODER |= (GPIO_MODER_MODE8_1 | GPIO_MODER_MODE9_1);// AF mode for pins 8 and 9
    // setup pin for write protect pin on EEPROM
    GPIOC->MODER &= ~(GPIO_MODER_MODE0);
    GPIOC->MODER |= (GPIO_MODER_MODE0_0);
    GPIOC->OTYPER &= ~(GPIO_OTYPER_OT0);
    GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPD0);
    GPIOC->OSPEEDR |= (3 << GPIO_OSPEEDR_OSPEED0_Pos);
    GPIOC->BSRR = GPIO_PIN_0; // disable write mode on EEPROM


    I2C1->CR1 &= ~( I2C_CR1_PE);        // put I2C into reset (release SDA, SCL)
    I2C1->CR1 &= ~( I2C_CR1_ANFOFF);    // filters: enable analog
    I2C1->CR1 &= ~( I2C_CR1_DNF);       // filters: disable digital
    I2C1->TIMINGR = 0x00303D5B;            // 16 MHz SYSCLK timing from CubeMX
    I2C1->CR2 |= ( I2C_CR2_AUTOEND);   // auto send STOP after transmission
    I2C1->CR2 &= ~( I2C_CR2_ADD10);     // 7-bit address mode
    I2C1->CR2 &= ~( I2C_CR2_SADD);      // clear device address
    I2C1->CR2 |= ( EEPROM_ADDRESS << (I2C_CR2_SADD_Pos + 1)); // device addr SHL 1
    I2C1->CR1 |= ( I2C_CR1_PE);        // enable I2C
}


void I2C_write(uint16_t mem_addr, uint8_t data_write) {
    GPIOC->BRR = GPIO_PIN_0; // enable write protect pin (active low)


    uint8_t high_addr = (mem_addr >> 8) & 0xFF;
    uint8_t low_addr = mem_addr & 0xFF;
    // build EEPROM transaction
    I2C1->CR2 &= ~( I2C_CR2_RD_WRN);    // set WRITE mode
    I2C1->CR2 &= ~( I2C_CR2_NBYTES);    // clear Byte count
    I2C1->CR2 |= (3 << I2C_CR2_NBYTES_Pos); // write 3 bytes (2 Addr, 1 data)
    I2C1->CR2 &= ~( I2C_CR2_SADD);      // clear device address
    I2C1->CR2 |= ( EEPROM_ADDRESS << (I2C_CR2_SADD_Pos + 1)); // device addr SHL 1
    I2C1->CR2 |= I2C_CR2_START;       // start I2C WRITE op
    /* USER wait for I2C_ISR_TXIS to clear before writing each Byte, e.g. ... */


    while (!(I2C1->ISR & I2C_ISR_TXE))
        ;   // wait for start condition to transmit
    I2C1->TXDR = high_addr; // xmit MSByte of address
    while (!(I2C1->ISR & I2C_ISR_TXE))
        ;   // wait for end of transmit
    I2C1->TXDR = low_addr; // xmit LSByte of address
    while (!(I2C1->ISR & I2C_ISR_TXE))
        ;   // wait for end of transmit
    I2C1->TXDR = data_write; // xmit data Byte
    while (!(I2C1->ISR & I2C_ISR_TXE))
        ;   // wait for end of transmit
    I2C1->CR2 |= I2C_CR2_STOP; // generate stop condition.
    GPIOC->BSRR = GPIO_PIN_0; // disable write protect pin (active low)
}


uint8_t I2C_read(uint16_t mem_addr) {
    GPIOC->BRR = GPIO_PIN_0; // enable write protect pin (active low)
    uint8_t data_in;
    uint8_t high_addr = (mem_addr >> 8) & 0xFF;
    uint8_t low_addr = mem_addr & 0xFF;
    // build EEPROM transaction for write
    I2C1->CR2 &= ~( I2C_CR2_RD_WRN);    // set WRITE mode
    I2C1->CR2 &= ~( I2C_CR2_AUTOEND);   // auto send STOP after transmission
    I2C1->CR2 &= ~( I2C_CR2_NBYTES);    // clear Byte count
    I2C1->CR2 |= (2 << I2C_CR2_NBYTES_Pos); // write 2 bytes, read 1 byte (2 Addr)
    I2C1->CR2 &= ~( I2C_CR2_SADD);      // clear device address
    I2C1->CR2 |= ( EEPROM_ADDRESS << (I2C_CR2_SADD_Pos + 1)); // device addr SHL 1
    I2C1->CR2 |= I2C_CR2_START;       // start I2C WRITE op
    /* USER wait for I2C_ISR_TXIS to clear before writing each Byte, e.g. ... */


    while (!(I2C1->ISR & I2C_ISR_TXIS))
        ;   // wait for start condition to transmit
    I2C1->TXDR = high_addr; // xmit MSByte of address
    while (!(I2C1->ISR & I2C_ISR_TXIS))
        ;   // wait for end of transmit
    I2C1->TXDR = low_addr; // xmit LSByte of address


    // build EEPROM transaction for read
    I2C1->CR2 |= ( I2C_CR2_RD_WRN);    // set READ mode
    I2C1->CR2 &= ~( I2C_CR2_AUTOEND);   // auto send STOP after transmission
    I2C1->CR2 &= ~( I2C_CR2_NBYTES);    // clear Byte count
    I2C1->CR2 |= (1 << I2C_CR2_NBYTES_Pos); // read 1 byte
    I2C1->CR2 &= ~( I2C_CR2_SADD);      // clear device address
    I2C1->CR2 |= ( EEPROM_ADDRESS << (I2C_CR2_SADD_Pos + 1)); // device addr SHL 1
    I2C1->CR2 |= I2C_CR2_START;       // start I2C WRITE op


    while (!(I2C1->ISR & I2C_ISR_RXNE))
        ;   // wait for incoming data
    data_in = I2C1->RXDR;
    I2C1->CR2 |= I2C_CR2_STOP; // generate stop condition.
    return (data_in);
}
