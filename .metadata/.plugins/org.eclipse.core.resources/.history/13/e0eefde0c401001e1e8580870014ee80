/*
 * fingerprint.c
 *
 *  Created on: May 31, 2023
 *      Author: james
 */

#include "main.h"
#include "fingerprint.h"
#include "uart.h"

//function that initializes the fingerprint scanner
/*
 * Settings:
 * 1. parameter number 4: N = 6 sets baud rate to 57600 (must match uart baudrate)
 * 2. parameter number 5: 3 (1-5) security level medium
 * 3. parameter number 6: 1 (0,1,2,3) = {32, 64, 128, 256} in bytes
 * 						  Resolution of fingerprint scanner
 */

void FP_init(void) {
}

//--------------------Instructions to transmit
//Command to confirm if fingerprint is connected to upper computer
void FP_handshake(void) {
	char handshake[13] = { 0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF,	//instruction
			0x01, 0x00, 0x04, 0x17, 0x00, 0x1C };
	uint8_t i = 0;		//iteration counter
	char data;			//initializes byte being sent to TDR
	while (i < 12) { //sends data from lowest byte to highest byte
		while (!(USART2->ISR & USART_ISR_TXE))
			; //waits for empty transmit
		USART2->TDR = data[i];
		i++;	//increments array
	}
}

//Command to set address  might not need (need to verify command functionality
void FP_setAddr(uint32_t og_adr, uint32_t new_adr) {
	//isolates
//	char og_adrUp1 = og_adr & 0xFF000000;
//	char og_adrUp2 = og_adr & 0x00FF0000;
//	char og_adrLo1 = og_adr & 0x0000FF00;
//	char og_adrLo2 = og_adr & 0x000000FF;

//	char new_adrUp1 = new_adr & 0xFF00;
//	char new_adrLo = new_adr & 0x00FF;
	char set[16] = { 0xEF, 0x01, (og_adr & 0xFF000000), og_adrLo,  };
}

//MAKE SET ADDR UNSURE

//Sets parameters
/* PARAMETERS:
 * (4) Baud Rate
 * (5) Security Level
 * (6)
 *
 */
void FP_SetSysPara(char param, char setting) {

}

/*void LPUART_ESC_Print(const char *message) {
 uint16_t iStrIdx = 0;
 while (!(LPUART1->ISR & USART_ISR_TXE))
 ;
 LPUART1->TDR = 0x1b;	//initial escape code
 while (message[iStrIdx] != 0) {
 while (!(LPUART1->ISR & USART_ISR_TXE))
 ; // wait for empty xmit buffer
 LPUART1->TDR = message[iStrIdx];       // send this character
 iStrIdx++;
 delay_us(200);       // advance index to next char
 }
 delay_us(1000);
 }
 */

