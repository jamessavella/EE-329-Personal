
P4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c48  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  08001df4  08001df4  00011df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002064  08002064  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08002064  08002064  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002064  08002064  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002064  08002064  00012064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002068  08002068  00012068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800206c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  20000014  08002080  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  08002080  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000626a  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014aa  00000000  00000000  000262ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c8  00000000  00000000  00027758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000600  00000000  00000000  00027e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000014e7  00000000  00000000  00028420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000725b  00000000  00000000  00029907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee8eb  00000000  00000000  00030b62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011f44d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018d0  00000000  00000000  0011f4a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000014 	.word	0x20000014
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08001ddc 	.word	0x08001ddc

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000018 	.word	0x20000018
 80001e8:	08001ddc 	.word	0x08001ddc

080001ec <delay_us>:

// delay in microseconds using SysTick timer to count CPU clock cycles
// do not call with 0 : error, maximum delay.
// careful calling with small nums : result in longer delays than specified:
//    e.g. @4MHz, delay_us(1) = 10=15 us delay.
void delay_us(const uint32_t time_us) {  // time_us = target delay, microseconds
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
    SysTick->LOAD = (uint32_t)((time_us * (SystemCoreClock / 1000000)) - 1);
 80001f4:	4b11      	ldr	r3, [pc, #68]	; (800023c <delay_us+0x50>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a11      	ldr	r2, [pc, #68]	; (8000240 <delay_us+0x54>)
 80001fa:	fba2 2303 	umull	r2, r3, r2, r3
 80001fe:	0c9b      	lsrs	r3, r3, #18
 8000200:	687a      	ldr	r2, [r7, #4]
 8000202:	fb02 f303 	mul.w	r3, r2, r3
 8000206:	4a0f      	ldr	r2, [pc, #60]	; (8000244 <delay_us+0x58>)
 8000208:	3b01      	subs	r3, #1
 800020a:	6053      	str	r3, [r2, #4]
    SysTick->VAL = 0;                                      // clear the timer count
 800020c:	4b0d      	ldr	r3, [pc, #52]	; (8000244 <delay_us+0x58>)
 800020e:	2200      	movs	r2, #0
 8000210:	609a      	str	r2, [r3, #8]
    SysTick->CTRL &= ~(SysTick_CTRL_COUNTFLAG_Msk);        // clear the count flag
 8000212:	4b0c      	ldr	r3, [pc, #48]	; (8000244 <delay_us+0x58>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	4a0b      	ldr	r2, [pc, #44]	; (8000244 <delay_us+0x58>)
 8000218:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800021c:	6013      	str	r3, [r2, #0]
    while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)); // wait for the flag
 800021e:	bf00      	nop
 8000220:	4b08      	ldr	r3, [pc, #32]	; (8000244 <delay_us+0x58>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000228:	2b00      	cmp	r3, #0
 800022a:	d0f9      	beq.n	8000220 <delay_us+0x34>
}
 800022c:	bf00      	nop
 800022e:	bf00      	nop
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	20000008 	.word	0x20000008
 8000240:	431bde83 	.word	0x431bde83
 8000244:	e000e010 	.word	0xe000e010

08000248 <handshake>:
void FP_init(void) {
}

//--------------------Instructions to transmit
//Command to confirm if fingerprint is connected to upper computer
void handshake(void) {
 8000248:	b490      	push	{r4, r7}
 800024a:	b084      	sub	sp, #16
 800024c:	af00      	add	r7, sp, #0
	char handshake[13] = { 0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF,	//instruction
 800024e:	4b12      	ldr	r3, [pc, #72]	; (8000298 <handshake+0x50>)
 8000250:	463c      	mov	r4, r7
 8000252:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000254:	c407      	stmia	r4!, {r0, r1, r2}
 8000256:	7023      	strb	r3, [r4, #0]
			0x01, 0x00, 0x04, 0x17, 0x00, 0x00, 0x1C }; //a 0x00 after 0x01 before 0x04
	uint8_t i = 0;		//iteration counter
 8000258:	2300      	movs	r3, #0
 800025a:	73fb      	strb	r3, [r7, #15]
	while (i < 13) { //sends data from lowest byte to highest byte
 800025c:	e011      	b.n	8000282 <handshake+0x3a>
		while (!(USART2->ISR & USART_ISR_TXE))
 800025e:	bf00      	nop
 8000260:	4b0e      	ldr	r3, [pc, #56]	; (800029c <handshake+0x54>)
 8000262:	69db      	ldr	r3, [r3, #28]
 8000264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000268:	2b00      	cmp	r3, #0
 800026a:	d0f9      	beq.n	8000260 <handshake+0x18>
			; //waits for empty transmit
		USART2->TDR = handshake[i];
 800026c:	7bfb      	ldrb	r3, [r7, #15]
 800026e:	3310      	adds	r3, #16
 8000270:	443b      	add	r3, r7
 8000272:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8000276:	4b09      	ldr	r3, [pc, #36]	; (800029c <handshake+0x54>)
 8000278:	b292      	uxth	r2, r2
 800027a:	851a      	strh	r2, [r3, #40]	; 0x28
		i++;	//increments array
 800027c:	7bfb      	ldrb	r3, [r7, #15]
 800027e:	3301      	adds	r3, #1
 8000280:	73fb      	strb	r3, [r7, #15]
	while (i < 13) { //sends data from lowest byte to highest byte
 8000282:	7bfb      	ldrb	r3, [r7, #15]
 8000284:	2b0c      	cmp	r3, #12
 8000286:	d9ea      	bls.n	800025e <handshake+0x16>
	}
	ACK_LENGTH = 12; //Acknowledge packet 12 bytes long
 8000288:	4b05      	ldr	r3, [pc, #20]	; (80002a0 <handshake+0x58>)
 800028a:	220c      	movs	r2, #12
 800028c:	601a      	str	r2, [r3, #0]
}
 800028e:	bf00      	nop
 8000290:	3710      	adds	r7, #16
 8000292:	46bd      	mov	sp, r7
 8000294:	bc90      	pop	{r4, r7}
 8000296:	4770      	bx	lr
 8000298:	08001df4 	.word	0x08001df4
 800029c:	40004400 	.word	0x40004400
 80002a0:	20000030 	.word	0x20000030

080002a4 <SetSysPara>:
 * (4) Baud Rate: setting = [1,12] | setting value * 9600bps
 * (5) Security Level: setting = [1,5]
 * 					   1 FAR (false acceptance rate) highest - 5 FAR lowest
 * (6) Data Package Length : setting = [0,3] | 32 bytes, 64 bytes, 128 bytes, 256 bytes
 */
void SetSysPara(char param, char setting) {
 80002a4:	b480      	push	{r7}
 80002a6:	b089      	sub	sp, #36	; 0x24
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	460a      	mov	r2, r1
 80002ae:	71fb      	strb	r3, [r7, #7]
 80002b0:	4613      	mov	r3, r2
 80002b2:	71bb      	strb	r3, [r7, #6]
	//sum = package identifier + package length + instruction code + package contents
	//IMPORTANT is the parameter number part of the checksum?? need to verify by checking if it exceeds 2 bytes
	uint16_t sum = 0x01 + 0x0005 + 0x0E + setting + param;//0x0007 package length, 0x01 package identifer
 80002b4:	79bb      	ldrb	r3, [r7, #6]
 80002b6:	b29a      	uxth	r2, r3
 80002b8:	79fb      	ldrb	r3, [r7, #7]
 80002ba:	b29b      	uxth	r3, r3
 80002bc:	4413      	add	r3, r2
 80002be:	b29b      	uxth	r3, r3
 80002c0:	3314      	adds	r3, #20
 80002c2:	83bb      	strh	r3, [r7, #28]
	char sum1 = (sum >> 8) & 0xFF;
 80002c4:	8bbb      	ldrh	r3, [r7, #28]
 80002c6:	0a1b      	lsrs	r3, r3, #8
 80002c8:	b29b      	uxth	r3, r3
 80002ca:	76fb      	strb	r3, [r7, #27]
	char sum2 = sum & 0xFF;
 80002cc:	8bbb      	ldrh	r3, [r7, #28]
 80002ce:	76bb      	strb	r3, [r7, #26]

	//might need to adjust address (will I have to change this? make current module address a global variable?
	char sys[14] = { 0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x05, 0x0E, //instruction
 80002d0:	23ef      	movs	r3, #239	; 0xef
 80002d2:	733b      	strb	r3, [r7, #12]
 80002d4:	2301      	movs	r3, #1
 80002d6:	737b      	strb	r3, [r7, #13]
 80002d8:	23ff      	movs	r3, #255	; 0xff
 80002da:	73bb      	strb	r3, [r7, #14]
 80002dc:	23ff      	movs	r3, #255	; 0xff
 80002de:	73fb      	strb	r3, [r7, #15]
 80002e0:	23ff      	movs	r3, #255	; 0xff
 80002e2:	743b      	strb	r3, [r7, #16]
 80002e4:	23ff      	movs	r3, #255	; 0xff
 80002e6:	747b      	strb	r3, [r7, #17]
 80002e8:	2301      	movs	r3, #1
 80002ea:	74bb      	strb	r3, [r7, #18]
 80002ec:	2300      	movs	r3, #0
 80002ee:	74fb      	strb	r3, [r7, #19]
 80002f0:	2305      	movs	r3, #5
 80002f2:	753b      	strb	r3, [r7, #20]
 80002f4:	230e      	movs	r3, #14
 80002f6:	757b      	strb	r3, [r7, #21]
 80002f8:	79fb      	ldrb	r3, [r7, #7]
 80002fa:	75bb      	strb	r3, [r7, #22]
 80002fc:	79bb      	ldrb	r3, [r7, #6]
 80002fe:	75fb      	strb	r3, [r7, #23]
 8000300:	7efb      	ldrb	r3, [r7, #27]
 8000302:	763b      	strb	r3, [r7, #24]
 8000304:	7ebb      	ldrb	r3, [r7, #26]
 8000306:	767b      	strb	r3, [r7, #25]
			param, setting, sum1, sum2 };

	uint8_t i = 0;		//iteration counter
 8000308:	2300      	movs	r3, #0
 800030a:	77fb      	strb	r3, [r7, #31]
	while (i < 14) { //sends data from lowest byte to highest byte
 800030c:	e011      	b.n	8000332 <SetSysPara+0x8e>
		while (!(USART2->ISR & USART_ISR_TXE))
 800030e:	bf00      	nop
 8000310:	4b0e      	ldr	r3, [pc, #56]	; (800034c <SetSysPara+0xa8>)
 8000312:	69db      	ldr	r3, [r3, #28]
 8000314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000318:	2b00      	cmp	r3, #0
 800031a:	d0f9      	beq.n	8000310 <SetSysPara+0x6c>
			; //waits for empty transmit
		USART2->TDR = sys[i];
 800031c:	7ffb      	ldrb	r3, [r7, #31]
 800031e:	3320      	adds	r3, #32
 8000320:	443b      	add	r3, r7
 8000322:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8000326:	4b09      	ldr	r3, [pc, #36]	; (800034c <SetSysPara+0xa8>)
 8000328:	b292      	uxth	r2, r2
 800032a:	851a      	strh	r2, [r3, #40]	; 0x28
		i++;	//increments array
 800032c:	7ffb      	ldrb	r3, [r7, #31]
 800032e:	3301      	adds	r3, #1
 8000330:	77fb      	strb	r3, [r7, #31]
	while (i < 14) { //sends data from lowest byte to highest byte
 8000332:	7ffb      	ldrb	r3, [r7, #31]
 8000334:	2b0d      	cmp	r3, #13
 8000336:	d9ea      	bls.n	800030e <SetSysPara+0x6a>
	}
	ACK_LENGTH = 12; //Acknowledge packet 12 bytes long
 8000338:	4b05      	ldr	r3, [pc, #20]	; (8000350 <SetSysPara+0xac>)
 800033a:	220c      	movs	r2, #12
 800033c:	601a      	str	r2, [r3, #0]
}
 800033e:	bf00      	nop
 8000340:	3724      	adds	r7, #36	; 0x24
 8000342:	46bd      	mov	sp, r7
 8000344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000348:	4770      	bx	lr
 800034a:	bf00      	nop
 800034c:	40004400 	.word	0x40004400
 8000350:	20000030 	.word	0x20000030

08000354 <genImg>:
	}
	ACK_LENGTH = 14; //Acknowledge packet 14 bytes long
}


void genImg(void){
 8000354:	b480      	push	{r7}
 8000356:	b085      	sub	sp, #20
 8000358:	af00      	add	r7, sp, #0
	//might need to adjust address (will I have to change this? make current module address a global variable?
	char gen[12] = { 0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x03, 0x01,
 800035a:	4a13      	ldr	r2, [pc, #76]	; (80003a8 <genImg+0x54>)
 800035c:	463b      	mov	r3, r7
 800035e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000360:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x00, 0x05 };

	uint8_t i = 0;		//iteration counter
 8000364:	2300      	movs	r3, #0
 8000366:	73fb      	strb	r3, [r7, #15]
	while (i < 12) { //sends data from lowest byte to highest byte
 8000368:	e011      	b.n	800038e <genImg+0x3a>
		while (!(USART2->ISR & USART_ISR_TXE))
 800036a:	bf00      	nop
 800036c:	4b0f      	ldr	r3, [pc, #60]	; (80003ac <genImg+0x58>)
 800036e:	69db      	ldr	r3, [r3, #28]
 8000370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000374:	2b00      	cmp	r3, #0
 8000376:	d0f9      	beq.n	800036c <genImg+0x18>
			; //waits for empty transmit
		USART2->TDR = gen[i];
 8000378:	7bfb      	ldrb	r3, [r7, #15]
 800037a:	3310      	adds	r3, #16
 800037c:	443b      	add	r3, r7
 800037e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8000382:	4b0a      	ldr	r3, [pc, #40]	; (80003ac <genImg+0x58>)
 8000384:	b292      	uxth	r2, r2
 8000386:	851a      	strh	r2, [r3, #40]	; 0x28
		i++;	//increments array
 8000388:	7bfb      	ldrb	r3, [r7, #15]
 800038a:	3301      	adds	r3, #1
 800038c:	73fb      	strb	r3, [r7, #15]
	while (i < 12) { //sends data from lowest byte to highest byte
 800038e:	7bfb      	ldrb	r3, [r7, #15]
 8000390:	2b0b      	cmp	r3, #11
 8000392:	d9ea      	bls.n	800036a <genImg+0x16>
	}
	ACK_LENGTH = 12; //Acknowledge packet 12 bytes long
 8000394:	4b06      	ldr	r3, [pc, #24]	; (80003b0 <genImg+0x5c>)
 8000396:	220c      	movs	r2, #12
 8000398:	601a      	str	r2, [r3, #0]
}
 800039a:	bf00      	nop
 800039c:	3714      	adds	r7, #20
 800039e:	46bd      	mov	sp, r7
 80003a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop
 80003a8:	08001e10 	.word	0x08001e10
 80003ac:	40004400 	.word	0x40004400
 80003b0:	20000030 	.word	0x20000030

080003b4 <LCD_init>:
void clear_LCD(void);

//data bus array
uint16_t GPIO_Pin[] = {D4, D5, D6, D7};

void LCD_init(void) {
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
  delay_us(100000);
 80003b8:	4825      	ldr	r0, [pc, #148]	; (8000450 <LCD_init+0x9c>)
 80003ba:	f7ff ff17 	bl	80001ec <delay_us>
  RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOEEN); // enable GPIOA clock on bus
 80003be:	4b25      	ldr	r3, [pc, #148]	; (8000454 <LCD_init+0xa0>)
 80003c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003c2:	4a24      	ldr	r2, [pc, #144]	; (8000454 <LCD_init+0xa0>)
 80003c4:	f043 0310 	orr.w	r3, r3, #16
 80003c8:	64d3      	str	r3, [r2, #76]	; 0x4c

  // Making control pins output mode bits(01)
  control_pins->MODER &=
 80003ca:	4b23      	ldr	r3, [pc, #140]	; (8000458 <LCD_init+0xa4>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	4a22      	ldr	r2, [pc, #136]	; (8000458 <LCD_init+0xa4>)
 80003d0:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80003d4:	6013      	str	r3, [r2, #0]
      ~(GPIO_MODER_MODE9 | GPIO_MODER_MODE10 | GPIO_MODER_MODE11 |
        GPIO_MODER_MODE12 | GPIO_MODER_MODE13 | GPIO_MODER_MODE14 |
        GPIO_MODER_MODE15); // clear bits for PA
  control_pins->MODER |=
 80003d6:	4b20      	ldr	r3, [pc, #128]	; (8000458 <LCD_init+0xa4>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	4a1f      	ldr	r2, [pc, #124]	; (8000458 <LCD_init+0xa4>)
 80003dc:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 80003e0:	f443 03a8 	orr.w	r3, r3, #5505024	; 0x540000
 80003e4:	6013      	str	r3, [r2, #0]
      (GPIO_MODER_MODE9_0 | GPIO_MODER_MODE10_0 | GPIO_MODER_MODE11_0 |
       GPIO_MODER_MODE12_0 | GPIO_MODER_MODE13_0 | GPIO_MODER_MODE14_0 |
       GPIO_MODER_MODE15_0); // set up DB4 to DB7, RS, RW, E as outputs
  control_pins->OTYPER &=
 80003e6:	4b1c      	ldr	r3, [pc, #112]	; (8000458 <LCD_init+0xa4>)
 80003e8:	685b      	ldr	r3, [r3, #4]
 80003ea:	4a1b      	ldr	r2, [pc, #108]	; (8000458 <LCD_init+0xa4>)
 80003ec:	f423 437e 	bic.w	r3, r3, #65024	; 0xfe00
 80003f0:	6053      	str	r3, [r2, #4]
      ~(GPIO_OTYPER_OT9 | GPIO_OTYPER_OT10 | GPIO_OTYPER_OT11 | GPIO_OTYPER_OT12 |
        GPIO_OTYPER_OT13 | GPIO_OTYPER_OT14 | GPIO_OTYPER_OT15);
  control_pins->OSPEEDR |=
 80003f2:	4b19      	ldr	r3, [pc, #100]	; (8000458 <LCD_init+0xa4>)
 80003f4:	689b      	ldr	r3, [r3, #8]
 80003f6:	4a18      	ldr	r2, [pc, #96]	; (8000458 <LCD_init+0xa4>)
 80003f8:	ea6f 3383 	mvn.w	r3, r3, lsl #14
 80003fc:	ea6f 3393 	mvn.w	r3, r3, lsr #14
 8000400:	6093      	str	r3, [r2, #8]
      ((3 << GPIO_OSPEEDR_OSPEED9_Pos) | (3 << GPIO_OSPEEDR_OSPEED10_Pos) |
       (3 << GPIO_OSPEEDR_OSPEED11_Pos) | (3 << GPIO_OSPEEDR_OSPEED12_Pos) |
       (3 << GPIO_OSPEEDR_OSPEED13_Pos) | (3 << GPIO_OSPEEDR_OSPEED14_Pos) |
       (3 << GPIO_OSPEEDR_OSPEED15_Pos));
  control_pins->BRR =
 8000402:	4b15      	ldr	r3, [pc, #84]	; (8000458 <LCD_init+0xa4>)
 8000404:	f44f 427e 	mov.w	r2, #65024	; 0xfe00
 8000408:	629a      	str	r2, [r3, #40]	; 0x28
      (D4 | D5 | D6 | D7 | EN | RW | RS); // Initializes data to all 0

  //LCD init commands based on the LCD datasheet
  delay_us(100000);
 800040a:	4811      	ldr	r0, [pc, #68]	; (8000450 <LCD_init+0x9c>)
 800040c:	f7ff feee 	bl	80001ec <delay_us>
  command(0x30);
 8000410:	2030      	movs	r0, #48	; 0x30
 8000412:	f000 f83d 	bl	8000490 <command>
  delay_us(100);
 8000416:	2064      	movs	r0, #100	; 0x64
 8000418:	f7ff fee8 	bl	80001ec <delay_us>
  command(0x30);
 800041c:	2030      	movs	r0, #48	; 0x30
 800041e:	f000 f837 	bl	8000490 <command>
  delay_us(100);
 8000422:	2064      	movs	r0, #100	; 0x64
 8000424:	f7ff fee2 	bl	80001ec <delay_us>
  command(0x30);
 8000428:	2030      	movs	r0, #48	; 0x30
 800042a:	f000 f831 	bl	8000490 <command>
  delay_us(100);
 800042e:	2064      	movs	r0, #100	; 0x64
 8000430:	f7ff fedc 	bl	80001ec <delay_us>
  command(0x20);
 8000434:	2020      	movs	r0, #32
 8000436:	f000 f82b 	bl	8000490 <command>
  delay_us(100);
 800043a:	2064      	movs	r0, #100	; 0x64
 800043c:	f7ff fed6 	bl	80001ec <delay_us>
  command(0x02);
 8000440:	2002      	movs	r0, #2
 8000442:	f000 f825 	bl	8000490 <command>
  delay_us(100);
 8000446:	2064      	movs	r0, #100	; 0x64
 8000448:	f7ff fed0 	bl	80001ec <delay_us>
}
 800044c:	bf00      	nop
 800044e:	bd80      	pop	{r7, pc}
 8000450:	000186a0 	.word	0x000186a0
 8000454:	40021000 	.word	0x40021000
 8000458:	48001000 	.word	0x48001000

0800045c <Nybble>:

void Nybble() {
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
  control_pins->BSRR = EN;  //turn on EN for pulse
 8000460:	4b0a      	ldr	r3, [pc, #40]	; (800048c <Nybble+0x30>)
 8000462:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000466:	619a      	str	r2, [r3, #24]
  delay_us(50); // wait
 8000468:	2032      	movs	r0, #50	; 0x32
 800046a:	f7ff febf 	bl	80001ec <delay_us>
  control_pins->BRR = EN;   //turn off EN for pulse
 800046e:	4b07      	ldr	r3, [pc, #28]	; (800048c <Nybble+0x30>)
 8000470:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000474:	629a      	str	r2, [r3, #40]	; 0x28
  delay_us(50);                                // wait
 8000476:	2032      	movs	r0, #50	; 0x32
 8000478:	f7ff feb8 	bl	80001ec <delay_us>
  control_pins->ODR &= ~((D4 | D5 | D6 | D7)); // clear data registers
 800047c:	4b03      	ldr	r3, [pc, #12]	; (800048c <Nybble+0x30>)
 800047e:	695b      	ldr	r3, [r3, #20]
 8000480:	4a02      	ldr	r2, [pc, #8]	; (800048c <Nybble+0x30>)
 8000482:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000486:	6153      	str	r3, [r2, #20]
}
 8000488:	bf00      	nop
 800048a:	bd80      	pop	{r7, pc}
 800048c:	48001000 	.word	0x48001000

08000490 <command>:

void command(uint8_t command) {
 8000490:	b580      	push	{r7, lr}
 8000492:	b086      	sub	sp, #24
 8000494:	af00      	add	r7, sp, #0
 8000496:	4603      	mov	r3, r0
 8000498:	71fb      	strb	r3, [r7, #7]
  uint8_t command2 = command >> 4; //shift higher nibbles to lower nibbles
 800049a:	79fb      	ldrb	r3, [r7, #7]
 800049c:	091b      	lsrs	r3, r3, #4
 800049e:	73fb      	strb	r3, [r7, #15]
  control_pins->BRR = (RS | RW); // set RS and RW to zero
 80004a0:	4b2a      	ldr	r3, [pc, #168]	; (800054c <command+0xbc>)
 80004a2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80004a6:	629a      	str	r2, [r3, #40]	; 0x28

  for (int i = 0; i < 4; i++) {  //loop through data bus and turn on or off
 80004a8:	2300      	movs	r3, #0
 80004aa:	617b      	str	r3, [r7, #20]
 80004ac:	e017      	b.n	80004de <command+0x4e>
    if ((command2 >> i) & 0x01) {
 80004ae:	7bfa      	ldrb	r2, [r7, #15]
 80004b0:	697b      	ldr	r3, [r7, #20]
 80004b2:	fa42 f303 	asr.w	r3, r2, r3
 80004b6:	f003 0301 	and.w	r3, r3, #1
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d006      	beq.n	80004cc <command+0x3c>
      control_pins->BSRR = GPIO_Pin[i];
 80004be:	4a24      	ldr	r2, [pc, #144]	; (8000550 <command+0xc0>)
 80004c0:	697b      	ldr	r3, [r7, #20]
 80004c2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80004c6:	4b21      	ldr	r3, [pc, #132]	; (800054c <command+0xbc>)
 80004c8:	619a      	str	r2, [r3, #24]
 80004ca:	e005      	b.n	80004d8 <command+0x48>
    } else {
      control_pins->BRR = GPIO_Pin[i];
 80004cc:	4a20      	ldr	r2, [pc, #128]	; (8000550 <command+0xc0>)
 80004ce:	697b      	ldr	r3, [r7, #20]
 80004d0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80004d4:	4b1d      	ldr	r3, [pc, #116]	; (800054c <command+0xbc>)
 80004d6:	629a      	str	r2, [r3, #40]	; 0x28
  for (int i = 0; i < 4; i++) {  //loop through data bus and turn on or off
 80004d8:	697b      	ldr	r3, [r7, #20]
 80004da:	3301      	adds	r3, #1
 80004dc:	617b      	str	r3, [r7, #20]
 80004de:	697b      	ldr	r3, [r7, #20]
 80004e0:	2b03      	cmp	r3, #3
 80004e2:	dde4      	ble.n	80004ae <command+0x1e>
    }
  }

  delay_us(1000);
 80004e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004e8:	f7ff fe80 	bl	80001ec <delay_us>
  Nybble(); // Send pulse
 80004ec:	f7ff ffb6 	bl	800045c <Nybble>

  for (int i = 0; i < 4; i++) {
 80004f0:	2300      	movs	r3, #0
 80004f2:	613b      	str	r3, [r7, #16]
 80004f4:	e017      	b.n	8000526 <command+0x96>
    if ((command >> i) & 0x01) { //loop through data bus and turn on or off
 80004f6:	79fa      	ldrb	r2, [r7, #7]
 80004f8:	693b      	ldr	r3, [r7, #16]
 80004fa:	fa42 f303 	asr.w	r3, r2, r3
 80004fe:	f003 0301 	and.w	r3, r3, #1
 8000502:	2b00      	cmp	r3, #0
 8000504:	d006      	beq.n	8000514 <command+0x84>
      control_pins->BSRR = GPIO_Pin[i];
 8000506:	4a12      	ldr	r2, [pc, #72]	; (8000550 <command+0xc0>)
 8000508:	693b      	ldr	r3, [r7, #16]
 800050a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800050e:	4b0f      	ldr	r3, [pc, #60]	; (800054c <command+0xbc>)
 8000510:	619a      	str	r2, [r3, #24]
 8000512:	e005      	b.n	8000520 <command+0x90>
    } else {
      control_pins->BRR = GPIO_Pin[i];
 8000514:	4a0e      	ldr	r2, [pc, #56]	; (8000550 <command+0xc0>)
 8000516:	693b      	ldr	r3, [r7, #16]
 8000518:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800051c:	4b0b      	ldr	r3, [pc, #44]	; (800054c <command+0xbc>)
 800051e:	629a      	str	r2, [r3, #40]	; 0x28
  for (int i = 0; i < 4; i++) {
 8000520:	693b      	ldr	r3, [r7, #16]
 8000522:	3301      	adds	r3, #1
 8000524:	613b      	str	r3, [r7, #16]
 8000526:	693b      	ldr	r3, [r7, #16]
 8000528:	2b03      	cmp	r3, #3
 800052a:	dde4      	ble.n	80004f6 <command+0x66>
    }
  }
  delay_us(1000);
 800052c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000530:	f7ff fe5c 	bl	80001ec <delay_us>
  Nybble();                                    // Send pulse
 8000534:	f7ff ff92 	bl	800045c <Nybble>
  control_pins->ODR &= ~((D4 | D5 | D6 | D7)); // Clears registers
 8000538:	4b04      	ldr	r3, [pc, #16]	; (800054c <command+0xbc>)
 800053a:	695b      	ldr	r3, [r3, #20]
 800053c:	4a03      	ldr	r2, [pc, #12]	; (800054c <command+0xbc>)
 800053e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000542:	6153      	str	r3, [r2, #20]
}
 8000544:	bf00      	nop
 8000546:	3718      	adds	r7, #24
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	48001000 	.word	0x48001000
 8000550:	20000000 	.word	0x20000000

08000554 <write>:

void write(char letter) {  //write 1 character on the LCD display
 8000554:	b580      	push	{r7, lr}
 8000556:	b086      	sub	sp, #24
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	71fb      	strb	r3, [r7, #7]
  uint8_t c = letter;
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	73fb      	strb	r3, [r7, #15]
  uint8_t c2 = c >> 4;
 8000562:	7bfb      	ldrb	r3, [r7, #15]
 8000564:	091b      	lsrs	r3, r3, #4
 8000566:	73bb      	strb	r3, [r7, #14]
  control_pins->BSRR = (RS); // set RS on
 8000568:	4b30      	ldr	r3, [pc, #192]	; (800062c <write+0xd8>)
 800056a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800056e:	619a      	str	r2, [r3, #24]
  control_pins->BRR = (RW);  // set RW off
 8000570:	4b2e      	ldr	r3, [pc, #184]	; (800062c <write+0xd8>)
 8000572:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000576:	629a      	str	r2, [r3, #40]	; 0x28
  for (int i = 0; i < 4; i++) { //loop through data bus and turn on or off
 8000578:	2300      	movs	r3, #0
 800057a:	617b      	str	r3, [r7, #20]
 800057c:	e017      	b.n	80005ae <write+0x5a>
    if ((c2 >> i) & 0x01) {
 800057e:	7bba      	ldrb	r2, [r7, #14]
 8000580:	697b      	ldr	r3, [r7, #20]
 8000582:	fa42 f303 	asr.w	r3, r2, r3
 8000586:	f003 0301 	and.w	r3, r3, #1
 800058a:	2b00      	cmp	r3, #0
 800058c:	d006      	beq.n	800059c <write+0x48>
      control_pins->BSRR = GPIO_Pin[i];
 800058e:	4a28      	ldr	r2, [pc, #160]	; (8000630 <write+0xdc>)
 8000590:	697b      	ldr	r3, [r7, #20]
 8000592:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000596:	4b25      	ldr	r3, [pc, #148]	; (800062c <write+0xd8>)
 8000598:	619a      	str	r2, [r3, #24]
 800059a:	e005      	b.n	80005a8 <write+0x54>
    } else {
      control_pins->BRR = GPIO_Pin[i];
 800059c:	4a24      	ldr	r2, [pc, #144]	; (8000630 <write+0xdc>)
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80005a4:	4b21      	ldr	r3, [pc, #132]	; (800062c <write+0xd8>)
 80005a6:	629a      	str	r2, [r3, #40]	; 0x28
  for (int i = 0; i < 4; i++) { //loop through data bus and turn on or off
 80005a8:	697b      	ldr	r3, [r7, #20]
 80005aa:	3301      	adds	r3, #1
 80005ac:	617b      	str	r3, [r7, #20]
 80005ae:	697b      	ldr	r3, [r7, #20]
 80005b0:	2b03      	cmp	r3, #3
 80005b2:	dde4      	ble.n	800057e <write+0x2a>
    }
  }

  delay_us(1000);
 80005b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005b8:	f7ff fe18 	bl	80001ec <delay_us>
  Nybble(); //send pulse
 80005bc:	f7ff ff4e 	bl	800045c <Nybble>

  for (int i = 0; i < 4; i++) { //loop through data bus and turn on or off
 80005c0:	2300      	movs	r3, #0
 80005c2:	613b      	str	r3, [r7, #16]
 80005c4:	e017      	b.n	80005f6 <write+0xa2>
    if ((c >> i) & 0x01) {
 80005c6:	7bfa      	ldrb	r2, [r7, #15]
 80005c8:	693b      	ldr	r3, [r7, #16]
 80005ca:	fa42 f303 	asr.w	r3, r2, r3
 80005ce:	f003 0301 	and.w	r3, r3, #1
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d006      	beq.n	80005e4 <write+0x90>
      control_pins->BSRR = GPIO_Pin[i];
 80005d6:	4a16      	ldr	r2, [pc, #88]	; (8000630 <write+0xdc>)
 80005d8:	693b      	ldr	r3, [r7, #16]
 80005da:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80005de:	4b13      	ldr	r3, [pc, #76]	; (800062c <write+0xd8>)
 80005e0:	619a      	str	r2, [r3, #24]
 80005e2:	e005      	b.n	80005f0 <write+0x9c>
    } else {
      control_pins->BRR = GPIO_Pin[i];
 80005e4:	4a12      	ldr	r2, [pc, #72]	; (8000630 <write+0xdc>)
 80005e6:	693b      	ldr	r3, [r7, #16]
 80005e8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80005ec:	4b0f      	ldr	r3, [pc, #60]	; (800062c <write+0xd8>)
 80005ee:	629a      	str	r2, [r3, #40]	; 0x28
  for (int i = 0; i < 4; i++) { //loop through data bus and turn on or off
 80005f0:	693b      	ldr	r3, [r7, #16]
 80005f2:	3301      	adds	r3, #1
 80005f4:	613b      	str	r3, [r7, #16]
 80005f6:	693b      	ldr	r3, [r7, #16]
 80005f8:	2b03      	cmp	r3, #3
 80005fa:	dde4      	ble.n	80005c6 <write+0x72>
    }
  }
  delay_us(1000);
 80005fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000600:	f7ff fdf4 	bl	80001ec <delay_us>
  Nybble(); //send pulse
 8000604:	f7ff ff2a 	bl	800045c <Nybble>
  control_pins->BRR = (RS);                    // set RS back to zero
 8000608:	4b08      	ldr	r3, [pc, #32]	; (800062c <write+0xd8>)
 800060a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800060e:	629a      	str	r2, [r3, #40]	; 0x28
  control_pins->ODR &= ~((D4 | D5 | D6 | D7)); // Clears registers
 8000610:	4b06      	ldr	r3, [pc, #24]	; (800062c <write+0xd8>)
 8000612:	695b      	ldr	r3, [r3, #20]
 8000614:	4a05      	ldr	r2, [pc, #20]	; (800062c <write+0xd8>)
 8000616:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800061a:	6153      	str	r3, [r2, #20]
  delay_us(100);
 800061c:	2064      	movs	r0, #100	; 0x64
 800061e:	f7ff fde5 	bl	80001ec <delay_us>
}
 8000622:	bf00      	nop
 8000624:	3718      	adds	r7, #24
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	48001000 	.word	0x48001000
 8000630:	20000000 	.word	0x20000000

08000634 <lcd_set_cursor_position>:

void lcd_set_cursor_position(uint8_t row, uint8_t col) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	460a      	mov	r2, r1
 800063e:	71fb      	strb	r3, [r7, #7]
 8000640:	4613      	mov	r3, r2
 8000642:	71bb      	strb	r3, [r7, #6]
  uint8_t address;

  // Calculate the address based on row and col values
  if (row == 0) {
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d103      	bne.n	8000652 <lcd_set_cursor_position+0x1e>
    address = 0x80 + col; // For row 0, the address starts from 0x80
 800064a:	79bb      	ldrb	r3, [r7, #6]
 800064c:	3b80      	subs	r3, #128	; 0x80
 800064e:	73fb      	strb	r3, [r7, #15]
 8000650:	e002      	b.n	8000658 <lcd_set_cursor_position+0x24>
  } else {
    address = 0xC0 + col; // For row 1, the address starts from 0xC0
 8000652:	79bb      	ldrb	r3, [r7, #6]
 8000654:	3b40      	subs	r3, #64	; 0x40
 8000656:	73fb      	strb	r3, [r7, #15]
  }

  // Send the command to set the cursor position
  command(address);
 8000658:	7bfb      	ldrb	r3, [r7, #15]
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff ff18 	bl	8000490 <command>
}
 8000660:	bf00      	nop
 8000662:	3710      	adds	r7, #16
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <str_write>:

void str_write(const char *str) { //writes a character array to LCD
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  for (int i = 0; str[i] != '\0'; i++) {
 8000670:	2300      	movs	r3, #0
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	e00c      	b.n	8000690 <str_write+0x28>
    write(str[i]);
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	687a      	ldr	r2, [r7, #4]
 800067a:	4413      	add	r3, r2
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	4618      	mov	r0, r3
 8000680:	f7ff ff68 	bl	8000554 <write>
    delay_us(100);
 8000684:	2064      	movs	r0, #100	; 0x64
 8000686:	f7ff fdb1 	bl	80001ec <delay_us>
  for (int i = 0; str[i] != '\0'; i++) {
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	3301      	adds	r3, #1
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	687a      	ldr	r2, [r7, #4]
 8000694:	4413      	add	r3, r2
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d1ec      	bne.n	8000676 <str_write+0xe>
  }
	delay_us(100);
 800069c:	2064      	movs	r0, #100	; 0x64
 800069e:	f7ff fda5 	bl	80001ec <delay_us>
}
 80006a2:	bf00      	nop
 80006a4:	3710      	adds	r7, #16
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
	...

080006ac <main>:
static int index0 = 0;
static int bufferLength = 0;
uint8_t ConfirmationCode = 0;
uint32_t currentPacketSize = 0;

int main(void) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0

	HAL_Init();
 80006b0:	f000 fba3 	bl	8000dfa <HAL_Init>
	SystemClock_Config();
 80006b4:	f000 f9f8 	bl	8000aa8 <SystemClock_Config>
	LPUART_init();
 80006b8:	f000 faa2 	bl	8000c00 <LPUART_init>
	LCD_init();
 80006bc:	f7ff fe7a 	bl	80003b4 <LCD_init>
	command(0x0C);
 80006c0:	200c      	movs	r0, #12
 80006c2:	f7ff fee5 	bl	8000490 <command>

	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;  // GPIOC clock init
 80006c6:	4b31      	ldr	r3, [pc, #196]	; (800078c <main+0xe0>)
 80006c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ca:	4a30      	ldr	r2, [pc, #192]	; (800078c <main+0xe0>)
 80006cc:	f043 0304 	orr.w	r3, r3, #4
 80006d0:	64d3      	str	r3, [r2, #76]	; 0x4c
	GPIOC->MODER &= ~(GPIO_MODER_MODE13); // button init
 80006d2:	4b2f      	ldr	r3, [pc, #188]	; (8000790 <main+0xe4>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4a2e      	ldr	r2, [pc, #184]	; (8000790 <main+0xe4>)
 80006d8:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80006dc:	6013      	str	r3, [r2, #0]
	GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPD13_1);
 80006de:	4b2c      	ldr	r3, [pc, #176]	; (8000790 <main+0xe4>)
 80006e0:	68db      	ldr	r3, [r3, #12]
 80006e2:	4a2b      	ldr	r2, [pc, #172]	; (8000790 <main+0xe4>)
 80006e4:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80006e8:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR |= (GPIO_PUPDR_PUPD13_1);
 80006ea:	4b29      	ldr	r3, [pc, #164]	; (8000790 <main+0xe4>)
 80006ec:	68db      	ldr	r3, [r3, #12]
 80006ee:	4a28      	ldr	r2, [pc, #160]	; (8000790 <main+0xe4>)
 80006f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80006f4:	60d3      	str	r3, [r2, #12]
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;  // GPIOB clock init
 80006f6:	4b25      	ldr	r3, [pc, #148]	; (800078c <main+0xe0>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fa:	4a24      	ldr	r2, [pc, #144]	; (800078c <main+0xe0>)
 80006fc:	f043 0302 	orr.w	r3, r3, #2
 8000700:	64d3      	str	r3, [r2, #76]	; 0x4c
	GPIOB->MODER &= ~(GPIO_MODER_MODE7);  // LD2 clear
 8000702:	4b24      	ldr	r3, [pc, #144]	; (8000794 <main+0xe8>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4a23      	ldr	r2, [pc, #140]	; (8000794 <main+0xe8>)
 8000708:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800070c:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (GPIO_MODER_MODE7_0); // LD2 output mode
 800070e:	4b21      	ldr	r3, [pc, #132]	; (8000794 <main+0xe8>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4a20      	ldr	r2, [pc, #128]	; (8000794 <main+0xe8>)
 8000714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000718:	6013      	str	r3, [r2, #0]

	delay_us(100);
 800071a:	2064      	movs	r0, #100	; 0x64
 800071c:	f7ff fd66 	bl	80001ec <delay_us>
	USART_init();
 8000720:	f000 fae0 	bl	8000ce4 <USART_init>
	delay_us(10000);
 8000724:	f242 7010 	movw	r0, #10000	; 0x2710
 8000728:	f7ff fd60 	bl	80001ec <delay_us>

	//Fingerprint initialization
	handshake();
 800072c:	f7ff fd8c 	bl	8000248 <handshake>
	delay_us(1000000);
 8000730:	4819      	ldr	r0, [pc, #100]	; (8000798 <main+0xec>)
 8000732:	f7ff fd5b 	bl	80001ec <delay_us>
	SetSysPara(4, 6);
 8000736:	2106      	movs	r1, #6
 8000738:	2004      	movs	r0, #4
 800073a:	f7ff fdb3 	bl	80002a4 <SetSysPara>
	delay_us(1000000);
 800073e:	4816      	ldr	r0, [pc, #88]	; (8000798 <main+0xec>)
 8000740:	f7ff fd54 	bl	80001ec <delay_us>
	SetSysPara(5, 3);
 8000744:	2103      	movs	r1, #3
 8000746:	2005      	movs	r0, #5
 8000748:	f7ff fdac 	bl	80002a4 <SetSysPara>
	delay_us(1000000);
 800074c:	4812      	ldr	r0, [pc, #72]	; (8000798 <main+0xec>)
 800074e:	f7ff fd4d 	bl	80001ec <delay_us>
	SetSysPara(6, 0);
 8000752:	2100      	movs	r1, #0
 8000754:	2006      	movs	r0, #6
 8000756:	f7ff fda5 	bl	80002a4 <SetSysPara>
	delay_us(1000000);
 800075a:	480f      	ldr	r0, [pc, #60]	; (8000798 <main+0xec>)
 800075c:	f7ff fd46 	bl	80001ec <delay_us>


	while (1) {
//		lcd_set_cursor_position(0, 0); // set cursor to second row, first column
//		write(index0 + '0');
		genImg();
 8000760:	f7ff fdf8 	bl	8000354 <genImg>
		delay_us(500000); //NEED ALWAYS CALL THIS DELAY EVERYTIME I SEND A COMMAND
 8000764:	480d      	ldr	r0, [pc, #52]	; (800079c <main+0xf0>)
 8000766:	f7ff fd41 	bl	80001ec <delay_us>
//			while (!(LPUART1->ISR & USART_ISR_TXE))
//				;
//			LPUART1->TDR = errorbuffer[i];
//			delay_us(1000);
//		}
		while (!(LPUART1->ISR & USART_ISR_TXE))
 800076a:	bf00      	nop
 800076c:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <main+0xf4>)
 800076e:	69db      	ldr	r3, [r3, #28]
 8000770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000774:	2b00      	cmp	r3, #0
 8000776:	d0f9      	beq.n	800076c <main+0xc0>
						;
					LPUART1->TDR = ConfirmationCode;
 8000778:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <main+0xf8>)
 800077a:	781a      	ldrb	r2, [r3, #0]
 800077c:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <main+0xf4>)
 800077e:	b292      	uxth	r2, r2
 8000780:	851a      	strh	r2, [r3, #40]	; 0x28
		delay_us(1000);
 8000782:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000786:	f7ff fd31 	bl	80001ec <delay_us>
		genImg();
 800078a:	e7e9      	b.n	8000760 <main+0xb4>
 800078c:	40021000 	.word	0x40021000
 8000790:	48000800 	.word	0x48000800
 8000794:	48000400 	.word	0x48000400
 8000798:	000f4240 	.word	0x000f4240
 800079c:	0007a120 	.word	0x0007a120
 80007a0:	40008000 	.word	0x40008000
 80007a4:	2000014c 	.word	0x2000014c

080007a8 <LPUART1_IRQHandler>:
//		GPIOB->BRR = GPIO_PIN_7;

	}
}

void LPUART1_IRQHandler(void) {
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
	if (LPUART1->ISR & USART_ISR_RXNE) { // check if there is new data in the UART receiver
 80007ae:	4b1f      	ldr	r3, [pc, #124]	; (800082c <LPUART1_IRQHandler+0x84>)
 80007b0:	69db      	ldr	r3, [r3, #28]
 80007b2:	f003 0320 	and.w	r3, r3, #32
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d031      	beq.n	800081e <LPUART1_IRQHandler+0x76>
		GPIOB->BSRR = GPIO_PIN_7;
 80007ba:	4b1d      	ldr	r3, [pc, #116]	; (8000830 <LPUART1_IRQHandler+0x88>)
 80007bc:	2280      	movs	r2, #128	; 0x80
 80007be:	619a      	str	r2, [r3, #24]

		char charRecv = LPUART1->RDR;  // read the received character
 80007c0:	4b1a      	ldr	r3, [pc, #104]	; (800082c <LPUART1_IRQHandler+0x84>)
 80007c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80007c4:	b29b      	uxth	r3, r3
 80007c6:	71fb      	strb	r3, [r7, #7]
		buffer[index] = charRecv;
 80007c8:	4b1a      	ldr	r3, [pc, #104]	; (8000834 <LPUART1_IRQHandler+0x8c>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	491a      	ldr	r1, [pc, #104]	; (8000838 <LPUART1_IRQHandler+0x90>)
 80007ce:	79fa      	ldrb	r2, [r7, #7]
 80007d0:	54ca      	strb	r2, [r1, r3]
		index++;
 80007d2:	4b18      	ldr	r3, [pc, #96]	; (8000834 <LPUART1_IRQHandler+0x8c>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	3301      	adds	r3, #1
 80007d8:	4a16      	ldr	r2, [pc, #88]	; (8000834 <LPUART1_IRQHandler+0x8c>)
 80007da:	6013      	str	r3, [r2, #0]

		if (charRecv == '\n') {
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	2b0a      	cmp	r3, #10
 80007e0:	d10f      	bne.n	8000802 <LPUART1_IRQHandler+0x5a>
			flag = 1;
 80007e2:	4b16      	ldr	r3, [pc, #88]	; (800083c <LPUART1_IRQHandler+0x94>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	601a      	str	r2, [r3, #0]
			index--;
 80007e8:	4b12      	ldr	r3, [pc, #72]	; (8000834 <LPUART1_IRQHandler+0x8c>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	3b01      	subs	r3, #1
 80007ee:	4a11      	ldr	r2, [pc, #68]	; (8000834 <LPUART1_IRQHandler+0x8c>)
 80007f0:	6013      	str	r3, [r2, #0]
			buffer[index] = '\0';
 80007f2:	4b10      	ldr	r3, [pc, #64]	; (8000834 <LPUART1_IRQHandler+0x8c>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a10      	ldr	r2, [pc, #64]	; (8000838 <LPUART1_IRQHandler+0x90>)
 80007f8:	2100      	movs	r1, #0
 80007fa:	54d1      	strb	r1, [r2, r3]
			index = 0;
 80007fc:	4b0d      	ldr	r3, [pc, #52]	; (8000834 <LPUART1_IRQHandler+0x8c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
		}
		while (!(LPUART1->ISR & USART_ISR_TXE))
 8000802:	bf00      	nop
 8000804:	4b09      	ldr	r3, [pc, #36]	; (800082c <LPUART1_IRQHandler+0x84>)
 8000806:	69db      	ldr	r3, [r3, #28]
 8000808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800080c:	2b00      	cmp	r3, #0
 800080e:	d0f9      	beq.n	8000804 <LPUART1_IRQHandler+0x5c>
			;  // wait for empty TX buffer
		LPUART1->TDR = charRecv; // send received character
 8000810:	4b06      	ldr	r3, [pc, #24]	; (800082c <LPUART1_IRQHandler+0x84>)
 8000812:	79fa      	ldrb	r2, [r7, #7]
 8000814:	b292      	uxth	r2, r2
 8000816:	851a      	strh	r2, [r3, #40]	; 0x28

		GPIOB->BRR = GPIO_PIN_7;
 8000818:	4b05      	ldr	r3, [pc, #20]	; (8000830 <LPUART1_IRQHandler+0x88>)
 800081a:	2280      	movs	r2, #128	; 0x80
 800081c:	629a      	str	r2, [r3, #40]	; 0x28
	}
}
 800081e:	bf00      	nop
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	40008000 	.word	0x40008000
 8000830:	48000400 	.word	0x48000400
 8000834:	20000134 	.word	0x20000134
 8000838:	20000034 	.word	0x20000034
 800083c:	20000138 	.word	0x20000138

08000840 <USART2_IRQHandler>:

void USART2_IRQHandler(void) { //[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27]
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
//	GPIOB->BSRR = GPIO_PIN_7;
	if (USART2->ISR & USART_ISR_RXNE) { // check if there is new data in the UART receiver
 8000846:	4b14      	ldr	r3, [pc, #80]	; (8000898 <USART2_IRQHandler+0x58>)
 8000848:	69db      	ldr	r3, [r3, #28]
 800084a:	f003 0320 	and.w	r3, r3, #32
 800084e:	2b00      	cmp	r3, #0
 8000850:	d01d      	beq.n	800088e <USART2_IRQHandler+0x4e>
		uint8_t charRecv = USART2->RDR;    // read the received character
 8000852:	4b11      	ldr	r3, [pc, #68]	; (8000898 <USART2_IRQHandler+0x58>)
 8000854:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000856:	b29b      	uxth	r3, r3
 8000858:	71fb      	strb	r3, [r7, #7]
		errorbuffer[index0] = charRecv; //buffer must be global variable
 800085a:	4b10      	ldr	r3, [pc, #64]	; (800089c <USART2_IRQHandler+0x5c>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4910      	ldr	r1, [pc, #64]	; (80008a0 <USART2_IRQHandler+0x60>)
 8000860:	79fa      	ldrb	r2, [r7, #7]
 8000862:	54ca      	strb	r2, [r1, r3]
		index0++;                  //index must be global variable
 8000864:	4b0d      	ldr	r3, [pc, #52]	; (800089c <USART2_IRQHandler+0x5c>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	3301      	adds	r3, #1
 800086a:	4a0c      	ldr	r2, [pc, #48]	; (800089c <USART2_IRQHandler+0x5c>)
 800086c:	6013      	str	r3, [r2, #0]
//				currentPacketSize = ACK_LENGTH;
//			} else {
//				index0 = 0;
//			}
//		}
		if (index0 >= ACK_LENGTH) {
 800086e:	4b0b      	ldr	r3, [pc, #44]	; (800089c <USART2_IRQHandler+0x5c>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	461a      	mov	r2, r3
 8000874:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <USART2_IRQHandler+0x64>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	429a      	cmp	r2, r3
 800087a:	d308      	bcc.n	800088e <USART2_IRQHandler+0x4e>
			ConfirmationCode = errorbuffer[9];    //must be global variable
 800087c:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <USART2_IRQHandler+0x60>)
 800087e:	7a5a      	ldrb	r2, [r3, #9]
 8000880:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <USART2_IRQHandler+0x68>)
 8000882:	701a      	strb	r2, [r3, #0]
			FingerprintErrorHandler();
 8000884:	f000 f812 	bl	80008ac <FingerprintErrorHandler>
			index0 = 0;
 8000888:	4b04      	ldr	r3, [pc, #16]	; (800089c <USART2_IRQHandler+0x5c>)
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
		}
	}
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40004400 	.word	0x40004400
 800089c:	20000148 	.word	0x20000148
 80008a0:	2000013c 	.word	0x2000013c
 80008a4:	20000030 	.word	0x20000030
 80008a8:	2000014c 	.word	0x2000014c

080008ac <FingerprintErrorHandler>:



void FingerprintErrorHandler(void) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	//clear_LCD();
	lcd_set_cursor_position(0, 0);
 80008b0:	2100      	movs	r1, #0
 80008b2:	2000      	movs	r0, #0
 80008b4:	f7ff febe 	bl	8000634 <lcd_set_cursor_position>
//16 characters per line
	if (ConfirmationCode == 0x00) {
 80008b8:	4b61      	ldr	r3, [pc, #388]	; (8000a40 <FingerprintErrorHandler+0x194>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d10a      	bne.n	80008d6 <FingerprintErrorHandler+0x2a>
		str_write("cmd success     ");
 80008c0:	4860      	ldr	r0, [pc, #384]	; (8000a44 <FingerprintErrorHandler+0x198>)
 80008c2:	f7ff fed1 	bl	8000668 <str_write>
		lcd_set_cursor_position(1, 0);
 80008c6:	2100      	movs	r1, #0
 80008c8:	2001      	movs	r0, #1
 80008ca:	f7ff feb3 	bl	8000634 <lcd_set_cursor_position>
		str_write("                ");
 80008ce:	485e      	ldr	r0, [pc, #376]	; (8000a48 <FingerprintErrorHandler+0x19c>)
 80008d0:	f7ff feca 	bl	8000668 <str_write>
	} else if (ConfirmationCode == 0x09) {
		str_write("no match in");
		lcd_set_cursor_position(1, 0);
		str_write("library");
	}
}
 80008d4:	e0b2      	b.n	8000a3c <FingerprintErrorHandler+0x190>
	} else if (ConfirmationCode == 0x02) {
 80008d6:	4b5a      	ldr	r3, [pc, #360]	; (8000a40 <FingerprintErrorHandler+0x194>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	2b02      	cmp	r3, #2
 80008dc:	d10a      	bne.n	80008f4 <FingerprintErrorHandler+0x48>
		str_write("fngr not found  ");
 80008de:	485b      	ldr	r0, [pc, #364]	; (8000a4c <FingerprintErrorHandler+0x1a0>)
 80008e0:	f7ff fec2 	bl	8000668 <str_write>
		lcd_set_cursor_position(1, 0);
 80008e4:	2100      	movs	r1, #0
 80008e6:	2001      	movs	r0, #1
 80008e8:	f7ff fea4 	bl	8000634 <lcd_set_cursor_position>
		str_write("put fngr on sens");
 80008ec:	4858      	ldr	r0, [pc, #352]	; (8000a50 <FingerprintErrorHandler+0x1a4>)
 80008ee:	f7ff febb 	bl	8000668 <str_write>
}
 80008f2:	e0a3      	b.n	8000a3c <FingerprintErrorHandler+0x190>
	} else if (ConfirmationCode == 0x01) {
 80008f4:	4b52      	ldr	r3, [pc, #328]	; (8000a40 <FingerprintErrorHandler+0x194>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d10a      	bne.n	8000912 <FingerprintErrorHandler+0x66>
		str_write("error receiving ");
 80008fc:	4855      	ldr	r0, [pc, #340]	; (8000a54 <FingerprintErrorHandler+0x1a8>)
 80008fe:	f7ff feb3 	bl	8000668 <str_write>
		lcd_set_cursor_position(1, 0);
 8000902:	2100      	movs	r1, #0
 8000904:	2001      	movs	r0, #1
 8000906:	f7ff fe95 	bl	8000634 <lcd_set_cursor_position>
		str_write("or storing data ");
 800090a:	4853      	ldr	r0, [pc, #332]	; (8000a58 <FingerprintErrorHandler+0x1ac>)
 800090c:	f7ff feac 	bl	8000668 <str_write>
}
 8000910:	e094      	b.n	8000a3c <FingerprintErrorHandler+0x190>
	} else if (ConfirmationCode == 0x0A) {
 8000912:	4b4b      	ldr	r3, [pc, #300]	; (8000a40 <FingerprintErrorHandler+0x194>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	2b0a      	cmp	r3, #10
 8000918:	d10a      	bne.n	8000930 <FingerprintErrorHandler+0x84>
		str_write("failure to      ");
 800091a:	4850      	ldr	r0, [pc, #320]	; (8000a5c <FingerprintErrorHandler+0x1b0>)
 800091c:	f7ff fea4 	bl	8000668 <str_write>
		lcd_set_cursor_position(1, 0);
 8000920:	2100      	movs	r1, #0
 8000922:	2001      	movs	r0, #1
 8000924:	f7ff fe86 	bl	8000634 <lcd_set_cursor_position>
		str_write("combine data    ");
 8000928:	484d      	ldr	r0, [pc, #308]	; (8000a60 <FingerprintErrorHandler+0x1b4>)
 800092a:	f7ff fe9d 	bl	8000668 <str_write>
}
 800092e:	e085      	b.n	8000a3c <FingerprintErrorHandler+0x190>
	} else if (ConfirmationCode == 0x1A) {
 8000930:	4b43      	ldr	r3, [pc, #268]	; (8000a40 <FingerprintErrorHandler+0x194>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	2b1a      	cmp	r3, #26
 8000936:	d10a      	bne.n	800094e <FingerprintErrorHandler+0xa2>
		str_write("invalid register");
 8000938:	484a      	ldr	r0, [pc, #296]	; (8000a64 <FingerprintErrorHandler+0x1b8>)
 800093a:	f7ff fe95 	bl	8000668 <str_write>
		lcd_set_cursor_position(1, 0);
 800093e:	2100      	movs	r1, #0
 8000940:	2001      	movs	r0, #1
 8000942:	f7ff fe77 	bl	8000634 <lcd_set_cursor_position>
		str_write("number          ");
 8000946:	4848      	ldr	r0, [pc, #288]	; (8000a68 <FingerprintErrorHandler+0x1bc>)
 8000948:	f7ff fe8e 	bl	8000668 <str_write>
}
 800094c:	e076      	b.n	8000a3c <FingerprintErrorHandler+0x190>
	} else if (ConfirmationCode == 0x0D) {
 800094e:	4b3c      	ldr	r3, [pc, #240]	; (8000a40 <FingerprintErrorHandler+0x194>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	2b0d      	cmp	r3, #13
 8000954:	d10a      	bne.n	800096c <FingerprintErrorHandler+0xc0>
		str_write("error uploading ");
 8000956:	4845      	ldr	r0, [pc, #276]	; (8000a6c <FingerprintErrorHandler+0x1c0>)
 8000958:	f7ff fe86 	bl	8000668 <str_write>
		lcd_set_cursor_position(1, 0);
 800095c:	2100      	movs	r1, #0
 800095e:	2001      	movs	r0, #1
 8000960:	f7ff fe68 	bl	8000634 <lcd_set_cursor_position>
		str_write("fingerprint     ");
 8000964:	4842      	ldr	r0, [pc, #264]	; (8000a70 <FingerprintErrorHandler+0x1c4>)
 8000966:	f7ff fe7f 	bl	8000668 <str_write>
}
 800096a:	e067      	b.n	8000a3c <FingerprintErrorHandler+0x190>
	} else if (ConfirmationCode == 0x1D) {
 800096c:	4b34      	ldr	r3, [pc, #208]	; (8000a40 <FingerprintErrorHandler+0x194>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	2b1d      	cmp	r3, #29
 8000972:	d10a      	bne.n	800098a <FingerprintErrorHandler+0xde>
		str_write("fail to operate ");
 8000974:	483f      	ldr	r0, [pc, #252]	; (8000a74 <FingerprintErrorHandler+0x1c8>)
 8000976:	f7ff fe77 	bl	8000668 <str_write>
		lcd_set_cursor_position(1, 0);
 800097a:	2100      	movs	r1, #0
 800097c:	2001      	movs	r0, #1
 800097e:	f7ff fe59 	bl	8000634 <lcd_set_cursor_position>
		str_write("comms port      ");
 8000982:	483d      	ldr	r0, [pc, #244]	; (8000a78 <FingerprintErrorHandler+0x1cc>)
 8000984:	f7ff fe70 	bl	8000668 <str_write>
}
 8000988:	e058      	b.n	8000a3c <FingerprintErrorHandler+0x190>
	} else if (ConfirmationCode == 0x0B) {
 800098a:	4b2d      	ldr	r3, [pc, #180]	; (8000a40 <FingerprintErrorHandler+0x194>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b0b      	cmp	r3, #11
 8000990:	d10a      	bne.n	80009a8 <FingerprintErrorHandler+0xfc>
		str_write("addressing PgeID");
 8000992:	483a      	ldr	r0, [pc, #232]	; (8000a7c <FingerprintErrorHandler+0x1d0>)
 8000994:	f7ff fe68 	bl	8000668 <str_write>
		lcd_set_cursor_position(1, 0);
 8000998:	2100      	movs	r1, #0
 800099a:	2001      	movs	r0, #1
 800099c:	f7ff fe4a 	bl	8000634 <lcd_set_cursor_position>
		str_write("beyond fngr lib ");
 80009a0:	4837      	ldr	r0, [pc, #220]	; (8000a80 <FingerprintErrorHandler+0x1d4>)
 80009a2:	f7ff fe61 	bl	8000668 <str_write>
}
 80009a6:	e049      	b.n	8000a3c <FingerprintErrorHandler+0x190>
	} else if (ConfirmationCode == 0x18) {
 80009a8:	4b25      	ldr	r3, [pc, #148]	; (8000a40 <FingerprintErrorHandler+0x194>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b18      	cmp	r3, #24
 80009ae:	d10a      	bne.n	80009c6 <FingerprintErrorHandler+0x11a>
		str_write("err when writing");
 80009b0:	4834      	ldr	r0, [pc, #208]	; (8000a84 <FingerprintErrorHandler+0x1d8>)
 80009b2:	f7ff fe59 	bl	8000668 <str_write>
		lcd_set_cursor_position(1, 0);
 80009b6:	2100      	movs	r1, #0
 80009b8:	2001      	movs	r0, #1
 80009ba:	f7ff fe3b 	bl	8000634 <lcd_set_cursor_position>
		str_write("flash           ");
 80009be:	4832      	ldr	r0, [pc, #200]	; (8000a88 <FingerprintErrorHandler+0x1dc>)
 80009c0:	f7ff fe52 	bl	8000668 <str_write>
}
 80009c4:	e03a      	b.n	8000a3c <FingerprintErrorHandler+0x190>
	} else if (ConfirmationCode == 0x0C) {
 80009c6:	4b1e      	ldr	r3, [pc, #120]	; (8000a40 <FingerprintErrorHandler+0x194>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	2b0c      	cmp	r3, #12
 80009cc:	d10a      	bne.n	80009e4 <FingerprintErrorHandler+0x138>
		str_write("err reading temp");
 80009ce:	482f      	ldr	r0, [pc, #188]	; (8000a8c <FingerprintErrorHandler+0x1e0>)
 80009d0:	f7ff fe4a 	bl	8000668 <str_write>
		lcd_set_cursor_position(1, 0);
 80009d4:	2100      	movs	r1, #0
 80009d6:	2001      	movs	r0, #1
 80009d8:	f7ff fe2c 	bl	8000634 <lcd_set_cursor_position>
		str_write("from lib or template invalid");
 80009dc:	482c      	ldr	r0, [pc, #176]	; (8000a90 <FingerprintErrorHandler+0x1e4>)
 80009de:	f7ff fe43 	bl	8000668 <str_write>
}
 80009e2:	e02b      	b.n	8000a3c <FingerprintErrorHandler+0x190>
	} else if (ConfirmationCode == 0x11) {
 80009e4:	4b16      	ldr	r3, [pc, #88]	; (8000a40 <FingerprintErrorHandler+0x194>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	2b11      	cmp	r3, #17
 80009ea:	d10a      	bne.n	8000a02 <FingerprintErrorHandler+0x156>
		str_write("failure to clear");
 80009ec:	4829      	ldr	r0, [pc, #164]	; (8000a94 <FingerprintErrorHandler+0x1e8>)
 80009ee:	f7ff fe3b 	bl	8000668 <str_write>
		lcd_set_cursor_position(1, 0);
 80009f2:	2100      	movs	r1, #0
 80009f4:	2001      	movs	r0, #1
 80009f6:	f7ff fe1d 	bl	8000634 <lcd_set_cursor_position>
		str_write("library");
 80009fa:	4827      	ldr	r0, [pc, #156]	; (8000a98 <FingerprintErrorHandler+0x1ec>)
 80009fc:	f7ff fe34 	bl	8000668 <str_write>
}
 8000a00:	e01c      	b.n	8000a3c <FingerprintErrorHandler+0x190>
	} else if (ConfirmationCode == 0x08) {
 8000a02:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <FingerprintErrorHandler+0x194>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	2b08      	cmp	r3, #8
 8000a08:	d10a      	bne.n	8000a20 <FingerprintErrorHandler+0x174>
		str_write("buffer templates");
 8000a0a:	4824      	ldr	r0, [pc, #144]	; (8000a9c <FingerprintErrorHandler+0x1f0>)
 8000a0c:	f7ff fe2c 	bl	8000668 <str_write>
		lcd_set_cursor_position(1, 0);
 8000a10:	2100      	movs	r1, #0
 8000a12:	2001      	movs	r0, #1
 8000a14:	f7ff fe0e 	bl	8000634 <lcd_set_cursor_position>
		str_write("dont match");
 8000a18:	4821      	ldr	r0, [pc, #132]	; (8000aa0 <FingerprintErrorHandler+0x1f4>)
 8000a1a:	f7ff fe25 	bl	8000668 <str_write>
}
 8000a1e:	e00d      	b.n	8000a3c <FingerprintErrorHandler+0x190>
	} else if (ConfirmationCode == 0x09) {
 8000a20:	4b07      	ldr	r3, [pc, #28]	; (8000a40 <FingerprintErrorHandler+0x194>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	2b09      	cmp	r3, #9
 8000a26:	d109      	bne.n	8000a3c <FingerprintErrorHandler+0x190>
		str_write("no match in");
 8000a28:	481e      	ldr	r0, [pc, #120]	; (8000aa4 <FingerprintErrorHandler+0x1f8>)
 8000a2a:	f7ff fe1d 	bl	8000668 <str_write>
		lcd_set_cursor_position(1, 0);
 8000a2e:	2100      	movs	r1, #0
 8000a30:	2001      	movs	r0, #1
 8000a32:	f7ff fdff 	bl	8000634 <lcd_set_cursor_position>
		str_write("library");
 8000a36:	4818      	ldr	r0, [pc, #96]	; (8000a98 <FingerprintErrorHandler+0x1ec>)
 8000a38:	f7ff fe16 	bl	8000668 <str_write>
}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	2000014c 	.word	0x2000014c
 8000a44:	08001e40 	.word	0x08001e40
 8000a48:	08001e54 	.word	0x08001e54
 8000a4c:	08001e68 	.word	0x08001e68
 8000a50:	08001e7c 	.word	0x08001e7c
 8000a54:	08001e90 	.word	0x08001e90
 8000a58:	08001ea4 	.word	0x08001ea4
 8000a5c:	08001eb8 	.word	0x08001eb8
 8000a60:	08001ecc 	.word	0x08001ecc
 8000a64:	08001ee0 	.word	0x08001ee0
 8000a68:	08001ef4 	.word	0x08001ef4
 8000a6c:	08001f08 	.word	0x08001f08
 8000a70:	08001f1c 	.word	0x08001f1c
 8000a74:	08001f30 	.word	0x08001f30
 8000a78:	08001f44 	.word	0x08001f44
 8000a7c:	08001f58 	.word	0x08001f58
 8000a80:	08001f6c 	.word	0x08001f6c
 8000a84:	08001f80 	.word	0x08001f80
 8000a88:	08001f94 	.word	0x08001f94
 8000a8c:	08001fa8 	.word	0x08001fa8
 8000a90:	08001fbc 	.word	0x08001fbc
 8000a94:	08001fdc 	.word	0x08001fdc
 8000a98:	08001ff0 	.word	0x08001ff0
 8000a9c:	08001ff8 	.word	0x08001ff8
 8000aa0:	0800200c 	.word	0x0800200c
 8000aa4:	08002018 	.word	0x08002018

08000aa8 <SystemClock_Config>:

void SystemClock_Config(void) {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b096      	sub	sp, #88	; 0x58
 8000aac:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	2244      	movs	r2, #68	; 0x44
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f001 f988 	bl	8001dcc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000abc:	463b      	mov	r3, r7
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]
 8000ac6:	60da      	str	r2, [r3, #12]
 8000ac8:	611a      	str	r2, [r3, #16]

	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8000aca:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ace:	f000 fafd 	bl	80010cc <HAL_PWREx_ControlVoltageScaling>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8000ad8:	f000 f82c 	bl	8000b34 <Error_Handler>
	}

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000adc:	2310      	movs	r3, #16
 8000ade:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ae8:	2360      	movs	r3, #96	; 0x60
 8000aea:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000aec:	2300      	movs	r3, #0
 8000aee:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	4618      	mov	r0, r3
 8000af6:	f000 fb3f 	bl	8001178 <HAL_RCC_OscConfig>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <SystemClock_Config+0x5c>
		Error_Handler();
 8000b00:	f000 f818 	bl	8000b34 <Error_Handler>
	}

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000b04:	230f      	movs	r3, #15
 8000b06:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b10:	2300      	movs	r3, #0
 8000b12:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b14:	2300      	movs	r3, #0
 8000b16:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000b18:	463b      	mov	r3, r7
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f000 ff45 	bl	80019ac <HAL_RCC_ClockConfig>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <SystemClock_Config+0x84>
		Error_Handler();
 8000b28:	f000 f804 	bl	8000b34 <Error_Handler>
	}
}
 8000b2c:	bf00      	nop
 8000b2e:	3758      	adds	r7, #88	; 0x58
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <Error_Handler>:

void Error_Handler(void) {
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b38:	b672      	cpsid	i
}
 8000b3a:	bf00      	nop

	__disable_irq();
	while (1) {
 8000b3c:	e7fe      	b.n	8000b3c <Error_Handler+0x8>
	...

08000b40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b46:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <HAL_MspInit+0x44>)
 8000b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b4a:	4a0e      	ldr	r2, [pc, #56]	; (8000b84 <HAL_MspInit+0x44>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	6613      	str	r3, [r2, #96]	; 0x60
 8000b52:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <HAL_MspInit+0x44>)
 8000b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5e:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <HAL_MspInit+0x44>)
 8000b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b62:	4a08      	ldr	r2, [pc, #32]	; (8000b84 <HAL_MspInit+0x44>)
 8000b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b68:	6593      	str	r3, [r2, #88]	; 0x58
 8000b6a:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <HAL_MspInit+0x44>)
 8000b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b76:	bf00      	nop
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	40021000 	.word	0x40021000

08000b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <NMI_Handler+0x4>

08000b8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b92:	e7fe      	b.n	8000b92 <HardFault_Handler+0x4>

08000b94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <MemManage_Handler+0x4>

08000b9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b9e:	e7fe      	b.n	8000b9e <BusFault_Handler+0x4>

08000ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <UsageFault_Handler+0x4>

08000ba6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bd4:	f000 f966 	bl	8000ea4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <SystemInit+0x20>)
 8000be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000be6:	4a05      	ldr	r2, [pc, #20]	; (8000bfc <SystemInit+0x20>)
 8000be8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <LPUART_init>:

#include "main.h"
#include "uart.h"


void LPUART_init() {
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
	PWR->CR2 |= (PWR_CR2_IOSV);             // power avail on PG[15:2] (LPUART1)
 8000c04:	4b31      	ldr	r3, [pc, #196]	; (8000ccc <LPUART_init+0xcc>)
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	4a30      	ldr	r2, [pc, #192]	; (8000ccc <LPUART_init+0xcc>)
 8000c0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c0e:	6053      	str	r3, [r2, #4]
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOGEN);   // enable GPIOG clock
 8000c10:	4b2f      	ldr	r3, [pc, #188]	; (8000cd0 <LPUART_init+0xd0>)
 8000c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c14:	4a2e      	ldr	r2, [pc, #184]	; (8000cd0 <LPUART_init+0xd0>)
 8000c16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c1a:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC->APB1ENR2 |= RCC_APB1ENR2_LPUART1EN; // enable LPUART clock bridge
 8000c1c:	4b2c      	ldr	r3, [pc, #176]	; (8000cd0 <LPUART_init+0xd0>)
 8000c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c20:	4a2b      	ldr	r2, [pc, #172]	; (8000cd0 <LPUART_init+0xd0>)
 8000c22:	f043 0301 	orr.w	r3, r3, #1
 8000c26:	65d3      	str	r3, [r2, #92]	; 0x5c
	GPIOG->MODER &= ~(GPIO_MODER_MODE5 | GPIO_MODER_MODE6 | GPIO_MODER_MODE7
 8000c28:	4b2a      	ldr	r3, [pc, #168]	; (8000cd4 <LPUART_init+0xd4>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a29      	ldr	r2, [pc, #164]	; (8000cd4 <LPUART_init+0xd4>)
 8000c2e:	f423 337f 	bic.w	r3, r3, #261120	; 0x3fc00
 8000c32:	6013      	str	r3, [r2, #0]
			| GPIO_MODER_MODE8); //clear bits
	GPIOG->MODER |= (GPIO_MODER_MODE5_1 | GPIO_MODER_MODE6_1
 8000c34:	4b27      	ldr	r3, [pc, #156]	; (8000cd4 <LPUART_init+0xd4>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a26      	ldr	r2, [pc, #152]	; (8000cd4 <LPUART_init+0xd4>)
 8000c3a:	f443 332a 	orr.w	r3, r3, #174080	; 0x2a800
 8000c3e:	6013      	str	r3, [r2, #0]
			| GPIO_MODER_MODE7_1 | GPIO_MODER_MODE8_1); //set bits AF mode
	GPIOG->AFR[0] &= ~((0x000F << GPIO_AFRL_AFSEL5_Pos)
 8000c40:	4b24      	ldr	r3, [pc, #144]	; (8000cd4 <LPUART_init+0xd4>)
 8000c42:	6a1b      	ldr	r3, [r3, #32]
 8000c44:	4a23      	ldr	r2, [pc, #140]	; (8000cd4 <LPUART_init+0xd4>)
 8000c46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000c4a:	6213      	str	r3, [r2, #32]
			| (0x000F << GPIO_AFRL_AFSEL6_Pos)
			| (0x000F << GPIO_AFRL_AFSEL7_Pos));
	GPIOG->AFR[1] &= ~(0x000F << GPIO_AFRH_AFSEL8_Pos); //clear AF
 8000c4c:	4b21      	ldr	r3, [pc, #132]	; (8000cd4 <LPUART_init+0xd4>)
 8000c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c50:	4a20      	ldr	r2, [pc, #128]	; (8000cd4 <LPUART_init+0xd4>)
 8000c52:	f023 030f 	bic.w	r3, r3, #15
 8000c56:	6253      	str	r3, [r2, #36]	; 0x24

	GPIOG->AFR[0] |= ((0x0008 << GPIO_AFRL_AFSEL5_Pos)
 8000c58:	4b1e      	ldr	r3, [pc, #120]	; (8000cd4 <LPUART_init+0xd4>)
 8000c5a:	6a1b      	ldr	r3, [r3, #32]
 8000c5c:	4a1d      	ldr	r2, [pc, #116]	; (8000cd4 <LPUART_init+0xd4>)
 8000c5e:	f043 4308 	orr.w	r3, r3, #2281701376	; 0x88000000
 8000c62:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000c66:	6213      	str	r3, [r2, #32]
			| (0x0008 << GPIO_AFRL_AFSEL6_Pos)
			| (0x0008 << GPIO_AFRL_AFSEL7_Pos));	//set bits AF 8

	GPIOG->AFR[1] |= (0x0008 << GPIO_AFRH_AFSEL8_Pos);
 8000c68:	4b1a      	ldr	r3, [pc, #104]	; (8000cd4 <LPUART_init+0xd4>)
 8000c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c6c:	4a19      	ldr	r2, [pc, #100]	; (8000cd4 <LPUART_init+0xd4>)
 8000c6e:	f043 0308 	orr.w	r3, r3, #8
 8000c72:	6253      	str	r3, [r2, #36]	; 0x24
	/* USER: configure GPIOG registers MODER/PUPDR/OTYPER/OSPEEDR then
	 select AF mode and specify which function with AFR[0] and AFR[1] */
	LPUART1->CR1 &= ~(USART_CR1_M1 | USART_CR1_M0); // 8-bit data
 8000c74:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <LPUART_init+0xd8>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a17      	ldr	r2, [pc, #92]	; (8000cd8 <LPUART_init+0xd8>)
 8000c7a:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 8000c7e:	6013      	str	r3, [r2, #0]
	LPUART1->CR1 |= USART_CR1_UE;                   // enable LPUART1
 8000c80:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <LPUART_init+0xd8>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a14      	ldr	r2, [pc, #80]	; (8000cd8 <LPUART_init+0xd8>)
 8000c86:	f043 0301 	orr.w	r3, r3, #1
 8000c8a:	6013      	str	r3, [r2, #0]
	LPUART1->CR1 |= (USART_CR1_TE | USART_CR1_RE);  // enable xmit & recv
 8000c8c:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <LPUART_init+0xd8>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a11      	ldr	r2, [pc, #68]	; (8000cd8 <LPUART_init+0xd8>)
 8000c92:	f043 030c 	orr.w	r3, r3, #12
 8000c96:	6013      	str	r3, [r2, #0]
	LPUART1->CR1 |= USART_CR1_RXNEIE;        // enable LPUART1 recv interrupt
 8000c98:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <LPUART_init+0xd8>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a0e      	ldr	r2, [pc, #56]	; (8000cd8 <LPUART_init+0xd8>)
 8000c9e:	f043 0320 	orr.w	r3, r3, #32
 8000ca2:	6013      	str	r3, [r2, #0]
	LPUART1->ISR &= ~(USART_ISR_RXNE);       // clear Recv-Not-Empty flag
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <LPUART_init+0xd8>)
 8000ca6:	69db      	ldr	r3, [r3, #28]
 8000ca8:	4a0b      	ldr	r2, [pc, #44]	; (8000cd8 <LPUART_init+0xd8>)
 8000caa:	f023 0320 	bic.w	r3, r3, #32
 8000cae:	61d3      	str	r3, [r2, #28]
	LPUART1->BRR = 106666;
 8000cb0:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <LPUART_init+0xd8>)
 8000cb2:	4a0a      	ldr	r2, [pc, #40]	; (8000cdc <LPUART_init+0xdc>)
 8000cb4:	60da      	str	r2, [r3, #12]
	NVIC->ISER[2] = (1 << (LPUART1_IRQn & 0x1F));   // enable LPUART1 ISR
 8000cb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <LPUART_init+0xe0>)
 8000cb8:	2240      	movs	r2, #64	; 0x40
 8000cba:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8000cbc:	b662      	cpsie	i
}
 8000cbe:	bf00      	nop
	__enable_irq();                          // enable global interrupts
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	40007000 	.word	0x40007000
 8000cd0:	40021000 	.word	0x40021000
 8000cd4:	48001800 	.word	0x48001800
 8000cd8:	40008000 	.word	0x40008000
 8000cdc:	0001a0aa 	.word	0x0001a0aa
 8000ce0:	e000e100 	.word	0xe000e100

08000ce4 <USART_init>:

void USART_init() {
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN; // enable GPIOA clock
 8000ce8:	4b2c      	ldr	r3, [pc, #176]	; (8000d9c <USART_init+0xb8>)
 8000cea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cec:	4a2b      	ldr	r2, [pc, #172]	; (8000d9c <USART_init+0xb8>)
 8000cee:	f043 0301 	orr.w	r3, r3, #1
 8000cf2:	64d3      	str	r3, [r2, #76]	; 0x4c
    RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN; // enable USART2 clock
 8000cf4:	4b29      	ldr	r3, [pc, #164]	; (8000d9c <USART_init+0xb8>)
 8000cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cf8:	4a28      	ldr	r2, [pc, #160]	; (8000d9c <USART_init+0xb8>)
 8000cfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cfe:	6593      	str	r3, [r2, #88]	; 0x58

    GPIOA->MODER &= ~(GPIO_MODER_MODE0 |GPIO_MODER_MODE1 |GPIO_MODER_MODE2 | GPIO_MODER_MODE3); //clear bits
 8000d00:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000d0e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (GPIO_MODER_MODE0_1 |GPIO_MODER_MODE1_1 |GPIO_MODER_MODE2_1 | GPIO_MODER_MODE3_1);
 8000d10:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d1a:	f043 03aa 	orr.w	r3, r3, #170	; 0xaa
 8000d1e:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] &= ~((0x000F << GPIO_AFRL_AFSEL0_Pos) |(0x000F << GPIO_AFRL_AFSEL1_Pos) |(0x000F << GPIO_AFRL_AFSEL2_Pos) | (0x000F << GPIO_AFRL_AFSEL3_Pos));
 8000d20:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d24:	6a1b      	ldr	r3, [r3, #32]
 8000d26:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d2a:	0c1b      	lsrs	r3, r3, #16
 8000d2c:	041b      	lsls	r3, r3, #16
 8000d2e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= ((0x0007 << GPIO_AFRL_AFSEL0_Pos) |(0x0007 << GPIO_AFRL_AFSEL1_Pos) |(0x0007 << GPIO_AFRL_AFSEL2_Pos) | (0x0007 << GPIO_AFRL_AFSEL3_Pos));
 8000d30:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d34:	6a1b      	ldr	r3, [r3, #32]
 8000d36:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d3a:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8000d3e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8000d42:	6213      	str	r3, [r2, #32]

    USART2->CR1 &= ~(USART_CR1_M1 | USART_CR1_M0); // 8-bit data
 8000d44:	4b16      	ldr	r3, [pc, #88]	; (8000da0 <USART_init+0xbc>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a15      	ldr	r2, [pc, #84]	; (8000da0 <USART_init+0xbc>)
 8000d4a:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 8000d4e:	6013      	str	r3, [r2, #0]
    USART2->CR1 |= USART_CR1_UE;                   // enable USART2
 8000d50:	4b13      	ldr	r3, [pc, #76]	; (8000da0 <USART_init+0xbc>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a12      	ldr	r2, [pc, #72]	; (8000da0 <USART_init+0xbc>)
 8000d56:	f043 0301 	orr.w	r3, r3, #1
 8000d5a:	6013      	str	r3, [r2, #0]
    USART2->CR1 |= (USART_CR1_TE | USART_CR1_RE);  // enable xmit & recv
 8000d5c:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <USART_init+0xbc>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a0f      	ldr	r2, [pc, #60]	; (8000da0 <USART_init+0xbc>)
 8000d62:	f043 030c 	orr.w	r3, r3, #12
 8000d66:	6013      	str	r3, [r2, #0]
    USART2->CR1 |= USART_CR1_RXNEIE;        // enable USART2 recv interrupt
 8000d68:	4b0d      	ldr	r3, [pc, #52]	; (8000da0 <USART_init+0xbc>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a0c      	ldr	r2, [pc, #48]	; (8000da0 <USART_init+0xbc>)
 8000d6e:	f043 0320 	orr.w	r3, r3, #32
 8000d72:	6013      	str	r3, [r2, #0]
    USART2->ISR &= ~(USART_ISR_RXNE);       // clear Recv-Not-Empty flag
 8000d74:	4b0a      	ldr	r3, [pc, #40]	; (8000da0 <USART_init+0xbc>)
 8000d76:	69db      	ldr	r3, [r3, #28]
 8000d78:	4a09      	ldr	r2, [pc, #36]	; (8000da0 <USART_init+0xbc>)
 8000d7a:	f023 0320 	bic.w	r3, r3, #32
 8000d7e:	61d3      	str	r3, [r2, #28]
    USART2->BRR = 69;                   // Set the correct baud rate
 8000d80:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <USART_init+0xbc>)
 8000d82:	2245      	movs	r2, #69	; 0x45
 8000d84:	60da      	str	r2, [r3, #12]
    NVIC->ISER[1] = (1 << (USART2_IRQn & 0x1F));   // enable USART2 ISR
 8000d86:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <USART_init+0xc0>)
 8000d88:	2240      	movs	r2, #64	; 0x40
 8000d8a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 8000d8c:	b662      	cpsie	i
}
 8000d8e:	bf00      	nop
    __enable_irq();                          // enable global interrupts
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	40004400 	.word	0x40004400
 8000da4:	e000e100 	.word	0xe000e100

08000da8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000da8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000de0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dac:	f7ff ff16 	bl	8000bdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000db0:	480c      	ldr	r0, [pc, #48]	; (8000de4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000db2:	490d      	ldr	r1, [pc, #52]	; (8000de8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000db4:	4a0d      	ldr	r2, [pc, #52]	; (8000dec <LoopForever+0xe>)
  movs r3, #0
 8000db6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db8:	e002      	b.n	8000dc0 <LoopCopyDataInit>

08000dba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dbe:	3304      	adds	r3, #4

08000dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc4:	d3f9      	bcc.n	8000dba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dc6:	4a0a      	ldr	r2, [pc, #40]	; (8000df0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dc8:	4c0a      	ldr	r4, [pc, #40]	; (8000df4 <LoopForever+0x16>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dcc:	e001      	b.n	8000dd2 <LoopFillZerobss>

08000dce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd0:	3204      	adds	r2, #4

08000dd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd4:	d3fb      	bcc.n	8000dce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dd6:	f000 ffd5 	bl	8001d84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dda:	f7ff fc67 	bl	80006ac <main>

08000dde <LoopForever>:

LoopForever:
    b LoopForever
 8000dde:	e7fe      	b.n	8000dde <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000de0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000de4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000dec:	0800206c 	.word	0x0800206c
  ldr r2, =_sbss
 8000df0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000df4:	20000154 	.word	0x20000154

08000df8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000df8:	e7fe      	b.n	8000df8 <ADC1_2_IRQHandler>

08000dfa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e00:	2300      	movs	r3, #0
 8000e02:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e04:	2003      	movs	r0, #3
 8000e06:	f000 f91f 	bl	8001048 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e0a:	200f      	movs	r0, #15
 8000e0c:	f000 f80e 	bl	8000e2c <HAL_InitTick>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d002      	beq.n	8000e1c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	71fb      	strb	r3, [r7, #7]
 8000e1a:	e001      	b.n	8000e20 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e1c:	f7ff fe90 	bl	8000b40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e20:	79fb      	ldrb	r3, [r7, #7]
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e34:	2300      	movs	r3, #0
 8000e36:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e38:	4b17      	ldr	r3, [pc, #92]	; (8000e98 <HAL_InitTick+0x6c>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d023      	beq.n	8000e88 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e40:	4b16      	ldr	r3, [pc, #88]	; (8000e9c <HAL_InitTick+0x70>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4b14      	ldr	r3, [pc, #80]	; (8000e98 <HAL_InitTick+0x6c>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	4619      	mov	r1, r3
 8000e4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e56:	4618      	mov	r0, r3
 8000e58:	f000 f91d 	bl	8001096 <HAL_SYSTICK_Config>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d10f      	bne.n	8000e82 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2b0f      	cmp	r3, #15
 8000e66:	d809      	bhi.n	8000e7c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	6879      	ldr	r1, [r7, #4]
 8000e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e70:	f000 f8f5 	bl	800105e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e74:	4a0a      	ldr	r2, [pc, #40]	; (8000ea0 <HAL_InitTick+0x74>)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6013      	str	r3, [r2, #0]
 8000e7a:	e007      	b.n	8000e8c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	73fb      	strb	r3, [r7, #15]
 8000e80:	e004      	b.n	8000e8c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	73fb      	strb	r3, [r7, #15]
 8000e86:	e001      	b.n	8000e8c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20000010 	.word	0x20000010
 8000e9c:	20000008 	.word	0x20000008
 8000ea0:	2000000c 	.word	0x2000000c

08000ea4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <HAL_IncTick+0x20>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	461a      	mov	r2, r3
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <HAL_IncTick+0x24>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	4a04      	ldr	r2, [pc, #16]	; (8000ec8 <HAL_IncTick+0x24>)
 8000eb6:	6013      	str	r3, [r2, #0]
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	20000010 	.word	0x20000010
 8000ec8:	20000150 	.word	0x20000150

08000ecc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed0:	4b03      	ldr	r3, [pc, #12]	; (8000ee0 <HAL_GetTick+0x14>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	20000150 	.word	0x20000150

08000ee4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f003 0307 	and.w	r3, r3, #7
 8000ef2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000efa:	68ba      	ldr	r2, [r7, #8]
 8000efc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f00:	4013      	ands	r3, r2
 8000f02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f16:	4a04      	ldr	r2, [pc, #16]	; (8000f28 <__NVIC_SetPriorityGrouping+0x44>)
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	60d3      	str	r3, [r2, #12]
}
 8000f1c:	bf00      	nop
 8000f1e:	3714      	adds	r7, #20
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f30:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <__NVIC_GetPriorityGrouping+0x18>)
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	0a1b      	lsrs	r3, r3, #8
 8000f36:	f003 0307 	and.w	r3, r3, #7
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	6039      	str	r1, [r7, #0]
 8000f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	db0a      	blt.n	8000f72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	490c      	ldr	r1, [pc, #48]	; (8000f94 <__NVIC_SetPriority+0x4c>)
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	0112      	lsls	r2, r2, #4
 8000f68:	b2d2      	uxtb	r2, r2
 8000f6a:	440b      	add	r3, r1
 8000f6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f70:	e00a      	b.n	8000f88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	b2da      	uxtb	r2, r3
 8000f76:	4908      	ldr	r1, [pc, #32]	; (8000f98 <__NVIC_SetPriority+0x50>)
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	f003 030f 	and.w	r3, r3, #15
 8000f7e:	3b04      	subs	r3, #4
 8000f80:	0112      	lsls	r2, r2, #4
 8000f82:	b2d2      	uxtb	r2, r2
 8000f84:	440b      	add	r3, r1
 8000f86:	761a      	strb	r2, [r3, #24]
}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000e100 	.word	0xe000e100
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b089      	sub	sp, #36	; 0x24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	f1c3 0307 	rsb	r3, r3, #7
 8000fb6:	2b04      	cmp	r3, #4
 8000fb8:	bf28      	it	cs
 8000fba:	2304      	movcs	r3, #4
 8000fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	3304      	adds	r3, #4
 8000fc2:	2b06      	cmp	r3, #6
 8000fc4:	d902      	bls.n	8000fcc <NVIC_EncodePriority+0x30>
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	3b03      	subs	r3, #3
 8000fca:	e000      	b.n	8000fce <NVIC_EncodePriority+0x32>
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	43da      	mvns	r2, r3
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	401a      	ands	r2, r3
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	fa01 f303 	lsl.w	r3, r1, r3
 8000fee:	43d9      	mvns	r1, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff4:	4313      	orrs	r3, r2
         );
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3724      	adds	r7, #36	; 0x24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
	...

08001004 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3b01      	subs	r3, #1
 8001010:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001014:	d301      	bcc.n	800101a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001016:	2301      	movs	r3, #1
 8001018:	e00f      	b.n	800103a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800101a:	4a0a      	ldr	r2, [pc, #40]	; (8001044 <SysTick_Config+0x40>)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3b01      	subs	r3, #1
 8001020:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001022:	210f      	movs	r1, #15
 8001024:	f04f 30ff 	mov.w	r0, #4294967295
 8001028:	f7ff ff8e 	bl	8000f48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800102c:	4b05      	ldr	r3, [pc, #20]	; (8001044 <SysTick_Config+0x40>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001032:	4b04      	ldr	r3, [pc, #16]	; (8001044 <SysTick_Config+0x40>)
 8001034:	2207      	movs	r2, #7
 8001036:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	e000e010 	.word	0xe000e010

08001048 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f7ff ff47 	bl	8000ee4 <__NVIC_SetPriorityGrouping>
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b086      	sub	sp, #24
 8001062:	af00      	add	r7, sp, #0
 8001064:	4603      	mov	r3, r0
 8001066:	60b9      	str	r1, [r7, #8]
 8001068:	607a      	str	r2, [r7, #4]
 800106a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001070:	f7ff ff5c 	bl	8000f2c <__NVIC_GetPriorityGrouping>
 8001074:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	68b9      	ldr	r1, [r7, #8]
 800107a:	6978      	ldr	r0, [r7, #20]
 800107c:	f7ff ff8e 	bl	8000f9c <NVIC_EncodePriority>
 8001080:	4602      	mov	r2, r0
 8001082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001086:	4611      	mov	r1, r2
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff ff5d 	bl	8000f48 <__NVIC_SetPriority>
}
 800108e:	bf00      	nop
 8001090:	3718      	adds	r7, #24
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b082      	sub	sp, #8
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f7ff ffb0 	bl	8001004 <SysTick_Config>
 80010a4:	4603      	mov	r3, r0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
	...

080010b0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80010b4:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80010bc:	4618      	mov	r0, r3
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	40007000 	.word	0x40007000

080010cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010da:	d130      	bne.n	800113e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80010dc:	4b23      	ldr	r3, [pc, #140]	; (800116c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010e8:	d038      	beq.n	800115c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010ea:	4b20      	ldr	r3, [pc, #128]	; (800116c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010f2:	4a1e      	ldr	r2, [pc, #120]	; (800116c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010f8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010fa:	4b1d      	ldr	r3, [pc, #116]	; (8001170 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2232      	movs	r2, #50	; 0x32
 8001100:	fb02 f303 	mul.w	r3, r2, r3
 8001104:	4a1b      	ldr	r2, [pc, #108]	; (8001174 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001106:	fba2 2303 	umull	r2, r3, r2, r3
 800110a:	0c9b      	lsrs	r3, r3, #18
 800110c:	3301      	adds	r3, #1
 800110e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001110:	e002      	b.n	8001118 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	3b01      	subs	r3, #1
 8001116:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001118:	4b14      	ldr	r3, [pc, #80]	; (800116c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800111a:	695b      	ldr	r3, [r3, #20]
 800111c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001120:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001124:	d102      	bne.n	800112c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d1f2      	bne.n	8001112 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800112c:	4b0f      	ldr	r3, [pc, #60]	; (800116c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800112e:	695b      	ldr	r3, [r3, #20]
 8001130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001134:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001138:	d110      	bne.n	800115c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e00f      	b.n	800115e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800113e:	4b0b      	ldr	r3, [pc, #44]	; (800116c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001146:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800114a:	d007      	beq.n	800115c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800114c:	4b07      	ldr	r3, [pc, #28]	; (800116c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001154:	4a05      	ldr	r2, [pc, #20]	; (800116c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001156:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800115a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3714      	adds	r7, #20
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	40007000 	.word	0x40007000
 8001170:	20000008 	.word	0x20000008
 8001174:	431bde83 	.word	0x431bde83

08001178 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b088      	sub	sp, #32
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d102      	bne.n	800118c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	f000 bc08 	b.w	800199c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800118c:	4b96      	ldr	r3, [pc, #600]	; (80013e8 <HAL_RCC_OscConfig+0x270>)
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	f003 030c 	and.w	r3, r3, #12
 8001194:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001196:	4b94      	ldr	r3, [pc, #592]	; (80013e8 <HAL_RCC_OscConfig+0x270>)
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	f003 0303 	and.w	r3, r3, #3
 800119e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 0310 	and.w	r3, r3, #16
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	f000 80e4 	beq.w	8001376 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d007      	beq.n	80011c4 <HAL_RCC_OscConfig+0x4c>
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	2b0c      	cmp	r3, #12
 80011b8:	f040 808b 	bne.w	80012d2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	f040 8087 	bne.w	80012d2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011c4:	4b88      	ldr	r3, [pc, #544]	; (80013e8 <HAL_RCC_OscConfig+0x270>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 0302 	and.w	r3, r3, #2
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d005      	beq.n	80011dc <HAL_RCC_OscConfig+0x64>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d101      	bne.n	80011dc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e3df      	b.n	800199c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6a1a      	ldr	r2, [r3, #32]
 80011e0:	4b81      	ldr	r3, [pc, #516]	; (80013e8 <HAL_RCC_OscConfig+0x270>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 0308 	and.w	r3, r3, #8
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d004      	beq.n	80011f6 <HAL_RCC_OscConfig+0x7e>
 80011ec:	4b7e      	ldr	r3, [pc, #504]	; (80013e8 <HAL_RCC_OscConfig+0x270>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011f4:	e005      	b.n	8001202 <HAL_RCC_OscConfig+0x8a>
 80011f6:	4b7c      	ldr	r3, [pc, #496]	; (80013e8 <HAL_RCC_OscConfig+0x270>)
 80011f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011fc:	091b      	lsrs	r3, r3, #4
 80011fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001202:	4293      	cmp	r3, r2
 8001204:	d223      	bcs.n	800124e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6a1b      	ldr	r3, [r3, #32]
 800120a:	4618      	mov	r0, r3
 800120c:	f000 fd5a 	bl	8001cc4 <RCC_SetFlashLatencyFromMSIRange>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e3c0      	b.n	800199c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800121a:	4b73      	ldr	r3, [pc, #460]	; (80013e8 <HAL_RCC_OscConfig+0x270>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a72      	ldr	r2, [pc, #456]	; (80013e8 <HAL_RCC_OscConfig+0x270>)
 8001220:	f043 0308 	orr.w	r3, r3, #8
 8001224:	6013      	str	r3, [r2, #0]
 8001226:	4b70      	ldr	r3, [pc, #448]	; (80013e8 <HAL_RCC_OscConfig+0x270>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6a1b      	ldr	r3, [r3, #32]
 8001232:	496d      	ldr	r1, [pc, #436]	; (80013e8 <HAL_RCC_OscConfig+0x270>)
 8001234:	4313      	orrs	r3, r2
 8001236:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001238:	4b6b      	ldr	r3, [pc, #428]	; (80013e8 <HAL_RCC_OscConfig+0x270>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	69db      	ldr	r3, [r3, #28]
 8001244:	021b      	lsls	r3, r3, #8
 8001246:	4968      	ldr	r1, [pc, #416]	; (80013e8 <HAL_RCC_OscConfig+0x270>)
 8001248:	4313      	orrs	r3, r2
 800124a:	604b      	str	r3, [r1, #4]
 800124c:	e025      	b.n	800129a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800124e:	4b66      	ldr	r3, [pc, #408]	; (80013e8 <HAL_RCC_OscConfig+0x270>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a65      	ldr	r2, [pc, #404]	; (80013e8 <HAL_RCC_OscConfig+0x270>)
 8001254:	f043 0308 	orr.w	r3, r3, #8
 8001258:	6013      	str	r3, [r2, #0]
 800125a:	4b63      	ldr	r3, [pc, #396]	; (80013e8 <HAL_RCC_OscConfig+0x270>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6a1b      	ldr	r3, [r3, #32]
 8001266:	4960      	ldr	r1, [pc, #384]	; (80013e8 <HAL_RCC_OscConfig+0x270>)
 8001268:	4313      	orrs	r3, r2
 800126a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800126c:	4b5e      	ldr	r3, [pc, #376]	; (80013e8 <HAL_RCC_OscConfig+0x270>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	69db      	ldr	r3, [r3, #28]
 8001278:	021b      	lsls	r3, r3, #8
 800127a:	495b      	ldr	r1, [pc, #364]	; (80013e8 <HAL_RCC_OscConfig+0x270>)
 800127c:	4313      	orrs	r3, r2
 800127e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d109      	bne.n	800129a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6a1b      	ldr	r3, [r3, #32]
 800128a:	4618      	mov	r0, r3
 800128c:	f000 fd1a 	bl	8001cc4 <RCC_SetFlashLatencyFromMSIRange>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e380      	b.n	800199c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800129a:	f000 fc87 	bl	8001bac <HAL_RCC_GetSysClockFreq>
 800129e:	4602      	mov	r2, r0
 80012a0:	4b51      	ldr	r3, [pc, #324]	; (80013e8 <HAL_RCC_OscConfig+0x270>)
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	091b      	lsrs	r3, r3, #4
 80012a6:	f003 030f 	and.w	r3, r3, #15
 80012aa:	4950      	ldr	r1, [pc, #320]	; (80013ec <HAL_RCC_OscConfig+0x274>)
 80012ac:	5ccb      	ldrb	r3, [r1, r3]
 80012ae:	f003 031f 	and.w	r3, r3, #31
 80012b2:	fa22 f303 	lsr.w	r3, r2, r3
 80012b6:	4a4e      	ldr	r2, [pc, #312]	; (80013f0 <HAL_RCC_OscConfig+0x278>)
 80012b8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80012ba:	4b4e      	ldr	r3, [pc, #312]	; (80013f4 <HAL_RCC_OscConfig+0x27c>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff fdb4 	bl	8000e2c <HAL_InitTick>
 80012c4:	4603      	mov	r3, r0
 80012c6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80012c8:	7bfb      	ldrb	r3, [r7, #15]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d052      	beq.n	8001374 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80012ce:	7bfb      	ldrb	r3, [r7, #15]
 80012d0:	e364      	b.n	800199c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	699b      	ldr	r3, [r3, #24]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d032      	beq.n	8001340 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80012da:	4b43      	ldr	r3, [pc, #268]	; (80013e8 <HAL_RCC_OscConfig+0x270>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a42      	ldr	r2, [pc, #264]	; (80013e8 <HAL_RCC_OscConfig+0x270>)
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012e6:	f7ff fdf1 	bl	8000ecc <HAL_GetTick>
 80012ea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012ec:	e008      	b.n	8001300 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012ee:	f7ff fded 	bl	8000ecc <HAL_GetTick>
 80012f2:	4602      	mov	r2, r0
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d901      	bls.n	8001300 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e34d      	b.n	800199c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001300:	4b39      	ldr	r3, [pc, #228]	; (80013e8 <HAL_RCC_OscConfig+0x270>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0302 	and.w	r3, r3, #2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d0f0      	beq.n	80012ee <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800130c:	4b36      	ldr	r3, [pc, #216]	; (80013e8 <HAL_RCC_OscConfig+0x270>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a35      	ldr	r2, [pc, #212]	; (80013e8 <HAL_RCC_OscConfig+0x270>)
 8001312:	f043 0308 	orr.w	r3, r3, #8
 8001316:	6013      	str	r3, [r2, #0]
 8001318:	4b33      	ldr	r3, [pc, #204]	; (80013e8 <HAL_RCC_OscConfig+0x270>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6a1b      	ldr	r3, [r3, #32]
 8001324:	4930      	ldr	r1, [pc, #192]	; (80013e8 <HAL_RCC_OscConfig+0x270>)
 8001326:	4313      	orrs	r3, r2
 8001328:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800132a:	4b2f      	ldr	r3, [pc, #188]	; (80013e8 <HAL_RCC_OscConfig+0x270>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	021b      	lsls	r3, r3, #8
 8001338:	492b      	ldr	r1, [pc, #172]	; (80013e8 <HAL_RCC_OscConfig+0x270>)
 800133a:	4313      	orrs	r3, r2
 800133c:	604b      	str	r3, [r1, #4]
 800133e:	e01a      	b.n	8001376 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001340:	4b29      	ldr	r3, [pc, #164]	; (80013e8 <HAL_RCC_OscConfig+0x270>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a28      	ldr	r2, [pc, #160]	; (80013e8 <HAL_RCC_OscConfig+0x270>)
 8001346:	f023 0301 	bic.w	r3, r3, #1
 800134a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800134c:	f7ff fdbe 	bl	8000ecc <HAL_GetTick>
 8001350:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001352:	e008      	b.n	8001366 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001354:	f7ff fdba 	bl	8000ecc <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b02      	cmp	r3, #2
 8001360:	d901      	bls.n	8001366 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e31a      	b.n	800199c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001366:	4b20      	ldr	r3, [pc, #128]	; (80013e8 <HAL_RCC_OscConfig+0x270>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1f0      	bne.n	8001354 <HAL_RCC_OscConfig+0x1dc>
 8001372:	e000      	b.n	8001376 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001374:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	2b00      	cmp	r3, #0
 8001380:	d073      	beq.n	800146a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	2b08      	cmp	r3, #8
 8001386:	d005      	beq.n	8001394 <HAL_RCC_OscConfig+0x21c>
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	2b0c      	cmp	r3, #12
 800138c:	d10e      	bne.n	80013ac <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	2b03      	cmp	r3, #3
 8001392:	d10b      	bne.n	80013ac <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001394:	4b14      	ldr	r3, [pc, #80]	; (80013e8 <HAL_RCC_OscConfig+0x270>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d063      	beq.n	8001468 <HAL_RCC_OscConfig+0x2f0>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d15f      	bne.n	8001468 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e2f7      	b.n	800199c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013b4:	d106      	bne.n	80013c4 <HAL_RCC_OscConfig+0x24c>
 80013b6:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <HAL_RCC_OscConfig+0x270>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a0b      	ldr	r2, [pc, #44]	; (80013e8 <HAL_RCC_OscConfig+0x270>)
 80013bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013c0:	6013      	str	r3, [r2, #0]
 80013c2:	e025      	b.n	8001410 <HAL_RCC_OscConfig+0x298>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013cc:	d114      	bne.n	80013f8 <HAL_RCC_OscConfig+0x280>
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <HAL_RCC_OscConfig+0x270>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a05      	ldr	r2, [pc, #20]	; (80013e8 <HAL_RCC_OscConfig+0x270>)
 80013d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013d8:	6013      	str	r3, [r2, #0]
 80013da:	4b03      	ldr	r3, [pc, #12]	; (80013e8 <HAL_RCC_OscConfig+0x270>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a02      	ldr	r2, [pc, #8]	; (80013e8 <HAL_RCC_OscConfig+0x270>)
 80013e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013e4:	6013      	str	r3, [r2, #0]
 80013e6:	e013      	b.n	8001410 <HAL_RCC_OscConfig+0x298>
 80013e8:	40021000 	.word	0x40021000
 80013ec:	08002024 	.word	0x08002024
 80013f0:	20000008 	.word	0x20000008
 80013f4:	2000000c 	.word	0x2000000c
 80013f8:	4ba0      	ldr	r3, [pc, #640]	; (800167c <HAL_RCC_OscConfig+0x504>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a9f      	ldr	r2, [pc, #636]	; (800167c <HAL_RCC_OscConfig+0x504>)
 80013fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001402:	6013      	str	r3, [r2, #0]
 8001404:	4b9d      	ldr	r3, [pc, #628]	; (800167c <HAL_RCC_OscConfig+0x504>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a9c      	ldr	r2, [pc, #624]	; (800167c <HAL_RCC_OscConfig+0x504>)
 800140a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800140e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d013      	beq.n	8001440 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001418:	f7ff fd58 	bl	8000ecc <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800141e:	e008      	b.n	8001432 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001420:	f7ff fd54 	bl	8000ecc <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b64      	cmp	r3, #100	; 0x64
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e2b4      	b.n	800199c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001432:	4b92      	ldr	r3, [pc, #584]	; (800167c <HAL_RCC_OscConfig+0x504>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d0f0      	beq.n	8001420 <HAL_RCC_OscConfig+0x2a8>
 800143e:	e014      	b.n	800146a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001440:	f7ff fd44 	bl	8000ecc <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001448:	f7ff fd40 	bl	8000ecc <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b64      	cmp	r3, #100	; 0x64
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e2a0      	b.n	800199c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800145a:	4b88      	ldr	r3, [pc, #544]	; (800167c <HAL_RCC_OscConfig+0x504>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1f0      	bne.n	8001448 <HAL_RCC_OscConfig+0x2d0>
 8001466:	e000      	b.n	800146a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001468:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d060      	beq.n	8001538 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	2b04      	cmp	r3, #4
 800147a:	d005      	beq.n	8001488 <HAL_RCC_OscConfig+0x310>
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	2b0c      	cmp	r3, #12
 8001480:	d119      	bne.n	80014b6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	2b02      	cmp	r3, #2
 8001486:	d116      	bne.n	80014b6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001488:	4b7c      	ldr	r3, [pc, #496]	; (800167c <HAL_RCC_OscConfig+0x504>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001490:	2b00      	cmp	r3, #0
 8001492:	d005      	beq.n	80014a0 <HAL_RCC_OscConfig+0x328>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d101      	bne.n	80014a0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e27d      	b.n	800199c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014a0:	4b76      	ldr	r3, [pc, #472]	; (800167c <HAL_RCC_OscConfig+0x504>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	691b      	ldr	r3, [r3, #16]
 80014ac:	061b      	lsls	r3, r3, #24
 80014ae:	4973      	ldr	r1, [pc, #460]	; (800167c <HAL_RCC_OscConfig+0x504>)
 80014b0:	4313      	orrs	r3, r2
 80014b2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014b4:	e040      	b.n	8001538 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d023      	beq.n	8001506 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014be:	4b6f      	ldr	r3, [pc, #444]	; (800167c <HAL_RCC_OscConfig+0x504>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a6e      	ldr	r2, [pc, #440]	; (800167c <HAL_RCC_OscConfig+0x504>)
 80014c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ca:	f7ff fcff 	bl	8000ecc <HAL_GetTick>
 80014ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014d0:	e008      	b.n	80014e4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014d2:	f7ff fcfb 	bl	8000ecc <HAL_GetTick>
 80014d6:	4602      	mov	r2, r0
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d901      	bls.n	80014e4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e25b      	b.n	800199c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014e4:	4b65      	ldr	r3, [pc, #404]	; (800167c <HAL_RCC_OscConfig+0x504>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d0f0      	beq.n	80014d2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f0:	4b62      	ldr	r3, [pc, #392]	; (800167c <HAL_RCC_OscConfig+0x504>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	691b      	ldr	r3, [r3, #16]
 80014fc:	061b      	lsls	r3, r3, #24
 80014fe:	495f      	ldr	r1, [pc, #380]	; (800167c <HAL_RCC_OscConfig+0x504>)
 8001500:	4313      	orrs	r3, r2
 8001502:	604b      	str	r3, [r1, #4]
 8001504:	e018      	b.n	8001538 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001506:	4b5d      	ldr	r3, [pc, #372]	; (800167c <HAL_RCC_OscConfig+0x504>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a5c      	ldr	r2, [pc, #368]	; (800167c <HAL_RCC_OscConfig+0x504>)
 800150c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001510:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001512:	f7ff fcdb 	bl	8000ecc <HAL_GetTick>
 8001516:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001518:	e008      	b.n	800152c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800151a:	f7ff fcd7 	bl	8000ecc <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e237      	b.n	800199c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800152c:	4b53      	ldr	r3, [pc, #332]	; (800167c <HAL_RCC_OscConfig+0x504>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001534:	2b00      	cmp	r3, #0
 8001536:	d1f0      	bne.n	800151a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0308 	and.w	r3, r3, #8
 8001540:	2b00      	cmp	r3, #0
 8001542:	d03c      	beq.n	80015be <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	695b      	ldr	r3, [r3, #20]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d01c      	beq.n	8001586 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800154c:	4b4b      	ldr	r3, [pc, #300]	; (800167c <HAL_RCC_OscConfig+0x504>)
 800154e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001552:	4a4a      	ldr	r2, [pc, #296]	; (800167c <HAL_RCC_OscConfig+0x504>)
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800155c:	f7ff fcb6 	bl	8000ecc <HAL_GetTick>
 8001560:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001562:	e008      	b.n	8001576 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001564:	f7ff fcb2 	bl	8000ecc <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b02      	cmp	r3, #2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e212      	b.n	800199c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001576:	4b41      	ldr	r3, [pc, #260]	; (800167c <HAL_RCC_OscConfig+0x504>)
 8001578:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800157c:	f003 0302 	and.w	r3, r3, #2
 8001580:	2b00      	cmp	r3, #0
 8001582:	d0ef      	beq.n	8001564 <HAL_RCC_OscConfig+0x3ec>
 8001584:	e01b      	b.n	80015be <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001586:	4b3d      	ldr	r3, [pc, #244]	; (800167c <HAL_RCC_OscConfig+0x504>)
 8001588:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800158c:	4a3b      	ldr	r2, [pc, #236]	; (800167c <HAL_RCC_OscConfig+0x504>)
 800158e:	f023 0301 	bic.w	r3, r3, #1
 8001592:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001596:	f7ff fc99 	bl	8000ecc <HAL_GetTick>
 800159a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800159c:	e008      	b.n	80015b0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800159e:	f7ff fc95 	bl	8000ecc <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e1f5      	b.n	800199c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015b0:	4b32      	ldr	r3, [pc, #200]	; (800167c <HAL_RCC_OscConfig+0x504>)
 80015b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1ef      	bne.n	800159e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0304 	and.w	r3, r3, #4
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	f000 80a6 	beq.w	8001718 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015cc:	2300      	movs	r3, #0
 80015ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80015d0:	4b2a      	ldr	r3, [pc, #168]	; (800167c <HAL_RCC_OscConfig+0x504>)
 80015d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d10d      	bne.n	80015f8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015dc:	4b27      	ldr	r3, [pc, #156]	; (800167c <HAL_RCC_OscConfig+0x504>)
 80015de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e0:	4a26      	ldr	r2, [pc, #152]	; (800167c <HAL_RCC_OscConfig+0x504>)
 80015e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e6:	6593      	str	r3, [r2, #88]	; 0x58
 80015e8:	4b24      	ldr	r3, [pc, #144]	; (800167c <HAL_RCC_OscConfig+0x504>)
 80015ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f0:	60bb      	str	r3, [r7, #8]
 80015f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015f4:	2301      	movs	r3, #1
 80015f6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015f8:	4b21      	ldr	r3, [pc, #132]	; (8001680 <HAL_RCC_OscConfig+0x508>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001600:	2b00      	cmp	r3, #0
 8001602:	d118      	bne.n	8001636 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001604:	4b1e      	ldr	r3, [pc, #120]	; (8001680 <HAL_RCC_OscConfig+0x508>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a1d      	ldr	r2, [pc, #116]	; (8001680 <HAL_RCC_OscConfig+0x508>)
 800160a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800160e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001610:	f7ff fc5c 	bl	8000ecc <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001618:	f7ff fc58 	bl	8000ecc <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e1b8      	b.n	800199c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800162a:	4b15      	ldr	r3, [pc, #84]	; (8001680 <HAL_RCC_OscConfig+0x508>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001632:	2b00      	cmp	r3, #0
 8001634:	d0f0      	beq.n	8001618 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d108      	bne.n	8001650 <HAL_RCC_OscConfig+0x4d8>
 800163e:	4b0f      	ldr	r3, [pc, #60]	; (800167c <HAL_RCC_OscConfig+0x504>)
 8001640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001644:	4a0d      	ldr	r2, [pc, #52]	; (800167c <HAL_RCC_OscConfig+0x504>)
 8001646:	f043 0301 	orr.w	r3, r3, #1
 800164a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800164e:	e029      	b.n	80016a4 <HAL_RCC_OscConfig+0x52c>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	2b05      	cmp	r3, #5
 8001656:	d115      	bne.n	8001684 <HAL_RCC_OscConfig+0x50c>
 8001658:	4b08      	ldr	r3, [pc, #32]	; (800167c <HAL_RCC_OscConfig+0x504>)
 800165a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800165e:	4a07      	ldr	r2, [pc, #28]	; (800167c <HAL_RCC_OscConfig+0x504>)
 8001660:	f043 0304 	orr.w	r3, r3, #4
 8001664:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001668:	4b04      	ldr	r3, [pc, #16]	; (800167c <HAL_RCC_OscConfig+0x504>)
 800166a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800166e:	4a03      	ldr	r2, [pc, #12]	; (800167c <HAL_RCC_OscConfig+0x504>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001678:	e014      	b.n	80016a4 <HAL_RCC_OscConfig+0x52c>
 800167a:	bf00      	nop
 800167c:	40021000 	.word	0x40021000
 8001680:	40007000 	.word	0x40007000
 8001684:	4b9d      	ldr	r3, [pc, #628]	; (80018fc <HAL_RCC_OscConfig+0x784>)
 8001686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800168a:	4a9c      	ldr	r2, [pc, #624]	; (80018fc <HAL_RCC_OscConfig+0x784>)
 800168c:	f023 0301 	bic.w	r3, r3, #1
 8001690:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001694:	4b99      	ldr	r3, [pc, #612]	; (80018fc <HAL_RCC_OscConfig+0x784>)
 8001696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800169a:	4a98      	ldr	r2, [pc, #608]	; (80018fc <HAL_RCC_OscConfig+0x784>)
 800169c:	f023 0304 	bic.w	r3, r3, #4
 80016a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d016      	beq.n	80016da <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ac:	f7ff fc0e 	bl	8000ecc <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016b2:	e00a      	b.n	80016ca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016b4:	f7ff fc0a 	bl	8000ecc <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e168      	b.n	800199c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016ca:	4b8c      	ldr	r3, [pc, #560]	; (80018fc <HAL_RCC_OscConfig+0x784>)
 80016cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0ed      	beq.n	80016b4 <HAL_RCC_OscConfig+0x53c>
 80016d8:	e015      	b.n	8001706 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016da:	f7ff fbf7 	bl	8000ecc <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016e0:	e00a      	b.n	80016f8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016e2:	f7ff fbf3 	bl	8000ecc <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e151      	b.n	800199c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016f8:	4b80      	ldr	r3, [pc, #512]	; (80018fc <HAL_RCC_OscConfig+0x784>)
 80016fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1ed      	bne.n	80016e2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001706:	7ffb      	ldrb	r3, [r7, #31]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d105      	bne.n	8001718 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800170c:	4b7b      	ldr	r3, [pc, #492]	; (80018fc <HAL_RCC_OscConfig+0x784>)
 800170e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001710:	4a7a      	ldr	r2, [pc, #488]	; (80018fc <HAL_RCC_OscConfig+0x784>)
 8001712:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001716:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0320 	and.w	r3, r3, #32
 8001720:	2b00      	cmp	r3, #0
 8001722:	d03c      	beq.n	800179e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001728:	2b00      	cmp	r3, #0
 800172a:	d01c      	beq.n	8001766 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800172c:	4b73      	ldr	r3, [pc, #460]	; (80018fc <HAL_RCC_OscConfig+0x784>)
 800172e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001732:	4a72      	ldr	r2, [pc, #456]	; (80018fc <HAL_RCC_OscConfig+0x784>)
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800173c:	f7ff fbc6 	bl	8000ecc <HAL_GetTick>
 8001740:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001744:	f7ff fbc2 	bl	8000ecc <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e122      	b.n	800199c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001756:	4b69      	ldr	r3, [pc, #420]	; (80018fc <HAL_RCC_OscConfig+0x784>)
 8001758:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800175c:	f003 0302 	and.w	r3, r3, #2
 8001760:	2b00      	cmp	r3, #0
 8001762:	d0ef      	beq.n	8001744 <HAL_RCC_OscConfig+0x5cc>
 8001764:	e01b      	b.n	800179e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001766:	4b65      	ldr	r3, [pc, #404]	; (80018fc <HAL_RCC_OscConfig+0x784>)
 8001768:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800176c:	4a63      	ldr	r2, [pc, #396]	; (80018fc <HAL_RCC_OscConfig+0x784>)
 800176e:	f023 0301 	bic.w	r3, r3, #1
 8001772:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001776:	f7ff fba9 	bl	8000ecc <HAL_GetTick>
 800177a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800177c:	e008      	b.n	8001790 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800177e:	f7ff fba5 	bl	8000ecc <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e105      	b.n	800199c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001790:	4b5a      	ldr	r3, [pc, #360]	; (80018fc <HAL_RCC_OscConfig+0x784>)
 8001792:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1ef      	bne.n	800177e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	f000 80f9 	beq.w	800199a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	f040 80cf 	bne.w	8001950 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80017b2:	4b52      	ldr	r3, [pc, #328]	; (80018fc <HAL_RCC_OscConfig+0x784>)
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	f003 0203 	and.w	r2, r3, #3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d12c      	bne.n	8001820 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d0:	3b01      	subs	r3, #1
 80017d2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d123      	bne.n	8001820 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017e2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d11b      	bne.n	8001820 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017f2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d113      	bne.n	8001820 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001802:	085b      	lsrs	r3, r3, #1
 8001804:	3b01      	subs	r3, #1
 8001806:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001808:	429a      	cmp	r2, r3
 800180a:	d109      	bne.n	8001820 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	085b      	lsrs	r3, r3, #1
 8001818:	3b01      	subs	r3, #1
 800181a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800181c:	429a      	cmp	r2, r3
 800181e:	d071      	beq.n	8001904 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	2b0c      	cmp	r3, #12
 8001824:	d068      	beq.n	80018f8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001826:	4b35      	ldr	r3, [pc, #212]	; (80018fc <HAL_RCC_OscConfig+0x784>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d105      	bne.n	800183e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001832:	4b32      	ldr	r3, [pc, #200]	; (80018fc <HAL_RCC_OscConfig+0x784>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e0ac      	b.n	800199c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001842:	4b2e      	ldr	r3, [pc, #184]	; (80018fc <HAL_RCC_OscConfig+0x784>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a2d      	ldr	r2, [pc, #180]	; (80018fc <HAL_RCC_OscConfig+0x784>)
 8001848:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800184c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800184e:	f7ff fb3d 	bl	8000ecc <HAL_GetTick>
 8001852:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001854:	e008      	b.n	8001868 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001856:	f7ff fb39 	bl	8000ecc <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e099      	b.n	800199c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001868:	4b24      	ldr	r3, [pc, #144]	; (80018fc <HAL_RCC_OscConfig+0x784>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1f0      	bne.n	8001856 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001874:	4b21      	ldr	r3, [pc, #132]	; (80018fc <HAL_RCC_OscConfig+0x784>)
 8001876:	68da      	ldr	r2, [r3, #12]
 8001878:	4b21      	ldr	r3, [pc, #132]	; (8001900 <HAL_RCC_OscConfig+0x788>)
 800187a:	4013      	ands	r3, r2
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001884:	3a01      	subs	r2, #1
 8001886:	0112      	lsls	r2, r2, #4
 8001888:	4311      	orrs	r1, r2
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800188e:	0212      	lsls	r2, r2, #8
 8001890:	4311      	orrs	r1, r2
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001896:	0852      	lsrs	r2, r2, #1
 8001898:	3a01      	subs	r2, #1
 800189a:	0552      	lsls	r2, r2, #21
 800189c:	4311      	orrs	r1, r2
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80018a2:	0852      	lsrs	r2, r2, #1
 80018a4:	3a01      	subs	r2, #1
 80018a6:	0652      	lsls	r2, r2, #25
 80018a8:	4311      	orrs	r1, r2
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018ae:	06d2      	lsls	r2, r2, #27
 80018b0:	430a      	orrs	r2, r1
 80018b2:	4912      	ldr	r1, [pc, #72]	; (80018fc <HAL_RCC_OscConfig+0x784>)
 80018b4:	4313      	orrs	r3, r2
 80018b6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80018b8:	4b10      	ldr	r3, [pc, #64]	; (80018fc <HAL_RCC_OscConfig+0x784>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a0f      	ldr	r2, [pc, #60]	; (80018fc <HAL_RCC_OscConfig+0x784>)
 80018be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018c2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018c4:	4b0d      	ldr	r3, [pc, #52]	; (80018fc <HAL_RCC_OscConfig+0x784>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	4a0c      	ldr	r2, [pc, #48]	; (80018fc <HAL_RCC_OscConfig+0x784>)
 80018ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018ce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018d0:	f7ff fafc 	bl	8000ecc <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d8:	f7ff faf8 	bl	8000ecc <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e058      	b.n	800199c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ea:	4b04      	ldr	r3, [pc, #16]	; (80018fc <HAL_RCC_OscConfig+0x784>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d0f0      	beq.n	80018d8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018f6:	e050      	b.n	800199a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e04f      	b.n	800199c <HAL_RCC_OscConfig+0x824>
 80018fc:	40021000 	.word	0x40021000
 8001900:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001904:	4b27      	ldr	r3, [pc, #156]	; (80019a4 <HAL_RCC_OscConfig+0x82c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d144      	bne.n	800199a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001910:	4b24      	ldr	r3, [pc, #144]	; (80019a4 <HAL_RCC_OscConfig+0x82c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a23      	ldr	r2, [pc, #140]	; (80019a4 <HAL_RCC_OscConfig+0x82c>)
 8001916:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800191a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800191c:	4b21      	ldr	r3, [pc, #132]	; (80019a4 <HAL_RCC_OscConfig+0x82c>)
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	4a20      	ldr	r2, [pc, #128]	; (80019a4 <HAL_RCC_OscConfig+0x82c>)
 8001922:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001926:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001928:	f7ff fad0 	bl	8000ecc <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001930:	f7ff facc 	bl	8000ecc <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e02c      	b.n	800199c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001942:	4b18      	ldr	r3, [pc, #96]	; (80019a4 <HAL_RCC_OscConfig+0x82c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d0f0      	beq.n	8001930 <HAL_RCC_OscConfig+0x7b8>
 800194e:	e024      	b.n	800199a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	2b0c      	cmp	r3, #12
 8001954:	d01f      	beq.n	8001996 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001956:	4b13      	ldr	r3, [pc, #76]	; (80019a4 <HAL_RCC_OscConfig+0x82c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a12      	ldr	r2, [pc, #72]	; (80019a4 <HAL_RCC_OscConfig+0x82c>)
 800195c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001960:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001962:	f7ff fab3 	bl	8000ecc <HAL_GetTick>
 8001966:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001968:	e008      	b.n	800197c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800196a:	f7ff faaf 	bl	8000ecc <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	2b02      	cmp	r3, #2
 8001976:	d901      	bls.n	800197c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e00f      	b.n	800199c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800197c:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <HAL_RCC_OscConfig+0x82c>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1f0      	bne.n	800196a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001988:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <HAL_RCC_OscConfig+0x82c>)
 800198a:	68da      	ldr	r2, [r3, #12]
 800198c:	4905      	ldr	r1, [pc, #20]	; (80019a4 <HAL_RCC_OscConfig+0x82c>)
 800198e:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <HAL_RCC_OscConfig+0x830>)
 8001990:	4013      	ands	r3, r2
 8001992:	60cb      	str	r3, [r1, #12]
 8001994:	e001      	b.n	800199a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e000      	b.n	800199c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800199a:	2300      	movs	r3, #0
}
 800199c:	4618      	mov	r0, r3
 800199e:	3720      	adds	r7, #32
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40021000 	.word	0x40021000
 80019a8:	feeefffc 	.word	0xfeeefffc

080019ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d101      	bne.n	80019c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e0e7      	b.n	8001b90 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019c0:	4b75      	ldr	r3, [pc, #468]	; (8001b98 <HAL_RCC_ClockConfig+0x1ec>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0307 	and.w	r3, r3, #7
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d910      	bls.n	80019f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ce:	4b72      	ldr	r3, [pc, #456]	; (8001b98 <HAL_RCC_ClockConfig+0x1ec>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f023 0207 	bic.w	r2, r3, #7
 80019d6:	4970      	ldr	r1, [pc, #448]	; (8001b98 <HAL_RCC_ClockConfig+0x1ec>)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	4313      	orrs	r3, r2
 80019dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019de:	4b6e      	ldr	r3, [pc, #440]	; (8001b98 <HAL_RCC_ClockConfig+0x1ec>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d001      	beq.n	80019f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e0cf      	b.n	8001b90 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0302 	and.w	r3, r3, #2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d010      	beq.n	8001a1e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689a      	ldr	r2, [r3, #8]
 8001a00:	4b66      	ldr	r3, [pc, #408]	; (8001b9c <HAL_RCC_ClockConfig+0x1f0>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d908      	bls.n	8001a1e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a0c:	4b63      	ldr	r3, [pc, #396]	; (8001b9c <HAL_RCC_ClockConfig+0x1f0>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	4960      	ldr	r1, [pc, #384]	; (8001b9c <HAL_RCC_ClockConfig+0x1f0>)
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d04c      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	2b03      	cmp	r3, #3
 8001a30:	d107      	bne.n	8001a42 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a32:	4b5a      	ldr	r3, [pc, #360]	; (8001b9c <HAL_RCC_ClockConfig+0x1f0>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d121      	bne.n	8001a82 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e0a6      	b.n	8001b90 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d107      	bne.n	8001a5a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a4a:	4b54      	ldr	r3, [pc, #336]	; (8001b9c <HAL_RCC_ClockConfig+0x1f0>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d115      	bne.n	8001a82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e09a      	b.n	8001b90 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d107      	bne.n	8001a72 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a62:	4b4e      	ldr	r3, [pc, #312]	; (8001b9c <HAL_RCC_ClockConfig+0x1f0>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d109      	bne.n	8001a82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e08e      	b.n	8001b90 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a72:	4b4a      	ldr	r3, [pc, #296]	; (8001b9c <HAL_RCC_ClockConfig+0x1f0>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e086      	b.n	8001b90 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a82:	4b46      	ldr	r3, [pc, #280]	; (8001b9c <HAL_RCC_ClockConfig+0x1f0>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f023 0203 	bic.w	r2, r3, #3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	4943      	ldr	r1, [pc, #268]	; (8001b9c <HAL_RCC_ClockConfig+0x1f0>)
 8001a90:	4313      	orrs	r3, r2
 8001a92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a94:	f7ff fa1a 	bl	8000ecc <HAL_GetTick>
 8001a98:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a9a:	e00a      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a9c:	f7ff fa16 	bl	8000ecc <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e06e      	b.n	8001b90 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ab2:	4b3a      	ldr	r3, [pc, #232]	; (8001b9c <HAL_RCC_ClockConfig+0x1f0>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f003 020c 	and.w	r2, r3, #12
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d1eb      	bne.n	8001a9c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d010      	beq.n	8001af2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689a      	ldr	r2, [r3, #8]
 8001ad4:	4b31      	ldr	r3, [pc, #196]	; (8001b9c <HAL_RCC_ClockConfig+0x1f0>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d208      	bcs.n	8001af2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ae0:	4b2e      	ldr	r3, [pc, #184]	; (8001b9c <HAL_RCC_ClockConfig+0x1f0>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	492b      	ldr	r1, [pc, #172]	; (8001b9c <HAL_RCC_ClockConfig+0x1f0>)
 8001aee:	4313      	orrs	r3, r2
 8001af0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001af2:	4b29      	ldr	r3, [pc, #164]	; (8001b98 <HAL_RCC_ClockConfig+0x1ec>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d210      	bcs.n	8001b22 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b00:	4b25      	ldr	r3, [pc, #148]	; (8001b98 <HAL_RCC_ClockConfig+0x1ec>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f023 0207 	bic.w	r2, r3, #7
 8001b08:	4923      	ldr	r1, [pc, #140]	; (8001b98 <HAL_RCC_ClockConfig+0x1ec>)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b10:	4b21      	ldr	r3, [pc, #132]	; (8001b98 <HAL_RCC_ClockConfig+0x1ec>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0307 	and.w	r3, r3, #7
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d001      	beq.n	8001b22 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e036      	b.n	8001b90 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0304 	and.w	r3, r3, #4
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d008      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b2e:	4b1b      	ldr	r3, [pc, #108]	; (8001b9c <HAL_RCC_ClockConfig+0x1f0>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	4918      	ldr	r1, [pc, #96]	; (8001b9c <HAL_RCC_ClockConfig+0x1f0>)
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0308 	and.w	r3, r3, #8
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d009      	beq.n	8001b60 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b4c:	4b13      	ldr	r3, [pc, #76]	; (8001b9c <HAL_RCC_ClockConfig+0x1f0>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	691b      	ldr	r3, [r3, #16]
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	4910      	ldr	r1, [pc, #64]	; (8001b9c <HAL_RCC_ClockConfig+0x1f0>)
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b60:	f000 f824 	bl	8001bac <HAL_RCC_GetSysClockFreq>
 8001b64:	4602      	mov	r2, r0
 8001b66:	4b0d      	ldr	r3, [pc, #52]	; (8001b9c <HAL_RCC_ClockConfig+0x1f0>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	091b      	lsrs	r3, r3, #4
 8001b6c:	f003 030f 	and.w	r3, r3, #15
 8001b70:	490b      	ldr	r1, [pc, #44]	; (8001ba0 <HAL_RCC_ClockConfig+0x1f4>)
 8001b72:	5ccb      	ldrb	r3, [r1, r3]
 8001b74:	f003 031f 	and.w	r3, r3, #31
 8001b78:	fa22 f303 	lsr.w	r3, r2, r3
 8001b7c:	4a09      	ldr	r2, [pc, #36]	; (8001ba4 <HAL_RCC_ClockConfig+0x1f8>)
 8001b7e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b80:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <HAL_RCC_ClockConfig+0x1fc>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff f951 	bl	8000e2c <HAL_InitTick>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b8e:	7afb      	ldrb	r3, [r7, #11]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40022000 	.word	0x40022000
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	08002024 	.word	0x08002024
 8001ba4:	20000008 	.word	0x20000008
 8001ba8:	2000000c 	.word	0x2000000c

08001bac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b089      	sub	sp, #36	; 0x24
 8001bb0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61fb      	str	r3, [r7, #28]
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bba:	4b3e      	ldr	r3, [pc, #248]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f003 030c 	and.w	r3, r3, #12
 8001bc2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bc4:	4b3b      	ldr	r3, [pc, #236]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	f003 0303 	and.w	r3, r3, #3
 8001bcc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d005      	beq.n	8001be0 <HAL_RCC_GetSysClockFreq+0x34>
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	2b0c      	cmp	r3, #12
 8001bd8:	d121      	bne.n	8001c1e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d11e      	bne.n	8001c1e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001be0:	4b34      	ldr	r3, [pc, #208]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0308 	and.w	r3, r3, #8
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d107      	bne.n	8001bfc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001bec:	4b31      	ldr	r3, [pc, #196]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bf2:	0a1b      	lsrs	r3, r3, #8
 8001bf4:	f003 030f 	and.w	r3, r3, #15
 8001bf8:	61fb      	str	r3, [r7, #28]
 8001bfa:	e005      	b.n	8001c08 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001bfc:	4b2d      	ldr	r3, [pc, #180]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	091b      	lsrs	r3, r3, #4
 8001c02:	f003 030f 	and.w	r3, r3, #15
 8001c06:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c08:	4a2b      	ldr	r2, [pc, #172]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c10:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d10d      	bne.n	8001c34 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c1c:	e00a      	b.n	8001c34 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	2b04      	cmp	r3, #4
 8001c22:	d102      	bne.n	8001c2a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c24:	4b25      	ldr	r3, [pc, #148]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x110>)
 8001c26:	61bb      	str	r3, [r7, #24]
 8001c28:	e004      	b.n	8001c34 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	2b08      	cmp	r3, #8
 8001c2e:	d101      	bne.n	8001c34 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c30:	4b23      	ldr	r3, [pc, #140]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c32:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	2b0c      	cmp	r3, #12
 8001c38:	d134      	bne.n	8001ca4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c3a:	4b1e      	ldr	r3, [pc, #120]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	f003 0303 	and.w	r3, r3, #3
 8001c42:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d003      	beq.n	8001c52 <HAL_RCC_GetSysClockFreq+0xa6>
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	2b03      	cmp	r3, #3
 8001c4e:	d003      	beq.n	8001c58 <HAL_RCC_GetSysClockFreq+0xac>
 8001c50:	e005      	b.n	8001c5e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c52:	4b1a      	ldr	r3, [pc, #104]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x110>)
 8001c54:	617b      	str	r3, [r7, #20]
      break;
 8001c56:	e005      	b.n	8001c64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c58:	4b19      	ldr	r3, [pc, #100]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c5a:	617b      	str	r3, [r7, #20]
      break;
 8001c5c:	e002      	b.n	8001c64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	617b      	str	r3, [r7, #20]
      break;
 8001c62:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c64:	4b13      	ldr	r3, [pc, #76]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	091b      	lsrs	r3, r3, #4
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	3301      	adds	r3, #1
 8001c70:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c72:	4b10      	ldr	r3, [pc, #64]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	0a1b      	lsrs	r3, r3, #8
 8001c78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c7c:	697a      	ldr	r2, [r7, #20]
 8001c7e:	fb03 f202 	mul.w	r2, r3, r2
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c88:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c8a:	4b0a      	ldr	r3, [pc, #40]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	0e5b      	lsrs	r3, r3, #25
 8001c90:	f003 0303 	and.w	r3, r3, #3
 8001c94:	3301      	adds	r3, #1
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ca4:	69bb      	ldr	r3, [r7, #24]
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3724      	adds	r7, #36	; 0x24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	08002034 	.word	0x08002034
 8001cbc:	00f42400 	.word	0x00f42400
 8001cc0:	007a1200 	.word	0x007a1200

08001cc4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ccc:	2300      	movs	r3, #0
 8001cce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001cd0:	4b2a      	ldr	r3, [pc, #168]	; (8001d7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d003      	beq.n	8001ce4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001cdc:	f7ff f9e8 	bl	80010b0 <HAL_PWREx_GetVoltageRange>
 8001ce0:	6178      	str	r0, [r7, #20]
 8001ce2:	e014      	b.n	8001d0e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ce4:	4b25      	ldr	r3, [pc, #148]	; (8001d7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce8:	4a24      	ldr	r2, [pc, #144]	; (8001d7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cee:	6593      	str	r3, [r2, #88]	; 0x58
 8001cf0:	4b22      	ldr	r3, [pc, #136]	; (8001d7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001cfc:	f7ff f9d8 	bl	80010b0 <HAL_PWREx_GetVoltageRange>
 8001d00:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d02:	4b1e      	ldr	r3, [pc, #120]	; (8001d7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d06:	4a1d      	ldr	r2, [pc, #116]	; (8001d7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d0c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d14:	d10b      	bne.n	8001d2e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2b80      	cmp	r3, #128	; 0x80
 8001d1a:	d919      	bls.n	8001d50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2ba0      	cmp	r3, #160	; 0xa0
 8001d20:	d902      	bls.n	8001d28 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d22:	2302      	movs	r3, #2
 8001d24:	613b      	str	r3, [r7, #16]
 8001d26:	e013      	b.n	8001d50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d28:	2301      	movs	r3, #1
 8001d2a:	613b      	str	r3, [r7, #16]
 8001d2c:	e010      	b.n	8001d50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2b80      	cmp	r3, #128	; 0x80
 8001d32:	d902      	bls.n	8001d3a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001d34:	2303      	movs	r3, #3
 8001d36:	613b      	str	r3, [r7, #16]
 8001d38:	e00a      	b.n	8001d50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2b80      	cmp	r3, #128	; 0x80
 8001d3e:	d102      	bne.n	8001d46 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d40:	2302      	movs	r3, #2
 8001d42:	613b      	str	r3, [r7, #16]
 8001d44:	e004      	b.n	8001d50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2b70      	cmp	r3, #112	; 0x70
 8001d4a:	d101      	bne.n	8001d50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d50:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f023 0207 	bic.w	r2, r3, #7
 8001d58:	4909      	ldr	r1, [pc, #36]	; (8001d80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d60:	4b07      	ldr	r3, [pc, #28]	; (8001d80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0307 	and.w	r3, r3, #7
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d001      	beq.n	8001d72 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e000      	b.n	8001d74 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3718      	adds	r7, #24
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	40022000 	.word	0x40022000

08001d84 <__libc_init_array>:
 8001d84:	b570      	push	{r4, r5, r6, lr}
 8001d86:	4d0d      	ldr	r5, [pc, #52]	; (8001dbc <__libc_init_array+0x38>)
 8001d88:	4c0d      	ldr	r4, [pc, #52]	; (8001dc0 <__libc_init_array+0x3c>)
 8001d8a:	1b64      	subs	r4, r4, r5
 8001d8c:	10a4      	asrs	r4, r4, #2
 8001d8e:	2600      	movs	r6, #0
 8001d90:	42a6      	cmp	r6, r4
 8001d92:	d109      	bne.n	8001da8 <__libc_init_array+0x24>
 8001d94:	4d0b      	ldr	r5, [pc, #44]	; (8001dc4 <__libc_init_array+0x40>)
 8001d96:	4c0c      	ldr	r4, [pc, #48]	; (8001dc8 <__libc_init_array+0x44>)
 8001d98:	f000 f820 	bl	8001ddc <_init>
 8001d9c:	1b64      	subs	r4, r4, r5
 8001d9e:	10a4      	asrs	r4, r4, #2
 8001da0:	2600      	movs	r6, #0
 8001da2:	42a6      	cmp	r6, r4
 8001da4:	d105      	bne.n	8001db2 <__libc_init_array+0x2e>
 8001da6:	bd70      	pop	{r4, r5, r6, pc}
 8001da8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001dac:	4798      	blx	r3
 8001dae:	3601      	adds	r6, #1
 8001db0:	e7ee      	b.n	8001d90 <__libc_init_array+0xc>
 8001db2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001db6:	4798      	blx	r3
 8001db8:	3601      	adds	r6, #1
 8001dba:	e7f2      	b.n	8001da2 <__libc_init_array+0x1e>
 8001dbc:	08002064 	.word	0x08002064
 8001dc0:	08002064 	.word	0x08002064
 8001dc4:	08002064 	.word	0x08002064
 8001dc8:	08002068 	.word	0x08002068

08001dcc <memset>:
 8001dcc:	4402      	add	r2, r0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d100      	bne.n	8001dd6 <memset+0xa>
 8001dd4:	4770      	bx	lr
 8001dd6:	f803 1b01 	strb.w	r1, [r3], #1
 8001dda:	e7f9      	b.n	8001dd0 <memset+0x4>

08001ddc <_init>:
 8001ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dde:	bf00      	nop
 8001de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001de2:	bc08      	pop	{r3}
 8001de4:	469e      	mov	lr, r3
 8001de6:	4770      	bx	lr

08001de8 <_fini>:
 8001de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dea:	bf00      	nop
 8001dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dee:	bc08      	pop	{r3}
 8001df0:	469e      	mov	lr, r3
 8001df2:	4770      	bx	lr
