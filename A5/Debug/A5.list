
A5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001254  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001400  08001400  00011400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001440  08001440  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001440  08001440  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001440  08001440  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001440  08001440  00011440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001444  08001444  00011444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001448  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001454  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001454  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003fd1  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000df4  00000000  00000000  0002400d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000540  00000000  00000000  00024e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004b8  00000000  00000000  00025348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000de4  00000000  00000000  00025800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004de1  00000000  00000000  000265e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee474  00000000  00000000  0002b3c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00119839  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001344  00000000  00000000  0011988c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080013e8 	.word	0x080013e8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	080013e8 	.word	0x080013e8

080001ec <main>:
#include "main.h"
#include "spi.h"

void SystemClock_Config(void);

int main(void) {
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b084      	sub	sp, #16
 80001f0:	af00      	add	r7, sp, #0

	SystemClock_Config();
 80001f2:	f000 f80b 	bl	800020c <SystemClock_Config>
	DAC_init();
 80001f6:	f000 f855 	bl	80002a4 <DAC_init>
	SPI_init();
 80001fa:	f000 f89b 	bl	8000334 <SPI_init>
	int volt[3] = { 0, 0, 0 };
 80001fe:	2300      	movs	r3, #0
 8000200:	607b      	str	r3, [r7, #4]
 8000202:	2300      	movs	r3, #0
 8000204:	60bb      	str	r3, [r7, #8]
 8000206:	2300      	movs	r3, #0
 8000208:	60fb      	str	r3, [r7, #12]

	while(1){
 800020a:	e7fe      	b.n	800020a <main+0x1e>

0800020c <SystemClock_Config>:

	}

}

void SystemClock_Config(void) {
 800020c:	b580      	push	{r7, lr}
 800020e:	b096      	sub	sp, #88	; 0x58
 8000210:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000212:	f107 0314 	add.w	r3, r7, #20
 8000216:	2244      	movs	r2, #68	; 0x44
 8000218:	2100      	movs	r1, #0
 800021a:	4618      	mov	r0, r3
 800021c:	f001 f8dc 	bl	80013d8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000220:	463b      	mov	r3, r7
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
 8000226:	605a      	str	r2, [r3, #4]
 8000228:	609a      	str	r2, [r3, #8]
 800022a:	60da      	str	r2, [r3, #12]
 800022c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 800022e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000232:	f000 fa51 	bl	80006d8 <HAL_PWREx_ControlVoltageScaling>
 8000236:	4603      	mov	r3, r0
 8000238:	2b00      	cmp	r3, #0
 800023a:	d001      	beq.n	8000240 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 800023c:	f000 f82c 	bl	8000298 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000240:	2310      	movs	r3, #16
 8000242:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000244:	2301      	movs	r3, #1
 8000246:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8000248:	2300      	movs	r3, #0
 800024a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800024c:	2360      	movs	r3, #96	; 0x60
 800024e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000250:	2300      	movs	r3, #0
 8000252:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000254:	f107 0314 	add.w	r3, r7, #20
 8000258:	4618      	mov	r0, r3
 800025a:	f000 fa93 	bl	8000784 <HAL_RCC_OscConfig>
 800025e:	4603      	mov	r3, r0
 8000260:	2b00      	cmp	r3, #0
 8000262:	d001      	beq.n	8000268 <SystemClock_Config+0x5c>
		Error_Handler();
 8000264:	f000 f818 	bl	8000298 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000268:	230f      	movs	r3, #15
 800026a:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800026c:	2300      	movs	r3, #0
 800026e:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000270:	2300      	movs	r3, #0
 8000272:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000274:	2300      	movs	r3, #0
 8000276:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000278:	2300      	movs	r3, #0
 800027a:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800027c:	463b      	mov	r3, r7
 800027e:	2100      	movs	r1, #0
 8000280:	4618      	mov	r0, r3
 8000282:	f000 fe99 	bl	8000fb8 <HAL_RCC_ClockConfig>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <SystemClock_Config+0x84>
		Error_Handler();
 800028c:	f000 f804 	bl	8000298 <Error_Handler>
	}
}
 8000290:	bf00      	nop
 8000292:	3758      	adds	r7, #88	; 0x58
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}

08000298 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800029c:	b672      	cpsid	i
}
 800029e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80002a0:	e7fe      	b.n	80002a0 <Error_Handler+0x8>
	...

080002a4 <DAC_init>:
#include "main.h"
#include "spi.h"

void DAC_init(void) {
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0
	//Enabling DAC PINS
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;	   // enable SPI Clock
 80002a8:	4b21      	ldr	r3, [pc, #132]	; (8000330 <DAC_init+0x8c>)
 80002aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80002ac:	4a20      	ldr	r2, [pc, #128]	; (8000330 <DAC_init+0x8c>)
 80002ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80002b2:	6613      	str	r3, [r2, #96]	; 0x60
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN); // enable GPIOA clock on bus
 80002b4:	4b1e      	ldr	r3, [pc, #120]	; (8000330 <DAC_init+0x8c>)
 80002b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002b8:	4a1d      	ldr	r2, [pc, #116]	; (8000330 <DAC_init+0x8c>)
 80002ba:	f043 0301 	orr.w	r3, r3, #1
 80002be:	64d3      	str	r3, [r2, #76]	; 0x4c

	//AFR
	DAC->MODER &= ~(GPIO_MODER_MODE4 | GPIO_MODER_MODE5 | GPIO_MODER_MODE7); // Clear Bits
 80002c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002ca:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 80002ce:	6013      	str	r3, [r2, #0]
	DAC->MODER |=
 80002d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002da:	f443 438a 	orr.w	r3, r3, #17664	; 0x4500
 80002de:	6013      	str	r3, [r2, #0]
			(GPIO_MODER_MODE4_0 | GPIO_MODER_MODE5_0 | GPIO_MODER_MODE7_0);
	DAC->MODER |=
 80002e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002ea:	f443 430a 	orr.w	r3, r3, #35328	; 0x8a00
 80002ee:	6013      	str	r3, [r2, #0]
			(GPIO_MODER_MODE4_1 | GPIO_MODER_MODE5_1 | GPIO_MODER_MODE7_1);
	DAC->AFR[0] |= ((0x5 << GPIO_AFRL_AFSEL4_Pos) | 		// all set to AF5
 80002f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002f4:	6a1b      	ldr	r3, [r3, #32]
 80002f6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002fa:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 80002fe:	f443 03aa 	orr.w	r3, r3, #5570560	; 0x550000
 8000302:	6213      	str	r3, [r2, #32]
			(0x5 << GPIO_AFRL_AFSEL5_Pos) | (0x5 << GPIO_AFRL_AFSEL7_Pos));

	//Resistor and Speed Stuff
	DAC->OTYPER &= ~(GPIO_OTYPER_OT4 | GPIO_OTYPER_OT5 | GPIO_OTYPER_OT7); //Resistor stuff
 8000304:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000308:	685b      	ldr	r3, [r3, #4]
 800030a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800030e:	f023 03b0 	bic.w	r3, r3, #176	; 0xb0
 8000312:	6053      	str	r3, [r2, #4]
	DAC->OSPEEDR |=
 8000314:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000318:	689b      	ldr	r3, [r3, #8]
 800031a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800031e:	f443 434f 	orr.w	r3, r3, #52992	; 0xcf00
 8000322:	6093      	str	r3, [r2, #8]
			((3 << GPIO_OSPEEDR_OSPEED4_Pos) | (3 << GPIO_OSPEEDR_OSPEED5_Pos)
					| (3 << GPIO_OSPEEDR_OSPEED7_Pos)); 		//Speed Stuff
}
 8000324:	bf00      	nop
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	40021000 	.word	0x40021000

08000334 <SPI_init>:

void SPI_init(void) {
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
	// SPI config as specified @ STM32L4 RM0351 rev.9 p.1459
	// called by or with DAC_init()
	// build control registers CR1 & CR2 for SPI control of peripheral DAC
	// assumes no active SPI xmits & no recv data in process (BSY=0)
	// CR1 (reset value = 0x0000)
	SPI1->CR1 &= ~( SPI_CR1_SPE);             	// disable SPI for config
 8000338:	4b23      	ldr	r3, [pc, #140]	; (80003c8 <SPI_init+0x94>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a22      	ldr	r2, [pc, #136]	; (80003c8 <SPI_init+0x94>)
 800033e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000342:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &= ~( SPI_CR1_RXONLY);          	// recv-only OFF
 8000344:	4b20      	ldr	r3, [pc, #128]	; (80003c8 <SPI_init+0x94>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a1f      	ldr	r2, [pc, #124]	; (80003c8 <SPI_init+0x94>)
 800034a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800034e:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &= ~( SPI_CR1_LSBFIRST);        	// data bit order MSb:LSb
 8000350:	4b1d      	ldr	r3, [pc, #116]	; (80003c8 <SPI_init+0x94>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a1c      	ldr	r2, [pc, #112]	; (80003c8 <SPI_init+0x94>)
 8000356:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800035a:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &= ~( SPI_CR1_CPOL | SPI_CR1_CPHA); // SCLK polarity:phase = 0:0
 800035c:	4b1a      	ldr	r3, [pc, #104]	; (80003c8 <SPI_init+0x94>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a19      	ldr	r2, [pc, #100]	; (80003c8 <SPI_init+0x94>)
 8000362:	f023 0303 	bic.w	r3, r3, #3
 8000366:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= SPI_CR1_MSTR;              	// MCU is SPI controller
 8000368:	4b17      	ldr	r3, [pc, #92]	; (80003c8 <SPI_init+0x94>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	4a16      	ldr	r2, [pc, #88]	; (80003c8 <SPI_init+0x94>)
 800036e:	f043 0304 	orr.w	r3, r3, #4
 8000372:	6013      	str	r3, [r2, #0]
	// CR2 (reset value = 0x0700 : 8b data)
	SPI1->CR2 &= ~( SPI_CR2_TXEIE | SPI_CR2_RXNEIE); // disable FIFO intrpts
 8000374:	4b14      	ldr	r3, [pc, #80]	; (80003c8 <SPI_init+0x94>)
 8000376:	685b      	ldr	r3, [r3, #4]
 8000378:	4a13      	ldr	r2, [pc, #76]	; (80003c8 <SPI_init+0x94>)
 800037a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800037e:	6053      	str	r3, [r2, #4]
	SPI1->CR2 &= ~( SPI_CR2_FRF);              	// Moto frame format
 8000380:	4b11      	ldr	r3, [pc, #68]	; (80003c8 <SPI_init+0x94>)
 8000382:	685b      	ldr	r3, [r3, #4]
 8000384:	4a10      	ldr	r2, [pc, #64]	; (80003c8 <SPI_init+0x94>)
 8000386:	f023 0310 	bic.w	r3, r3, #16
 800038a:	6053      	str	r3, [r2, #4]
	SPI1->CR2 |= SPI_CR2_NSSP;              	// auto-generate NSS pulse
 800038c:	4b0e      	ldr	r3, [pc, #56]	; (80003c8 <SPI_init+0x94>)
 800038e:	685b      	ldr	r3, [r3, #4]
 8000390:	4a0d      	ldr	r2, [pc, #52]	; (80003c8 <SPI_init+0x94>)
 8000392:	f043 0308 	orr.w	r3, r3, #8
 8000396:	6053      	str	r3, [r2, #4]
	SPI1->CR2 |= SPI_CR2_DS;                	// 16-bit data
 8000398:	4b0b      	ldr	r3, [pc, #44]	; (80003c8 <SPI_init+0x94>)
 800039a:	685b      	ldr	r3, [r3, #4]
 800039c:	4a0a      	ldr	r2, [pc, #40]	; (80003c8 <SPI_init+0x94>)
 800039e:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 80003a2:	6053      	str	r3, [r2, #4]
	SPI1->CR2 |= SPI_CR2_SSOE;              	// enable SS output
 80003a4:	4b08      	ldr	r3, [pc, #32]	; (80003c8 <SPI_init+0x94>)
 80003a6:	685b      	ldr	r3, [r3, #4]
 80003a8:	4a07      	ldr	r2, [pc, #28]	; (80003c8 <SPI_init+0x94>)
 80003aa:	f043 0304 	orr.w	r3, r3, #4
 80003ae:	6053      	str	r3, [r2, #4]
	SPI1->CR1 |= SPI_CR1_SPE;               	// re-enable SPI for ops
 80003b0:	4b05      	ldr	r3, [pc, #20]	; (80003c8 <SPI_init+0x94>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a04      	ldr	r2, [pc, #16]	; (80003c8 <SPI_init+0x94>)
 80003b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003ba:	6013      	str	r3, [r2, #0]
}
 80003bc:	bf00      	nop
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr
 80003c6:	bf00      	nop
 80003c8:	40013000 	.word	0x40013000

080003cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003d0:	e7fe      	b.n	80003d0 <NMI_Handler+0x4>

080003d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003d2:	b480      	push	{r7}
 80003d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003d6:	e7fe      	b.n	80003d6 <HardFault_Handler+0x4>

080003d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003dc:	e7fe      	b.n	80003dc <MemManage_Handler+0x4>

080003de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003de:	b480      	push	{r7}
 80003e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003e2:	e7fe      	b.n	80003e2 <BusFault_Handler+0x4>

080003e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003e8:	e7fe      	b.n	80003e8 <UsageFault_Handler+0x4>

080003ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003ea:	b480      	push	{r7}
 80003ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003ee:	bf00      	nop
 80003f0:	46bd      	mov	sp, r7
 80003f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f6:	4770      	bx	lr

080003f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003fc:	bf00      	nop
 80003fe:	46bd      	mov	sp, r7
 8000400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000404:	4770      	bx	lr

08000406 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000406:	b480      	push	{r7}
 8000408:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800040a:	bf00      	nop
 800040c:	46bd      	mov	sp, r7
 800040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000412:	4770      	bx	lr

08000414 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000418:	f000 f87a 	bl	8000510 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800041c:	bf00      	nop
 800041e:	bd80      	pop	{r7, pc}

08000420 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000424:	4b06      	ldr	r3, [pc, #24]	; (8000440 <SystemInit+0x20>)
 8000426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800042a:	4a05      	ldr	r2, [pc, #20]	; (8000440 <SystemInit+0x20>)
 800042c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000430:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000434:	bf00      	nop
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop
 8000440:	e000ed00 	.word	0xe000ed00

08000444 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000444:	f8df d034 	ldr.w	sp, [pc, #52]	; 800047c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000448:	f7ff ffea 	bl	8000420 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800044c:	480c      	ldr	r0, [pc, #48]	; (8000480 <LoopForever+0x6>)
  ldr r1, =_edata
 800044e:	490d      	ldr	r1, [pc, #52]	; (8000484 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000450:	4a0d      	ldr	r2, [pc, #52]	; (8000488 <LoopForever+0xe>)
  movs r3, #0
 8000452:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000454:	e002      	b.n	800045c <LoopCopyDataInit>

08000456 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000456:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000458:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800045a:	3304      	adds	r3, #4

0800045c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800045c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800045e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000460:	d3f9      	bcc.n	8000456 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000462:	4a0a      	ldr	r2, [pc, #40]	; (800048c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000464:	4c0a      	ldr	r4, [pc, #40]	; (8000490 <LoopForever+0x16>)
  movs r3, #0
 8000466:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000468:	e001      	b.n	800046e <LoopFillZerobss>

0800046a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800046a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800046c:	3204      	adds	r2, #4

0800046e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800046e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000470:	d3fb      	bcc.n	800046a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000472:	f000 ff8d 	bl	8001390 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000476:	f7ff feb9 	bl	80001ec <main>

0800047a <LoopForever>:

LoopForever:
    b LoopForever
 800047a:	e7fe      	b.n	800047a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800047c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000480:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000484:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000488:	08001448 	.word	0x08001448
  ldr r2, =_sbss
 800048c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000490:	2000002c 	.word	0x2000002c

08000494 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000494:	e7fe      	b.n	8000494 <ADC1_2_IRQHandler>
	...

08000498 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b084      	sub	sp, #16
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80004a0:	2300      	movs	r3, #0
 80004a2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80004a4:	4b17      	ldr	r3, [pc, #92]	; (8000504 <HAL_InitTick+0x6c>)
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d023      	beq.n	80004f4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80004ac:	4b16      	ldr	r3, [pc, #88]	; (8000508 <HAL_InitTick+0x70>)
 80004ae:	681a      	ldr	r2, [r3, #0]
 80004b0:	4b14      	ldr	r3, [pc, #80]	; (8000504 <HAL_InitTick+0x6c>)
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	4619      	mov	r1, r3
 80004b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80004be:	fbb2 f3f3 	udiv	r3, r2, r3
 80004c2:	4618      	mov	r0, r3
 80004c4:	f000 f8ee 	bl	80006a4 <HAL_SYSTICK_Config>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d10f      	bne.n	80004ee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	2b0f      	cmp	r3, #15
 80004d2:	d809      	bhi.n	80004e8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004d4:	2200      	movs	r2, #0
 80004d6:	6879      	ldr	r1, [r7, #4]
 80004d8:	f04f 30ff 	mov.w	r0, #4294967295
 80004dc:	f000 f8c6 	bl	800066c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80004e0:	4a0a      	ldr	r2, [pc, #40]	; (800050c <HAL_InitTick+0x74>)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	6013      	str	r3, [r2, #0]
 80004e6:	e007      	b.n	80004f8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80004e8:	2301      	movs	r3, #1
 80004ea:	73fb      	strb	r3, [r7, #15]
 80004ec:	e004      	b.n	80004f8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80004ee:	2301      	movs	r3, #1
 80004f0:	73fb      	strb	r3, [r7, #15]
 80004f2:	e001      	b.n	80004f8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80004f4:	2301      	movs	r3, #1
 80004f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80004f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80004fa:	4618      	mov	r0, r3
 80004fc:	3710      	adds	r7, #16
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	20000008 	.word	0x20000008
 8000508:	20000000 	.word	0x20000000
 800050c:	20000004 	.word	0x20000004

08000510 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000514:	4b06      	ldr	r3, [pc, #24]	; (8000530 <HAL_IncTick+0x20>)
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	461a      	mov	r2, r3
 800051a:	4b06      	ldr	r3, [pc, #24]	; (8000534 <HAL_IncTick+0x24>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4413      	add	r3, r2
 8000520:	4a04      	ldr	r2, [pc, #16]	; (8000534 <HAL_IncTick+0x24>)
 8000522:	6013      	str	r3, [r2, #0]
}
 8000524:	bf00      	nop
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	20000008 	.word	0x20000008
 8000534:	20000028 	.word	0x20000028

08000538 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  return uwTick;
 800053c:	4b03      	ldr	r3, [pc, #12]	; (800054c <HAL_GetTick+0x14>)
 800053e:	681b      	ldr	r3, [r3, #0]
}
 8000540:	4618      	mov	r0, r3
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	20000028 	.word	0x20000028

08000550 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000554:	4b04      	ldr	r3, [pc, #16]	; (8000568 <__NVIC_GetPriorityGrouping+0x18>)
 8000556:	68db      	ldr	r3, [r3, #12]
 8000558:	0a1b      	lsrs	r3, r3, #8
 800055a:	f003 0307 	and.w	r3, r3, #7
}
 800055e:	4618      	mov	r0, r3
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr
 8000568:	e000ed00 	.word	0xe000ed00

0800056c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	6039      	str	r1, [r7, #0]
 8000576:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800057c:	2b00      	cmp	r3, #0
 800057e:	db0a      	blt.n	8000596 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	b2da      	uxtb	r2, r3
 8000584:	490c      	ldr	r1, [pc, #48]	; (80005b8 <__NVIC_SetPriority+0x4c>)
 8000586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800058a:	0112      	lsls	r2, r2, #4
 800058c:	b2d2      	uxtb	r2, r2
 800058e:	440b      	add	r3, r1
 8000590:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000594:	e00a      	b.n	80005ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	b2da      	uxtb	r2, r3
 800059a:	4908      	ldr	r1, [pc, #32]	; (80005bc <__NVIC_SetPriority+0x50>)
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	f003 030f 	and.w	r3, r3, #15
 80005a2:	3b04      	subs	r3, #4
 80005a4:	0112      	lsls	r2, r2, #4
 80005a6:	b2d2      	uxtb	r2, r2
 80005a8:	440b      	add	r3, r1
 80005aa:	761a      	strb	r2, [r3, #24]
}
 80005ac:	bf00      	nop
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr
 80005b8:	e000e100 	.word	0xe000e100
 80005bc:	e000ed00 	.word	0xe000ed00

080005c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b089      	sub	sp, #36	; 0x24
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	60f8      	str	r0, [r7, #12]
 80005c8:	60b9      	str	r1, [r7, #8]
 80005ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	f003 0307 	and.w	r3, r3, #7
 80005d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005d4:	69fb      	ldr	r3, [r7, #28]
 80005d6:	f1c3 0307 	rsb	r3, r3, #7
 80005da:	2b04      	cmp	r3, #4
 80005dc:	bf28      	it	cs
 80005de:	2304      	movcs	r3, #4
 80005e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005e2:	69fb      	ldr	r3, [r7, #28]
 80005e4:	3304      	adds	r3, #4
 80005e6:	2b06      	cmp	r3, #6
 80005e8:	d902      	bls.n	80005f0 <NVIC_EncodePriority+0x30>
 80005ea:	69fb      	ldr	r3, [r7, #28]
 80005ec:	3b03      	subs	r3, #3
 80005ee:	e000      	b.n	80005f2 <NVIC_EncodePriority+0x32>
 80005f0:	2300      	movs	r3, #0
 80005f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005f4:	f04f 32ff 	mov.w	r2, #4294967295
 80005f8:	69bb      	ldr	r3, [r7, #24]
 80005fa:	fa02 f303 	lsl.w	r3, r2, r3
 80005fe:	43da      	mvns	r2, r3
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	401a      	ands	r2, r3
 8000604:	697b      	ldr	r3, [r7, #20]
 8000606:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000608:	f04f 31ff 	mov.w	r1, #4294967295
 800060c:	697b      	ldr	r3, [r7, #20]
 800060e:	fa01 f303 	lsl.w	r3, r1, r3
 8000612:	43d9      	mvns	r1, r3
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000618:	4313      	orrs	r3, r2
         );
}
 800061a:	4618      	mov	r0, r3
 800061c:	3724      	adds	r7, #36	; 0x24
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
	...

08000628 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	3b01      	subs	r3, #1
 8000634:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000638:	d301      	bcc.n	800063e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800063a:	2301      	movs	r3, #1
 800063c:	e00f      	b.n	800065e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800063e:	4a0a      	ldr	r2, [pc, #40]	; (8000668 <SysTick_Config+0x40>)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	3b01      	subs	r3, #1
 8000644:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000646:	210f      	movs	r1, #15
 8000648:	f04f 30ff 	mov.w	r0, #4294967295
 800064c:	f7ff ff8e 	bl	800056c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000650:	4b05      	ldr	r3, [pc, #20]	; (8000668 <SysTick_Config+0x40>)
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000656:	4b04      	ldr	r3, [pc, #16]	; (8000668 <SysTick_Config+0x40>)
 8000658:	2207      	movs	r2, #7
 800065a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800065c:	2300      	movs	r3, #0
}
 800065e:	4618      	mov	r0, r3
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	e000e010 	.word	0xe000e010

0800066c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	60b9      	str	r1, [r7, #8]
 8000676:	607a      	str	r2, [r7, #4]
 8000678:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800067a:	2300      	movs	r3, #0
 800067c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800067e:	f7ff ff67 	bl	8000550 <__NVIC_GetPriorityGrouping>
 8000682:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000684:	687a      	ldr	r2, [r7, #4]
 8000686:	68b9      	ldr	r1, [r7, #8]
 8000688:	6978      	ldr	r0, [r7, #20]
 800068a:	f7ff ff99 	bl	80005c0 <NVIC_EncodePriority>
 800068e:	4602      	mov	r2, r0
 8000690:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000694:	4611      	mov	r1, r2
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff ff68 	bl	800056c <__NVIC_SetPriority>
}
 800069c:	bf00      	nop
 800069e:	3718      	adds	r7, #24
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80006ac:	6878      	ldr	r0, [r7, #4]
 80006ae:	f7ff ffbb 	bl	8000628 <SysTick_Config>
 80006b2:	4603      	mov	r3, r0
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}

080006bc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80006c0:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <HAL_PWREx_GetVoltageRange+0x18>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	40007000 	.word	0x40007000

080006d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80006d8:	b480      	push	{r7}
 80006da:	b085      	sub	sp, #20
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80006e6:	d130      	bne.n	800074a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80006e8:	4b23      	ldr	r3, [pc, #140]	; (8000778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80006f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80006f4:	d038      	beq.n	8000768 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f6:	4b20      	ldr	r3, [pc, #128]	; (8000778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80006fe:	4a1e      	ldr	r2, [pc, #120]	; (8000778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000700:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000704:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000706:	4b1d      	ldr	r3, [pc, #116]	; (800077c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	2232      	movs	r2, #50	; 0x32
 800070c:	fb02 f303 	mul.w	r3, r2, r3
 8000710:	4a1b      	ldr	r2, [pc, #108]	; (8000780 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000712:	fba2 2303 	umull	r2, r3, r2, r3
 8000716:	0c9b      	lsrs	r3, r3, #18
 8000718:	3301      	adds	r3, #1
 800071a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800071c:	e002      	b.n	8000724 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	3b01      	subs	r3, #1
 8000722:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000724:	4b14      	ldr	r3, [pc, #80]	; (8000778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000726:	695b      	ldr	r3, [r3, #20]
 8000728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800072c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000730:	d102      	bne.n	8000738 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d1f2      	bne.n	800071e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000738:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800073a:	695b      	ldr	r3, [r3, #20]
 800073c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000740:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000744:	d110      	bne.n	8000768 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000746:	2303      	movs	r3, #3
 8000748:	e00f      	b.n	800076a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800074a:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000756:	d007      	beq.n	8000768 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000758:	4b07      	ldr	r3, [pc, #28]	; (8000778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000760:	4a05      	ldr	r2, [pc, #20]	; (8000778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000762:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000766:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000768:	2300      	movs	r3, #0
}
 800076a:	4618      	mov	r0, r3
 800076c:	3714      	adds	r7, #20
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	40007000 	.word	0x40007000
 800077c:	20000000 	.word	0x20000000
 8000780:	431bde83 	.word	0x431bde83

08000784 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b088      	sub	sp, #32
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d102      	bne.n	8000798 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000792:	2301      	movs	r3, #1
 8000794:	f000 bc08 	b.w	8000fa8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000798:	4b96      	ldr	r3, [pc, #600]	; (80009f4 <HAL_RCC_OscConfig+0x270>)
 800079a:	689b      	ldr	r3, [r3, #8]
 800079c:	f003 030c 	and.w	r3, r3, #12
 80007a0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80007a2:	4b94      	ldr	r3, [pc, #592]	; (80009f4 <HAL_RCC_OscConfig+0x270>)
 80007a4:	68db      	ldr	r3, [r3, #12]
 80007a6:	f003 0303 	and.w	r3, r3, #3
 80007aa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f003 0310 	and.w	r3, r3, #16
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	f000 80e4 	beq.w	8000982 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80007ba:	69bb      	ldr	r3, [r7, #24]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d007      	beq.n	80007d0 <HAL_RCC_OscConfig+0x4c>
 80007c0:	69bb      	ldr	r3, [r7, #24]
 80007c2:	2b0c      	cmp	r3, #12
 80007c4:	f040 808b 	bne.w	80008de <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	f040 8087 	bne.w	80008de <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80007d0:	4b88      	ldr	r3, [pc, #544]	; (80009f4 <HAL_RCC_OscConfig+0x270>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f003 0302 	and.w	r3, r3, #2
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d005      	beq.n	80007e8 <HAL_RCC_OscConfig+0x64>
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d101      	bne.n	80007e8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80007e4:	2301      	movs	r3, #1
 80007e6:	e3df      	b.n	8000fa8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	6a1a      	ldr	r2, [r3, #32]
 80007ec:	4b81      	ldr	r3, [pc, #516]	; (80009f4 <HAL_RCC_OscConfig+0x270>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f003 0308 	and.w	r3, r3, #8
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d004      	beq.n	8000802 <HAL_RCC_OscConfig+0x7e>
 80007f8:	4b7e      	ldr	r3, [pc, #504]	; (80009f4 <HAL_RCC_OscConfig+0x270>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000800:	e005      	b.n	800080e <HAL_RCC_OscConfig+0x8a>
 8000802:	4b7c      	ldr	r3, [pc, #496]	; (80009f4 <HAL_RCC_OscConfig+0x270>)
 8000804:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000808:	091b      	lsrs	r3, r3, #4
 800080a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800080e:	4293      	cmp	r3, r2
 8000810:	d223      	bcs.n	800085a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	6a1b      	ldr	r3, [r3, #32]
 8000816:	4618      	mov	r0, r3
 8000818:	f000 fd5a 	bl	80012d0 <RCC_SetFlashLatencyFromMSIRange>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000822:	2301      	movs	r3, #1
 8000824:	e3c0      	b.n	8000fa8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000826:	4b73      	ldr	r3, [pc, #460]	; (80009f4 <HAL_RCC_OscConfig+0x270>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a72      	ldr	r2, [pc, #456]	; (80009f4 <HAL_RCC_OscConfig+0x270>)
 800082c:	f043 0308 	orr.w	r3, r3, #8
 8000830:	6013      	str	r3, [r2, #0]
 8000832:	4b70      	ldr	r3, [pc, #448]	; (80009f4 <HAL_RCC_OscConfig+0x270>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	6a1b      	ldr	r3, [r3, #32]
 800083e:	496d      	ldr	r1, [pc, #436]	; (80009f4 <HAL_RCC_OscConfig+0x270>)
 8000840:	4313      	orrs	r3, r2
 8000842:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000844:	4b6b      	ldr	r3, [pc, #428]	; (80009f4 <HAL_RCC_OscConfig+0x270>)
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	69db      	ldr	r3, [r3, #28]
 8000850:	021b      	lsls	r3, r3, #8
 8000852:	4968      	ldr	r1, [pc, #416]	; (80009f4 <HAL_RCC_OscConfig+0x270>)
 8000854:	4313      	orrs	r3, r2
 8000856:	604b      	str	r3, [r1, #4]
 8000858:	e025      	b.n	80008a6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800085a:	4b66      	ldr	r3, [pc, #408]	; (80009f4 <HAL_RCC_OscConfig+0x270>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a65      	ldr	r2, [pc, #404]	; (80009f4 <HAL_RCC_OscConfig+0x270>)
 8000860:	f043 0308 	orr.w	r3, r3, #8
 8000864:	6013      	str	r3, [r2, #0]
 8000866:	4b63      	ldr	r3, [pc, #396]	; (80009f4 <HAL_RCC_OscConfig+0x270>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	6a1b      	ldr	r3, [r3, #32]
 8000872:	4960      	ldr	r1, [pc, #384]	; (80009f4 <HAL_RCC_OscConfig+0x270>)
 8000874:	4313      	orrs	r3, r2
 8000876:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000878:	4b5e      	ldr	r3, [pc, #376]	; (80009f4 <HAL_RCC_OscConfig+0x270>)
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	69db      	ldr	r3, [r3, #28]
 8000884:	021b      	lsls	r3, r3, #8
 8000886:	495b      	ldr	r1, [pc, #364]	; (80009f4 <HAL_RCC_OscConfig+0x270>)
 8000888:	4313      	orrs	r3, r2
 800088a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800088c:	69bb      	ldr	r3, [r7, #24]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d109      	bne.n	80008a6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	6a1b      	ldr	r3, [r3, #32]
 8000896:	4618      	mov	r0, r3
 8000898:	f000 fd1a 	bl	80012d0 <RCC_SetFlashLatencyFromMSIRange>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80008a2:	2301      	movs	r3, #1
 80008a4:	e380      	b.n	8000fa8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80008a6:	f000 fc87 	bl	80011b8 <HAL_RCC_GetSysClockFreq>
 80008aa:	4602      	mov	r2, r0
 80008ac:	4b51      	ldr	r3, [pc, #324]	; (80009f4 <HAL_RCC_OscConfig+0x270>)
 80008ae:	689b      	ldr	r3, [r3, #8]
 80008b0:	091b      	lsrs	r3, r3, #4
 80008b2:	f003 030f 	and.w	r3, r3, #15
 80008b6:	4950      	ldr	r1, [pc, #320]	; (80009f8 <HAL_RCC_OscConfig+0x274>)
 80008b8:	5ccb      	ldrb	r3, [r1, r3]
 80008ba:	f003 031f 	and.w	r3, r3, #31
 80008be:	fa22 f303 	lsr.w	r3, r2, r3
 80008c2:	4a4e      	ldr	r2, [pc, #312]	; (80009fc <HAL_RCC_OscConfig+0x278>)
 80008c4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80008c6:	4b4e      	ldr	r3, [pc, #312]	; (8000a00 <HAL_RCC_OscConfig+0x27c>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff fde4 	bl	8000498 <HAL_InitTick>
 80008d0:	4603      	mov	r3, r0
 80008d2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80008d4:	7bfb      	ldrb	r3, [r7, #15]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d052      	beq.n	8000980 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80008da:	7bfb      	ldrb	r3, [r7, #15]
 80008dc:	e364      	b.n	8000fa8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	699b      	ldr	r3, [r3, #24]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d032      	beq.n	800094c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80008e6:	4b43      	ldr	r3, [pc, #268]	; (80009f4 <HAL_RCC_OscConfig+0x270>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a42      	ldr	r2, [pc, #264]	; (80009f4 <HAL_RCC_OscConfig+0x270>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80008f2:	f7ff fe21 	bl	8000538 <HAL_GetTick>
 80008f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80008f8:	e008      	b.n	800090c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80008fa:	f7ff fe1d 	bl	8000538 <HAL_GetTick>
 80008fe:	4602      	mov	r2, r0
 8000900:	693b      	ldr	r3, [r7, #16]
 8000902:	1ad3      	subs	r3, r2, r3
 8000904:	2b02      	cmp	r3, #2
 8000906:	d901      	bls.n	800090c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000908:	2303      	movs	r3, #3
 800090a:	e34d      	b.n	8000fa8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800090c:	4b39      	ldr	r3, [pc, #228]	; (80009f4 <HAL_RCC_OscConfig+0x270>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f003 0302 	and.w	r3, r3, #2
 8000914:	2b00      	cmp	r3, #0
 8000916:	d0f0      	beq.n	80008fa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000918:	4b36      	ldr	r3, [pc, #216]	; (80009f4 <HAL_RCC_OscConfig+0x270>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a35      	ldr	r2, [pc, #212]	; (80009f4 <HAL_RCC_OscConfig+0x270>)
 800091e:	f043 0308 	orr.w	r3, r3, #8
 8000922:	6013      	str	r3, [r2, #0]
 8000924:	4b33      	ldr	r3, [pc, #204]	; (80009f4 <HAL_RCC_OscConfig+0x270>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	6a1b      	ldr	r3, [r3, #32]
 8000930:	4930      	ldr	r1, [pc, #192]	; (80009f4 <HAL_RCC_OscConfig+0x270>)
 8000932:	4313      	orrs	r3, r2
 8000934:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000936:	4b2f      	ldr	r3, [pc, #188]	; (80009f4 <HAL_RCC_OscConfig+0x270>)
 8000938:	685b      	ldr	r3, [r3, #4]
 800093a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	69db      	ldr	r3, [r3, #28]
 8000942:	021b      	lsls	r3, r3, #8
 8000944:	492b      	ldr	r1, [pc, #172]	; (80009f4 <HAL_RCC_OscConfig+0x270>)
 8000946:	4313      	orrs	r3, r2
 8000948:	604b      	str	r3, [r1, #4]
 800094a:	e01a      	b.n	8000982 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800094c:	4b29      	ldr	r3, [pc, #164]	; (80009f4 <HAL_RCC_OscConfig+0x270>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a28      	ldr	r2, [pc, #160]	; (80009f4 <HAL_RCC_OscConfig+0x270>)
 8000952:	f023 0301 	bic.w	r3, r3, #1
 8000956:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000958:	f7ff fdee 	bl	8000538 <HAL_GetTick>
 800095c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800095e:	e008      	b.n	8000972 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000960:	f7ff fdea 	bl	8000538 <HAL_GetTick>
 8000964:	4602      	mov	r2, r0
 8000966:	693b      	ldr	r3, [r7, #16]
 8000968:	1ad3      	subs	r3, r2, r3
 800096a:	2b02      	cmp	r3, #2
 800096c:	d901      	bls.n	8000972 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800096e:	2303      	movs	r3, #3
 8000970:	e31a      	b.n	8000fa8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000972:	4b20      	ldr	r3, [pc, #128]	; (80009f4 <HAL_RCC_OscConfig+0x270>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	f003 0302 	and.w	r3, r3, #2
 800097a:	2b00      	cmp	r3, #0
 800097c:	d1f0      	bne.n	8000960 <HAL_RCC_OscConfig+0x1dc>
 800097e:	e000      	b.n	8000982 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000980:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	2b00      	cmp	r3, #0
 800098c:	d073      	beq.n	8000a76 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800098e:	69bb      	ldr	r3, [r7, #24]
 8000990:	2b08      	cmp	r3, #8
 8000992:	d005      	beq.n	80009a0 <HAL_RCC_OscConfig+0x21c>
 8000994:	69bb      	ldr	r3, [r7, #24]
 8000996:	2b0c      	cmp	r3, #12
 8000998:	d10e      	bne.n	80009b8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	2b03      	cmp	r3, #3
 800099e:	d10b      	bne.n	80009b8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009a0:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <HAL_RCC_OscConfig+0x270>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d063      	beq.n	8000a74 <HAL_RCC_OscConfig+0x2f0>
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d15f      	bne.n	8000a74 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80009b4:	2301      	movs	r3, #1
 80009b6:	e2f7      	b.n	8000fa8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009c0:	d106      	bne.n	80009d0 <HAL_RCC_OscConfig+0x24c>
 80009c2:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <HAL_RCC_OscConfig+0x270>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a0b      	ldr	r2, [pc, #44]	; (80009f4 <HAL_RCC_OscConfig+0x270>)
 80009c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009cc:	6013      	str	r3, [r2, #0]
 80009ce:	e025      	b.n	8000a1c <HAL_RCC_OscConfig+0x298>
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80009d8:	d114      	bne.n	8000a04 <HAL_RCC_OscConfig+0x280>
 80009da:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <HAL_RCC_OscConfig+0x270>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4a05      	ldr	r2, [pc, #20]	; (80009f4 <HAL_RCC_OscConfig+0x270>)
 80009e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009e4:	6013      	str	r3, [r2, #0]
 80009e6:	4b03      	ldr	r3, [pc, #12]	; (80009f4 <HAL_RCC_OscConfig+0x270>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4a02      	ldr	r2, [pc, #8]	; (80009f4 <HAL_RCC_OscConfig+0x270>)
 80009ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009f0:	6013      	str	r3, [r2, #0]
 80009f2:	e013      	b.n	8000a1c <HAL_RCC_OscConfig+0x298>
 80009f4:	40021000 	.word	0x40021000
 80009f8:	08001400 	.word	0x08001400
 80009fc:	20000000 	.word	0x20000000
 8000a00:	20000004 	.word	0x20000004
 8000a04:	4ba0      	ldr	r3, [pc, #640]	; (8000c88 <HAL_RCC_OscConfig+0x504>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a9f      	ldr	r2, [pc, #636]	; (8000c88 <HAL_RCC_OscConfig+0x504>)
 8000a0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a0e:	6013      	str	r3, [r2, #0]
 8000a10:	4b9d      	ldr	r3, [pc, #628]	; (8000c88 <HAL_RCC_OscConfig+0x504>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a9c      	ldr	r2, [pc, #624]	; (8000c88 <HAL_RCC_OscConfig+0x504>)
 8000a16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d013      	beq.n	8000a4c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000a24:	f7ff fd88 	bl	8000538 <HAL_GetTick>
 8000a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000a2a:	e008      	b.n	8000a3e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000a2c:	f7ff fd84 	bl	8000538 <HAL_GetTick>
 8000a30:	4602      	mov	r2, r0
 8000a32:	693b      	ldr	r3, [r7, #16]
 8000a34:	1ad3      	subs	r3, r2, r3
 8000a36:	2b64      	cmp	r3, #100	; 0x64
 8000a38:	d901      	bls.n	8000a3e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	e2b4      	b.n	8000fa8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000a3e:	4b92      	ldr	r3, [pc, #584]	; (8000c88 <HAL_RCC_OscConfig+0x504>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d0f0      	beq.n	8000a2c <HAL_RCC_OscConfig+0x2a8>
 8000a4a:	e014      	b.n	8000a76 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000a4c:	f7ff fd74 	bl	8000538 <HAL_GetTick>
 8000a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000a52:	e008      	b.n	8000a66 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000a54:	f7ff fd70 	bl	8000538 <HAL_GetTick>
 8000a58:	4602      	mov	r2, r0
 8000a5a:	693b      	ldr	r3, [r7, #16]
 8000a5c:	1ad3      	subs	r3, r2, r3
 8000a5e:	2b64      	cmp	r3, #100	; 0x64
 8000a60:	d901      	bls.n	8000a66 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000a62:	2303      	movs	r3, #3
 8000a64:	e2a0      	b.n	8000fa8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000a66:	4b88      	ldr	r3, [pc, #544]	; (8000c88 <HAL_RCC_OscConfig+0x504>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d1f0      	bne.n	8000a54 <HAL_RCC_OscConfig+0x2d0>
 8000a72:	e000      	b.n	8000a76 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f003 0302 	and.w	r3, r3, #2
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d060      	beq.n	8000b44 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000a82:	69bb      	ldr	r3, [r7, #24]
 8000a84:	2b04      	cmp	r3, #4
 8000a86:	d005      	beq.n	8000a94 <HAL_RCC_OscConfig+0x310>
 8000a88:	69bb      	ldr	r3, [r7, #24]
 8000a8a:	2b0c      	cmp	r3, #12
 8000a8c:	d119      	bne.n	8000ac2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	2b02      	cmp	r3, #2
 8000a92:	d116      	bne.n	8000ac2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000a94:	4b7c      	ldr	r3, [pc, #496]	; (8000c88 <HAL_RCC_OscConfig+0x504>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d005      	beq.n	8000aac <HAL_RCC_OscConfig+0x328>
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d101      	bne.n	8000aac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	e27d      	b.n	8000fa8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000aac:	4b76      	ldr	r3, [pc, #472]	; (8000c88 <HAL_RCC_OscConfig+0x504>)
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	691b      	ldr	r3, [r3, #16]
 8000ab8:	061b      	lsls	r3, r3, #24
 8000aba:	4973      	ldr	r1, [pc, #460]	; (8000c88 <HAL_RCC_OscConfig+0x504>)
 8000abc:	4313      	orrs	r3, r2
 8000abe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ac0:	e040      	b.n	8000b44 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	68db      	ldr	r3, [r3, #12]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d023      	beq.n	8000b12 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000aca:	4b6f      	ldr	r3, [pc, #444]	; (8000c88 <HAL_RCC_OscConfig+0x504>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a6e      	ldr	r2, [pc, #440]	; (8000c88 <HAL_RCC_OscConfig+0x504>)
 8000ad0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ad4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ad6:	f7ff fd2f 	bl	8000538 <HAL_GetTick>
 8000ada:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000adc:	e008      	b.n	8000af0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ade:	f7ff fd2b 	bl	8000538 <HAL_GetTick>
 8000ae2:	4602      	mov	r2, r0
 8000ae4:	693b      	ldr	r3, [r7, #16]
 8000ae6:	1ad3      	subs	r3, r2, r3
 8000ae8:	2b02      	cmp	r3, #2
 8000aea:	d901      	bls.n	8000af0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000aec:	2303      	movs	r3, #3
 8000aee:	e25b      	b.n	8000fa8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000af0:	4b65      	ldr	r3, [pc, #404]	; (8000c88 <HAL_RCC_OscConfig+0x504>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d0f0      	beq.n	8000ade <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000afc:	4b62      	ldr	r3, [pc, #392]	; (8000c88 <HAL_RCC_OscConfig+0x504>)
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	691b      	ldr	r3, [r3, #16]
 8000b08:	061b      	lsls	r3, r3, #24
 8000b0a:	495f      	ldr	r1, [pc, #380]	; (8000c88 <HAL_RCC_OscConfig+0x504>)
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	604b      	str	r3, [r1, #4]
 8000b10:	e018      	b.n	8000b44 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000b12:	4b5d      	ldr	r3, [pc, #372]	; (8000c88 <HAL_RCC_OscConfig+0x504>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a5c      	ldr	r2, [pc, #368]	; (8000c88 <HAL_RCC_OscConfig+0x504>)
 8000b18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000b1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b1e:	f7ff fd0b 	bl	8000538 <HAL_GetTick>
 8000b22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000b24:	e008      	b.n	8000b38 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b26:	f7ff fd07 	bl	8000538 <HAL_GetTick>
 8000b2a:	4602      	mov	r2, r0
 8000b2c:	693b      	ldr	r3, [r7, #16]
 8000b2e:	1ad3      	subs	r3, r2, r3
 8000b30:	2b02      	cmp	r3, #2
 8000b32:	d901      	bls.n	8000b38 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000b34:	2303      	movs	r3, #3
 8000b36:	e237      	b.n	8000fa8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000b38:	4b53      	ldr	r3, [pc, #332]	; (8000c88 <HAL_RCC_OscConfig+0x504>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d1f0      	bne.n	8000b26 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f003 0308 	and.w	r3, r3, #8
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d03c      	beq.n	8000bca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	695b      	ldr	r3, [r3, #20]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d01c      	beq.n	8000b92 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000b58:	4b4b      	ldr	r3, [pc, #300]	; (8000c88 <HAL_RCC_OscConfig+0x504>)
 8000b5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000b5e:	4a4a      	ldr	r2, [pc, #296]	; (8000c88 <HAL_RCC_OscConfig+0x504>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000b68:	f7ff fce6 	bl	8000538 <HAL_GetTick>
 8000b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000b6e:	e008      	b.n	8000b82 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000b70:	f7ff fce2 	bl	8000538 <HAL_GetTick>
 8000b74:	4602      	mov	r2, r0
 8000b76:	693b      	ldr	r3, [r7, #16]
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	2b02      	cmp	r3, #2
 8000b7c:	d901      	bls.n	8000b82 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	e212      	b.n	8000fa8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000b82:	4b41      	ldr	r3, [pc, #260]	; (8000c88 <HAL_RCC_OscConfig+0x504>)
 8000b84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000b88:	f003 0302 	and.w	r3, r3, #2
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d0ef      	beq.n	8000b70 <HAL_RCC_OscConfig+0x3ec>
 8000b90:	e01b      	b.n	8000bca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000b92:	4b3d      	ldr	r3, [pc, #244]	; (8000c88 <HAL_RCC_OscConfig+0x504>)
 8000b94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000b98:	4a3b      	ldr	r2, [pc, #236]	; (8000c88 <HAL_RCC_OscConfig+0x504>)
 8000b9a:	f023 0301 	bic.w	r3, r3, #1
 8000b9e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ba2:	f7ff fcc9 	bl	8000538 <HAL_GetTick>
 8000ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000ba8:	e008      	b.n	8000bbc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000baa:	f7ff fcc5 	bl	8000538 <HAL_GetTick>
 8000bae:	4602      	mov	r2, r0
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	1ad3      	subs	r3, r2, r3
 8000bb4:	2b02      	cmp	r3, #2
 8000bb6:	d901      	bls.n	8000bbc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	e1f5      	b.n	8000fa8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000bbc:	4b32      	ldr	r3, [pc, #200]	; (8000c88 <HAL_RCC_OscConfig+0x504>)
 8000bbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000bc2:	f003 0302 	and.w	r3, r3, #2
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d1ef      	bne.n	8000baa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f003 0304 	and.w	r3, r3, #4
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	f000 80a6 	beq.w	8000d24 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000bdc:	4b2a      	ldr	r3, [pc, #168]	; (8000c88 <HAL_RCC_OscConfig+0x504>)
 8000bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000be0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d10d      	bne.n	8000c04 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000be8:	4b27      	ldr	r3, [pc, #156]	; (8000c88 <HAL_RCC_OscConfig+0x504>)
 8000bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bec:	4a26      	ldr	r2, [pc, #152]	; (8000c88 <HAL_RCC_OscConfig+0x504>)
 8000bee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf2:	6593      	str	r3, [r2, #88]	; 0x58
 8000bf4:	4b24      	ldr	r3, [pc, #144]	; (8000c88 <HAL_RCC_OscConfig+0x504>)
 8000bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bfc:	60bb      	str	r3, [r7, #8]
 8000bfe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000c00:	2301      	movs	r3, #1
 8000c02:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000c04:	4b21      	ldr	r3, [pc, #132]	; (8000c8c <HAL_RCC_OscConfig+0x508>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d118      	bne.n	8000c42 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000c10:	4b1e      	ldr	r3, [pc, #120]	; (8000c8c <HAL_RCC_OscConfig+0x508>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a1d      	ldr	r2, [pc, #116]	; (8000c8c <HAL_RCC_OscConfig+0x508>)
 8000c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000c1c:	f7ff fc8c 	bl	8000538 <HAL_GetTick>
 8000c20:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000c22:	e008      	b.n	8000c36 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c24:	f7ff fc88 	bl	8000538 <HAL_GetTick>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	693b      	ldr	r3, [r7, #16]
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	2b02      	cmp	r3, #2
 8000c30:	d901      	bls.n	8000c36 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8000c32:	2303      	movs	r3, #3
 8000c34:	e1b8      	b.n	8000fa8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000c36:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <HAL_RCC_OscConfig+0x508>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d0f0      	beq.n	8000c24 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	689b      	ldr	r3, [r3, #8]
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d108      	bne.n	8000c5c <HAL_RCC_OscConfig+0x4d8>
 8000c4a:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <HAL_RCC_OscConfig+0x504>)
 8000c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c50:	4a0d      	ldr	r2, [pc, #52]	; (8000c88 <HAL_RCC_OscConfig+0x504>)
 8000c52:	f043 0301 	orr.w	r3, r3, #1
 8000c56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000c5a:	e029      	b.n	8000cb0 <HAL_RCC_OscConfig+0x52c>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	689b      	ldr	r3, [r3, #8]
 8000c60:	2b05      	cmp	r3, #5
 8000c62:	d115      	bne.n	8000c90 <HAL_RCC_OscConfig+0x50c>
 8000c64:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <HAL_RCC_OscConfig+0x504>)
 8000c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c6a:	4a07      	ldr	r2, [pc, #28]	; (8000c88 <HAL_RCC_OscConfig+0x504>)
 8000c6c:	f043 0304 	orr.w	r3, r3, #4
 8000c70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000c74:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <HAL_RCC_OscConfig+0x504>)
 8000c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c7a:	4a03      	ldr	r2, [pc, #12]	; (8000c88 <HAL_RCC_OscConfig+0x504>)
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000c84:	e014      	b.n	8000cb0 <HAL_RCC_OscConfig+0x52c>
 8000c86:	bf00      	nop
 8000c88:	40021000 	.word	0x40021000
 8000c8c:	40007000 	.word	0x40007000
 8000c90:	4b9d      	ldr	r3, [pc, #628]	; (8000f08 <HAL_RCC_OscConfig+0x784>)
 8000c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c96:	4a9c      	ldr	r2, [pc, #624]	; (8000f08 <HAL_RCC_OscConfig+0x784>)
 8000c98:	f023 0301 	bic.w	r3, r3, #1
 8000c9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000ca0:	4b99      	ldr	r3, [pc, #612]	; (8000f08 <HAL_RCC_OscConfig+0x784>)
 8000ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ca6:	4a98      	ldr	r2, [pc, #608]	; (8000f08 <HAL_RCC_OscConfig+0x784>)
 8000ca8:	f023 0304 	bic.w	r3, r3, #4
 8000cac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d016      	beq.n	8000ce6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000cb8:	f7ff fc3e 	bl	8000538 <HAL_GetTick>
 8000cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000cbe:	e00a      	b.n	8000cd6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000cc0:	f7ff fc3a 	bl	8000538 <HAL_GetTick>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d901      	bls.n	8000cd6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	e168      	b.n	8000fa8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000cd6:	4b8c      	ldr	r3, [pc, #560]	; (8000f08 <HAL_RCC_OscConfig+0x784>)
 8000cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000cdc:	f003 0302 	and.w	r3, r3, #2
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d0ed      	beq.n	8000cc0 <HAL_RCC_OscConfig+0x53c>
 8000ce4:	e015      	b.n	8000d12 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ce6:	f7ff fc27 	bl	8000538 <HAL_GetTick>
 8000cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000cec:	e00a      	b.n	8000d04 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000cee:	f7ff fc23 	bl	8000538 <HAL_GetTick>
 8000cf2:	4602      	mov	r2, r0
 8000cf4:	693b      	ldr	r3, [r7, #16]
 8000cf6:	1ad3      	subs	r3, r2, r3
 8000cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d901      	bls.n	8000d04 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8000d00:	2303      	movs	r3, #3
 8000d02:	e151      	b.n	8000fa8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000d04:	4b80      	ldr	r3, [pc, #512]	; (8000f08 <HAL_RCC_OscConfig+0x784>)
 8000d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d0a:	f003 0302 	and.w	r3, r3, #2
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d1ed      	bne.n	8000cee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000d12:	7ffb      	ldrb	r3, [r7, #31]
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d105      	bne.n	8000d24 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d18:	4b7b      	ldr	r3, [pc, #492]	; (8000f08 <HAL_RCC_OscConfig+0x784>)
 8000d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d1c:	4a7a      	ldr	r2, [pc, #488]	; (8000f08 <HAL_RCC_OscConfig+0x784>)
 8000d1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d22:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f003 0320 	and.w	r3, r3, #32
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d03c      	beq.n	8000daa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d01c      	beq.n	8000d72 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8000d38:	4b73      	ldr	r3, [pc, #460]	; (8000f08 <HAL_RCC_OscConfig+0x784>)
 8000d3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000d3e:	4a72      	ldr	r2, [pc, #456]	; (8000f08 <HAL_RCC_OscConfig+0x784>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d48:	f7ff fbf6 	bl	8000538 <HAL_GetTick>
 8000d4c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8000d4e:	e008      	b.n	8000d62 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000d50:	f7ff fbf2 	bl	8000538 <HAL_GetTick>
 8000d54:	4602      	mov	r2, r0
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	d901      	bls.n	8000d62 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	e122      	b.n	8000fa8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8000d62:	4b69      	ldr	r3, [pc, #420]	; (8000f08 <HAL_RCC_OscConfig+0x784>)
 8000d64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000d68:	f003 0302 	and.w	r3, r3, #2
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d0ef      	beq.n	8000d50 <HAL_RCC_OscConfig+0x5cc>
 8000d70:	e01b      	b.n	8000daa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8000d72:	4b65      	ldr	r3, [pc, #404]	; (8000f08 <HAL_RCC_OscConfig+0x784>)
 8000d74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000d78:	4a63      	ldr	r2, [pc, #396]	; (8000f08 <HAL_RCC_OscConfig+0x784>)
 8000d7a:	f023 0301 	bic.w	r3, r3, #1
 8000d7e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d82:	f7ff fbd9 	bl	8000538 <HAL_GetTick>
 8000d86:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8000d88:	e008      	b.n	8000d9c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000d8a:	f7ff fbd5 	bl	8000538 <HAL_GetTick>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	1ad3      	subs	r3, r2, r3
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	d901      	bls.n	8000d9c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	e105      	b.n	8000fa8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8000d9c:	4b5a      	ldr	r3, [pc, #360]	; (8000f08 <HAL_RCC_OscConfig+0x784>)
 8000d9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d1ef      	bne.n	8000d8a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	f000 80f9 	beq.w	8000fa6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	f040 80cf 	bne.w	8000f5c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8000dbe:	4b52      	ldr	r3, [pc, #328]	; (8000f08 <HAL_RCC_OscConfig+0x784>)
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	f003 0203 	and.w	r2, r3, #3
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d12c      	bne.n	8000e2c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ddc:	3b01      	subs	r3, #1
 8000dde:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d123      	bne.n	8000e2c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dee:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d11b      	bne.n	8000e2c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dfe:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d113      	bne.n	8000e2c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e0e:	085b      	lsrs	r3, r3, #1
 8000e10:	3b01      	subs	r3, #1
 8000e12:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d109      	bne.n	8000e2c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e22:	085b      	lsrs	r3, r3, #1
 8000e24:	3b01      	subs	r3, #1
 8000e26:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d071      	beq.n	8000f10 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	2b0c      	cmp	r3, #12
 8000e30:	d068      	beq.n	8000f04 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8000e32:	4b35      	ldr	r3, [pc, #212]	; (8000f08 <HAL_RCC_OscConfig+0x784>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d105      	bne.n	8000e4a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8000e3e:	4b32      	ldr	r3, [pc, #200]	; (8000f08 <HAL_RCC_OscConfig+0x784>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e0ac      	b.n	8000fa8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8000e4e:	4b2e      	ldr	r3, [pc, #184]	; (8000f08 <HAL_RCC_OscConfig+0x784>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a2d      	ldr	r2, [pc, #180]	; (8000f08 <HAL_RCC_OscConfig+0x784>)
 8000e54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000e58:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8000e5a:	f7ff fb6d 	bl	8000538 <HAL_GetTick>
 8000e5e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000e60:	e008      	b.n	8000e74 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e62:	f7ff fb69 	bl	8000538 <HAL_GetTick>
 8000e66:	4602      	mov	r2, r0
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	1ad3      	subs	r3, r2, r3
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d901      	bls.n	8000e74 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8000e70:	2303      	movs	r3, #3
 8000e72:	e099      	b.n	8000fa8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000e74:	4b24      	ldr	r3, [pc, #144]	; (8000f08 <HAL_RCC_OscConfig+0x784>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d1f0      	bne.n	8000e62 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e80:	4b21      	ldr	r3, [pc, #132]	; (8000f08 <HAL_RCC_OscConfig+0x784>)
 8000e82:	68da      	ldr	r2, [r3, #12]
 8000e84:	4b21      	ldr	r3, [pc, #132]	; (8000f0c <HAL_RCC_OscConfig+0x788>)
 8000e86:	4013      	ands	r3, r2
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8000e8c:	687a      	ldr	r2, [r7, #4]
 8000e8e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000e90:	3a01      	subs	r2, #1
 8000e92:	0112      	lsls	r2, r2, #4
 8000e94:	4311      	orrs	r1, r2
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000e9a:	0212      	lsls	r2, r2, #8
 8000e9c:	4311      	orrs	r1, r2
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8000ea2:	0852      	lsrs	r2, r2, #1
 8000ea4:	3a01      	subs	r2, #1
 8000ea6:	0552      	lsls	r2, r2, #21
 8000ea8:	4311      	orrs	r1, r2
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000eae:	0852      	lsrs	r2, r2, #1
 8000eb0:	3a01      	subs	r2, #1
 8000eb2:	0652      	lsls	r2, r2, #25
 8000eb4:	4311      	orrs	r1, r2
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8000eba:	06d2      	lsls	r2, r2, #27
 8000ebc:	430a      	orrs	r2, r1
 8000ebe:	4912      	ldr	r1, [pc, #72]	; (8000f08 <HAL_RCC_OscConfig+0x784>)
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8000ec4:	4b10      	ldr	r3, [pc, #64]	; (8000f08 <HAL_RCC_OscConfig+0x784>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a0f      	ldr	r2, [pc, #60]	; (8000f08 <HAL_RCC_OscConfig+0x784>)
 8000eca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ece:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000ed0:	4b0d      	ldr	r3, [pc, #52]	; (8000f08 <HAL_RCC_OscConfig+0x784>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	4a0c      	ldr	r2, [pc, #48]	; (8000f08 <HAL_RCC_OscConfig+0x784>)
 8000ed6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000eda:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8000edc:	f7ff fb2c 	bl	8000538 <HAL_GetTick>
 8000ee0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000ee2:	e008      	b.n	8000ef6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ee4:	f7ff fb28 	bl	8000538 <HAL_GetTick>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	d901      	bls.n	8000ef6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	e058      	b.n	8000fa8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000ef6:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <HAL_RCC_OscConfig+0x784>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d0f0      	beq.n	8000ee4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000f02:	e050      	b.n	8000fa6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8000f04:	2301      	movs	r3, #1
 8000f06:	e04f      	b.n	8000fa8 <HAL_RCC_OscConfig+0x824>
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000f10:	4b27      	ldr	r3, [pc, #156]	; (8000fb0 <HAL_RCC_OscConfig+0x82c>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d144      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8000f1c:	4b24      	ldr	r3, [pc, #144]	; (8000fb0 <HAL_RCC_OscConfig+0x82c>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a23      	ldr	r2, [pc, #140]	; (8000fb0 <HAL_RCC_OscConfig+0x82c>)
 8000f22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f26:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000f28:	4b21      	ldr	r3, [pc, #132]	; (8000fb0 <HAL_RCC_OscConfig+0x82c>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	4a20      	ldr	r2, [pc, #128]	; (8000fb0 <HAL_RCC_OscConfig+0x82c>)
 8000f2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f32:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8000f34:	f7ff fb00 	bl	8000538 <HAL_GetTick>
 8000f38:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000f3a:	e008      	b.n	8000f4e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f3c:	f7ff fafc 	bl	8000538 <HAL_GetTick>
 8000f40:	4602      	mov	r2, r0
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d901      	bls.n	8000f4e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	e02c      	b.n	8000fa8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000f4e:	4b18      	ldr	r3, [pc, #96]	; (8000fb0 <HAL_RCC_OscConfig+0x82c>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d0f0      	beq.n	8000f3c <HAL_RCC_OscConfig+0x7b8>
 8000f5a:	e024      	b.n	8000fa6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	2b0c      	cmp	r3, #12
 8000f60:	d01f      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f62:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <HAL_RCC_OscConfig+0x82c>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a12      	ldr	r2, [pc, #72]	; (8000fb0 <HAL_RCC_OscConfig+0x82c>)
 8000f68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f6e:	f7ff fae3 	bl	8000538 <HAL_GetTick>
 8000f72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000f74:	e008      	b.n	8000f88 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f76:	f7ff fadf 	bl	8000538 <HAL_GetTick>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	1ad3      	subs	r3, r2, r3
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	d901      	bls.n	8000f88 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8000f84:	2303      	movs	r3, #3
 8000f86:	e00f      	b.n	8000fa8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000f88:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <HAL_RCC_OscConfig+0x82c>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d1f0      	bne.n	8000f76 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_RCC_OscConfig+0x82c>)
 8000f96:	68da      	ldr	r2, [r3, #12]
 8000f98:	4905      	ldr	r1, [pc, #20]	; (8000fb0 <HAL_RCC_OscConfig+0x82c>)
 8000f9a:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <HAL_RCC_OscConfig+0x830>)
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	60cb      	str	r3, [r1, #12]
 8000fa0:	e001      	b.n	8000fa6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e000      	b.n	8000fa8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8000fa6:	2300      	movs	r3, #0
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3720      	adds	r7, #32
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	feeefffc 	.word	0xfeeefffc

08000fb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d101      	bne.n	8000fcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	e0e7      	b.n	800119c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000fcc:	4b75      	ldr	r3, [pc, #468]	; (80011a4 <HAL_RCC_ClockConfig+0x1ec>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f003 0307 	and.w	r3, r3, #7
 8000fd4:	683a      	ldr	r2, [r7, #0]
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	d910      	bls.n	8000ffc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fda:	4b72      	ldr	r3, [pc, #456]	; (80011a4 <HAL_RCC_ClockConfig+0x1ec>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f023 0207 	bic.w	r2, r3, #7
 8000fe2:	4970      	ldr	r1, [pc, #448]	; (80011a4 <HAL_RCC_ClockConfig+0x1ec>)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fea:	4b6e      	ldr	r3, [pc, #440]	; (80011a4 <HAL_RCC_ClockConfig+0x1ec>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	683a      	ldr	r2, [r7, #0]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d001      	beq.n	8000ffc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e0cf      	b.n	800119c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f003 0302 	and.w	r3, r3, #2
 8001004:	2b00      	cmp	r3, #0
 8001006:	d010      	beq.n	800102a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	689a      	ldr	r2, [r3, #8]
 800100c:	4b66      	ldr	r3, [pc, #408]	; (80011a8 <HAL_RCC_ClockConfig+0x1f0>)
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001014:	429a      	cmp	r2, r3
 8001016:	d908      	bls.n	800102a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001018:	4b63      	ldr	r3, [pc, #396]	; (80011a8 <HAL_RCC_ClockConfig+0x1f0>)
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	4960      	ldr	r1, [pc, #384]	; (80011a8 <HAL_RCC_ClockConfig+0x1f0>)
 8001026:	4313      	orrs	r3, r2
 8001028:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	2b00      	cmp	r3, #0
 8001034:	d04c      	beq.n	80010d0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	2b03      	cmp	r3, #3
 800103c:	d107      	bne.n	800104e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800103e:	4b5a      	ldr	r3, [pc, #360]	; (80011a8 <HAL_RCC_ClockConfig+0x1f0>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d121      	bne.n	800108e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e0a6      	b.n	800119c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	2b02      	cmp	r3, #2
 8001054:	d107      	bne.n	8001066 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001056:	4b54      	ldr	r3, [pc, #336]	; (80011a8 <HAL_RCC_ClockConfig+0x1f0>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d115      	bne.n	800108e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e09a      	b.n	800119c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d107      	bne.n	800107e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800106e:	4b4e      	ldr	r3, [pc, #312]	; (80011a8 <HAL_RCC_ClockConfig+0x1f0>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 0302 	and.w	r3, r3, #2
 8001076:	2b00      	cmp	r3, #0
 8001078:	d109      	bne.n	800108e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e08e      	b.n	800119c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800107e:	4b4a      	ldr	r3, [pc, #296]	; (80011a8 <HAL_RCC_ClockConfig+0x1f0>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001086:	2b00      	cmp	r3, #0
 8001088:	d101      	bne.n	800108e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e086      	b.n	800119c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800108e:	4b46      	ldr	r3, [pc, #280]	; (80011a8 <HAL_RCC_ClockConfig+0x1f0>)
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	f023 0203 	bic.w	r2, r3, #3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	4943      	ldr	r1, [pc, #268]	; (80011a8 <HAL_RCC_ClockConfig+0x1f0>)
 800109c:	4313      	orrs	r3, r2
 800109e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80010a0:	f7ff fa4a 	bl	8000538 <HAL_GetTick>
 80010a4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010a6:	e00a      	b.n	80010be <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010a8:	f7ff fa46 	bl	8000538 <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d901      	bls.n	80010be <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	e06e      	b.n	800119c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010be:	4b3a      	ldr	r3, [pc, #232]	; (80011a8 <HAL_RCC_ClockConfig+0x1f0>)
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	f003 020c 	and.w	r2, r3, #12
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d1eb      	bne.n	80010a8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 0302 	and.w	r3, r3, #2
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d010      	beq.n	80010fe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	689a      	ldr	r2, [r3, #8]
 80010e0:	4b31      	ldr	r3, [pc, #196]	; (80011a8 <HAL_RCC_ClockConfig+0x1f0>)
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d208      	bcs.n	80010fe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010ec:	4b2e      	ldr	r3, [pc, #184]	; (80011a8 <HAL_RCC_ClockConfig+0x1f0>)
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	492b      	ldr	r1, [pc, #172]	; (80011a8 <HAL_RCC_ClockConfig+0x1f0>)
 80010fa:	4313      	orrs	r3, r2
 80010fc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80010fe:	4b29      	ldr	r3, [pc, #164]	; (80011a4 <HAL_RCC_ClockConfig+0x1ec>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	683a      	ldr	r2, [r7, #0]
 8001108:	429a      	cmp	r2, r3
 800110a:	d210      	bcs.n	800112e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800110c:	4b25      	ldr	r3, [pc, #148]	; (80011a4 <HAL_RCC_ClockConfig+0x1ec>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f023 0207 	bic.w	r2, r3, #7
 8001114:	4923      	ldr	r1, [pc, #140]	; (80011a4 <HAL_RCC_ClockConfig+0x1ec>)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	4313      	orrs	r3, r2
 800111a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800111c:	4b21      	ldr	r3, [pc, #132]	; (80011a4 <HAL_RCC_ClockConfig+0x1ec>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 0307 	and.w	r3, r3, #7
 8001124:	683a      	ldr	r2, [r7, #0]
 8001126:	429a      	cmp	r2, r3
 8001128:	d001      	beq.n	800112e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e036      	b.n	800119c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 0304 	and.w	r3, r3, #4
 8001136:	2b00      	cmp	r3, #0
 8001138:	d008      	beq.n	800114c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800113a:	4b1b      	ldr	r3, [pc, #108]	; (80011a8 <HAL_RCC_ClockConfig+0x1f0>)
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	68db      	ldr	r3, [r3, #12]
 8001146:	4918      	ldr	r1, [pc, #96]	; (80011a8 <HAL_RCC_ClockConfig+0x1f0>)
 8001148:	4313      	orrs	r3, r2
 800114a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0308 	and.w	r3, r3, #8
 8001154:	2b00      	cmp	r3, #0
 8001156:	d009      	beq.n	800116c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001158:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <HAL_RCC_ClockConfig+0x1f0>)
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	691b      	ldr	r3, [r3, #16]
 8001164:	00db      	lsls	r3, r3, #3
 8001166:	4910      	ldr	r1, [pc, #64]	; (80011a8 <HAL_RCC_ClockConfig+0x1f0>)
 8001168:	4313      	orrs	r3, r2
 800116a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800116c:	f000 f824 	bl	80011b8 <HAL_RCC_GetSysClockFreq>
 8001170:	4602      	mov	r2, r0
 8001172:	4b0d      	ldr	r3, [pc, #52]	; (80011a8 <HAL_RCC_ClockConfig+0x1f0>)
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	091b      	lsrs	r3, r3, #4
 8001178:	f003 030f 	and.w	r3, r3, #15
 800117c:	490b      	ldr	r1, [pc, #44]	; (80011ac <HAL_RCC_ClockConfig+0x1f4>)
 800117e:	5ccb      	ldrb	r3, [r1, r3]
 8001180:	f003 031f 	and.w	r3, r3, #31
 8001184:	fa22 f303 	lsr.w	r3, r2, r3
 8001188:	4a09      	ldr	r2, [pc, #36]	; (80011b0 <HAL_RCC_ClockConfig+0x1f8>)
 800118a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800118c:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <HAL_RCC_ClockConfig+0x1fc>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff f981 	bl	8000498 <HAL_InitTick>
 8001196:	4603      	mov	r3, r0
 8001198:	72fb      	strb	r3, [r7, #11]

  return status;
 800119a:	7afb      	ldrb	r3, [r7, #11]
}
 800119c:	4618      	mov	r0, r3
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40022000 	.word	0x40022000
 80011a8:	40021000 	.word	0x40021000
 80011ac:	08001400 	.word	0x08001400
 80011b0:	20000000 	.word	0x20000000
 80011b4:	20000004 	.word	0x20000004

080011b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b089      	sub	sp, #36	; 0x24
 80011bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80011be:	2300      	movs	r3, #0
 80011c0:	61fb      	str	r3, [r7, #28]
 80011c2:	2300      	movs	r3, #0
 80011c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011c6:	4b3e      	ldr	r3, [pc, #248]	; (80012c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	f003 030c 	and.w	r3, r3, #12
 80011ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011d0:	4b3b      	ldr	r3, [pc, #236]	; (80012c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	f003 0303 	and.w	r3, r3, #3
 80011d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d005      	beq.n	80011ec <HAL_RCC_GetSysClockFreq+0x34>
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	2b0c      	cmp	r3, #12
 80011e4:	d121      	bne.n	800122a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d11e      	bne.n	800122a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80011ec:	4b34      	ldr	r3, [pc, #208]	; (80012c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0308 	and.w	r3, r3, #8
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d107      	bne.n	8001208 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80011f8:	4b31      	ldr	r3, [pc, #196]	; (80012c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80011fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011fe:	0a1b      	lsrs	r3, r3, #8
 8001200:	f003 030f 	and.w	r3, r3, #15
 8001204:	61fb      	str	r3, [r7, #28]
 8001206:	e005      	b.n	8001214 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001208:	4b2d      	ldr	r3, [pc, #180]	; (80012c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	091b      	lsrs	r3, r3, #4
 800120e:	f003 030f 	and.w	r3, r3, #15
 8001212:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001214:	4a2b      	ldr	r2, [pc, #172]	; (80012c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800121c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d10d      	bne.n	8001240 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001228:	e00a      	b.n	8001240 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	2b04      	cmp	r3, #4
 800122e:	d102      	bne.n	8001236 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001230:	4b25      	ldr	r3, [pc, #148]	; (80012c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001232:	61bb      	str	r3, [r7, #24]
 8001234:	e004      	b.n	8001240 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	2b08      	cmp	r3, #8
 800123a:	d101      	bne.n	8001240 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800123c:	4b23      	ldr	r3, [pc, #140]	; (80012cc <HAL_RCC_GetSysClockFreq+0x114>)
 800123e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	2b0c      	cmp	r3, #12
 8001244:	d134      	bne.n	80012b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001246:	4b1e      	ldr	r3, [pc, #120]	; (80012c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	f003 0303 	and.w	r3, r3, #3
 800124e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	2b02      	cmp	r3, #2
 8001254:	d003      	beq.n	800125e <HAL_RCC_GetSysClockFreq+0xa6>
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	2b03      	cmp	r3, #3
 800125a:	d003      	beq.n	8001264 <HAL_RCC_GetSysClockFreq+0xac>
 800125c:	e005      	b.n	800126a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800125e:	4b1a      	ldr	r3, [pc, #104]	; (80012c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001260:	617b      	str	r3, [r7, #20]
      break;
 8001262:	e005      	b.n	8001270 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001264:	4b19      	ldr	r3, [pc, #100]	; (80012cc <HAL_RCC_GetSysClockFreq+0x114>)
 8001266:	617b      	str	r3, [r7, #20]
      break;
 8001268:	e002      	b.n	8001270 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	617b      	str	r3, [r7, #20]
      break;
 800126e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001270:	4b13      	ldr	r3, [pc, #76]	; (80012c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	091b      	lsrs	r3, r3, #4
 8001276:	f003 0307 	and.w	r3, r3, #7
 800127a:	3301      	adds	r3, #1
 800127c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800127e:	4b10      	ldr	r3, [pc, #64]	; (80012c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	0a1b      	lsrs	r3, r3, #8
 8001284:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001288:	697a      	ldr	r2, [r7, #20]
 800128a:	fb03 f202 	mul.w	r2, r3, r2
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	fbb2 f3f3 	udiv	r3, r2, r3
 8001294:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001296:	4b0a      	ldr	r3, [pc, #40]	; (80012c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	0e5b      	lsrs	r3, r3, #25
 800129c:	f003 0303 	and.w	r3, r3, #3
 80012a0:	3301      	adds	r3, #1
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80012a6:	697a      	ldr	r2, [r7, #20]
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80012b0:	69bb      	ldr	r3, [r7, #24]
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3724      	adds	r7, #36	; 0x24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	40021000 	.word	0x40021000
 80012c4:	08001410 	.word	0x08001410
 80012c8:	00f42400 	.word	0x00f42400
 80012cc:	007a1200 	.word	0x007a1200

080012d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80012d8:	2300      	movs	r3, #0
 80012da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80012dc:	4b2a      	ldr	r3, [pc, #168]	; (8001388 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80012de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d003      	beq.n	80012f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80012e8:	f7ff f9e8 	bl	80006bc <HAL_PWREx_GetVoltageRange>
 80012ec:	6178      	str	r0, [r7, #20]
 80012ee:	e014      	b.n	800131a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80012f0:	4b25      	ldr	r3, [pc, #148]	; (8001388 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80012f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f4:	4a24      	ldr	r2, [pc, #144]	; (8001388 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80012f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012fa:	6593      	str	r3, [r2, #88]	; 0x58
 80012fc:	4b22      	ldr	r3, [pc, #136]	; (8001388 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80012fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001300:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001308:	f7ff f9d8 	bl	80006bc <HAL_PWREx_GetVoltageRange>
 800130c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800130e:	4b1e      	ldr	r3, [pc, #120]	; (8001388 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001312:	4a1d      	ldr	r2, [pc, #116]	; (8001388 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001314:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001318:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001320:	d10b      	bne.n	800133a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2b80      	cmp	r3, #128	; 0x80
 8001326:	d919      	bls.n	800135c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2ba0      	cmp	r3, #160	; 0xa0
 800132c:	d902      	bls.n	8001334 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800132e:	2302      	movs	r3, #2
 8001330:	613b      	str	r3, [r7, #16]
 8001332:	e013      	b.n	800135c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001334:	2301      	movs	r3, #1
 8001336:	613b      	str	r3, [r7, #16]
 8001338:	e010      	b.n	800135c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2b80      	cmp	r3, #128	; 0x80
 800133e:	d902      	bls.n	8001346 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001340:	2303      	movs	r3, #3
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	e00a      	b.n	800135c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2b80      	cmp	r3, #128	; 0x80
 800134a:	d102      	bne.n	8001352 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800134c:	2302      	movs	r3, #2
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	e004      	b.n	800135c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2b70      	cmp	r3, #112	; 0x70
 8001356:	d101      	bne.n	800135c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001358:	2301      	movs	r3, #1
 800135a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800135c:	4b0b      	ldr	r3, [pc, #44]	; (800138c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f023 0207 	bic.w	r2, r3, #7
 8001364:	4909      	ldr	r1, [pc, #36]	; (800138c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	4313      	orrs	r3, r2
 800136a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800136c:	4b07      	ldr	r3, [pc, #28]	; (800138c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0307 	and.w	r3, r3, #7
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	429a      	cmp	r2, r3
 8001378:	d001      	beq.n	800137e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e000      	b.n	8001380 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800137e:	2300      	movs	r3, #0
}
 8001380:	4618      	mov	r0, r3
 8001382:	3718      	adds	r7, #24
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40021000 	.word	0x40021000
 800138c:	40022000 	.word	0x40022000

08001390 <__libc_init_array>:
 8001390:	b570      	push	{r4, r5, r6, lr}
 8001392:	4d0d      	ldr	r5, [pc, #52]	; (80013c8 <__libc_init_array+0x38>)
 8001394:	4c0d      	ldr	r4, [pc, #52]	; (80013cc <__libc_init_array+0x3c>)
 8001396:	1b64      	subs	r4, r4, r5
 8001398:	10a4      	asrs	r4, r4, #2
 800139a:	2600      	movs	r6, #0
 800139c:	42a6      	cmp	r6, r4
 800139e:	d109      	bne.n	80013b4 <__libc_init_array+0x24>
 80013a0:	4d0b      	ldr	r5, [pc, #44]	; (80013d0 <__libc_init_array+0x40>)
 80013a2:	4c0c      	ldr	r4, [pc, #48]	; (80013d4 <__libc_init_array+0x44>)
 80013a4:	f000 f820 	bl	80013e8 <_init>
 80013a8:	1b64      	subs	r4, r4, r5
 80013aa:	10a4      	asrs	r4, r4, #2
 80013ac:	2600      	movs	r6, #0
 80013ae:	42a6      	cmp	r6, r4
 80013b0:	d105      	bne.n	80013be <__libc_init_array+0x2e>
 80013b2:	bd70      	pop	{r4, r5, r6, pc}
 80013b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80013b8:	4798      	blx	r3
 80013ba:	3601      	adds	r6, #1
 80013bc:	e7ee      	b.n	800139c <__libc_init_array+0xc>
 80013be:	f855 3b04 	ldr.w	r3, [r5], #4
 80013c2:	4798      	blx	r3
 80013c4:	3601      	adds	r6, #1
 80013c6:	e7f2      	b.n	80013ae <__libc_init_array+0x1e>
 80013c8:	08001440 	.word	0x08001440
 80013cc:	08001440 	.word	0x08001440
 80013d0:	08001440 	.word	0x08001440
 80013d4:	08001444 	.word	0x08001444

080013d8 <memset>:
 80013d8:	4402      	add	r2, r0
 80013da:	4603      	mov	r3, r0
 80013dc:	4293      	cmp	r3, r2
 80013de:	d100      	bne.n	80013e2 <memset+0xa>
 80013e0:	4770      	bx	lr
 80013e2:	f803 1b01 	strb.w	r1, [r3], #1
 80013e6:	e7f9      	b.n	80013dc <memset+0x4>

080013e8 <_init>:
 80013e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ea:	bf00      	nop
 80013ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013ee:	bc08      	pop	{r3}
 80013f0:	469e      	mov	lr, r3
 80013f2:	4770      	bx	lr

080013f4 <_fini>:
 80013f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013f6:	bf00      	nop
 80013f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013fa:	bc08      	pop	{r3}
 80013fc:	469e      	mov	lr, r3
 80013fe:	4770      	bx	lr
