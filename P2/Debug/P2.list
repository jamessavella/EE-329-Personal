
P2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000392c  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d0  08003ae0  08003ae0  00013ae0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003db0  08003db0  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  08003db0  08003db0  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003db0  08003db0  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003db0  08003db0  00013db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003db4  08003db4  00013db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08003db8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000bba4  2000003c  08003df4  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000bbe0  08003df4  0002bbe0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000588a  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013ec  00000000  00000000  000258f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000648  00000000  00000000  00026ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000570  00000000  00000000  00027330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028344  00000000  00000000  000278a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000079c9  00000000  00000000  0004fbe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2d12  00000000  00000000  000575ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014a2bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019d4  00000000  00000000  0014a310  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000003c 	.word	0x2000003c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003ac4 	.word	0x08003ac4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000040 	.word	0x20000040
 80001ec:	08003ac4 	.word	0x08003ac4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	3c01      	subs	r4, #1
 800033c:	bf28      	it	cs
 800033e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000342:	d2e9      	bcs.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__gedf2>:
 800099c:	f04f 3cff 	mov.w	ip, #4294967295
 80009a0:	e006      	b.n	80009b0 <__cmpdf2+0x4>
 80009a2:	bf00      	nop

080009a4 <__ledf2>:
 80009a4:	f04f 0c01 	mov.w	ip, #1
 80009a8:	e002      	b.n	80009b0 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__cmpdf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009c6:	d01b      	beq.n	8000a00 <__cmpdf2+0x54>
 80009c8:	b001      	add	sp, #4
 80009ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ce:	bf0c      	ite	eq
 80009d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d4:	ea91 0f03 	teqne	r1, r3
 80009d8:	bf02      	ittt	eq
 80009da:	ea90 0f02 	teqeq	r0, r2
 80009de:	2000      	moveq	r0, #0
 80009e0:	4770      	bxeq	lr
 80009e2:	f110 0f00 	cmn.w	r0, #0
 80009e6:	ea91 0f03 	teq	r1, r3
 80009ea:	bf58      	it	pl
 80009ec:	4299      	cmppl	r1, r3
 80009ee:	bf08      	it	eq
 80009f0:	4290      	cmpeq	r0, r2
 80009f2:	bf2c      	ite	cs
 80009f4:	17d8      	asrcs	r0, r3, #31
 80009f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009fa:	f040 0001 	orr.w	r0, r0, #1
 80009fe:	4770      	bx	lr
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d102      	bne.n	8000a10 <__cmpdf2+0x64>
 8000a0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0e:	d107      	bne.n	8000a20 <__cmpdf2+0x74>
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d1d6      	bne.n	80009c8 <__cmpdf2+0x1c>
 8000a1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1e:	d0d3      	beq.n	80009c8 <__cmpdf2+0x1c>
 8000a20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdrcmple>:
 8000a28:	4684      	mov	ip, r0
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4662      	mov	r2, ip
 8000a2e:	468c      	mov	ip, r1
 8000a30:	4619      	mov	r1, r3
 8000a32:	4663      	mov	r3, ip
 8000a34:	e000      	b.n	8000a38 <__aeabi_cdcmpeq>
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdcmpeq>:
 8000a38:	b501      	push	{r0, lr}
 8000a3a:	f7ff ffb7 	bl	80009ac <__cmpdf2>
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	bf48      	it	mi
 8000a42:	f110 0f00 	cmnmi.w	r0, #0
 8000a46:	bd01      	pop	{r0, pc}

08000a48 <__aeabi_dcmpeq>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff fff4 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a50:	bf0c      	ite	eq
 8000a52:	2001      	moveq	r0, #1
 8000a54:	2000      	movne	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmplt>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffea 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a64:	bf34      	ite	cc
 8000a66:	2001      	movcc	r0, #1
 8000a68:	2000      	movcs	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmple>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffe0 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpge>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffce 	bl	8000a28 <__aeabi_cdrcmple>
 8000a8c:	bf94      	ite	ls
 8000a8e:	2001      	movls	r0, #1
 8000a90:	2000      	movhi	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpgt>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffc4 	bl	8000a28 <__aeabi_cdrcmple>
 8000aa0:	bf34      	ite	cc
 8000aa2:	2001      	movcc	r0, #1
 8000aa4:	2000      	movcs	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_d2iz>:
 8000aac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab4:	d215      	bcs.n	8000ae2 <__aeabi_d2iz+0x36>
 8000ab6:	d511      	bpl.n	8000adc <__aeabi_d2iz+0x30>
 8000ab8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000abc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac0:	d912      	bls.n	8000ae8 <__aeabi_d2iz+0x3c>
 8000ac2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ace:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	bf18      	it	ne
 8000ad8:	4240      	negne	r0, r0
 8000ada:	4770      	bx	lr
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae6:	d105      	bne.n	8000af4 <__aeabi_d2iz+0x48>
 8000ae8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aec:	bf08      	it	eq
 8000aee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <DAC_init>:


#include <DAC.h>
#include "main.h"

void DAC_init(void) {
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
	//Enabling DAC PINS
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;	   // enable SPI Clock
 8000b00:	4b1c      	ldr	r3, [pc, #112]	; (8000b74 <DAC_init+0x78>)
 8000b02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b04:	4a1b      	ldr	r2, [pc, #108]	; (8000b74 <DAC_init+0x78>)
 8000b06:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b0a:	6613      	str	r3, [r2, #96]	; 0x60
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN); // enable GPIOA clock on bus
 8000b0c:	4b19      	ldr	r3, [pc, #100]	; (8000b74 <DAC_init+0x78>)
 8000b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b10:	4a18      	ldr	r2, [pc, #96]	; (8000b74 <DAC_init+0x78>)
 8000b12:	f043 0301 	orr.w	r3, r3, #1
 8000b16:	64d3      	str	r3, [r2, #76]	; 0x4c

	//AFR
	DAC_PIN->MODER &= ~(GPIO_MODER_MODE4 | GPIO_MODER_MODE5 | GPIO_MODER_MODE7); // Clear Bits
 8000b18:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b22:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8000b26:	6013      	str	r3, [r2, #0]
	DAC_PIN->MODER |=(GPIO_MODER_MODE4_1 | GPIO_MODER_MODE5_1 | GPIO_MODER_MODE7_1);
 8000b28:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b32:	f443 430a 	orr.w	r3, r3, #35328	; 0x8a00
 8000b36:	6013      	str	r3, [r2, #0]
	DAC_PIN->AFR[0] |= ((0x0005 << GPIO_AFRL_AFSEL4_Pos) | 		// all set to AF5
 8000b38:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b3c:	6a1b      	ldr	r3, [r3, #32]
 8000b3e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b42:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 8000b46:	f443 03aa 	orr.w	r3, r3, #5570560	; 0x550000
 8000b4a:	6213      	str	r3, [r2, #32]
			(0x0005 << GPIO_AFRL_AFSEL5_Pos) | (0x0005 << GPIO_AFRL_AFSEL7_Pos));

	//Resistor and Speed Stuff
	DAC_PIN->OTYPER &= ~(GPIO_OTYPER_OT4 | GPIO_OTYPER_OT5 | GPIO_OTYPER_OT7); //Resistor stuff
 8000b4c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b56:	f023 03b0 	bic.w	r3, r3, #176	; 0xb0
 8000b5a:	6053      	str	r3, [r2, #4]
	DAC_PIN->OSPEEDR |=
 8000b5c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b60:	689b      	ldr	r3, [r3, #8]
 8000b62:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b66:	f443 434f 	orr.w	r3, r3, #52992	; 0xcf00
 8000b6a:	6093      	str	r3, [r2, #8]
			((3 << GPIO_OSPEEDR_OSPEED4_Pos) | (3 << GPIO_OSPEEDR_OSPEED5_Pos)
					| (3 << GPIO_OSPEEDR_OSPEED7_Pos)); 		//Speed Stuff

	SPI_init();
 8000b6c:	f000 f804 	bl	8000b78 <SPI_init>

}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40021000 	.word	0x40021000

08000b78 <SPI_init>:

void SPI_init(void) {
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
	// SPI config as specified @ STM32L4 RM0351 rev.9 p.1459
	// called by or with DAC_init()
	// build control registers CR1 & CR2 for SPI control of peripheral DAC
	// assumes no active SPI xmits & no recv data in process (BSY=0)
	// CR1 (reset value = 0x0000)
	SPI1->CR1 &= ~( SPI_CR1_SPE);             	// disable SPI for config
 8000b7c:	4b29      	ldr	r3, [pc, #164]	; (8000c24 <SPI_init+0xac>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a28      	ldr	r2, [pc, #160]	; (8000c24 <SPI_init+0xac>)
 8000b82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000b86:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &= ~( SPI_CR1_RXONLY);          	// recv-only OFF
 8000b88:	4b26      	ldr	r3, [pc, #152]	; (8000c24 <SPI_init+0xac>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a25      	ldr	r2, [pc, #148]	; (8000c24 <SPI_init+0xac>)
 8000b8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000b92:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &= ~( SPI_CR1_LSBFIRST);        	// data bit order MSb:LSb
 8000b94:	4b23      	ldr	r3, [pc, #140]	; (8000c24 <SPI_init+0xac>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a22      	ldr	r2, [pc, #136]	; (8000c24 <SPI_init+0xac>)
 8000b9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000b9e:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &= ~( SPI_CR1_CPOL | SPI_CR1_CPHA); // SCLK polarity:phase = 0:0
 8000ba0:	4b20      	ldr	r3, [pc, #128]	; (8000c24 <SPI_init+0xac>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a1f      	ldr	r2, [pc, #124]	; (8000c24 <SPI_init+0xac>)
 8000ba6:	f023 0303 	bic.w	r3, r3, #3
 8000baa:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= SPI_CR1_MSTR;              	// MCU is SPI controller
 8000bac:	4b1d      	ldr	r3, [pc, #116]	; (8000c24 <SPI_init+0xac>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a1c      	ldr	r2, [pc, #112]	; (8000c24 <SPI_init+0xac>)
 8000bb2:	f043 0304 	orr.w	r3, r3, #4
 8000bb6:	6013      	str	r3, [r2, #0]
	// CR2 (reset value = 0x0700 : 8b data)
	SPI1->CR2 &= ~( SPI_CR2_TXEIE | SPI_CR2_RXNEIE); // disable FIFO intrpts
 8000bb8:	4b1a      	ldr	r3, [pc, #104]	; (8000c24 <SPI_init+0xac>)
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	4a19      	ldr	r2, [pc, #100]	; (8000c24 <SPI_init+0xac>)
 8000bbe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000bc2:	6053      	str	r3, [r2, #4]
	SPI1->CR2 &= ~( SPI_CR2_FRF);              	// Moto frame format
 8000bc4:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <SPI_init+0xac>)
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	4a16      	ldr	r2, [pc, #88]	; (8000c24 <SPI_init+0xac>)
 8000bca:	f023 0310 	bic.w	r3, r3, #16
 8000bce:	6053      	str	r3, [r2, #4]
	SPI1->CR2 |= SPI_CR2_NSSP;              	// auto-generate NSS pulse
 8000bd0:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <SPI_init+0xac>)
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	4a13      	ldr	r2, [pc, #76]	; (8000c24 <SPI_init+0xac>)
 8000bd6:	f043 0308 	orr.w	r3, r3, #8
 8000bda:	6053      	str	r3, [r2, #4]
	SPI1->CR2 |= SPI_CR2_DS;                	// 16-bit data
 8000bdc:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <SPI_init+0xac>)
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	4a10      	ldr	r2, [pc, #64]	; (8000c24 <SPI_init+0xac>)
 8000be2:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8000be6:	6053      	str	r3, [r2, #4]
	SPI1->CR2 |= SPI_CR2_SSOE;              	// enable SS output
 8000be8:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <SPI_init+0xac>)
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	4a0d      	ldr	r2, [pc, #52]	; (8000c24 <SPI_init+0xac>)
 8000bee:	f043 0304 	orr.w	r3, r3, #4
 8000bf2:	6053      	str	r3, [r2, #4]
	SPI1->CR1 |= SPI_CR1_SSM;					// enable SSM
 8000bf4:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <SPI_init+0xac>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a0a      	ldr	r2, [pc, #40]	; (8000c24 <SPI_init+0xac>)
 8000bfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bfe:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= SPI_CR1_SSI;					// enable SSI
 8000c00:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <SPI_init+0xac>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a07      	ldr	r2, [pc, #28]	; (8000c24 <SPI_init+0xac>)
 8000c06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c0a:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= SPI_CR1_SPE;               	// re-enable SPI for ops
 8000c0c:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <SPI_init+0xac>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a04      	ldr	r2, [pc, #16]	; (8000c24 <SPI_init+0xac>)
 8000c12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c16:	6013      	str	r3, [r2, #0]

}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	40013000 	.word	0x40013000

08000c28 <DAC_write>:
	return convert;
}


//Write the data
void DAC_write(int word) {
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
	SPI1->CR1 &= ~SPI_CR1_SSI; //clear SSI
 8000c30:	4b13      	ldr	r3, [pc, #76]	; (8000c80 <DAC_write+0x58>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a12      	ldr	r2, [pc, #72]	; (8000c80 <DAC_write+0x58>)
 8000c36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c3a:	6013      	str	r3, [r2, #0]
	while (!(SPI1->SR & SPI_SR_TXE));	//Polling to ensure buffer is empty
 8000c3c:	bf00      	nop
 8000c3e:	4b10      	ldr	r3, [pc, #64]	; (8000c80 <DAC_write+0x58>)
 8000c40:	689b      	ldr	r3, [r3, #8]
 8000c42:	f003 0302 	and.w	r3, r3, #2
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d0f9      	beq.n	8000c3e <DAC_write+0x16>
		word = word + 0x1000;	//GA = 0 2 times multiplier
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000c50:	607b      	str	r3, [r7, #4]
		SPI1->DR = word;		//writing to DAC data register
 8000c52:	4a0b      	ldr	r2, [pc, #44]	; (8000c80 <DAC_write+0x58>)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	60d3      	str	r3, [r2, #12]
	while(!(SPI1->SR & SPI_SR_BSY));	//Polling to ensure transmit is over
 8000c58:	bf00      	nop
 8000c5a:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <DAC_write+0x58>)
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d0f9      	beq.n	8000c5a <DAC_write+0x32>
	SPI1->CR1 |= SPI_CR1_SSI; //enable SSI
 8000c66:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <DAC_write+0x58>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a05      	ldr	r2, [pc, #20]	; (8000c80 <DAC_write+0x58>)
 8000c6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c70:	6013      	str	r3, [r2, #0]
}
 8000c72:	bf00      	nop
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	40013000 	.word	0x40013000

08000c84 <LCD_config>:
#include <string.h>

// anding with a ~ sets to 0
// oring sets it to 1

void LCD_config(void) {
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
	//LCD
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOEEN);
 8000c88:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <LCD_config+0x60>)
 8000c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8c:	4a15      	ldr	r2, [pc, #84]	; (8000ce4 <LCD_config+0x60>)
 8000c8e:	f043 0310 	orr.w	r3, r3, #16
 8000c92:	64d3      	str	r3, [r2, #76]	; 0x4c
	GPIOE->MODER &= ~(GPIO_MODER_MODE0 | GPIO_MODER_MODE2 | GPIO_MODER_MODE3 |
 8000c94:	4b14      	ldr	r3, [pc, #80]	; (8000ce8 <LCD_config+0x64>)
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	4913      	ldr	r1, [pc, #76]	; (8000ce8 <LCD_config+0x64>)
 8000c9a:	4b14      	ldr	r3, [pc, #80]	; (8000cec <LCD_config+0x68>)
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	600b      	str	r3, [r1, #0]
					  GPIO_MODER_MODE4 | GPIO_MODER_MODE5 | GPIO_MODER_MODE6 |
					  GPIO_MODER_MODE7 | GPIO_MODER_MODE8);
	GPIOE->MODER |= (GPIO_MODER_MODE0_0 | GPIO_MODER_MODE2_0| GPIO_MODER_MODE3_0 |
 8000ca0:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <LCD_config+0x64>)
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	4910      	ldr	r1, [pc, #64]	; (8000ce8 <LCD_config+0x64>)
 8000ca6:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <LCD_config+0x6c>)
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	600b      	str	r3, [r1, #0]
					 GPIO_MODER_MODE4_0 | GPIO_MODER_MODE5_0 | GPIO_MODER_MODE6_0 |
					 GPIO_MODER_MODE7_0 | GPIO_MODER_MODE8_0);
	GPIOE->OTYPER &= ~(GPIO_OTYPER_OT0 | GPIO_OTYPER_OT2 | GPIO_OTYPER_OT3 |
 8000cac:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <LCD_config+0x64>)
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	4a0d      	ldr	r2, [pc, #52]	; (8000ce8 <LCD_config+0x64>)
 8000cb2:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 8000cb6:	f023 0301 	bic.w	r3, r3, #1
 8000cba:	6053      	str	r3, [r2, #4]
					   GPIO_OTYPER_OT4 | GPIO_OTYPER_OT5 | GPIO_OTYPER_OT6 |
					   GPIO_OTYPER_OT7 | GPIO_OTYPER_OT8);
	GPIOE->PUPDR &= ~(GPIO_PUPDR_PUPD0 | GPIO_PUPDR_PUPD2 | GPIO_PUPDR_PUPD3 |
 8000cbc:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <LCD_config+0x64>)
 8000cbe:	68da      	ldr	r2, [r3, #12]
 8000cc0:	4909      	ldr	r1, [pc, #36]	; (8000ce8 <LCD_config+0x64>)
 8000cc2:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <LCD_config+0x68>)
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	60cb      	str	r3, [r1, #12]
					  GPIO_PUPDR_PUPD4 | GPIO_PUPDR_PUPD5 | GPIO_PUPDR_PUPD6 |
					  GPIO_PUPDR_PUPD7 | GPIO_PUPDR_PUPD8);
	GPIOE->OSPEEDR |= ((3 << GPIO_OSPEEDR_OSPEED0_Pos)| (3 << GPIO_OSPEEDR_OSPEED2_Pos) |
 8000cc8:	4b07      	ldr	r3, [pc, #28]	; (8000ce8 <LCD_config+0x64>)
 8000cca:	689a      	ldr	r2, [r3, #8]
 8000ccc:	4906      	ldr	r1, [pc, #24]	; (8000ce8 <LCD_config+0x64>)
 8000cce:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <LCD_config+0x70>)
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	608b      	str	r3, [r1, #8]
					   (3 << GPIO_OSPEEDR_OSPEED3_Pos)| (3 << GPIO_OSPEEDR_OSPEED4_Pos) |
					   (3 << GPIO_OSPEEDR_OSPEED5_Pos)| (3 << GPIO_OSPEEDR_OSPEED6_Pos) |
					   (3 << GPIO_OSPEEDR_OSPEED7_Pos)| (3 << GPIO_OSPEEDR_OSPEED8_Pos));
	GPIOE->BRR = 0xFF;
 8000cd4:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <LCD_config+0x64>)
 8000cd6:	22ff      	movs	r2, #255	; 0xff
 8000cd8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000cda:	bf00      	nop
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	40021000 	.word	0x40021000
 8000ce8:	48001000 	.word	0x48001000
 8000cec:	fffc000c 	.word	0xfffc000c
 8000cf0:	00015551 	.word	0x00015551
 8000cf4:	0003fff3 	.word	0x0003fff3

08000cf8 <LCD_init>:
void LCD_init(void) {   // RCC & GPIO config removed - leverage A1, A2 code
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0

	GPIOE->BRR = (GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5
 8000cfc:	4b1a      	ldr	r3, [pc, #104]	; (8000d68 <LCD_init+0x70>)
 8000cfe:	22fd      	movs	r2, #253	; 0xfd
 8000d00:	629a      	str	r2, [r3, #40]	; 0x28
			| GPIO_PIN_6 | GPIO_PIN_7);
	delay_us(40000);                     // power-up wait 40 ms
 8000d02:	f649 4040 	movw	r0, #40000	; 0x9c40
 8000d06:	f000 f951 	bl	8000fac <delay_us>

	GPIOE->BSRR = (GPIO_PIN_4 | GPIO_PIN_5); //P1 = (0x30) put 0x30 on output
 8000d0a:	4b17      	ldr	r3, [pc, #92]	; (8000d68 <LCD_init+0x70>)
 8000d0c:	2230      	movs	r2, #48	; 0x30
 8000d0e:	619a      	str	r2, [r3, #24]

	delay_us(30000);
 8000d10:	f247 5030 	movw	r0, #30000	; 0x7530
 8000d14:	f000 f94a 	bl	8000fac <delay_us>

	LCD_Pulse_Enable();			//wake up
 8000d18:	f000 f828 	bl	8000d6c <LCD_Pulse_Enable>

	delay_us(10000);
 8000d1c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000d20:	f000 f944 	bl	8000fac <delay_us>

	LCD_Pulse_Enable();			//wake up again
 8000d24:	f000 f822 	bl	8000d6c <LCD_Pulse_Enable>

	delay_us(10000);
 8000d28:	f242 7010 	movw	r0, #10000	; 0x2710
 8000d2c:	f000 f93e 	bl	8000fac <delay_us>

	LCD_Pulse_Enable();			//wake up again
 8000d30:	f000 f81c 	bl	8000d6c <LCD_Pulse_Enable>

	delay_us(10000);
 8000d34:	f242 7010 	movw	r0, #10000	; 0x2710
 8000d38:	f000 f938 	bl	8000fac <delay_us>

	GPIOE->BRR = (GPIO_PIN_4); //put 0x20 on output
 8000d3c:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <LCD_init+0x70>)
 8000d3e:	2210      	movs	r2, #16
 8000d40:	629a      	str	r2, [r3, #40]	; 0x28

	delay_us(10);
 8000d42:	200a      	movs	r0, #10
 8000d44:	f000 f932 	bl	8000fac <delay_us>

	LCD_Pulse_Enable();		//function set: 4-bit interface
 8000d48:	f000 f810 	bl	8000d6c <LCD_Pulse_Enable>

	LCD_Command(0x28);		//function set: 4-bit/2-line
 8000d4c:	2028      	movs	r0, #40	; 0x28
 8000d4e:	f000 f81d 	bl	8000d8c <LCD_Command>

	LCD_Command(0x0F);		//display ON; Blinking cursor
 8000d52:	200f      	movs	r0, #15
 8000d54:	f000 f81a 	bl	8000d8c <LCD_Command>

	LCD_Command(0x06);		//entry Mode set
 8000d58:	2006      	movs	r0, #6
 8000d5a:	f000 f817 	bl	8000d8c <LCD_Command>

	LCD_Command(0x02);		//return home
 8000d5e:	2002      	movs	r0, #2
 8000d60:	f000 f814 	bl	8000d8c <LCD_Command>

}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	48001000 	.word	0x48001000

08000d6c <LCD_Pulse_Enable>:

void LCD_Pulse_Enable(void) {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
// ENAble line sends command on falling edge
// set to restore default then clear to trigger
	GPIOE->BSRR = (GPIO_PIN_3);
 8000d70:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <LCD_Pulse_Enable+0x1c>)
 8000d72:	2208      	movs	r2, #8
 8000d74:	619a      	str	r2, [r3, #24]

	delay_us(1000);
 8000d76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d7a:	f000 f917 	bl	8000fac <delay_us>

	GPIOE->BRR = (GPIO_PIN_3);
 8000d7e:	4b02      	ldr	r3, [pc, #8]	; (8000d88 <LCD_Pulse_Enable+0x1c>)
 8000d80:	2208      	movs	r2, #8
 8000d82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d84:	bf00      	nop
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	48001000 	.word	0x48001000

08000d8c <LCD_Command>:

void LCD_Command(uint8_t Byte) {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	71fb      	strb	r3, [r7, #7]

	GPIOE->BSRR = (Byte & 0xF0); //keep upper 4 bits (masking) using data ins 4-7 (upper 4 bits)
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	4a0c      	ldr	r2, [pc, #48]	; (8000dcc <LCD_Command+0x40>)
 8000d9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d9e:	6193      	str	r3, [r2, #24]

	LCD_Pulse_Enable();
 8000da0:	f7ff ffe4 	bl	8000d6c <LCD_Pulse_Enable>

	GPIOE->BRR = 0xFF; //reset 8 bits
 8000da4:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <LCD_Command+0x40>)
 8000da6:	22ff      	movs	r2, #255	; 0xff
 8000da8:	629a      	str	r2, [r3, #40]	; 0x28

	GPIOE->BSRR = (Byte << 4) & 0xF0; // take data from lower 4 bits mask out everything else
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	011b      	lsls	r3, r3, #4
 8000dae:	4a07      	ldr	r2, [pc, #28]	; (8000dcc <LCD_Command+0x40>)
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	6193      	str	r3, [r2, #24]

	LCD_Pulse_Enable();
 8000db4:	f7ff ffda 	bl	8000d6c <LCD_Pulse_Enable>

	GPIOE->BRR = 0xFF; //reset 8 bits
 8000db8:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <LCD_Command+0x40>)
 8000dba:	22ff      	movs	r2, #255	; 0xff
 8000dbc:	629a      	str	r2, [r3, #40]	; 0x28
	delay_us(10); //small delay just in case
 8000dbe:	200a      	movs	r0, #10
 8000dc0:	f000 f8f4 	bl	8000fac <delay_us>
}
 8000dc4:	bf00      	nop
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	48001000 	.word	0x48001000

08000dd0 <LCD_write_char>:

void LCD_write_char(uint8_t letter) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	71fb      	strb	r3, [r7, #7]

	GPIOE->BSRR = (letter & 0xF0) | LCD_RS; //keep upper 4 bits (masking) using data ins 4-7 (upper 4 bits)
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000de0:	f043 0201 	orr.w	r2, r3, #1
 8000de4:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <LCD_write_char+0x44>)
 8000de6:	619a      	str	r2, [r3, #24]

	LCD_Pulse_Enable();
 8000de8:	f7ff ffc0 	bl	8000d6c <LCD_Pulse_Enable>

	GPIOE->BRR = 0xF0; //reset 8 bits
 8000dec:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <LCD_write_char+0x44>)
 8000dee:	22f0      	movs	r2, #240	; 0xf0
 8000df0:	629a      	str	r2, [r3, #40]	; 0x28

	GPIOE->BSRR = (letter << 4) & 0xF0; // take data from lower 4 bits mask out everything else
 8000df2:	79fb      	ldrb	r3, [r7, #7]
 8000df4:	011b      	lsls	r3, r3, #4
 8000df6:	4a07      	ldr	r2, [pc, #28]	; (8000e14 <LCD_write_char+0x44>)
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	6193      	str	r3, [r2, #24]

	LCD_Pulse_Enable();
 8000dfc:	f7ff ffb6 	bl	8000d6c <LCD_Pulse_Enable>

	GPIOE->BRR = 0xFF; //reset 8 bits
 8000e00:	4b04      	ldr	r3, [pc, #16]	; (8000e14 <LCD_write_char+0x44>)
 8000e02:	22ff      	movs	r2, #255	; 0xff
 8000e04:	629a      	str	r2, [r3, #40]	; 0x28
	delay_us(10); //small delay just in case
 8000e06:	200a      	movs	r0, #10
 8000e08:	f000 f8d0 	bl	8000fac <delay_us>
}
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	48001000 	.word	0x48001000

08000e18 <LCD_write_string>:

/*
 * Tanner Ehlers, EE 329 F'22 student. (2023-Apr-20).
 * Personal Communication: Tanner provided working C code for the write string function
 */
void LCD_write_string(char *string) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	if(strlen(string) <=16) {
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	f7ff f9e5 	bl	80001f0 <strlen>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b10      	cmp	r3, #16
 8000e2a:	d813      	bhi.n	8000e54 <LCD_write_string+0x3c>
		for (int character = 0; character < strlen(string); character++) {
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	e009      	b.n	8000e46 <LCD_write_string+0x2e>
			LCD_write_char((uint8_t) string[character]);
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	4413      	add	r3, r2
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff ffc8 	bl	8000dd0 <LCD_write_char>
		for (int character = 0; character < strlen(string); character++) {
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	3301      	adds	r3, #1
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f7ff f9d2 	bl	80001f0 <strlen>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d8ee      	bhi.n	8000e32 <LCD_write_string+0x1a>
		}
	}
}
 8000e54:	bf00      	nop
 8000e56:	3710      	adds	r7, #16
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <Display_Init>:

void Display_Init(void) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
	LCD_Command(0x01);			//clear display
 8000e60:	2001      	movs	r0, #1
 8000e62:	f7ff ff93 	bl	8000d8c <LCD_Command>
	delay_us(25000);
 8000e66:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8000e6a:	f000 f89f 	bl	8000fac <delay_us>
	LCD_Command(0x80 | 0x00);
 8000e6e:	2080      	movs	r0, #128	; 0x80
 8000e70:	f7ff ff8c 	bl	8000d8c <LCD_Command>
	delay_us(400);
 8000e74:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000e78:	f000 f898 	bl	8000fac <delay_us>
	LCD_write_string("SQU 200 Hz  LAST");
 8000e7c:	4805      	ldr	r0, [pc, #20]	; (8000e94 <Display_Init+0x38>)
 8000e7e:	f7ff ffcb 	bl	8000e18 <LCD_write_string>
	LCD_Command(0xC0);			//next row
 8000e82:	20c0      	movs	r0, #192	; 0xc0
 8000e84:	f7ff ff82 	bl	8000d8c <LCD_Command>
	LCD_write_string("50% DUTY     ' '");
 8000e88:	4803      	ldr	r0, [pc, #12]	; (8000e98 <Display_Init+0x3c>)
 8000e8a:	f7ff ffc5 	bl	8000e18 <LCD_write_string>
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	08003ae0 	.word	0x08003ae0
 8000e98:	08003af4 	.word	0x08003af4

08000e9c <LCD_write_duty_cycle>:

void LCD_write_duty_cycle(int duty) {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
	LCD_Command(0x80 | 0x40);
 8000ea4:	20c0      	movs	r0, #192	; 0xc0
 8000ea6:	f7ff ff71 	bl	8000d8c <LCD_Command>
	if (duty == 0) {
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d102      	bne.n	8000eb6 <LCD_write_duty_cycle+0x1a>
		LCD_write_string("10");
 8000eb0:	481b      	ldr	r0, [pc, #108]	; (8000f20 <LCD_write_duty_cycle+0x84>)
 8000eb2:	f7ff ffb1 	bl	8000e18 <LCD_write_string>
	}
	if (duty == 1) {
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d102      	bne.n	8000ec2 <LCD_write_duty_cycle+0x26>
		LCD_write_string("20");
 8000ebc:	4819      	ldr	r0, [pc, #100]	; (8000f24 <LCD_write_duty_cycle+0x88>)
 8000ebe:	f7ff ffab 	bl	8000e18 <LCD_write_string>
	}
	if (duty == 2) {
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	d102      	bne.n	8000ece <LCD_write_duty_cycle+0x32>
		LCD_write_string("30");
 8000ec8:	4817      	ldr	r0, [pc, #92]	; (8000f28 <LCD_write_duty_cycle+0x8c>)
 8000eca:	f7ff ffa5 	bl	8000e18 <LCD_write_string>
	}
	if (duty == 3) {
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2b03      	cmp	r3, #3
 8000ed2:	d102      	bne.n	8000eda <LCD_write_duty_cycle+0x3e>
		LCD_write_string("40");
 8000ed4:	4815      	ldr	r0, [pc, #84]	; (8000f2c <LCD_write_duty_cycle+0x90>)
 8000ed6:	f7ff ff9f 	bl	8000e18 <LCD_write_string>
	}
	if (duty == 4) {
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2b04      	cmp	r3, #4
 8000ede:	d102      	bne.n	8000ee6 <LCD_write_duty_cycle+0x4a>
		LCD_write_string("50");
 8000ee0:	4813      	ldr	r0, [pc, #76]	; (8000f30 <LCD_write_duty_cycle+0x94>)
 8000ee2:	f7ff ff99 	bl	8000e18 <LCD_write_string>
	}
	if (duty == 5) {
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2b05      	cmp	r3, #5
 8000eea:	d102      	bne.n	8000ef2 <LCD_write_duty_cycle+0x56>
		LCD_write_string("60");
 8000eec:	4811      	ldr	r0, [pc, #68]	; (8000f34 <LCD_write_duty_cycle+0x98>)
 8000eee:	f7ff ff93 	bl	8000e18 <LCD_write_string>
	}
	if (duty == 6) {
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2b06      	cmp	r3, #6
 8000ef6:	d102      	bne.n	8000efe <LCD_write_duty_cycle+0x62>
		LCD_write_string("70");
 8000ef8:	480f      	ldr	r0, [pc, #60]	; (8000f38 <LCD_write_duty_cycle+0x9c>)
 8000efa:	f7ff ff8d 	bl	8000e18 <LCD_write_string>
	}
	if (duty == 7) {
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2b07      	cmp	r3, #7
 8000f02:	d102      	bne.n	8000f0a <LCD_write_duty_cycle+0x6e>
		LCD_write_string("80");
 8000f04:	480d      	ldr	r0, [pc, #52]	; (8000f3c <LCD_write_duty_cycle+0xa0>)
 8000f06:	f7ff ff87 	bl	8000e18 <LCD_write_string>
	}
	if (duty == 8) {
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2b08      	cmp	r3, #8
 8000f0e:	d102      	bne.n	8000f16 <LCD_write_duty_cycle+0x7a>
		LCD_write_string("90");
 8000f10:	480b      	ldr	r0, [pc, #44]	; (8000f40 <LCD_write_duty_cycle+0xa4>)
 8000f12:	f7ff ff81 	bl	8000e18 <LCD_write_string>
	}
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	08003b08 	.word	0x08003b08
 8000f24:	08003b0c 	.word	0x08003b0c
 8000f28:	08003b10 	.word	0x08003b10
 8000f2c:	08003b14 	.word	0x08003b14
 8000f30:	08003b18 	.word	0x08003b18
 8000f34:	08003b1c 	.word	0x08003b1c
 8000f38:	08003b20 	.word	0x08003b20
 8000f3c:	08003b24 	.word	0x08003b24
 8000f40:	08003b28 	.word	0x08003b28

08000f44 <LCD_write_freq>:

void LCD_write_freq(int freq) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	LCD_Command(0x80 | 0x04);
 8000f4c:	2084      	movs	r0, #132	; 0x84
 8000f4e:	f7ff ff1d 	bl	8000d8c <LCD_Command>
	if (freq == 1) {
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d102      	bne.n	8000f5e <LCD_write_freq+0x1a>
		LCD_write_string("100");
 8000f58:	480f      	ldr	r0, [pc, #60]	; (8000f98 <LCD_write_freq+0x54>)
 8000f5a:	f7ff ff5d 	bl	8000e18 <LCD_write_string>
	}
	if (freq == 2) {
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d102      	bne.n	8000f6a <LCD_write_freq+0x26>
		LCD_write_string("200");
 8000f64:	480d      	ldr	r0, [pc, #52]	; (8000f9c <LCD_write_freq+0x58>)
 8000f66:	f7ff ff57 	bl	8000e18 <LCD_write_string>
	}
	if (freq == 3) {
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2b03      	cmp	r3, #3
 8000f6e:	d102      	bne.n	8000f76 <LCD_write_freq+0x32>
		LCD_write_string("300");
 8000f70:	480b      	ldr	r0, [pc, #44]	; (8000fa0 <LCD_write_freq+0x5c>)
 8000f72:	f7ff ff51 	bl	8000e18 <LCD_write_string>
	}
	if (freq == 4) {
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2b04      	cmp	r3, #4
 8000f7a:	d102      	bne.n	8000f82 <LCD_write_freq+0x3e>
		LCD_write_string("400");
 8000f7c:	4809      	ldr	r0, [pc, #36]	; (8000fa4 <LCD_write_freq+0x60>)
 8000f7e:	f7ff ff4b 	bl	8000e18 <LCD_write_string>
	}
	if (freq == 5) {
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2b05      	cmp	r3, #5
 8000f86:	d102      	bne.n	8000f8e <LCD_write_freq+0x4a>
		LCD_write_string("500");
 8000f88:	4807      	ldr	r0, [pc, #28]	; (8000fa8 <LCD_write_freq+0x64>)
 8000f8a:	f7ff ff45 	bl	8000e18 <LCD_write_string>
	}
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	08003b2c 	.word	0x08003b2c
 8000f9c:	08003b30 	.word	0x08003b30
 8000fa0:	08003b34 	.word	0x08003b34
 8000fa4:	08003b38 	.word	0x08003b38
 8000fa8:	08003b3c 	.word	0x08003b3c

08000fac <delay_us>:
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |     // enable SysTick Timer
                      SysTick_CTRL_CLKSOURCE_Msk); 	// select CPU clock
	SysTick->CTRL &= ~(SysTick_CTRL_TICKINT_Msk);  	// disable interrupt
}

void delay_us(const uint32_t time_us) {
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
	// set the counts for the specified delay
	SysTick->LOAD = (uint32_t)((time_us * (SystemCoreClock / 9000000)) - 1);
 8000fb4:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <delay_us+0x50>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a11      	ldr	r2, [pc, #68]	; (8001000 <delay_us+0x54>)
 8000fba:	fba2 2303 	umull	r2, r3, r2, r3
 8000fbe:	0ddb      	lsrs	r3, r3, #23
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	fb02 f303 	mul.w	r3, r2, r3
 8000fc6:	4a0f      	ldr	r2, [pc, #60]	; (8001004 <delay_us+0x58>)
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;                                  	 // clear timer count
 8000fcc:	4b0d      	ldr	r3, [pc, #52]	; (8001004 <delay_us+0x58>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
	SysTick->CTRL &= ~(SysTick_CTRL_COUNTFLAG_Msk);    	 // clear count flag
 8000fd2:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <delay_us+0x58>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a0b      	ldr	r2, [pc, #44]	; (8001004 <delay_us+0x58>)
 8000fd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fdc:	6013      	str	r3, [r2, #0]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)); // wait for flag
 8000fde:	bf00      	nop
 8000fe0:	4b08      	ldr	r3, [pc, #32]	; (8001004 <delay_us+0x58>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d0f9      	beq.n	8000fe0 <delay_us+0x34>
}
 8000fec:	bf00      	nop
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	20000030 	.word	0x20000030
 8001000:	ee9bfab5 	.word	0xee9bfab5
 8001004:	e000e010 	.word	0xe000e010

08001008 <Keypad_init>:
#include "keypad.h"
#include <math.h>
#include "main.h"
#include "delay.h"

void Keypad_init(void) {
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
	// anding with a ~ sets to 0
	// oring sets it to 1
	// Columns: PD7, PD6, PD5, PD4
	// Rows:    PD0, PD1, PD2, PD3
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIODEN);
 800100c:	4b26      	ldr	r3, [pc, #152]	; (80010a8 <Keypad_init+0xa0>)
 800100e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001010:	4a25      	ldr	r2, [pc, #148]	; (80010a8 <Keypad_init+0xa0>)
 8001012:	f043 0308 	orr.w	r3, r3, #8
 8001016:	64d3      	str	r3, [r2, #76]	; 0x4c
	//Columns
	GPIOD->MODER &= ~(GPIO_MODER_MODE7 | GPIO_MODER_MODE6 | GPIO_MODER_MODE5
 8001018:	4b24      	ldr	r3, [pc, #144]	; (80010ac <Keypad_init+0xa4>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a23      	ldr	r2, [pc, #140]	; (80010ac <Keypad_init+0xa4>)
 800101e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001022:	6013      	str	r3, [r2, #0]
			| GPIO_MODER_MODE4);
	GPIOD->MODER |= (GPIO_MODER_MODE7_0 | GPIO_MODER_MODE6_0
 8001024:	4b21      	ldr	r3, [pc, #132]	; (80010ac <Keypad_init+0xa4>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a20      	ldr	r2, [pc, #128]	; (80010ac <Keypad_init+0xa4>)
 800102a:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 800102e:	6013      	str	r3, [r2, #0]
			| GPIO_MODER_MODE5_0 | GPIO_MODER_MODE4_0);
	GPIOD->OTYPER &= ~(GPIO_OTYPER_OT7 | GPIO_OTYPER_OT6 | GPIO_OTYPER_OT5
 8001030:	4b1e      	ldr	r3, [pc, #120]	; (80010ac <Keypad_init+0xa4>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	4a1d      	ldr	r2, [pc, #116]	; (80010ac <Keypad_init+0xa4>)
 8001036:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800103a:	6053      	str	r3, [r2, #4]
			| GPIO_OTYPER_OT4);
	GPIOD->PUPDR &= ~(GPIO_PUPDR_PUPD7 | GPIO_PUPDR_PUPD6 | GPIO_PUPDR_PUPD5
 800103c:	4b1b      	ldr	r3, [pc, #108]	; (80010ac <Keypad_init+0xa4>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	4a1a      	ldr	r2, [pc, #104]	; (80010ac <Keypad_init+0xa4>)
 8001042:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001046:	60d3      	str	r3, [r2, #12]
			| GPIO_PUPDR_PUPD4);
	GPIOD->OSPEEDR |= ((3 << GPIO_OSPEEDR_OSPEED7_Pos)
 8001048:	4b18      	ldr	r3, [pc, #96]	; (80010ac <Keypad_init+0xa4>)
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	4a17      	ldr	r2, [pc, #92]	; (80010ac <Keypad_init+0xa4>)
 800104e:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 8001052:	6093      	str	r3, [r2, #8]
			| (3 << GPIO_OSPEEDR_OSPEED6_Pos) | (3 << GPIO_OSPEEDR_OSPEED5_Pos)
			| (3 << GPIO_OSPEEDR_OSPEED4_Pos));

	//Rows
	GPIOD->MODER &= ~(GPIO_MODER_MODE0 | GPIO_MODER_MODE1 | GPIO_MODER_MODE2
 8001054:	4b15      	ldr	r3, [pc, #84]	; (80010ac <Keypad_init+0xa4>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a14      	ldr	r2, [pc, #80]	; (80010ac <Keypad_init+0xa4>)
 800105a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800105e:	6013      	str	r3, [r2, #0]
			| GPIO_MODER_MODE3);
	GPIOD->PUPDR &= ~(GPIO_PUPDR_PUPD0 | GPIO_PUPDR_PUPD1 | GPIO_PUPDR_PUPD2
 8001060:	4b12      	ldr	r3, [pc, #72]	; (80010ac <Keypad_init+0xa4>)
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	4a11      	ldr	r2, [pc, #68]	; (80010ac <Keypad_init+0xa4>)
 8001066:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800106a:	60d3      	str	r3, [r2, #12]
			| GPIO_PUPDR_PUPD3);
	GPIOD->PUPDR |= (2 << GPIO_PUPDR_PUPD0_Pos);
 800106c:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <Keypad_init+0xa4>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	4a0e      	ldr	r2, [pc, #56]	; (80010ac <Keypad_init+0xa4>)
 8001072:	f043 0302 	orr.w	r3, r3, #2
 8001076:	60d3      	str	r3, [r2, #12]
	GPIOD->PUPDR |= (2 << GPIO_PUPDR_PUPD1_Pos);
 8001078:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <Keypad_init+0xa4>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	4a0b      	ldr	r2, [pc, #44]	; (80010ac <Keypad_init+0xa4>)
 800107e:	f043 0308 	orr.w	r3, r3, #8
 8001082:	60d3      	str	r3, [r2, #12]
	GPIOD->PUPDR |= (2 << GPIO_PUPDR_PUPD2_Pos);
 8001084:	4b09      	ldr	r3, [pc, #36]	; (80010ac <Keypad_init+0xa4>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	4a08      	ldr	r2, [pc, #32]	; (80010ac <Keypad_init+0xa4>)
 800108a:	f043 0320 	orr.w	r3, r3, #32
 800108e:	60d3      	str	r3, [r2, #12]
	GPIOD->PUPDR |= (2 << GPIO_PUPDR_PUPD3_Pos);
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <Keypad_init+0xa4>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	4a05      	ldr	r2, [pc, #20]	; (80010ac <Keypad_init+0xa4>)
 8001096:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800109a:	60d3      	str	r3, [r2, #12]
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	40021000 	.word	0x40021000
 80010ac:	48000c00 	.word	0x48000c00

080010b0 <Read_Keypad>:

unsigned int Read_Keypad(void) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08a      	sub	sp, #40	; 0x28
 80010b4:	af00      	add	r7, sp, #0
	int IDR_CONTENTS = 0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	607b      	str	r3, [r7, #4]
	int ROW_CONTENTS = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
	int SUCCESS_COUNT = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	623b      	str	r3, [r7, #32]
	int ROW = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61fb      	str	r3, [r7, #28]
	int COL = 0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61bb      	str	r3, [r7, #24]
	unsigned int KEY = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
	for (int COL_PORT = 0; COL_PORT <= 3; COL_PORT ++) {                         //Starts for loop to set each of the columns high
 80010ce:	2300      	movs	r3, #0
 80010d0:	613b      	str	r3, [r7, #16]
 80010d2:	e056      	b.n	8001182 <Read_Keypad+0xd2>
	    GPIOD->ODR &= (0b1111111100001111);                                      //Masks all ODR bits not in use
 80010d4:	4b7d      	ldr	r3, [pc, #500]	; (80012cc <Read_Keypad+0x21c>)
 80010d6:	695a      	ldr	r2, [r3, #20]
 80010d8:	497c      	ldr	r1, [pc, #496]	; (80012cc <Read_Keypad+0x21c>)
 80010da:	f64f 730f 	movw	r3, #65295	; 0xff0f
 80010de:	4013      	ands	r3, r2
 80010e0:	614b      	str	r3, [r1, #20]
	    GPIOD->ODR |= 0b0000 << 4;                                                    //Turns off all columns
 80010e2:	4b7a      	ldr	r3, [pc, #488]	; (80012cc <Read_Keypad+0x21c>)
 80010e4:	4a79      	ldr	r2, [pc, #484]	; (80012cc <Read_Keypad+0x21c>)
 80010e6:	695b      	ldr	r3, [r3, #20]
 80010e8:	6153      	str	r3, [r2, #20]
	    GPIOD->ODR |= (0b1000 >> COL_PORT) << 4;                                 //Sets high the column corresponding to the variable in the previous for loop
 80010ea:	4b78      	ldr	r3, [pc, #480]	; (80012cc <Read_Keypad+0x21c>)
 80010ec:	695b      	ldr	r3, [r3, #20]
 80010ee:	2108      	movs	r1, #8
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	fa41 f202 	asr.w	r2, r1, r2
 80010f6:	0112      	lsls	r2, r2, #4
 80010f8:	4611      	mov	r1, r2
 80010fa:	4a74      	ldr	r2, [pc, #464]	; (80012cc <Read_Keypad+0x21c>)
 80010fc:	430b      	orrs	r3, r1
 80010fe:	6153      	str	r3, [r2, #20]
	    delay_us(10000);
 8001100:	f242 7010 	movw	r0, #10000	; 0x2710
 8001104:	f7ff ff52 	bl	8000fac <delay_us>
	    IDR_CONTENTS = GPIOD->IDR & 0x0F;                                               //Reads the input data register from the rows
 8001108:	4b70      	ldr	r3, [pc, #448]	; (80012cc <Read_Keypad+0x21c>)
 800110a:	691b      	ldr	r3, [r3, #16]
 800110c:	f003 030f 	and.w	r3, r3, #15
 8001110:	607b      	str	r3, [r7, #4]
	    IDR_CONTENTS &= (0b0000000000001111);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f003 030f 	and.w	r3, r3, #15
 8001118:	607b      	str	r3, [r7, #4]
	    if (IDR_CONTENTS != 0) {                                                 //Starts section to code to execute if one of the rows set high
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d02d      	beq.n	800117c <Read_Keypad+0xcc>
	    	for (int CHECK_COUNT = 0; CHECK_COUNT <= 100; CHECK_COUNT ++) {      //Starts for loop to read the IDR 100 times
 8001120:	2300      	movs	r3, #0
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	e025      	b.n	8001172 <Read_Keypad+0xc2>
	    		for (int DELAY_COUNT = 100; DELAY_COUNT >= 0; DELAY_COUNT --);  //Just a delay
 8001126:	2364      	movs	r3, #100	; 0x64
 8001128:	60bb      	str	r3, [r7, #8]
 800112a:	e002      	b.n	8001132 <Read_Keypad+0x82>
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	3b01      	subs	r3, #1
 8001130:	60bb      	str	r3, [r7, #8]
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	2b00      	cmp	r3, #0
 8001136:	daf9      	bge.n	800112c <Read_Keypad+0x7c>
	    		IDR_CONTENTS = GPIOD->IDR & 0x0F;                                       //Reads the IDR from the rows
 8001138:	4b64      	ldr	r3, [pc, #400]	; (80012cc <Read_Keypad+0x21c>)
 800113a:	691b      	ldr	r3, [r3, #16]
 800113c:	f003 030f 	and.w	r3, r3, #15
 8001140:	607b      	str	r3, [r7, #4]
	     		IDR_CONTENTS &= (0b0000000000001111);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f003 030f 	and.w	r3, r3, #15
 8001148:	607b      	str	r3, [r7, #4]
	    		if (IDR_CONTENTS != 0) {                                         //If statement to count the number of times a row was set high
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d008      	beq.n	8001162 <Read_Keypad+0xb2>
	    			SUCCESS_COUNT ++;
 8001150:	6a3b      	ldr	r3, [r7, #32]
 8001152:	3301      	adds	r3, #1
 8001154:	623b      	str	r3, [r7, #32]
	    			COL = COL_PORT + 1;
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	3301      	adds	r3, #1
 800115a:	61bb      	str	r3, [r7, #24]
	    	        ROW_CONTENTS = IDR_CONTENTS;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	627b      	str	r3, [r7, #36]	; 0x24
 8001160:	e001      	b.n	8001166 <Read_Keypad+0xb6>
	    		}
	    		else {                                                           //If no rows were set to high, reset the success count to zero
	    			SUCCESS_COUNT = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	623b      	str	r3, [r7, #32]
	    		}
	    		if (SUCCESS_COUNT >= 50) {                                       //Once a row has been read as on 50 times, exit the 100-instance for loop
 8001166:	6a3b      	ldr	r3, [r7, #32]
 8001168:	2b31      	cmp	r3, #49	; 0x31
 800116a:	dc06      	bgt.n	800117a <Read_Keypad+0xca>
	    	for (int CHECK_COUNT = 0; CHECK_COUNT <= 100; CHECK_COUNT ++) {      //Starts for loop to read the IDR 100 times
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	3301      	adds	r3, #1
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	2b64      	cmp	r3, #100	; 0x64
 8001176:	ddd6      	ble.n	8001126 <Read_Keypad+0x76>
 8001178:	e000      	b.n	800117c <Read_Keypad+0xcc>
	    			break;
 800117a:	bf00      	nop
	for (int COL_PORT = 0; COL_PORT <= 3; COL_PORT ++) {                         //Starts for loop to set each of the columns high
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	3301      	adds	r3, #1
 8001180:	613b      	str	r3, [r7, #16]
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	2b03      	cmp	r3, #3
 8001186:	dda5      	ble.n	80010d4 <Read_Keypad+0x24>
	    		}
	    	}
	    }
	}

	if (ROW_CONTENTS == 0b1000) {                //Case for determining row 4 pressed
 8001188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118a:	2b08      	cmp	r3, #8
 800118c:	d101      	bne.n	8001192 <Read_Keypad+0xe2>
		ROW = 0b0100;
 800118e:	2304      	movs	r3, #4
 8001190:	61fb      	str	r3, [r7, #28]
	}
	if (ROW_CONTENTS == 0b0100) {                //Case for determining row 3 pressed
 8001192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001194:	2b04      	cmp	r3, #4
 8001196:	d101      	bne.n	800119c <Read_Keypad+0xec>
	    ROW = 0b0011;
 8001198:	2303      	movs	r3, #3
 800119a:	61fb      	str	r3, [r7, #28]
    }
	if (ROW_CONTENTS == 0b0010) {                //Case for determining row 2 pressed
 800119c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d101      	bne.n	80011a6 <Read_Keypad+0xf6>
		ROW = 0b0010;
 80011a2:	2302      	movs	r3, #2
 80011a4:	61fb      	str	r3, [r7, #28]
	}
	if (ROW_CONTENTS == 0b0001) {                //Case for determining row 1 pressed
 80011a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d101      	bne.n	80011b0 <Read_Keypad+0x100>
	    ROW = 0b0001;
 80011ac:	2301      	movs	r3, #1
 80011ae:	61fb      	str	r3, [r7, #28]
    }

	if (ROW == 1 && COL == 1) {                  //Case for key 1 pressed
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d104      	bne.n	80011c0 <Read_Keypad+0x110>
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d101      	bne.n	80011c0 <Read_Keypad+0x110>
		KEY = 1;
 80011bc:	2301      	movs	r3, #1
 80011be:	617b      	str	r3, [r7, #20]
	}
	if (ROW == 1 && COL == 2) {                  //Case for key 2 pressed
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d104      	bne.n	80011d0 <Read_Keypad+0x120>
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d101      	bne.n	80011d0 <Read_Keypad+0x120>
	    KEY = 2;
 80011cc:	2302      	movs	r3, #2
 80011ce:	617b      	str	r3, [r7, #20]
	}
	if (ROW == 1 && COL == 3) {                  //Case for key 3 pressed
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d104      	bne.n	80011e0 <Read_Keypad+0x130>
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	2b03      	cmp	r3, #3
 80011da:	d101      	bne.n	80011e0 <Read_Keypad+0x130>
	    KEY = 3;
 80011dc:	2303      	movs	r3, #3
 80011de:	617b      	str	r3, [r7, #20]
	}
	if (ROW == 1 && COL == 4) {                  //Case for key A pressed
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d104      	bne.n	80011f0 <Read_Keypad+0x140>
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	2b04      	cmp	r3, #4
 80011ea:	d101      	bne.n	80011f0 <Read_Keypad+0x140>
	    KEY = 12;
 80011ec:	230c      	movs	r3, #12
 80011ee:	617b      	str	r3, [r7, #20]
	}
	if (ROW == 2 && COL == 1) {                  //Case for key 4 pressed
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d104      	bne.n	8001200 <Read_Keypad+0x150>
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d101      	bne.n	8001200 <Read_Keypad+0x150>
	    KEY = 4;
 80011fc:	2304      	movs	r3, #4
 80011fe:	617b      	str	r3, [r7, #20]
	}
	if (ROW == 2 && COL == 2) {                  //Case for key 5 pressed
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	2b02      	cmp	r3, #2
 8001204:	d104      	bne.n	8001210 <Read_Keypad+0x160>
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	2b02      	cmp	r3, #2
 800120a:	d101      	bne.n	8001210 <Read_Keypad+0x160>
	    KEY = 5;
 800120c:	2305      	movs	r3, #5
 800120e:	617b      	str	r3, [r7, #20]
	}
	if (ROW == 2 && COL == 3) {                  //Case for key 6 pressed
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	2b02      	cmp	r3, #2
 8001214:	d104      	bne.n	8001220 <Read_Keypad+0x170>
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	2b03      	cmp	r3, #3
 800121a:	d101      	bne.n	8001220 <Read_Keypad+0x170>
	    KEY = 6;
 800121c:	2306      	movs	r3, #6
 800121e:	617b      	str	r3, [r7, #20]
	}
	if (ROW == 2 && COL == 4) {                  //Case for key B pressed
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	2b02      	cmp	r3, #2
 8001224:	d104      	bne.n	8001230 <Read_Keypad+0x180>
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	2b04      	cmp	r3, #4
 800122a:	d101      	bne.n	8001230 <Read_Keypad+0x180>
	    KEY = 12;
 800122c:	230c      	movs	r3, #12
 800122e:	617b      	str	r3, [r7, #20]
	}
	if (ROW == 3 && COL == 1) {                  //Case for key 7 pressed
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	2b03      	cmp	r3, #3
 8001234:	d104      	bne.n	8001240 <Read_Keypad+0x190>
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d101      	bne.n	8001240 <Read_Keypad+0x190>
	    KEY = 7;
 800123c:	2307      	movs	r3, #7
 800123e:	617b      	str	r3, [r7, #20]
	}
	if (ROW == 3 && COL == 2) {                  //Case for key 8 pressed
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	2b03      	cmp	r3, #3
 8001244:	d104      	bne.n	8001250 <Read_Keypad+0x1a0>
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	2b02      	cmp	r3, #2
 800124a:	d101      	bne.n	8001250 <Read_Keypad+0x1a0>
	    KEY = 8;
 800124c:	2308      	movs	r3, #8
 800124e:	617b      	str	r3, [r7, #20]
	}
	if (ROW == 3 && COL == 3) {                  //Case for key 9 pressed
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	2b03      	cmp	r3, #3
 8001254:	d104      	bne.n	8001260 <Read_Keypad+0x1b0>
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	2b03      	cmp	r3, #3
 800125a:	d101      	bne.n	8001260 <Read_Keypad+0x1b0>
	    KEY = 9;
 800125c:	2309      	movs	r3, #9
 800125e:	617b      	str	r3, [r7, #20]
	}
	if (ROW == 3 && COL == 4) {                  //Case for key C pressed
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	2b03      	cmp	r3, #3
 8001264:	d104      	bne.n	8001270 <Read_Keypad+0x1c0>
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	2b04      	cmp	r3, #4
 800126a:	d101      	bne.n	8001270 <Read_Keypad+0x1c0>
	    KEY = 12;
 800126c:	230c      	movs	r3, #12
 800126e:	617b      	str	r3, [r7, #20]
	}
	if (ROW == 4 && COL == 1) {                  //Case for SET key pressed
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	2b04      	cmp	r3, #4
 8001274:	d104      	bne.n	8001280 <Read_Keypad+0x1d0>
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d101      	bne.n	8001280 <Read_Keypad+0x1d0>
	    KEY = 10;
 800127c:	230a      	movs	r3, #10
 800127e:	617b      	str	r3, [r7, #20]
	}
	if (ROW == 4 && COL == 2) {                  //Case for key 0 pressed
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	2b04      	cmp	r3, #4
 8001284:	d104      	bne.n	8001290 <Read_Keypad+0x1e0>
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	2b02      	cmp	r3, #2
 800128a:	d101      	bne.n	8001290 <Read_Keypad+0x1e0>
	    KEY = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]
	}
	if (ROW == 4 && COL == 3) {                  //Case for GO key pressed
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	2b04      	cmp	r3, #4
 8001294:	d104      	bne.n	80012a0 <Read_Keypad+0x1f0>
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	2b03      	cmp	r3, #3
 800129a:	d101      	bne.n	80012a0 <Read_Keypad+0x1f0>
	    KEY = 11;
 800129c:	230b      	movs	r3, #11
 800129e:	617b      	str	r3, [r7, #20]
	}
	if (ROW == 4 && COL == 4) {                  //Case for key D pressed
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	2b04      	cmp	r3, #4
 80012a4:	d104      	bne.n	80012b0 <Read_Keypad+0x200>
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	2b04      	cmp	r3, #4
 80012aa:	d101      	bne.n	80012b0 <Read_Keypad+0x200>
	    KEY = 12;
 80012ac:	230c      	movs	r3, #12
 80012ae:	617b      	str	r3, [r7, #20]
	}
	if (ROW == 0 && COL == 0) {                  //Case for no key pressed
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d104      	bne.n	80012c0 <Read_Keypad+0x210>
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d101      	bne.n	80012c0 <Read_Keypad+0x210>
		KEY = 12;
 80012bc:	230c      	movs	r3, #12
 80012be:	617b      	str	r3, [r7, #20]
	}

    return KEY;                                  //Return whatever key was pressed
 80012c0:	697b      	ldr	r3, [r7, #20]
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3728      	adds	r7, #40	; 0x28
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	48000c00 	.word	0x48000c00

080012d0 <main>:
//global variables for arrays---------------NEED TO TEST
int SINE_LUT[MAX];
int POS_RAMP_LUT[MAX];
int NEG_RAMP_LUT[MAX];

int main(void) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
	//Peripheral Initialization
	Keypad_init();
 80012d6:	f7ff fe97 	bl	8001008 <Keypad_init>
	LCD_config();
 80012da:	f7ff fcd3 	bl	8000c84 <LCD_config>
	LCD_init();
 80012de:	f7ff fd0b 	bl	8000cf8 <LCD_init>
	DAC_init();
 80012e2:	f7ff fc0b 	bl	8000afc <DAC_init>
	SPI_init();
 80012e6:	f7ff fc47 	bl	8000b78 <SPI_init>
	Display_Init();
 80012ea:	f7ff fdb7 	bl	8000e5c <Display_Init>

	//Initialization
	HAL_Init();
 80012ee:	f000 fbac 	bl	8001a4a <HAL_Init>
	SystemClock_Config();
 80012f2:	f000 fa57 	bl	80017a4 <SystemClock_Config>

	//Generates and updates GLOBAL LUT Arrays
	for (int wtype = 1; wtype < 4; wtype++) {
 80012f6:	2301      	movs	r3, #1
 80012f8:	607b      	str	r3, [r7, #4]
 80012fa:	e03d      	b.n	8001378 <main+0xa8>
		for (int data_gen = 0; data_gen < MAX; data_gen++) {
 80012fc:	2300      	movs	r3, #0
 80012fe:	603b      	str	r3, [r7, #0]
 8001300:	e033      	b.n	800136a <main+0x9a>
			switch (wtype) {
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2b03      	cmp	r3, #3
 8001306:	d021      	beq.n	800134c <main+0x7c>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2b03      	cmp	r3, #3
 800130c:	dc2a      	bgt.n	8001364 <main+0x94>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d003      	beq.n	800131c <main+0x4c>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2b02      	cmp	r3, #2
 8001318:	d00c      	beq.n	8001334 <main+0x64>
 800131a:	e023      	b.n	8001364 <main+0x94>
			case 1:	//generates values for SIN_LUT
				SINE_LUT[data_gen] = gen_array(MAX, data_gen, wtype);
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	6839      	ldr	r1, [r7, #0]
 8001320:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001324:	f000 faf8 	bl	8001918 <gen_array>
 8001328:	4602      	mov	r2, r0
 800132a:	493a      	ldr	r1, [pc, #232]	; (8001414 <main+0x144>)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				break;
 8001332:	e017      	b.n	8001364 <main+0x94>

			case 2:	//generates values for POS_RAMP_LUT
				POS_RAMP_LUT[data_gen] = gen_array(MAX, data_gen, wtype);
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	6839      	ldr	r1, [r7, #0]
 8001338:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800133c:	f000 faec 	bl	8001918 <gen_array>
 8001340:	4602      	mov	r2, r0
 8001342:	4935      	ldr	r1, [pc, #212]	; (8001418 <main+0x148>)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				break;
 800134a:	e00b      	b.n	8001364 <main+0x94>

			case 3:	//generates values for NEG_RAMP_LUT
				NEG_RAMP_LUT[data_gen] = gen_array(MAX, data_gen, wtype);
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	6839      	ldr	r1, [r7, #0]
 8001350:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001354:	f000 fae0 	bl	8001918 <gen_array>
 8001358:	4602      	mov	r2, r0
 800135a:	4930      	ldr	r1, [pc, #192]	; (800141c <main+0x14c>)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				break;
 8001362:	bf00      	nop
		for (int data_gen = 0; data_gen < MAX; data_gen++) {
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	3301      	adds	r3, #1
 8001368:	603b      	str	r3, [r7, #0]
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001370:	dbc7      	blt.n	8001302 <main+0x32>
	for (int wtype = 1; wtype < 4; wtype++) {
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	3301      	adds	r3, #1
 8001376:	607b      	str	r3, [r7, #4]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2b03      	cmp	r3, #3
 800137c:	ddbe      	ble.n	80012fc <main+0x2c>
			}
		}
	}

	//Interrupt Enable
	setup_TIM2();
 800137e:	f000 f9b9 	bl	80016f4 <setup_TIM2>

	while (1) {
		//-----------------DETECT KEYPAD------------------
		Get_User_Input();
 8001382:	f000 f855 	bl	8001430 <Get_User_Input>

		//-----------------DAC WRITE OUTPUT---------------
		if (point_local < MAX) {	//point_local gets updated per IRQ
 8001386:	4b26      	ldr	r3, [pc, #152]	; (8001420 <main+0x150>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800138e:	da3c      	bge.n	800140a <main+0x13a>
			switch (wave_type) {
 8001390:	4b24      	ldr	r3, [pc, #144]	; (8001424 <main+0x154>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	3b01      	subs	r3, #1
 8001396:	2b03      	cmp	r3, #3
 8001398:	d8f3      	bhi.n	8001382 <main+0xb2>
 800139a:	a201      	add	r2, pc, #4	; (adr r2, 80013a0 <main+0xd0>)
 800139c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013a0:	080013b1 	.word	0x080013b1
 80013a4:	080013c3 	.word	0x080013c3
 80013a8:	080013d5 	.word	0x080013d5
 80013ac:	080013e7 	.word	0x080013e7
			case 1:				//Sinusoids Output
				DAC_write(SINE_LUT[point_local]);
 80013b0:	4b1b      	ldr	r3, [pc, #108]	; (8001420 <main+0x150>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a17      	ldr	r2, [pc, #92]	; (8001414 <main+0x144>)
 80013b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff fc34 	bl	8000c28 <DAC_write>
				break;
 80013c0:	e026      	b.n	8001410 <main+0x140>

			case 2:				//Positive Ramp Output
				DAC_write(POS_RAMP_LUT[point_local]);
 80013c2:	4b17      	ldr	r3, [pc, #92]	; (8001420 <main+0x150>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a14      	ldr	r2, [pc, #80]	; (8001418 <main+0x148>)
 80013c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff fc2b 	bl	8000c28 <DAC_write>
				break;
 80013d2:	e01d      	b.n	8001410 <main+0x140>

			case 3:				//Negative Ramp Output
				DAC_write(NEG_RAMP_LUT[point_local]);
 80013d4:	4b12      	ldr	r3, [pc, #72]	; (8001420 <main+0x150>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a10      	ldr	r2, [pc, #64]	; (800141c <main+0x14c>)
 80013da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff fc22 	bl	8000c28 <DAC_write>
				break;
 80013e4:	e014      	b.n	8001410 <main+0x140>

			case 4:				//Square Wave Output
				if (point_local < duty_array[duty_local]) {
 80013e6:	4b10      	ldr	r3, [pc, #64]	; (8001428 <main+0x158>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a10      	ldr	r2, [pc, #64]	; (800142c <main+0x15c>)
 80013ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80013f0:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <main+0x150>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	dd04      	ble.n	8001402 <main+0x132>
					DAC_write(3000); 		//3 V Output
 80013f8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80013fc:	f7ff fc14 	bl	8000c28 <DAC_write>
				} else
					DAC_write(0);			//0 V Output
				break;
 8001400:	e006      	b.n	8001410 <main+0x140>
					DAC_write(0);			//0 V Output
 8001402:	2000      	movs	r0, #0
 8001404:	f7ff fc10 	bl	8000c28 <DAC_write>
				break;
 8001408:	e002      	b.n	8001410 <main+0x140>
			}
		} else
			point_local = 0;	//resets data array pointer location
 800140a:	4b05      	ldr	r3, [pc, #20]	; (8001420 <main+0x150>)
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
		Get_User_Input();
 8001410:	e7b7      	b.n	8001382 <main+0xb2>
 8001412:	bf00      	nop
 8001414:	2000005c 	.word	0x2000005c
 8001418:	20003edc 	.word	0x20003edc
 800141c:	20007d5c 	.word	0x20007d5c
 8001420:	20000058 	.word	0x20000058
 8001424:	20000000 	.word	0x20000000
 8001428:	20000008 	.word	0x20000008
 800142c:	2000000c 	.word	0x2000000c

08001430 <Get_User_Input>:
	}
}

//Zach's Code
void Get_User_Input(void) {
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
	int Key_Press = Read_Keypad();
 8001436:	f7ff fe3b 	bl	80010b0 <Read_Keypad>
 800143a:	4603      	mov	r3, r0
 800143c:	607b      	str	r3, [r7, #4]

	//---------------DETECTS KEYPRESS TO CHANGE FREQ
	if ((Key_Press == 1) | (Key_Press == 2) | (Key_Press == 3)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2b01      	cmp	r3, #1
 8001442:	bf0c      	ite	eq
 8001444:	2301      	moveq	r3, #1
 8001446:	2300      	movne	r3, #0
 8001448:	b2da      	uxtb	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2b02      	cmp	r3, #2
 800144e:	bf0c      	ite	eq
 8001450:	2301      	moveq	r3, #1
 8001452:	2300      	movne	r3, #0
 8001454:	b2db      	uxtb	r3, r3
 8001456:	4313      	orrs	r3, r2
 8001458:	b2db      	uxtb	r3, r3
 800145a:	461a      	mov	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2b03      	cmp	r3, #3
 8001460:	bf0c      	ite	eq
 8001462:	2301      	moveq	r3, #1
 8001464:	2300      	movne	r3, #0
 8001466:	b2db      	uxtb	r3, r3
 8001468:	4313      	orrs	r3, r2
			| (Key_Press == 4) | (Key_Press == 5)) {
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	2a04      	cmp	r2, #4
 800146e:	bf0c      	ite	eq
 8001470:	2201      	moveq	r2, #1
 8001472:	2200      	movne	r2, #0
 8001474:	b2d2      	uxtb	r2, r2
 8001476:	4313      	orrs	r3, r2
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	2a05      	cmp	r2, #5
 800147c:	bf0c      	ite	eq
 800147e:	2201      	moveq	r2, #1
 8001480:	2200      	movne	r2, #0
 8001482:	b2d2      	uxtb	r2, r2
 8001484:	4313      	orrs	r3, r2
	if ((Key_Press == 1) | (Key_Press == 2) | (Key_Press == 3)
 8001486:	2b00      	cmp	r3, #0
 8001488:	d00f      	beq.n	80014aa <Get_User_Input+0x7a>
		LCD_write_freq(Key_Press);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f7ff fd5a 	bl	8000f44 <LCD_write_freq>
		freq = Key_Press;						//Freq (100 Hz - 500 Hz)
 8001490:	4a89      	ldr	r2, [pc, #548]	; (80016b8 <Get_User_Input+0x288>)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6013      	str	r3, [r2, #0]
		LCD_Command(0x80 | 0x4E);
 8001496:	20ce      	movs	r0, #206	; 0xce
 8001498:	f7ff fc78 	bl	8000d8c <LCD_Command>
		LCD_write_char(Key_Press + 48); //Writes freq to LCD (see function in LCD.c)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	3330      	adds	r3, #48	; 0x30
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff fc93 	bl	8000dd0 <LCD_write_char>
	}

	//---------------DETECTS KEYPRESS TO CHANGE DUTY CYCLE/RAMP POLAIRTY
	if ((Key_Press == 10) | (Key_Press == 11) | (Key_Press == 0)) {
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2b0a      	cmp	r3, #10
 80014ae:	bf0c      	ite	eq
 80014b0:	2301      	moveq	r3, #1
 80014b2:	2300      	movne	r3, #0
 80014b4:	b2da      	uxtb	r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2b0b      	cmp	r3, #11
 80014ba:	bf0c      	ite	eq
 80014bc:	2301      	moveq	r3, #1
 80014be:	2300      	movne	r3, #0
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	4313      	orrs	r3, r2
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	461a      	mov	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	bf0c      	ite	eq
 80014ce:	2301      	moveq	r3, #1
 80014d0:	2300      	movne	r3, #0
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	4313      	orrs	r3, r2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d068      	beq.n	80015ac <Get_User_Input+0x17c>
		if (Key_Press == 10 && wave_type == 3) {	//Decreases Duty cycle if square waveform
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2b0a      	cmp	r3, #10
 80014de:	d11a      	bne.n	8001516 <Get_User_Input+0xe6>
 80014e0:	4b76      	ldr	r3, [pc, #472]	; (80016bc <Get_User_Input+0x28c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2b03      	cmp	r3, #3
 80014e6:	d116      	bne.n	8001516 <Get_User_Input+0xe6>
			duty_local = duty_local - 1;
 80014e8:	4b75      	ldr	r3, [pc, #468]	; (80016c0 <Get_User_Input+0x290>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	3b01      	subs	r3, #1
 80014ee:	4a74      	ldr	r2, [pc, #464]	; (80016c0 <Get_User_Input+0x290>)
 80014f0:	6013      	str	r3, [r2, #0]
			LCD_Command(0x80 | 0x4E);
 80014f2:	20ce      	movs	r0, #206	; 0xce
 80014f4:	f7ff fc4a 	bl	8000d8c <LCD_Command>
			LCD_write_string("*");
 80014f8:	4872      	ldr	r0, [pc, #456]	; (80016c4 <Get_User_Input+0x294>)
 80014fa:	f7ff fc8d 	bl	8000e18 <LCD_write_string>
			if (duty_local < 0) {		//Ensures duty cycle never goes past array
 80014fe:	4b70      	ldr	r3, [pc, #448]	; (80016c0 <Get_User_Input+0x290>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2b00      	cmp	r3, #0
 8001504:	da02      	bge.n	800150c <Get_User_Input+0xdc>
				duty_local = 0;
 8001506:	4b6e      	ldr	r3, [pc, #440]	; (80016c0 <Get_User_Input+0x290>)
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
			}
			LCD_write_duty_cycle(duty_local); //Writes duty cycle to LCD (see function in LCD.c)
 800150c:	4b6c      	ldr	r3, [pc, #432]	; (80016c0 <Get_User_Input+0x290>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff fcc3 	bl	8000e9c <LCD_write_duty_cycle>
		}
		if ((Key_Press == 11) && (wave_type == 3)) { //Case for increasing duty cycle if square waveform
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2b0b      	cmp	r3, #11
 800151a:	d11a      	bne.n	8001552 <Get_User_Input+0x122>
 800151c:	4b67      	ldr	r3, [pc, #412]	; (80016bc <Get_User_Input+0x28c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2b03      	cmp	r3, #3
 8001522:	d116      	bne.n	8001552 <Get_User_Input+0x122>
			duty_local = duty_local + 1;
 8001524:	4b66      	ldr	r3, [pc, #408]	; (80016c0 <Get_User_Input+0x290>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	3301      	adds	r3, #1
 800152a:	4a65      	ldr	r2, [pc, #404]	; (80016c0 <Get_User_Input+0x290>)
 800152c:	6013      	str	r3, [r2, #0]
			LCD_Command(0x80 | 0x4E);
 800152e:	20ce      	movs	r0, #206	; 0xce
 8001530:	f7ff fc2c 	bl	8000d8c <LCD_Command>
			LCD_write_string("#");
 8001534:	4864      	ldr	r0, [pc, #400]	; (80016c8 <Get_User_Input+0x298>)
 8001536:	f7ff fc6f 	bl	8000e18 <LCD_write_string>
			if (duty_local > 8) {		//Ensures duty cycle never goes past array
 800153a:	4b61      	ldr	r3, [pc, #388]	; (80016c0 <Get_User_Input+0x290>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2b08      	cmp	r3, #8
 8001540:	dd02      	ble.n	8001548 <Get_User_Input+0x118>
				duty_local = 8;
 8001542:	4b5f      	ldr	r3, [pc, #380]	; (80016c0 <Get_User_Input+0x290>)
 8001544:	2208      	movs	r2, #8
 8001546:	601a      	str	r2, [r3, #0]
			}
			LCD_write_duty_cycle(duty_local); //Writes duty cycle to LCD (see function in LCD.c)
 8001548:	4b5d      	ldr	r3, [pc, #372]	; (80016c0 <Get_User_Input+0x290>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff fca5 	bl	8000e9c <LCD_write_duty_cycle>
		}
		if (Key_Press == 0) { //Case for setting 50% duty cycle if waveform is square and toggling polarity if sawtooth
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d116      	bne.n	8001586 <Get_User_Input+0x156>
			if (wave_type == 2) {                //toggling polarity if sawtooth
 8001558:	4b58      	ldr	r3, [pc, #352]	; (80016bc <Get_User_Input+0x28c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2b02      	cmp	r3, #2
 800155e:	d109      	bne.n	8001574 <Get_User_Input+0x144>
				wave_type = 3;					 //sets to negative polarity
 8001560:	4b56      	ldr	r3, [pc, #344]	; (80016bc <Get_User_Input+0x28c>)
 8001562:	2203      	movs	r2, #3
 8001564:	601a      	str	r2, [r3, #0]
				LCD_Command(0x80 | 0x40);		 //Cursor Location
 8001566:	20c0      	movs	r0, #192	; 0xc0
 8001568:	f7ff fc10 	bl	8000d8c <LCD_Command>
				LCD_write_string("NEGATIVE");
 800156c:	4857      	ldr	r0, [pc, #348]	; (80016cc <Get_User_Input+0x29c>)
 800156e:	f7ff fc53 	bl	8000e18 <LCD_write_string>
 8001572:	e008      	b.n	8001586 <Get_User_Input+0x156>
			} else {
				wave_type = 2;					//sets to positive polarity
 8001574:	4b51      	ldr	r3, [pc, #324]	; (80016bc <Get_User_Input+0x28c>)
 8001576:	2202      	movs	r2, #2
 8001578:	601a      	str	r2, [r3, #0]
				LCD_Command(0x80 | 0x40);		//Cursor Location
 800157a:	20c0      	movs	r0, #192	; 0xc0
 800157c:	f7ff fc06 	bl	8000d8c <LCD_Command>
				LCD_write_string("POSITIVE");
 8001580:	4853      	ldr	r0, [pc, #332]	; (80016d0 <Get_User_Input+0x2a0>)
 8001582:	f7ff fc49 	bl	8000e18 <LCD_write_string>
			}
		}
		if (wave_type == 4) {        	//Setting 50% duty cycle if square wave
 8001586:	4b4d      	ldr	r3, [pc, #308]	; (80016bc <Get_User_Input+0x28c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2b04      	cmp	r3, #4
 800158c:	d108      	bne.n	80015a0 <Get_User_Input+0x170>
			duty_local = 4;
 800158e:	4b4c      	ldr	r3, [pc, #304]	; (80016c0 <Get_User_Input+0x290>)
 8001590:	2204      	movs	r2, #4
 8001592:	601a      	str	r2, [r3, #0]
			LCD_Command(0x80 | 0x40);	//Sets Cursor
 8001594:	20c0      	movs	r0, #192	; 0xc0
 8001596:	f7ff fbf9 	bl	8000d8c <LCD_Command>
			LCD_write_string("50% DUTY");
 800159a:	484e      	ldr	r0, [pc, #312]	; (80016d4 <Get_User_Input+0x2a4>)
 800159c:	f7ff fc3c 	bl	8000e18 <LCD_write_string>
		}
		LCD_Command(0x80 | 0x4E);
 80015a0:	20ce      	movs	r0, #206	; 0xce
 80015a2:	f7ff fbf3 	bl	8000d8c <LCD_Command>
		LCD_write_string("0");
 80015a6:	484c      	ldr	r0, [pc, #304]	; (80016d8 <Get_User_Input+0x2a8>)
 80015a8:	f7ff fc36 	bl	8000e18 <LCD_write_string>
	}

	//------------------DETECTS KEYPRESS TO CHANGE WAVE OUTPUT
	if ((Key_Press == 6) | (Key_Press == 7) | (Key_Press == 8)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2b06      	cmp	r3, #6
 80015b0:	bf0c      	ite	eq
 80015b2:	2301      	moveq	r3, #1
 80015b4:	2300      	movne	r3, #0
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2b07      	cmp	r3, #7
 80015bc:	bf0c      	ite	eq
 80015be:	2301      	moveq	r3, #1
 80015c0:	2300      	movne	r3, #0
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	4313      	orrs	r3, r2
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	461a      	mov	r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2b08      	cmp	r3, #8
 80015ce:	bf0c      	ite	eq
 80015d0:	2301      	moveq	r3, #1
 80015d2:	2300      	movne	r3, #0
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	4313      	orrs	r3, r2
			| (Key_Press == 9)) {
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	2a09      	cmp	r2, #9
 80015dc:	bf0c      	ite	eq
 80015de:	2201      	moveq	r2, #1
 80015e0:	2200      	movne	r2, #0
 80015e2:	b2d2      	uxtb	r2, r2
 80015e4:	4313      	orrs	r3, r2
	if ((Key_Press == 6) | (Key_Press == 7) | (Key_Press == 8)
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d05e      	beq.n	80016a8 <Get_User_Input+0x278>
		LCD_Command(0x80 | 0x00);		//Sets Cursor
 80015ea:	2080      	movs	r0, #128	; 0x80
 80015ec:	f7ff fbce 	bl	8000d8c <LCD_Command>
		if (Key_Press == 6) {           //Case for setting a sinusoidal waveform
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2b06      	cmp	r3, #6
 80015f4:	d10b      	bne.n	800160e <Get_User_Input+0x1de>
			wave_type = 1;
 80015f6:	4b31      	ldr	r3, [pc, #196]	; (80016bc <Get_User_Input+0x28c>)
 80015f8:	2201      	movs	r2, #1
 80015fa:	601a      	str	r2, [r3, #0]
			LCD_write_string("SIN");
 80015fc:	4837      	ldr	r0, [pc, #220]	; (80016dc <Get_User_Input+0x2ac>)
 80015fe:	f7ff fc0b 	bl	8000e18 <LCD_write_string>
			LCD_Command(0x80 | 0x40);	//Sets Cursor
 8001602:	20c0      	movs	r0, #192	; 0xc0
 8001604:	f7ff fbc2 	bl	8000d8c <LCD_Command>
			LCD_write_string("nnnn PTS");
 8001608:	4835      	ldr	r0, [pc, #212]	; (80016e0 <Get_User_Input+0x2b0>)
 800160a:	f7ff fc05 	bl	8000e18 <LCD_write_string>
		}
		if (Key_Press == 7) {             //Case for setting a sawtooth waveform
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2b07      	cmp	r3, #7
 8001612:	d10b      	bne.n	800162c <Get_User_Input+0x1fc>
			wave_type = 2;				  //Positive Sawtooth
 8001614:	4b29      	ldr	r3, [pc, #164]	; (80016bc <Get_User_Input+0x28c>)
 8001616:	2202      	movs	r2, #2
 8001618:	601a      	str	r2, [r3, #0]
			LCD_write_string("SAW");
 800161a:	4832      	ldr	r0, [pc, #200]	; (80016e4 <Get_User_Input+0x2b4>)
 800161c:	f7ff fbfc 	bl	8000e18 <LCD_write_string>
			LCD_Command(0x80 | 0x40);	//Sets Cursor
 8001620:	20c0      	movs	r0, #192	; 0xc0
 8001622:	f7ff fbb3 	bl	8000d8c <LCD_Command>
			LCD_write_string("POSITIVE");
 8001626:	482a      	ldr	r0, [pc, #168]	; (80016d0 <Get_User_Input+0x2a0>)
 8001628:	f7ff fbf6 	bl	8000e18 <LCD_write_string>

		}
		if (Key_Press == 8) {               //Case for setting a square waveform
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2b08      	cmp	r3, #8
 8001630:	d110      	bne.n	8001654 <Get_User_Input+0x224>
			wave_type = 4;					//Square Wave
 8001632:	4b22      	ldr	r3, [pc, #136]	; (80016bc <Get_User_Input+0x28c>)
 8001634:	2204      	movs	r2, #4
 8001636:	601a      	str	r2, [r3, #0]
			LCD_write_string("SQU");
 8001638:	482b      	ldr	r0, [pc, #172]	; (80016e8 <Get_User_Input+0x2b8>)
 800163a:	f7ff fbed 	bl	8000e18 <LCD_write_string>
			LCD_Command(0x80 | 0x40);	//Sets Cursor
 800163e:	20c0      	movs	r0, #192	; 0xc0
 8001640:	f7ff fba4 	bl	8000d8c <LCD_Command>
			LCD_write_duty_cycle(duty_local);
 8001644:	4b1e      	ldr	r3, [pc, #120]	; (80016c0 <Get_User_Input+0x290>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff fc27 	bl	8000e9c <LCD_write_duty_cycle>
			LCD_write_string("% DUTY");
 800164e:	4827      	ldr	r0, [pc, #156]	; (80016ec <Get_User_Input+0x2bc>)
 8001650:	f7ff fbe2 	bl	8000e18 <LCD_write_string>
		}
		if (Key_Press == 9) {           //Case for resetting to power-on default
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b09      	cmp	r3, #9
 8001658:	d117      	bne.n	800168a <Get_User_Input+0x25a>
			wave_type = 4;				//Resets back to square
 800165a:	4b18      	ldr	r3, [pc, #96]	; (80016bc <Get_User_Input+0x28c>)
 800165c:	2204      	movs	r2, #4
 800165e:	601a      	str	r2, [r3, #0]
			freq = 1;
 8001660:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <Get_User_Input+0x288>)
 8001662:	2201      	movs	r2, #1
 8001664:	601a      	str	r2, [r3, #0]
			duty_local = 4;
 8001666:	4b16      	ldr	r3, [pc, #88]	; (80016c0 <Get_User_Input+0x290>)
 8001668:	2204      	movs	r2, #4
 800166a:	601a      	str	r2, [r3, #0]
			LCD_write_string("SQU");
 800166c:	481e      	ldr	r0, [pc, #120]	; (80016e8 <Get_User_Input+0x2b8>)
 800166e:	f7ff fbd3 	bl	8000e18 <LCD_write_string>
			LCD_Command(0x80 | 0x40);
 8001672:	20c0      	movs	r0, #192	; 0xc0
 8001674:	f7ff fb8a 	bl	8000d8c <LCD_Command>
			LCD_write_string("50% DUTY");
 8001678:	4816      	ldr	r0, [pc, #88]	; (80016d4 <Get_User_Input+0x2a4>)
 800167a:	f7ff fbcd 	bl	8000e18 <LCD_write_string>
			LCD_Command(0x80 | 0x04);
 800167e:	2084      	movs	r0, #132	; 0x84
 8001680:	f7ff fb84 	bl	8000d8c <LCD_Command>
			LCD_write_string("100");
 8001684:	481a      	ldr	r0, [pc, #104]	; (80016f0 <Get_User_Input+0x2c0>)
 8001686:	f7ff fbc7 	bl	8000e18 <LCD_write_string>
		}
		LCD_Command(0x80 | 0x4E);
 800168a:	20ce      	movs	r0, #206	; 0xce
 800168c:	f7ff fb7e 	bl	8000d8c <LCD_Command>
		LCD_write_char(Key_Press + 48);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	b2db      	uxtb	r3, r3
 8001694:	3330      	adds	r3, #48	; 0x30
 8001696:	b2db      	uxtb	r3, r3
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff fb99 	bl	8000dd0 <LCD_write_char>
	}
	while (Key_Press != 12) {
 800169e:	e003      	b.n	80016a8 <Get_User_Input+0x278>
		Key_Press = Read_Keypad();
 80016a0:	f7ff fd06 	bl	80010b0 <Read_Keypad>
 80016a4:	4603      	mov	r3, r0
 80016a6:	607b      	str	r3, [r7, #4]
	while (Key_Press != 12) {
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2b0c      	cmp	r3, #12
 80016ac:	d1f8      	bne.n	80016a0 <Get_User_Input+0x270>
	}
}
 80016ae:	bf00      	nop
 80016b0:	bf00      	nop
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000004 	.word	0x20000004
 80016bc:	20000000 	.word	0x20000000
 80016c0:	20000008 	.word	0x20000008
 80016c4:	08003b40 	.word	0x08003b40
 80016c8:	08003b44 	.word	0x08003b44
 80016cc:	08003b48 	.word	0x08003b48
 80016d0:	08003b54 	.word	0x08003b54
 80016d4:	08003b60 	.word	0x08003b60
 80016d8:	08003b6c 	.word	0x08003b6c
 80016dc:	08003b70 	.word	0x08003b70
 80016e0:	08003b74 	.word	0x08003b74
 80016e4:	08003b80 	.word	0x08003b80
 80016e8:	08003b84 	.word	0x08003b84
 80016ec:	08003b88 	.word	0x08003b88
 80016f0:	08003b90 	.word	0x08003b90

080016f4 <setup_TIM2>:

//Interrupt Timer Enable
void setup_TIM2() {
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;           // enable clock for TIM2
 80016f8:	4b17      	ldr	r3, [pc, #92]	; (8001758 <setup_TIM2+0x64>)
 80016fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fc:	4a16      	ldr	r2, [pc, #88]	; (8001758 <setup_TIM2+0x64>)
 80016fe:	f043 0301 	orr.w	r3, r3, #1
 8001702:	6593      	str	r3, [r2, #88]	; 0x58
	TIM2->DIER |= (TIM_DIER_CC1IE | TIM_DIER_UIE); // enable event gen, rcv CCR1
 8001704:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800170e:	f043 0303 	orr.w	r3, r3, #3
 8001712:	60d3      	str	r3, [r2, #12]
	TIM2->ARR = TICKS;                             // ARR = T = counts @4MHz
 8001714:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001718:	225a      	movs	r2, #90	; 0x5a
 800171a:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->SR &= ~(TIM_SR_CC1IF | TIM_SR_UIF);      // clr IRQ flag in status reg
 800171c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001720:	691b      	ldr	r3, [r3, #16]
 8001722:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001726:	f023 0303 	bic.w	r3, r3, #3
 800172a:	6113      	str	r3, [r2, #16]
	NVIC->ISER[0] |= (1 << (TIM2_IRQn & 0x1F));     // set NVIC interrupt: 0x1F
 800172c:	4b0b      	ldr	r3, [pc, #44]	; (800175c <setup_TIM2+0x68>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a0a      	ldr	r2, [pc, #40]	; (800175c <setup_TIM2+0x68>)
 8001732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001736:	6013      	str	r3, [r2, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001738:	b662      	cpsie	i
}
 800173a:	bf00      	nop
	__enable_irq();                                 // global IRQ enable
	TIM2->CR1 |= TIM_CR1_CEN;                       // start TIM2 CR1
 800173c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001746:	f043 0301 	orr.w	r3, r3, #1
 800174a:	6013      	str	r3, [r2, #0]
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	40021000 	.word	0x40021000
 800175c:	e000e100 	.word	0xe000e100

08001760 <TIM2_IRQHandler>:

//Code to tweak to write to DAC
void TIM2_IRQHandler(void) {
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
	if (TIM2->SR & TIM_SR_UIF) {
 8001764:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001768:	691b      	ldr	r3, [r3, #16]
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	2b00      	cmp	r3, #0
 8001770:	d00e      	beq.n	8001790 <TIM2_IRQHandler+0x30>
		TIM2->SR &= ~(TIM_SR_UIF);		  //Clears Status Register
 8001772:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001776:	691b      	ldr	r3, [r3, #16]
 8001778:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800177c:	f023 0301 	bic.w	r3, r3, #1
 8001780:	6113      	str	r3, [r2, #16]
		point_local = point_local + freq; //update data array pointer location
 8001782:	4b06      	ldr	r3, [pc, #24]	; (800179c <TIM2_IRQHandler+0x3c>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <TIM2_IRQHandler+0x40>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4413      	add	r3, r2
 800178c:	4a03      	ldr	r2, [pc, #12]	; (800179c <TIM2_IRQHandler+0x3c>)
 800178e:	6013      	str	r3, [r2, #0]
	}
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	20000058 	.word	0x20000058
 80017a0:	20000004 	.word	0x20000004

080017a4 <SystemClock_Config>:

void SystemClock_Config(void) {
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b096      	sub	sp, #88	; 0x58
 80017a8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80017aa:	f107 0314 	add.w	r3, r7, #20
 80017ae:	2244      	movs	r2, #68	; 0x44
 80017b0:	2100      	movs	r1, #0
 80017b2:	4618      	mov	r0, r3
 80017b4:	f001 f932 	bl	8002a1c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80017b8:	463b      	mov	r3, r7
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	605a      	str	r2, [r3, #4]
 80017c0:	609a      	str	r2, [r3, #8]
 80017c2:	60da      	str	r2, [r3, #12]
 80017c4:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 80017c6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80017ca:	f000 faa7 	bl	8001d1c <HAL_PWREx_ControlVoltageScaling>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 80017d4:	f000 f838 	bl	8001848 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80017d8:	2310      	movs	r3, #16
 80017da:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80017dc:	2301      	movs	r3, #1
 80017de:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80017e4:	2360      	movs	r3, #96	; 0x60
 80017e6:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017e8:	2302      	movs	r3, #2
 80017ea:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80017ec:	2301      	movs	r3, #1
 80017ee:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80017f0:	2301      	movs	r3, #1
 80017f2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 18;
 80017f4:	2312      	movs	r3, #18
 80017f6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017f8:	2302      	movs	r3, #2
 80017fa:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80017fc:	2302      	movs	r3, #2
 80017fe:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001800:	2302      	movs	r3, #2
 8001802:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	4618      	mov	r0, r3
 800180a:	f000 fadd 	bl	8001dc8 <HAL_RCC_OscConfig>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <SystemClock_Config+0x74>
		Error_Handler();
 8001814:	f000 f818 	bl	8001848 <Error_Handler>
	}

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001818:	230f      	movs	r3, #15
 800181a:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800181c:	2303      	movs	r3, #3
 800181e:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001820:	2300      	movs	r3, #0
 8001822:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001824:	2300      	movs	r3, #0
 8001826:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001828:	2300      	movs	r3, #0
 800182a:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800182c:	463b      	mov	r3, r7
 800182e:	2102      	movs	r1, #2
 8001830:	4618      	mov	r0, r3
 8001832:	f000 fee3 	bl	80025fc <HAL_RCC_ClockConfig>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <SystemClock_Config+0x9c>
		Error_Handler();
 800183c:	f000 f804 	bl	8001848 <Error_Handler>
	}
}
 8001840:	bf00      	nop
 8001842:	3758      	adds	r7, #88	; 0x58
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <Error_Handler>:

void Error_Handler(void) {
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800184c:	b672      	cpsid	i
}
 800184e:	bf00      	nop
	__disable_irq();
	while (1) {
 8001850:	e7fe      	b.n	8001850 <Error_Handler+0x8>
	...

08001854 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800185a:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <HAL_MspInit+0x44>)
 800185c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800185e:	4a0e      	ldr	r2, [pc, #56]	; (8001898 <HAL_MspInit+0x44>)
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	6613      	str	r3, [r2, #96]	; 0x60
 8001866:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <HAL_MspInit+0x44>)
 8001868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	607b      	str	r3, [r7, #4]
 8001870:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001872:	4b09      	ldr	r3, [pc, #36]	; (8001898 <HAL_MspInit+0x44>)
 8001874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001876:	4a08      	ldr	r2, [pc, #32]	; (8001898 <HAL_MspInit+0x44>)
 8001878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800187c:	6593      	str	r3, [r2, #88]	; 0x58
 800187e:	4b06      	ldr	r3, [pc, #24]	; (8001898 <HAL_MspInit+0x44>)
 8001880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001886:	603b      	str	r3, [r7, #0]
 8001888:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	40021000 	.word	0x40021000

0800189c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018a0:	e7fe      	b.n	80018a0 <NMI_Handler+0x4>

080018a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018a2:	b480      	push	{r7}
 80018a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018a6:	e7fe      	b.n	80018a6 <HardFault_Handler+0x4>

080018a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018ac:	e7fe      	b.n	80018ac <MemManage_Handler+0x4>

080018ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018b2:	e7fe      	b.n	80018b2 <BusFault_Handler+0x4>

080018b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018b8:	e7fe      	b.n	80018b8 <UsageFault_Handler+0x4>

080018ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018e8:	f000 f904 	bl	8001af4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018ec:	bf00      	nop
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <SystemInit+0x20>)
 80018f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018fa:	4a05      	ldr	r2, [pc, #20]	; (8001910 <SystemInit+0x20>)
 80018fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001900:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	e000ed00 	.word	0xe000ed00
 8001914:	00000000 	.word	0x00000000

08001918 <gen_array>:

#define PI 3.1415926

//ISSUES: How to return a populated array generated by math function
//seems like it is always stuck in this functions
int gen_array(int max_points, int point, int type) {
 8001918:	b5b0      	push	{r4, r5, r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
	int val;
	switch (type) {
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2b03      	cmp	r3, #3
 8001928:	d04b      	beq.n	80019c2 <gen_array+0xaa>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2b03      	cmp	r3, #3
 800192e:	dc55      	bgt.n	80019dc <gen_array+0xc4>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d003      	beq.n	800193e <gen_array+0x26>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b02      	cmp	r3, #2
 800193a:	d038      	beq.n	80019ae <gen_array+0x96>
 800193c:	e04e      	b.n	80019dc <gen_array+0xc4>
	//generates values for
	case 1:
		val = 1500 * sin(2 * PI * point / max_points) + 1500;
 800193e:	68b8      	ldr	r0, [r7, #8]
 8001940:	f7fe fdb0 	bl	80004a4 <__aeabi_i2d>
 8001944:	a328      	add	r3, pc, #160	; (adr r3, 80019e8 <gen_array+0xd0>)
 8001946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194a:	f7fe fe15 	bl	8000578 <__aeabi_dmul>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	4614      	mov	r4, r2
 8001954:	461d      	mov	r5, r3
 8001956:	68f8      	ldr	r0, [r7, #12]
 8001958:	f7fe fda4 	bl	80004a4 <__aeabi_i2d>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4620      	mov	r0, r4
 8001962:	4629      	mov	r1, r5
 8001964:	f7fe ff32 	bl	80007cc <__aeabi_ddiv>
 8001968:	4602      	mov	r2, r0
 800196a:	460b      	mov	r3, r1
 800196c:	ec43 2b17 	vmov	d7, r2, r3
 8001970:	eeb0 0a47 	vmov.f32	s0, s14
 8001974:	eef0 0a67 	vmov.f32	s1, s15
 8001978:	f001 f85a 	bl	8002a30 <sin>
 800197c:	ec51 0b10 	vmov	r0, r1, d0
 8001980:	a31b      	add	r3, pc, #108	; (adr r3, 80019f0 <gen_array+0xd8>)
 8001982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001986:	f7fe fdf7 	bl	8000578 <__aeabi_dmul>
 800198a:	4602      	mov	r2, r0
 800198c:	460b      	mov	r3, r1
 800198e:	4610      	mov	r0, r2
 8001990:	4619      	mov	r1, r3
 8001992:	a317      	add	r3, pc, #92	; (adr r3, 80019f0 <gen_array+0xd8>)
 8001994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001998:	f7fe fc38 	bl	800020c <__adddf3>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	4610      	mov	r0, r2
 80019a2:	4619      	mov	r1, r3
 80019a4:	f7ff f882 	bl	8000aac <__aeabi_d2iz>
 80019a8:	4603      	mov	r3, r0
 80019aa:	617b      	str	r3, [r7, #20]
		break;
 80019ac:	e016      	b.n	80019dc <gen_array+0xc4>

	case 2:
		val = 3000 * point / max_points;
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80019b4:	fb03 f202 	mul.w	r2, r3, r2
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80019be:	617b      	str	r3, [r7, #20]
		break;
 80019c0:	e00c      	b.n	80019dc <gen_array+0xc4>

	case 3:
		val = 3000 - 3000 * point / max_points;
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80019c8:	fb03 f202 	mul.w	r2, r3, r2
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80019d2:	f5c3 633b 	rsb	r3, r3, #2992	; 0xbb0
 80019d6:	3308      	adds	r3, #8
 80019d8:	617b      	str	r3, [r7, #20]
		break;
 80019da:	bf00      	nop
	}
	return val;
 80019dc:	697b      	ldr	r3, [r7, #20]
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3718      	adds	r7, #24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bdb0      	pop	{r4, r5, r7, pc}
 80019e6:	bf00      	nop
 80019e8:	4d12d84a 	.word	0x4d12d84a
 80019ec:	401921fb 	.word	0x401921fb
 80019f0:	00000000 	.word	0x00000000
 80019f4:	40977000 	.word	0x40977000

080019f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80019f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a30 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019fc:	f7ff ff78 	bl	80018f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a00:	480c      	ldr	r0, [pc, #48]	; (8001a34 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a02:	490d      	ldr	r1, [pc, #52]	; (8001a38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a04:	4a0d      	ldr	r2, [pc, #52]	; (8001a3c <LoopForever+0xe>)
  movs r3, #0
 8001a06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a08:	e002      	b.n	8001a10 <LoopCopyDataInit>

08001a0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a0e:	3304      	adds	r3, #4

08001a10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a14:	d3f9      	bcc.n	8001a0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a16:	4a0a      	ldr	r2, [pc, #40]	; (8001a40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a18:	4c0a      	ldr	r4, [pc, #40]	; (8001a44 <LoopForever+0x16>)
  movs r3, #0
 8001a1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a1c:	e001      	b.n	8001a22 <LoopFillZerobss>

08001a1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a20:	3204      	adds	r2, #4

08001a22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a24:	d3fb      	bcc.n	8001a1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a26:	f000 ffd5 	bl	80029d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a2a:	f7ff fc51 	bl	80012d0 <main>

08001a2e <LoopForever>:

LoopForever:
    b LoopForever
 8001a2e:	e7fe      	b.n	8001a2e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a30:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001a34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a38:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8001a3c:	08003db8 	.word	0x08003db8
  ldr r2, =_sbss
 8001a40:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8001a44:	2000bbe0 	.word	0x2000bbe0

08001a48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a48:	e7fe      	b.n	8001a48 <ADC1_2_IRQHandler>

08001a4a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a50:	2300      	movs	r3, #0
 8001a52:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a54:	2003      	movs	r0, #3
 8001a56:	f000 f91f 	bl	8001c98 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a5a:	200f      	movs	r0, #15
 8001a5c:	f000 f80e 	bl	8001a7c <HAL_InitTick>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d002      	beq.n	8001a6c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	71fb      	strb	r3, [r7, #7]
 8001a6a:	e001      	b.n	8001a70 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a6c:	f7ff fef2 	bl	8001854 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a70:	79fb      	ldrb	r3, [r7, #7]
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
	...

08001a7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a84:	2300      	movs	r3, #0
 8001a86:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a88:	4b17      	ldr	r3, [pc, #92]	; (8001ae8 <HAL_InitTick+0x6c>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d023      	beq.n	8001ad8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a90:	4b16      	ldr	r3, [pc, #88]	; (8001aec <HAL_InitTick+0x70>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	4b14      	ldr	r3, [pc, #80]	; (8001ae8 <HAL_InitTick+0x6c>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	4619      	mov	r1, r3
 8001a9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f000 f91d 	bl	8001ce6 <HAL_SYSTICK_Config>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d10f      	bne.n	8001ad2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2b0f      	cmp	r3, #15
 8001ab6:	d809      	bhi.n	8001acc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ab8:	2200      	movs	r2, #0
 8001aba:	6879      	ldr	r1, [r7, #4]
 8001abc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac0:	f000 f8f5 	bl	8001cae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ac4:	4a0a      	ldr	r2, [pc, #40]	; (8001af0 <HAL_InitTick+0x74>)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6013      	str	r3, [r2, #0]
 8001aca:	e007      	b.n	8001adc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	73fb      	strb	r3, [r7, #15]
 8001ad0:	e004      	b.n	8001adc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	73fb      	strb	r3, [r7, #15]
 8001ad6:	e001      	b.n	8001adc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	20000038 	.word	0x20000038
 8001aec:	20000030 	.word	0x20000030
 8001af0:	20000034 	.word	0x20000034

08001af4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001af8:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <HAL_IncTick+0x20>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	461a      	mov	r2, r3
 8001afe:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <HAL_IncTick+0x24>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4413      	add	r3, r2
 8001b04:	4a04      	ldr	r2, [pc, #16]	; (8001b18 <HAL_IncTick+0x24>)
 8001b06:	6013      	str	r3, [r2, #0]
}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	20000038 	.word	0x20000038
 8001b18:	2000bbdc 	.word	0x2000bbdc

08001b1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b20:	4b03      	ldr	r3, [pc, #12]	; (8001b30 <HAL_GetTick+0x14>)
 8001b22:	681b      	ldr	r3, [r3, #0]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	2000bbdc 	.word	0x2000bbdc

08001b34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b44:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <__NVIC_SetPriorityGrouping+0x44>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b4a:	68ba      	ldr	r2, [r7, #8]
 8001b4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b50:	4013      	ands	r3, r2
 8001b52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b66:	4a04      	ldr	r2, [pc, #16]	; (8001b78 <__NVIC_SetPriorityGrouping+0x44>)
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	60d3      	str	r3, [r2, #12]
}
 8001b6c:	bf00      	nop
 8001b6e:	3714      	adds	r7, #20
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b80:	4b04      	ldr	r3, [pc, #16]	; (8001b94 <__NVIC_GetPriorityGrouping+0x18>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	0a1b      	lsrs	r3, r3, #8
 8001b86:	f003 0307 	and.w	r3, r3, #7
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	6039      	str	r1, [r7, #0]
 8001ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	db0a      	blt.n	8001bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	b2da      	uxtb	r2, r3
 8001bb0:	490c      	ldr	r1, [pc, #48]	; (8001be4 <__NVIC_SetPriority+0x4c>)
 8001bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb6:	0112      	lsls	r2, r2, #4
 8001bb8:	b2d2      	uxtb	r2, r2
 8001bba:	440b      	add	r3, r1
 8001bbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bc0:	e00a      	b.n	8001bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	4908      	ldr	r1, [pc, #32]	; (8001be8 <__NVIC_SetPriority+0x50>)
 8001bc8:	79fb      	ldrb	r3, [r7, #7]
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	3b04      	subs	r3, #4
 8001bd0:	0112      	lsls	r2, r2, #4
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	761a      	strb	r2, [r3, #24]
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	e000e100 	.word	0xe000e100
 8001be8:	e000ed00 	.word	0xe000ed00

08001bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b089      	sub	sp, #36	; 0x24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	f1c3 0307 	rsb	r3, r3, #7
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	bf28      	it	cs
 8001c0a:	2304      	movcs	r3, #4
 8001c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	3304      	adds	r3, #4
 8001c12:	2b06      	cmp	r3, #6
 8001c14:	d902      	bls.n	8001c1c <NVIC_EncodePriority+0x30>
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	3b03      	subs	r3, #3
 8001c1a:	e000      	b.n	8001c1e <NVIC_EncodePriority+0x32>
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c20:	f04f 32ff 	mov.w	r2, #4294967295
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43da      	mvns	r2, r3
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	401a      	ands	r2, r3
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c34:	f04f 31ff 	mov.w	r1, #4294967295
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3e:	43d9      	mvns	r1, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c44:	4313      	orrs	r3, r2
         );
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3724      	adds	r7, #36	; 0x24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c64:	d301      	bcc.n	8001c6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c66:	2301      	movs	r3, #1
 8001c68:	e00f      	b.n	8001c8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c6a:	4a0a      	ldr	r2, [pc, #40]	; (8001c94 <SysTick_Config+0x40>)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c72:	210f      	movs	r1, #15
 8001c74:	f04f 30ff 	mov.w	r0, #4294967295
 8001c78:	f7ff ff8e 	bl	8001b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c7c:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <SysTick_Config+0x40>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c82:	4b04      	ldr	r3, [pc, #16]	; (8001c94 <SysTick_Config+0x40>)
 8001c84:	2207      	movs	r2, #7
 8001c86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	e000e010 	.word	0xe000e010

08001c98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff ff47 	bl	8001b34 <__NVIC_SetPriorityGrouping>
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b086      	sub	sp, #24
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	60b9      	str	r1, [r7, #8]
 8001cb8:	607a      	str	r2, [r7, #4]
 8001cba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cc0:	f7ff ff5c 	bl	8001b7c <__NVIC_GetPriorityGrouping>
 8001cc4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	68b9      	ldr	r1, [r7, #8]
 8001cca:	6978      	ldr	r0, [r7, #20]
 8001ccc:	f7ff ff8e 	bl	8001bec <NVIC_EncodePriority>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cd6:	4611      	mov	r1, r2
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff ff5d 	bl	8001b98 <__NVIC_SetPriority>
}
 8001cde:	bf00      	nop
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b082      	sub	sp, #8
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7ff ffb0 	bl	8001c54 <SysTick_Config>
 8001cf4:	4603      	mov	r3, r0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
	...

08001d00 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001d04:	4b04      	ldr	r3, [pc, #16]	; (8001d18 <HAL_PWREx_GetVoltageRange+0x18>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	40007000 	.word	0x40007000

08001d1c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d2a:	d130      	bne.n	8001d8e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d2c:	4b23      	ldr	r3, [pc, #140]	; (8001dbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d38:	d038      	beq.n	8001dac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d3a:	4b20      	ldr	r3, [pc, #128]	; (8001dbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d42:	4a1e      	ldr	r2, [pc, #120]	; (8001dbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d48:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d4a:	4b1d      	ldr	r3, [pc, #116]	; (8001dc0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2232      	movs	r2, #50	; 0x32
 8001d50:	fb02 f303 	mul.w	r3, r2, r3
 8001d54:	4a1b      	ldr	r2, [pc, #108]	; (8001dc4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001d56:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5a:	0c9b      	lsrs	r3, r3, #18
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d60:	e002      	b.n	8001d68 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	3b01      	subs	r3, #1
 8001d66:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d68:	4b14      	ldr	r3, [pc, #80]	; (8001dbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d6a:	695b      	ldr	r3, [r3, #20]
 8001d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d74:	d102      	bne.n	8001d7c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d1f2      	bne.n	8001d62 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d7c:	4b0f      	ldr	r3, [pc, #60]	; (8001dbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d7e:	695b      	ldr	r3, [r3, #20]
 8001d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d88:	d110      	bne.n	8001dac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e00f      	b.n	8001dae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d8e:	4b0b      	ldr	r3, [pc, #44]	; (8001dbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d9a:	d007      	beq.n	8001dac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d9c:	4b07      	ldr	r3, [pc, #28]	; (8001dbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001da4:	4a05      	ldr	r2, [pc, #20]	; (8001dbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001da6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001daa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3714      	adds	r7, #20
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	40007000 	.word	0x40007000
 8001dc0:	20000030 	.word	0x20000030
 8001dc4:	431bde83 	.word	0x431bde83

08001dc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b088      	sub	sp, #32
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d102      	bne.n	8001ddc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	f000 bc08 	b.w	80025ec <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ddc:	4b96      	ldr	r3, [pc, #600]	; (8002038 <HAL_RCC_OscConfig+0x270>)
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f003 030c 	and.w	r3, r3, #12
 8001de4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001de6:	4b94      	ldr	r3, [pc, #592]	; (8002038 <HAL_RCC_OscConfig+0x270>)
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	f003 0303 	and.w	r3, r3, #3
 8001dee:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0310 	and.w	r3, r3, #16
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f000 80e4 	beq.w	8001fc6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d007      	beq.n	8001e14 <HAL_RCC_OscConfig+0x4c>
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	2b0c      	cmp	r3, #12
 8001e08:	f040 808b 	bne.w	8001f22 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	f040 8087 	bne.w	8001f22 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e14:	4b88      	ldr	r3, [pc, #544]	; (8002038 <HAL_RCC_OscConfig+0x270>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d005      	beq.n	8001e2c <HAL_RCC_OscConfig+0x64>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d101      	bne.n	8001e2c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e3df      	b.n	80025ec <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a1a      	ldr	r2, [r3, #32]
 8001e30:	4b81      	ldr	r3, [pc, #516]	; (8002038 <HAL_RCC_OscConfig+0x270>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0308 	and.w	r3, r3, #8
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d004      	beq.n	8001e46 <HAL_RCC_OscConfig+0x7e>
 8001e3c:	4b7e      	ldr	r3, [pc, #504]	; (8002038 <HAL_RCC_OscConfig+0x270>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e44:	e005      	b.n	8001e52 <HAL_RCC_OscConfig+0x8a>
 8001e46:	4b7c      	ldr	r3, [pc, #496]	; (8002038 <HAL_RCC_OscConfig+0x270>)
 8001e48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e4c:	091b      	lsrs	r3, r3, #4
 8001e4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d223      	bcs.n	8001e9e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a1b      	ldr	r3, [r3, #32]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f000 fd5a 	bl	8002914 <RCC_SetFlashLatencyFromMSIRange>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e3c0      	b.n	80025ec <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e6a:	4b73      	ldr	r3, [pc, #460]	; (8002038 <HAL_RCC_OscConfig+0x270>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a72      	ldr	r2, [pc, #456]	; (8002038 <HAL_RCC_OscConfig+0x270>)
 8001e70:	f043 0308 	orr.w	r3, r3, #8
 8001e74:	6013      	str	r3, [r2, #0]
 8001e76:	4b70      	ldr	r3, [pc, #448]	; (8002038 <HAL_RCC_OscConfig+0x270>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a1b      	ldr	r3, [r3, #32]
 8001e82:	496d      	ldr	r1, [pc, #436]	; (8002038 <HAL_RCC_OscConfig+0x270>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e88:	4b6b      	ldr	r3, [pc, #428]	; (8002038 <HAL_RCC_OscConfig+0x270>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	69db      	ldr	r3, [r3, #28]
 8001e94:	021b      	lsls	r3, r3, #8
 8001e96:	4968      	ldr	r1, [pc, #416]	; (8002038 <HAL_RCC_OscConfig+0x270>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	604b      	str	r3, [r1, #4]
 8001e9c:	e025      	b.n	8001eea <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e9e:	4b66      	ldr	r3, [pc, #408]	; (8002038 <HAL_RCC_OscConfig+0x270>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a65      	ldr	r2, [pc, #404]	; (8002038 <HAL_RCC_OscConfig+0x270>)
 8001ea4:	f043 0308 	orr.w	r3, r3, #8
 8001ea8:	6013      	str	r3, [r2, #0]
 8001eaa:	4b63      	ldr	r3, [pc, #396]	; (8002038 <HAL_RCC_OscConfig+0x270>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a1b      	ldr	r3, [r3, #32]
 8001eb6:	4960      	ldr	r1, [pc, #384]	; (8002038 <HAL_RCC_OscConfig+0x270>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ebc:	4b5e      	ldr	r3, [pc, #376]	; (8002038 <HAL_RCC_OscConfig+0x270>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	69db      	ldr	r3, [r3, #28]
 8001ec8:	021b      	lsls	r3, r3, #8
 8001eca:	495b      	ldr	r1, [pc, #364]	; (8002038 <HAL_RCC_OscConfig+0x270>)
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d109      	bne.n	8001eea <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a1b      	ldr	r3, [r3, #32]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f000 fd1a 	bl	8002914 <RCC_SetFlashLatencyFromMSIRange>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e380      	b.n	80025ec <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001eea:	f000 fc87 	bl	80027fc <HAL_RCC_GetSysClockFreq>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	4b51      	ldr	r3, [pc, #324]	; (8002038 <HAL_RCC_OscConfig+0x270>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	091b      	lsrs	r3, r3, #4
 8001ef6:	f003 030f 	and.w	r3, r3, #15
 8001efa:	4950      	ldr	r1, [pc, #320]	; (800203c <HAL_RCC_OscConfig+0x274>)
 8001efc:	5ccb      	ldrb	r3, [r1, r3]
 8001efe:	f003 031f 	and.w	r3, r3, #31
 8001f02:	fa22 f303 	lsr.w	r3, r2, r3
 8001f06:	4a4e      	ldr	r2, [pc, #312]	; (8002040 <HAL_RCC_OscConfig+0x278>)
 8001f08:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001f0a:	4b4e      	ldr	r3, [pc, #312]	; (8002044 <HAL_RCC_OscConfig+0x27c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff fdb4 	bl	8001a7c <HAL_InitTick>
 8001f14:	4603      	mov	r3, r0
 8001f16:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001f18:	7bfb      	ldrb	r3, [r7, #15]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d052      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001f1e:	7bfb      	ldrb	r3, [r7, #15]
 8001f20:	e364      	b.n	80025ec <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d032      	beq.n	8001f90 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f2a:	4b43      	ldr	r3, [pc, #268]	; (8002038 <HAL_RCC_OscConfig+0x270>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a42      	ldr	r2, [pc, #264]	; (8002038 <HAL_RCC_OscConfig+0x270>)
 8001f30:	f043 0301 	orr.w	r3, r3, #1
 8001f34:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f36:	f7ff fdf1 	bl	8001b1c <HAL_GetTick>
 8001f3a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f3c:	e008      	b.n	8001f50 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f3e:	f7ff fded 	bl	8001b1c <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e34d      	b.n	80025ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f50:	4b39      	ldr	r3, [pc, #228]	; (8002038 <HAL_RCC_OscConfig+0x270>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d0f0      	beq.n	8001f3e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f5c:	4b36      	ldr	r3, [pc, #216]	; (8002038 <HAL_RCC_OscConfig+0x270>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a35      	ldr	r2, [pc, #212]	; (8002038 <HAL_RCC_OscConfig+0x270>)
 8001f62:	f043 0308 	orr.w	r3, r3, #8
 8001f66:	6013      	str	r3, [r2, #0]
 8001f68:	4b33      	ldr	r3, [pc, #204]	; (8002038 <HAL_RCC_OscConfig+0x270>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a1b      	ldr	r3, [r3, #32]
 8001f74:	4930      	ldr	r1, [pc, #192]	; (8002038 <HAL_RCC_OscConfig+0x270>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f7a:	4b2f      	ldr	r3, [pc, #188]	; (8002038 <HAL_RCC_OscConfig+0x270>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	021b      	lsls	r3, r3, #8
 8001f88:	492b      	ldr	r1, [pc, #172]	; (8002038 <HAL_RCC_OscConfig+0x270>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	604b      	str	r3, [r1, #4]
 8001f8e:	e01a      	b.n	8001fc6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f90:	4b29      	ldr	r3, [pc, #164]	; (8002038 <HAL_RCC_OscConfig+0x270>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a28      	ldr	r2, [pc, #160]	; (8002038 <HAL_RCC_OscConfig+0x270>)
 8001f96:	f023 0301 	bic.w	r3, r3, #1
 8001f9a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f9c:	f7ff fdbe 	bl	8001b1c <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fa4:	f7ff fdba 	bl	8001b1c <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e31a      	b.n	80025ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001fb6:	4b20      	ldr	r3, [pc, #128]	; (8002038 <HAL_RCC_OscConfig+0x270>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1f0      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x1dc>
 8001fc2:	e000      	b.n	8001fc6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001fc4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d073      	beq.n	80020ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	2b08      	cmp	r3, #8
 8001fd6:	d005      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x21c>
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	2b0c      	cmp	r3, #12
 8001fdc:	d10e      	bne.n	8001ffc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	2b03      	cmp	r3, #3
 8001fe2:	d10b      	bne.n	8001ffc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fe4:	4b14      	ldr	r3, [pc, #80]	; (8002038 <HAL_RCC_OscConfig+0x270>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d063      	beq.n	80020b8 <HAL_RCC_OscConfig+0x2f0>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d15f      	bne.n	80020b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e2f7      	b.n	80025ec <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002004:	d106      	bne.n	8002014 <HAL_RCC_OscConfig+0x24c>
 8002006:	4b0c      	ldr	r3, [pc, #48]	; (8002038 <HAL_RCC_OscConfig+0x270>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a0b      	ldr	r2, [pc, #44]	; (8002038 <HAL_RCC_OscConfig+0x270>)
 800200c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002010:	6013      	str	r3, [r2, #0]
 8002012:	e025      	b.n	8002060 <HAL_RCC_OscConfig+0x298>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800201c:	d114      	bne.n	8002048 <HAL_RCC_OscConfig+0x280>
 800201e:	4b06      	ldr	r3, [pc, #24]	; (8002038 <HAL_RCC_OscConfig+0x270>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a05      	ldr	r2, [pc, #20]	; (8002038 <HAL_RCC_OscConfig+0x270>)
 8002024:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002028:	6013      	str	r3, [r2, #0]
 800202a:	4b03      	ldr	r3, [pc, #12]	; (8002038 <HAL_RCC_OscConfig+0x270>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a02      	ldr	r2, [pc, #8]	; (8002038 <HAL_RCC_OscConfig+0x270>)
 8002030:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002034:	6013      	str	r3, [r2, #0]
 8002036:	e013      	b.n	8002060 <HAL_RCC_OscConfig+0x298>
 8002038:	40021000 	.word	0x40021000
 800203c:	08003b94 	.word	0x08003b94
 8002040:	20000030 	.word	0x20000030
 8002044:	20000034 	.word	0x20000034
 8002048:	4ba0      	ldr	r3, [pc, #640]	; (80022cc <HAL_RCC_OscConfig+0x504>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a9f      	ldr	r2, [pc, #636]	; (80022cc <HAL_RCC_OscConfig+0x504>)
 800204e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002052:	6013      	str	r3, [r2, #0]
 8002054:	4b9d      	ldr	r3, [pc, #628]	; (80022cc <HAL_RCC_OscConfig+0x504>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a9c      	ldr	r2, [pc, #624]	; (80022cc <HAL_RCC_OscConfig+0x504>)
 800205a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800205e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d013      	beq.n	8002090 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002068:	f7ff fd58 	bl	8001b1c <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800206e:	e008      	b.n	8002082 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002070:	f7ff fd54 	bl	8001b1c <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b64      	cmp	r3, #100	; 0x64
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e2b4      	b.n	80025ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002082:	4b92      	ldr	r3, [pc, #584]	; (80022cc <HAL_RCC_OscConfig+0x504>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d0f0      	beq.n	8002070 <HAL_RCC_OscConfig+0x2a8>
 800208e:	e014      	b.n	80020ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002090:	f7ff fd44 	bl	8001b1c <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002098:	f7ff fd40 	bl	8001b1c <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b64      	cmp	r3, #100	; 0x64
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e2a0      	b.n	80025ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020aa:	4b88      	ldr	r3, [pc, #544]	; (80022cc <HAL_RCC_OscConfig+0x504>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1f0      	bne.n	8002098 <HAL_RCC_OscConfig+0x2d0>
 80020b6:	e000      	b.n	80020ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d060      	beq.n	8002188 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	2b04      	cmp	r3, #4
 80020ca:	d005      	beq.n	80020d8 <HAL_RCC_OscConfig+0x310>
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	2b0c      	cmp	r3, #12
 80020d0:	d119      	bne.n	8002106 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d116      	bne.n	8002106 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020d8:	4b7c      	ldr	r3, [pc, #496]	; (80022cc <HAL_RCC_OscConfig+0x504>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d005      	beq.n	80020f0 <HAL_RCC_OscConfig+0x328>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d101      	bne.n	80020f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e27d      	b.n	80025ec <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020f0:	4b76      	ldr	r3, [pc, #472]	; (80022cc <HAL_RCC_OscConfig+0x504>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	061b      	lsls	r3, r3, #24
 80020fe:	4973      	ldr	r1, [pc, #460]	; (80022cc <HAL_RCC_OscConfig+0x504>)
 8002100:	4313      	orrs	r3, r2
 8002102:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002104:	e040      	b.n	8002188 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d023      	beq.n	8002156 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800210e:	4b6f      	ldr	r3, [pc, #444]	; (80022cc <HAL_RCC_OscConfig+0x504>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a6e      	ldr	r2, [pc, #440]	; (80022cc <HAL_RCC_OscConfig+0x504>)
 8002114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002118:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211a:	f7ff fcff 	bl	8001b1c <HAL_GetTick>
 800211e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002120:	e008      	b.n	8002134 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002122:	f7ff fcfb 	bl	8001b1c <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d901      	bls.n	8002134 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e25b      	b.n	80025ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002134:	4b65      	ldr	r3, [pc, #404]	; (80022cc <HAL_RCC_OscConfig+0x504>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800213c:	2b00      	cmp	r3, #0
 800213e:	d0f0      	beq.n	8002122 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002140:	4b62      	ldr	r3, [pc, #392]	; (80022cc <HAL_RCC_OscConfig+0x504>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	061b      	lsls	r3, r3, #24
 800214e:	495f      	ldr	r1, [pc, #380]	; (80022cc <HAL_RCC_OscConfig+0x504>)
 8002150:	4313      	orrs	r3, r2
 8002152:	604b      	str	r3, [r1, #4]
 8002154:	e018      	b.n	8002188 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002156:	4b5d      	ldr	r3, [pc, #372]	; (80022cc <HAL_RCC_OscConfig+0x504>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a5c      	ldr	r2, [pc, #368]	; (80022cc <HAL_RCC_OscConfig+0x504>)
 800215c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002160:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002162:	f7ff fcdb 	bl	8001b1c <HAL_GetTick>
 8002166:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002168:	e008      	b.n	800217c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800216a:	f7ff fcd7 	bl	8001b1c <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d901      	bls.n	800217c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e237      	b.n	80025ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800217c:	4b53      	ldr	r3, [pc, #332]	; (80022cc <HAL_RCC_OscConfig+0x504>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002184:	2b00      	cmp	r3, #0
 8002186:	d1f0      	bne.n	800216a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0308 	and.w	r3, r3, #8
 8002190:	2b00      	cmp	r3, #0
 8002192:	d03c      	beq.n	800220e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	695b      	ldr	r3, [r3, #20]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d01c      	beq.n	80021d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800219c:	4b4b      	ldr	r3, [pc, #300]	; (80022cc <HAL_RCC_OscConfig+0x504>)
 800219e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021a2:	4a4a      	ldr	r2, [pc, #296]	; (80022cc <HAL_RCC_OscConfig+0x504>)
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ac:	f7ff fcb6 	bl	8001b1c <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021b4:	f7ff fcb2 	bl	8001b1c <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e212      	b.n	80025ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021c6:	4b41      	ldr	r3, [pc, #260]	; (80022cc <HAL_RCC_OscConfig+0x504>)
 80021c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d0ef      	beq.n	80021b4 <HAL_RCC_OscConfig+0x3ec>
 80021d4:	e01b      	b.n	800220e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021d6:	4b3d      	ldr	r3, [pc, #244]	; (80022cc <HAL_RCC_OscConfig+0x504>)
 80021d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021dc:	4a3b      	ldr	r2, [pc, #236]	; (80022cc <HAL_RCC_OscConfig+0x504>)
 80021de:	f023 0301 	bic.w	r3, r3, #1
 80021e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e6:	f7ff fc99 	bl	8001b1c <HAL_GetTick>
 80021ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021ec:	e008      	b.n	8002200 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021ee:	f7ff fc95 	bl	8001b1c <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d901      	bls.n	8002200 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e1f5      	b.n	80025ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002200:	4b32      	ldr	r3, [pc, #200]	; (80022cc <HAL_RCC_OscConfig+0x504>)
 8002202:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1ef      	bne.n	80021ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0304 	and.w	r3, r3, #4
 8002216:	2b00      	cmp	r3, #0
 8002218:	f000 80a6 	beq.w	8002368 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800221c:	2300      	movs	r3, #0
 800221e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002220:	4b2a      	ldr	r3, [pc, #168]	; (80022cc <HAL_RCC_OscConfig+0x504>)
 8002222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d10d      	bne.n	8002248 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800222c:	4b27      	ldr	r3, [pc, #156]	; (80022cc <HAL_RCC_OscConfig+0x504>)
 800222e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002230:	4a26      	ldr	r2, [pc, #152]	; (80022cc <HAL_RCC_OscConfig+0x504>)
 8002232:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002236:	6593      	str	r3, [r2, #88]	; 0x58
 8002238:	4b24      	ldr	r3, [pc, #144]	; (80022cc <HAL_RCC_OscConfig+0x504>)
 800223a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800223c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002240:	60bb      	str	r3, [r7, #8]
 8002242:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002244:	2301      	movs	r3, #1
 8002246:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002248:	4b21      	ldr	r3, [pc, #132]	; (80022d0 <HAL_RCC_OscConfig+0x508>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002250:	2b00      	cmp	r3, #0
 8002252:	d118      	bne.n	8002286 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002254:	4b1e      	ldr	r3, [pc, #120]	; (80022d0 <HAL_RCC_OscConfig+0x508>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a1d      	ldr	r2, [pc, #116]	; (80022d0 <HAL_RCC_OscConfig+0x508>)
 800225a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800225e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002260:	f7ff fc5c 	bl	8001b1c <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002268:	f7ff fc58 	bl	8001b1c <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e1b8      	b.n	80025ec <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800227a:	4b15      	ldr	r3, [pc, #84]	; (80022d0 <HAL_RCC_OscConfig+0x508>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002282:	2b00      	cmp	r3, #0
 8002284:	d0f0      	beq.n	8002268 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d108      	bne.n	80022a0 <HAL_RCC_OscConfig+0x4d8>
 800228e:	4b0f      	ldr	r3, [pc, #60]	; (80022cc <HAL_RCC_OscConfig+0x504>)
 8002290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002294:	4a0d      	ldr	r2, [pc, #52]	; (80022cc <HAL_RCC_OscConfig+0x504>)
 8002296:	f043 0301 	orr.w	r3, r3, #1
 800229a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800229e:	e029      	b.n	80022f4 <HAL_RCC_OscConfig+0x52c>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	2b05      	cmp	r3, #5
 80022a6:	d115      	bne.n	80022d4 <HAL_RCC_OscConfig+0x50c>
 80022a8:	4b08      	ldr	r3, [pc, #32]	; (80022cc <HAL_RCC_OscConfig+0x504>)
 80022aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ae:	4a07      	ldr	r2, [pc, #28]	; (80022cc <HAL_RCC_OscConfig+0x504>)
 80022b0:	f043 0304 	orr.w	r3, r3, #4
 80022b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022b8:	4b04      	ldr	r3, [pc, #16]	; (80022cc <HAL_RCC_OscConfig+0x504>)
 80022ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022be:	4a03      	ldr	r2, [pc, #12]	; (80022cc <HAL_RCC_OscConfig+0x504>)
 80022c0:	f043 0301 	orr.w	r3, r3, #1
 80022c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022c8:	e014      	b.n	80022f4 <HAL_RCC_OscConfig+0x52c>
 80022ca:	bf00      	nop
 80022cc:	40021000 	.word	0x40021000
 80022d0:	40007000 	.word	0x40007000
 80022d4:	4b9d      	ldr	r3, [pc, #628]	; (800254c <HAL_RCC_OscConfig+0x784>)
 80022d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022da:	4a9c      	ldr	r2, [pc, #624]	; (800254c <HAL_RCC_OscConfig+0x784>)
 80022dc:	f023 0301 	bic.w	r3, r3, #1
 80022e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022e4:	4b99      	ldr	r3, [pc, #612]	; (800254c <HAL_RCC_OscConfig+0x784>)
 80022e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ea:	4a98      	ldr	r2, [pc, #608]	; (800254c <HAL_RCC_OscConfig+0x784>)
 80022ec:	f023 0304 	bic.w	r3, r3, #4
 80022f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d016      	beq.n	800232a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022fc:	f7ff fc0e 	bl	8001b1c <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002302:	e00a      	b.n	800231a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002304:	f7ff fc0a 	bl	8001b1c <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002312:	4293      	cmp	r3, r2
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e168      	b.n	80025ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800231a:	4b8c      	ldr	r3, [pc, #560]	; (800254c <HAL_RCC_OscConfig+0x784>)
 800231c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d0ed      	beq.n	8002304 <HAL_RCC_OscConfig+0x53c>
 8002328:	e015      	b.n	8002356 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800232a:	f7ff fbf7 	bl	8001b1c <HAL_GetTick>
 800232e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002330:	e00a      	b.n	8002348 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002332:	f7ff fbf3 	bl	8001b1c <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002340:	4293      	cmp	r3, r2
 8002342:	d901      	bls.n	8002348 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e151      	b.n	80025ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002348:	4b80      	ldr	r3, [pc, #512]	; (800254c <HAL_RCC_OscConfig+0x784>)
 800234a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1ed      	bne.n	8002332 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002356:	7ffb      	ldrb	r3, [r7, #31]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d105      	bne.n	8002368 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800235c:	4b7b      	ldr	r3, [pc, #492]	; (800254c <HAL_RCC_OscConfig+0x784>)
 800235e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002360:	4a7a      	ldr	r2, [pc, #488]	; (800254c <HAL_RCC_OscConfig+0x784>)
 8002362:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002366:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0320 	and.w	r3, r3, #32
 8002370:	2b00      	cmp	r3, #0
 8002372:	d03c      	beq.n	80023ee <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002378:	2b00      	cmp	r3, #0
 800237a:	d01c      	beq.n	80023b6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800237c:	4b73      	ldr	r3, [pc, #460]	; (800254c <HAL_RCC_OscConfig+0x784>)
 800237e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002382:	4a72      	ldr	r2, [pc, #456]	; (800254c <HAL_RCC_OscConfig+0x784>)
 8002384:	f043 0301 	orr.w	r3, r3, #1
 8002388:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800238c:	f7ff fbc6 	bl	8001b1c <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002394:	f7ff fbc2 	bl	8001b1c <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e122      	b.n	80025ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80023a6:	4b69      	ldr	r3, [pc, #420]	; (800254c <HAL_RCC_OscConfig+0x784>)
 80023a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d0ef      	beq.n	8002394 <HAL_RCC_OscConfig+0x5cc>
 80023b4:	e01b      	b.n	80023ee <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80023b6:	4b65      	ldr	r3, [pc, #404]	; (800254c <HAL_RCC_OscConfig+0x784>)
 80023b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023bc:	4a63      	ldr	r2, [pc, #396]	; (800254c <HAL_RCC_OscConfig+0x784>)
 80023be:	f023 0301 	bic.w	r3, r3, #1
 80023c2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023c6:	f7ff fba9 	bl	8001b1c <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023ce:	f7ff fba5 	bl	8001b1c <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e105      	b.n	80025ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80023e0:	4b5a      	ldr	r3, [pc, #360]	; (800254c <HAL_RCC_OscConfig+0x784>)
 80023e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1ef      	bne.n	80023ce <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f000 80f9 	beq.w	80025ea <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	f040 80cf 	bne.w	80025a0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002402:	4b52      	ldr	r3, [pc, #328]	; (800254c <HAL_RCC_OscConfig+0x784>)
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	f003 0203 	and.w	r2, r3, #3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002412:	429a      	cmp	r2, r3
 8002414:	d12c      	bne.n	8002470 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002420:	3b01      	subs	r3, #1
 8002422:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002424:	429a      	cmp	r2, r3
 8002426:	d123      	bne.n	8002470 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002432:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002434:	429a      	cmp	r2, r3
 8002436:	d11b      	bne.n	8002470 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002442:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002444:	429a      	cmp	r2, r3
 8002446:	d113      	bne.n	8002470 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002452:	085b      	lsrs	r3, r3, #1
 8002454:	3b01      	subs	r3, #1
 8002456:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002458:	429a      	cmp	r2, r3
 800245a:	d109      	bne.n	8002470 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002466:	085b      	lsrs	r3, r3, #1
 8002468:	3b01      	subs	r3, #1
 800246a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800246c:	429a      	cmp	r2, r3
 800246e:	d071      	beq.n	8002554 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	2b0c      	cmp	r3, #12
 8002474:	d068      	beq.n	8002548 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002476:	4b35      	ldr	r3, [pc, #212]	; (800254c <HAL_RCC_OscConfig+0x784>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d105      	bne.n	800248e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002482:	4b32      	ldr	r3, [pc, #200]	; (800254c <HAL_RCC_OscConfig+0x784>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e0ac      	b.n	80025ec <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002492:	4b2e      	ldr	r3, [pc, #184]	; (800254c <HAL_RCC_OscConfig+0x784>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a2d      	ldr	r2, [pc, #180]	; (800254c <HAL_RCC_OscConfig+0x784>)
 8002498:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800249c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800249e:	f7ff fb3d 	bl	8001b1c <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024a4:	e008      	b.n	80024b8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024a6:	f7ff fb39 	bl	8001b1c <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e099      	b.n	80025ec <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024b8:	4b24      	ldr	r3, [pc, #144]	; (800254c <HAL_RCC_OscConfig+0x784>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1f0      	bne.n	80024a6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024c4:	4b21      	ldr	r3, [pc, #132]	; (800254c <HAL_RCC_OscConfig+0x784>)
 80024c6:	68da      	ldr	r2, [r3, #12]
 80024c8:	4b21      	ldr	r3, [pc, #132]	; (8002550 <HAL_RCC_OscConfig+0x788>)
 80024ca:	4013      	ands	r3, r2
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80024d4:	3a01      	subs	r2, #1
 80024d6:	0112      	lsls	r2, r2, #4
 80024d8:	4311      	orrs	r1, r2
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80024de:	0212      	lsls	r2, r2, #8
 80024e0:	4311      	orrs	r1, r2
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80024e6:	0852      	lsrs	r2, r2, #1
 80024e8:	3a01      	subs	r2, #1
 80024ea:	0552      	lsls	r2, r2, #21
 80024ec:	4311      	orrs	r1, r2
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80024f2:	0852      	lsrs	r2, r2, #1
 80024f4:	3a01      	subs	r2, #1
 80024f6:	0652      	lsls	r2, r2, #25
 80024f8:	4311      	orrs	r1, r2
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80024fe:	06d2      	lsls	r2, r2, #27
 8002500:	430a      	orrs	r2, r1
 8002502:	4912      	ldr	r1, [pc, #72]	; (800254c <HAL_RCC_OscConfig+0x784>)
 8002504:	4313      	orrs	r3, r2
 8002506:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002508:	4b10      	ldr	r3, [pc, #64]	; (800254c <HAL_RCC_OscConfig+0x784>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a0f      	ldr	r2, [pc, #60]	; (800254c <HAL_RCC_OscConfig+0x784>)
 800250e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002512:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002514:	4b0d      	ldr	r3, [pc, #52]	; (800254c <HAL_RCC_OscConfig+0x784>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	4a0c      	ldr	r2, [pc, #48]	; (800254c <HAL_RCC_OscConfig+0x784>)
 800251a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800251e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002520:	f7ff fafc 	bl	8001b1c <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002528:	f7ff faf8 	bl	8001b1c <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e058      	b.n	80025ec <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800253a:	4b04      	ldr	r3, [pc, #16]	; (800254c <HAL_RCC_OscConfig+0x784>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0f0      	beq.n	8002528 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002546:	e050      	b.n	80025ea <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e04f      	b.n	80025ec <HAL_RCC_OscConfig+0x824>
 800254c:	40021000 	.word	0x40021000
 8002550:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002554:	4b27      	ldr	r3, [pc, #156]	; (80025f4 <HAL_RCC_OscConfig+0x82c>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d144      	bne.n	80025ea <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002560:	4b24      	ldr	r3, [pc, #144]	; (80025f4 <HAL_RCC_OscConfig+0x82c>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a23      	ldr	r2, [pc, #140]	; (80025f4 <HAL_RCC_OscConfig+0x82c>)
 8002566:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800256a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800256c:	4b21      	ldr	r3, [pc, #132]	; (80025f4 <HAL_RCC_OscConfig+0x82c>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	4a20      	ldr	r2, [pc, #128]	; (80025f4 <HAL_RCC_OscConfig+0x82c>)
 8002572:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002576:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002578:	f7ff fad0 	bl	8001b1c <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002580:	f7ff facc 	bl	8001b1c <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e02c      	b.n	80025ec <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002592:	4b18      	ldr	r3, [pc, #96]	; (80025f4 <HAL_RCC_OscConfig+0x82c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0f0      	beq.n	8002580 <HAL_RCC_OscConfig+0x7b8>
 800259e:	e024      	b.n	80025ea <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	2b0c      	cmp	r3, #12
 80025a4:	d01f      	beq.n	80025e6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025a6:	4b13      	ldr	r3, [pc, #76]	; (80025f4 <HAL_RCC_OscConfig+0x82c>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a12      	ldr	r2, [pc, #72]	; (80025f4 <HAL_RCC_OscConfig+0x82c>)
 80025ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b2:	f7ff fab3 	bl	8001b1c <HAL_GetTick>
 80025b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025b8:	e008      	b.n	80025cc <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ba:	f7ff faaf 	bl	8001b1c <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d901      	bls.n	80025cc <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e00f      	b.n	80025ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025cc:	4b09      	ldr	r3, [pc, #36]	; (80025f4 <HAL_RCC_OscConfig+0x82c>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1f0      	bne.n	80025ba <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80025d8:	4b06      	ldr	r3, [pc, #24]	; (80025f4 <HAL_RCC_OscConfig+0x82c>)
 80025da:	68da      	ldr	r2, [r3, #12]
 80025dc:	4905      	ldr	r1, [pc, #20]	; (80025f4 <HAL_RCC_OscConfig+0x82c>)
 80025de:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <HAL_RCC_OscConfig+0x830>)
 80025e0:	4013      	ands	r3, r2
 80025e2:	60cb      	str	r3, [r1, #12]
 80025e4:	e001      	b.n	80025ea <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e000      	b.n	80025ec <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3720      	adds	r7, #32
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40021000 	.word	0x40021000
 80025f8:	feeefffc 	.word	0xfeeefffc

080025fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d101      	bne.n	8002610 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e0e7      	b.n	80027e0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002610:	4b75      	ldr	r3, [pc, #468]	; (80027e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	429a      	cmp	r2, r3
 800261c:	d910      	bls.n	8002640 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261e:	4b72      	ldr	r3, [pc, #456]	; (80027e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f023 0207 	bic.w	r2, r3, #7
 8002626:	4970      	ldr	r1, [pc, #448]	; (80027e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	4313      	orrs	r3, r2
 800262c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800262e:	4b6e      	ldr	r3, [pc, #440]	; (80027e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0307 	and.w	r3, r3, #7
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	429a      	cmp	r2, r3
 800263a:	d001      	beq.n	8002640 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e0cf      	b.n	80027e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d010      	beq.n	800266e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	4b66      	ldr	r3, [pc, #408]	; (80027ec <HAL_RCC_ClockConfig+0x1f0>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002658:	429a      	cmp	r2, r3
 800265a:	d908      	bls.n	800266e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800265c:	4b63      	ldr	r3, [pc, #396]	; (80027ec <HAL_RCC_ClockConfig+0x1f0>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	4960      	ldr	r1, [pc, #384]	; (80027ec <HAL_RCC_ClockConfig+0x1f0>)
 800266a:	4313      	orrs	r3, r2
 800266c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b00      	cmp	r3, #0
 8002678:	d04c      	beq.n	8002714 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	2b03      	cmp	r3, #3
 8002680:	d107      	bne.n	8002692 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002682:	4b5a      	ldr	r3, [pc, #360]	; (80027ec <HAL_RCC_ClockConfig+0x1f0>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d121      	bne.n	80026d2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e0a6      	b.n	80027e0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	2b02      	cmp	r3, #2
 8002698:	d107      	bne.n	80026aa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800269a:	4b54      	ldr	r3, [pc, #336]	; (80027ec <HAL_RCC_ClockConfig+0x1f0>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d115      	bne.n	80026d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e09a      	b.n	80027e0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d107      	bne.n	80026c2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026b2:	4b4e      	ldr	r3, [pc, #312]	; (80027ec <HAL_RCC_ClockConfig+0x1f0>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d109      	bne.n	80026d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e08e      	b.n	80027e0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026c2:	4b4a      	ldr	r3, [pc, #296]	; (80027ec <HAL_RCC_ClockConfig+0x1f0>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e086      	b.n	80027e0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026d2:	4b46      	ldr	r3, [pc, #280]	; (80027ec <HAL_RCC_ClockConfig+0x1f0>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f023 0203 	bic.w	r2, r3, #3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	4943      	ldr	r1, [pc, #268]	; (80027ec <HAL_RCC_ClockConfig+0x1f0>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026e4:	f7ff fa1a 	bl	8001b1c <HAL_GetTick>
 80026e8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ea:	e00a      	b.n	8002702 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026ec:	f7ff fa16 	bl	8001b1c <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e06e      	b.n	80027e0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002702:	4b3a      	ldr	r3, [pc, #232]	; (80027ec <HAL_RCC_ClockConfig+0x1f0>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f003 020c 	and.w	r2, r3, #12
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	429a      	cmp	r2, r3
 8002712:	d1eb      	bne.n	80026ec <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d010      	beq.n	8002742 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689a      	ldr	r2, [r3, #8]
 8002724:	4b31      	ldr	r3, [pc, #196]	; (80027ec <HAL_RCC_ClockConfig+0x1f0>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800272c:	429a      	cmp	r2, r3
 800272e:	d208      	bcs.n	8002742 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002730:	4b2e      	ldr	r3, [pc, #184]	; (80027ec <HAL_RCC_ClockConfig+0x1f0>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	492b      	ldr	r1, [pc, #172]	; (80027ec <HAL_RCC_ClockConfig+0x1f0>)
 800273e:	4313      	orrs	r3, r2
 8002740:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002742:	4b29      	ldr	r3, [pc, #164]	; (80027e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	429a      	cmp	r2, r3
 800274e:	d210      	bcs.n	8002772 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002750:	4b25      	ldr	r3, [pc, #148]	; (80027e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f023 0207 	bic.w	r2, r3, #7
 8002758:	4923      	ldr	r1, [pc, #140]	; (80027e8 <HAL_RCC_ClockConfig+0x1ec>)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	4313      	orrs	r3, r2
 800275e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002760:	4b21      	ldr	r3, [pc, #132]	; (80027e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0307 	and.w	r3, r3, #7
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	429a      	cmp	r2, r3
 800276c:	d001      	beq.n	8002772 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e036      	b.n	80027e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0304 	and.w	r3, r3, #4
 800277a:	2b00      	cmp	r3, #0
 800277c:	d008      	beq.n	8002790 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800277e:	4b1b      	ldr	r3, [pc, #108]	; (80027ec <HAL_RCC_ClockConfig+0x1f0>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	4918      	ldr	r1, [pc, #96]	; (80027ec <HAL_RCC_ClockConfig+0x1f0>)
 800278c:	4313      	orrs	r3, r2
 800278e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0308 	and.w	r3, r3, #8
 8002798:	2b00      	cmp	r3, #0
 800279a:	d009      	beq.n	80027b0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800279c:	4b13      	ldr	r3, [pc, #76]	; (80027ec <HAL_RCC_ClockConfig+0x1f0>)
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	00db      	lsls	r3, r3, #3
 80027aa:	4910      	ldr	r1, [pc, #64]	; (80027ec <HAL_RCC_ClockConfig+0x1f0>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027b0:	f000 f824 	bl	80027fc <HAL_RCC_GetSysClockFreq>
 80027b4:	4602      	mov	r2, r0
 80027b6:	4b0d      	ldr	r3, [pc, #52]	; (80027ec <HAL_RCC_ClockConfig+0x1f0>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	091b      	lsrs	r3, r3, #4
 80027bc:	f003 030f 	and.w	r3, r3, #15
 80027c0:	490b      	ldr	r1, [pc, #44]	; (80027f0 <HAL_RCC_ClockConfig+0x1f4>)
 80027c2:	5ccb      	ldrb	r3, [r1, r3]
 80027c4:	f003 031f 	and.w	r3, r3, #31
 80027c8:	fa22 f303 	lsr.w	r3, r2, r3
 80027cc:	4a09      	ldr	r2, [pc, #36]	; (80027f4 <HAL_RCC_ClockConfig+0x1f8>)
 80027ce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80027d0:	4b09      	ldr	r3, [pc, #36]	; (80027f8 <HAL_RCC_ClockConfig+0x1fc>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff f951 	bl	8001a7c <HAL_InitTick>
 80027da:	4603      	mov	r3, r0
 80027dc:	72fb      	strb	r3, [r7, #11]

  return status;
 80027de:	7afb      	ldrb	r3, [r7, #11]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40022000 	.word	0x40022000
 80027ec:	40021000 	.word	0x40021000
 80027f0:	08003b94 	.word	0x08003b94
 80027f4:	20000030 	.word	0x20000030
 80027f8:	20000034 	.word	0x20000034

080027fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b089      	sub	sp, #36	; 0x24
 8002800:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002802:	2300      	movs	r3, #0
 8002804:	61fb      	str	r3, [r7, #28]
 8002806:	2300      	movs	r3, #0
 8002808:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800280a:	4b3e      	ldr	r3, [pc, #248]	; (8002904 <HAL_RCC_GetSysClockFreq+0x108>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 030c 	and.w	r3, r3, #12
 8002812:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002814:	4b3b      	ldr	r3, [pc, #236]	; (8002904 <HAL_RCC_GetSysClockFreq+0x108>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	f003 0303 	and.w	r3, r3, #3
 800281c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d005      	beq.n	8002830 <HAL_RCC_GetSysClockFreq+0x34>
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	2b0c      	cmp	r3, #12
 8002828:	d121      	bne.n	800286e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d11e      	bne.n	800286e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002830:	4b34      	ldr	r3, [pc, #208]	; (8002904 <HAL_RCC_GetSysClockFreq+0x108>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0308 	and.w	r3, r3, #8
 8002838:	2b00      	cmp	r3, #0
 800283a:	d107      	bne.n	800284c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800283c:	4b31      	ldr	r3, [pc, #196]	; (8002904 <HAL_RCC_GetSysClockFreq+0x108>)
 800283e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002842:	0a1b      	lsrs	r3, r3, #8
 8002844:	f003 030f 	and.w	r3, r3, #15
 8002848:	61fb      	str	r3, [r7, #28]
 800284a:	e005      	b.n	8002858 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800284c:	4b2d      	ldr	r3, [pc, #180]	; (8002904 <HAL_RCC_GetSysClockFreq+0x108>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	091b      	lsrs	r3, r3, #4
 8002852:	f003 030f 	and.w	r3, r3, #15
 8002856:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002858:	4a2b      	ldr	r2, [pc, #172]	; (8002908 <HAL_RCC_GetSysClockFreq+0x10c>)
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002860:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10d      	bne.n	8002884 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800286c:	e00a      	b.n	8002884 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	2b04      	cmp	r3, #4
 8002872:	d102      	bne.n	800287a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002874:	4b25      	ldr	r3, [pc, #148]	; (800290c <HAL_RCC_GetSysClockFreq+0x110>)
 8002876:	61bb      	str	r3, [r7, #24]
 8002878:	e004      	b.n	8002884 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	2b08      	cmp	r3, #8
 800287e:	d101      	bne.n	8002884 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002880:	4b23      	ldr	r3, [pc, #140]	; (8002910 <HAL_RCC_GetSysClockFreq+0x114>)
 8002882:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	2b0c      	cmp	r3, #12
 8002888:	d134      	bne.n	80028f4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800288a:	4b1e      	ldr	r3, [pc, #120]	; (8002904 <HAL_RCC_GetSysClockFreq+0x108>)
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	f003 0303 	and.w	r3, r3, #3
 8002892:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	2b02      	cmp	r3, #2
 8002898:	d003      	beq.n	80028a2 <HAL_RCC_GetSysClockFreq+0xa6>
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	2b03      	cmp	r3, #3
 800289e:	d003      	beq.n	80028a8 <HAL_RCC_GetSysClockFreq+0xac>
 80028a0:	e005      	b.n	80028ae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80028a2:	4b1a      	ldr	r3, [pc, #104]	; (800290c <HAL_RCC_GetSysClockFreq+0x110>)
 80028a4:	617b      	str	r3, [r7, #20]
      break;
 80028a6:	e005      	b.n	80028b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80028a8:	4b19      	ldr	r3, [pc, #100]	; (8002910 <HAL_RCC_GetSysClockFreq+0x114>)
 80028aa:	617b      	str	r3, [r7, #20]
      break;
 80028ac:	e002      	b.n	80028b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	617b      	str	r3, [r7, #20]
      break;
 80028b2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028b4:	4b13      	ldr	r3, [pc, #76]	; (8002904 <HAL_RCC_GetSysClockFreq+0x108>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	091b      	lsrs	r3, r3, #4
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	3301      	adds	r3, #1
 80028c0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80028c2:	4b10      	ldr	r3, [pc, #64]	; (8002904 <HAL_RCC_GetSysClockFreq+0x108>)
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	0a1b      	lsrs	r3, r3, #8
 80028c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028cc:	697a      	ldr	r2, [r7, #20]
 80028ce:	fb03 f202 	mul.w	r2, r3, r2
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80028da:	4b0a      	ldr	r3, [pc, #40]	; (8002904 <HAL_RCC_GetSysClockFreq+0x108>)
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	0e5b      	lsrs	r3, r3, #25
 80028e0:	f003 0303 	and.w	r3, r3, #3
 80028e4:	3301      	adds	r3, #1
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80028f4:	69bb      	ldr	r3, [r7, #24]
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3724      	adds	r7, #36	; 0x24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	40021000 	.word	0x40021000
 8002908:	08003ba4 	.word	0x08003ba4
 800290c:	00f42400 	.word	0x00f42400
 8002910:	007a1200 	.word	0x007a1200

08002914 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800291c:	2300      	movs	r3, #0
 800291e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002920:	4b2a      	ldr	r3, [pc, #168]	; (80029cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d003      	beq.n	8002934 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800292c:	f7ff f9e8 	bl	8001d00 <HAL_PWREx_GetVoltageRange>
 8002930:	6178      	str	r0, [r7, #20]
 8002932:	e014      	b.n	800295e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002934:	4b25      	ldr	r3, [pc, #148]	; (80029cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002938:	4a24      	ldr	r2, [pc, #144]	; (80029cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800293a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800293e:	6593      	str	r3, [r2, #88]	; 0x58
 8002940:	4b22      	ldr	r3, [pc, #136]	; (80029cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002948:	60fb      	str	r3, [r7, #12]
 800294a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800294c:	f7ff f9d8 	bl	8001d00 <HAL_PWREx_GetVoltageRange>
 8002950:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002952:	4b1e      	ldr	r3, [pc, #120]	; (80029cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002956:	4a1d      	ldr	r2, [pc, #116]	; (80029cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002958:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800295c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002964:	d10b      	bne.n	800297e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2b80      	cmp	r3, #128	; 0x80
 800296a:	d919      	bls.n	80029a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2ba0      	cmp	r3, #160	; 0xa0
 8002970:	d902      	bls.n	8002978 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002972:	2302      	movs	r3, #2
 8002974:	613b      	str	r3, [r7, #16]
 8002976:	e013      	b.n	80029a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002978:	2301      	movs	r3, #1
 800297a:	613b      	str	r3, [r7, #16]
 800297c:	e010      	b.n	80029a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2b80      	cmp	r3, #128	; 0x80
 8002982:	d902      	bls.n	800298a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002984:	2303      	movs	r3, #3
 8002986:	613b      	str	r3, [r7, #16]
 8002988:	e00a      	b.n	80029a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2b80      	cmp	r3, #128	; 0x80
 800298e:	d102      	bne.n	8002996 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002990:	2302      	movs	r3, #2
 8002992:	613b      	str	r3, [r7, #16]
 8002994:	e004      	b.n	80029a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2b70      	cmp	r3, #112	; 0x70
 800299a:	d101      	bne.n	80029a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800299c:	2301      	movs	r3, #1
 800299e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80029a0:	4b0b      	ldr	r3, [pc, #44]	; (80029d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f023 0207 	bic.w	r2, r3, #7
 80029a8:	4909      	ldr	r1, [pc, #36]	; (80029d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80029b0:	4b07      	ldr	r3, [pc, #28]	; (80029d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0307 	and.w	r3, r3, #7
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d001      	beq.n	80029c2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e000      	b.n	80029c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3718      	adds	r7, #24
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	40021000 	.word	0x40021000
 80029d0:	40022000 	.word	0x40022000

080029d4 <__libc_init_array>:
 80029d4:	b570      	push	{r4, r5, r6, lr}
 80029d6:	4d0d      	ldr	r5, [pc, #52]	; (8002a0c <__libc_init_array+0x38>)
 80029d8:	4c0d      	ldr	r4, [pc, #52]	; (8002a10 <__libc_init_array+0x3c>)
 80029da:	1b64      	subs	r4, r4, r5
 80029dc:	10a4      	asrs	r4, r4, #2
 80029de:	2600      	movs	r6, #0
 80029e0:	42a6      	cmp	r6, r4
 80029e2:	d109      	bne.n	80029f8 <__libc_init_array+0x24>
 80029e4:	4d0b      	ldr	r5, [pc, #44]	; (8002a14 <__libc_init_array+0x40>)
 80029e6:	4c0c      	ldr	r4, [pc, #48]	; (8002a18 <__libc_init_array+0x44>)
 80029e8:	f001 f86c 	bl	8003ac4 <_init>
 80029ec:	1b64      	subs	r4, r4, r5
 80029ee:	10a4      	asrs	r4, r4, #2
 80029f0:	2600      	movs	r6, #0
 80029f2:	42a6      	cmp	r6, r4
 80029f4:	d105      	bne.n	8002a02 <__libc_init_array+0x2e>
 80029f6:	bd70      	pop	{r4, r5, r6, pc}
 80029f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80029fc:	4798      	blx	r3
 80029fe:	3601      	adds	r6, #1
 8002a00:	e7ee      	b.n	80029e0 <__libc_init_array+0xc>
 8002a02:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a06:	4798      	blx	r3
 8002a08:	3601      	adds	r6, #1
 8002a0a:	e7f2      	b.n	80029f2 <__libc_init_array+0x1e>
 8002a0c:	08003db0 	.word	0x08003db0
 8002a10:	08003db0 	.word	0x08003db0
 8002a14:	08003db0 	.word	0x08003db0
 8002a18:	08003db4 	.word	0x08003db4

08002a1c <memset>:
 8002a1c:	4402      	add	r2, r0
 8002a1e:	4603      	mov	r3, r0
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d100      	bne.n	8002a26 <memset+0xa>
 8002a24:	4770      	bx	lr
 8002a26:	f803 1b01 	strb.w	r1, [r3], #1
 8002a2a:	e7f9      	b.n	8002a20 <memset+0x4>
 8002a2c:	0000      	movs	r0, r0
	...

08002a30 <sin>:
 8002a30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002a32:	ec53 2b10 	vmov	r2, r3, d0
 8002a36:	4828      	ldr	r0, [pc, #160]	; (8002ad8 <sin+0xa8>)
 8002a38:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8002a3c:	4281      	cmp	r1, r0
 8002a3e:	dc07      	bgt.n	8002a50 <sin+0x20>
 8002a40:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8002ad0 <sin+0xa0>
 8002a44:	2000      	movs	r0, #0
 8002a46:	b005      	add	sp, #20
 8002a48:	f85d eb04 	ldr.w	lr, [sp], #4
 8002a4c:	f000 be6c 	b.w	8003728 <__kernel_sin>
 8002a50:	4822      	ldr	r0, [pc, #136]	; (8002adc <sin+0xac>)
 8002a52:	4281      	cmp	r1, r0
 8002a54:	dd09      	ble.n	8002a6a <sin+0x3a>
 8002a56:	ee10 0a10 	vmov	r0, s0
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	f7fd fbd4 	bl	8000208 <__aeabi_dsub>
 8002a60:	ec41 0b10 	vmov	d0, r0, r1
 8002a64:	b005      	add	sp, #20
 8002a66:	f85d fb04 	ldr.w	pc, [sp], #4
 8002a6a:	4668      	mov	r0, sp
 8002a6c:	f000 f838 	bl	8002ae0 <__ieee754_rem_pio2>
 8002a70:	f000 0003 	and.w	r0, r0, #3
 8002a74:	2801      	cmp	r0, #1
 8002a76:	d00c      	beq.n	8002a92 <sin+0x62>
 8002a78:	2802      	cmp	r0, #2
 8002a7a:	d011      	beq.n	8002aa0 <sin+0x70>
 8002a7c:	b9f0      	cbnz	r0, 8002abc <sin+0x8c>
 8002a7e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002a82:	ed9d 0b00 	vldr	d0, [sp]
 8002a86:	2001      	movs	r0, #1
 8002a88:	f000 fe4e 	bl	8003728 <__kernel_sin>
 8002a8c:	ec51 0b10 	vmov	r0, r1, d0
 8002a90:	e7e6      	b.n	8002a60 <sin+0x30>
 8002a92:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002a96:	ed9d 0b00 	vldr	d0, [sp]
 8002a9a:	f000 fa2d 	bl	8002ef8 <__kernel_cos>
 8002a9e:	e7f5      	b.n	8002a8c <sin+0x5c>
 8002aa0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002aa4:	ed9d 0b00 	vldr	d0, [sp]
 8002aa8:	2001      	movs	r0, #1
 8002aaa:	f000 fe3d 	bl	8003728 <__kernel_sin>
 8002aae:	ec53 2b10 	vmov	r2, r3, d0
 8002ab2:	ee10 0a10 	vmov	r0, s0
 8002ab6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8002aba:	e7d1      	b.n	8002a60 <sin+0x30>
 8002abc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002ac0:	ed9d 0b00 	vldr	d0, [sp]
 8002ac4:	f000 fa18 	bl	8002ef8 <__kernel_cos>
 8002ac8:	e7f1      	b.n	8002aae <sin+0x7e>
 8002aca:	bf00      	nop
 8002acc:	f3af 8000 	nop.w
	...
 8002ad8:	3fe921fb 	.word	0x3fe921fb
 8002adc:	7fefffff 	.word	0x7fefffff

08002ae0 <__ieee754_rem_pio2>:
 8002ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ae4:	ed2d 8b02 	vpush	{d8}
 8002ae8:	ec55 4b10 	vmov	r4, r5, d0
 8002aec:	4bca      	ldr	r3, [pc, #808]	; (8002e18 <__ieee754_rem_pio2+0x338>)
 8002aee:	b08b      	sub	sp, #44	; 0x2c
 8002af0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8002af4:	4598      	cmp	r8, r3
 8002af6:	4682      	mov	sl, r0
 8002af8:	9502      	str	r5, [sp, #8]
 8002afa:	dc08      	bgt.n	8002b0e <__ieee754_rem_pio2+0x2e>
 8002afc:	2200      	movs	r2, #0
 8002afe:	2300      	movs	r3, #0
 8002b00:	ed80 0b00 	vstr	d0, [r0]
 8002b04:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8002b08:	f04f 0b00 	mov.w	fp, #0
 8002b0c:	e028      	b.n	8002b60 <__ieee754_rem_pio2+0x80>
 8002b0e:	4bc3      	ldr	r3, [pc, #780]	; (8002e1c <__ieee754_rem_pio2+0x33c>)
 8002b10:	4598      	cmp	r8, r3
 8002b12:	dc78      	bgt.n	8002c06 <__ieee754_rem_pio2+0x126>
 8002b14:	9b02      	ldr	r3, [sp, #8]
 8002b16:	4ec2      	ldr	r6, [pc, #776]	; (8002e20 <__ieee754_rem_pio2+0x340>)
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	ee10 0a10 	vmov	r0, s0
 8002b1e:	a3b0      	add	r3, pc, #704	; (adr r3, 8002de0 <__ieee754_rem_pio2+0x300>)
 8002b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b24:	4629      	mov	r1, r5
 8002b26:	dd39      	ble.n	8002b9c <__ieee754_rem_pio2+0xbc>
 8002b28:	f7fd fb6e 	bl	8000208 <__aeabi_dsub>
 8002b2c:	45b0      	cmp	r8, r6
 8002b2e:	4604      	mov	r4, r0
 8002b30:	460d      	mov	r5, r1
 8002b32:	d01b      	beq.n	8002b6c <__ieee754_rem_pio2+0x8c>
 8002b34:	a3ac      	add	r3, pc, #688	; (adr r3, 8002de8 <__ieee754_rem_pio2+0x308>)
 8002b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b3a:	f7fd fb65 	bl	8000208 <__aeabi_dsub>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	460b      	mov	r3, r1
 8002b42:	e9ca 2300 	strd	r2, r3, [sl]
 8002b46:	4620      	mov	r0, r4
 8002b48:	4629      	mov	r1, r5
 8002b4a:	f7fd fb5d 	bl	8000208 <__aeabi_dsub>
 8002b4e:	a3a6      	add	r3, pc, #664	; (adr r3, 8002de8 <__ieee754_rem_pio2+0x308>)
 8002b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b54:	f7fd fb58 	bl	8000208 <__aeabi_dsub>
 8002b58:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8002b5c:	f04f 0b01 	mov.w	fp, #1
 8002b60:	4658      	mov	r0, fp
 8002b62:	b00b      	add	sp, #44	; 0x2c
 8002b64:	ecbd 8b02 	vpop	{d8}
 8002b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b6c:	a3a0      	add	r3, pc, #640	; (adr r3, 8002df0 <__ieee754_rem_pio2+0x310>)
 8002b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b72:	f7fd fb49 	bl	8000208 <__aeabi_dsub>
 8002b76:	a3a0      	add	r3, pc, #640	; (adr r3, 8002df8 <__ieee754_rem_pio2+0x318>)
 8002b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b7c:	4604      	mov	r4, r0
 8002b7e:	460d      	mov	r5, r1
 8002b80:	f7fd fb42 	bl	8000208 <__aeabi_dsub>
 8002b84:	4602      	mov	r2, r0
 8002b86:	460b      	mov	r3, r1
 8002b88:	e9ca 2300 	strd	r2, r3, [sl]
 8002b8c:	4620      	mov	r0, r4
 8002b8e:	4629      	mov	r1, r5
 8002b90:	f7fd fb3a 	bl	8000208 <__aeabi_dsub>
 8002b94:	a398      	add	r3, pc, #608	; (adr r3, 8002df8 <__ieee754_rem_pio2+0x318>)
 8002b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b9a:	e7db      	b.n	8002b54 <__ieee754_rem_pio2+0x74>
 8002b9c:	f7fd fb36 	bl	800020c <__adddf3>
 8002ba0:	45b0      	cmp	r8, r6
 8002ba2:	4604      	mov	r4, r0
 8002ba4:	460d      	mov	r5, r1
 8002ba6:	d016      	beq.n	8002bd6 <__ieee754_rem_pio2+0xf6>
 8002ba8:	a38f      	add	r3, pc, #572	; (adr r3, 8002de8 <__ieee754_rem_pio2+0x308>)
 8002baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bae:	f7fd fb2d 	bl	800020c <__adddf3>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	e9ca 2300 	strd	r2, r3, [sl]
 8002bba:	4620      	mov	r0, r4
 8002bbc:	4629      	mov	r1, r5
 8002bbe:	f7fd fb23 	bl	8000208 <__aeabi_dsub>
 8002bc2:	a389      	add	r3, pc, #548	; (adr r3, 8002de8 <__ieee754_rem_pio2+0x308>)
 8002bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc8:	f7fd fb20 	bl	800020c <__adddf3>
 8002bcc:	f04f 3bff 	mov.w	fp, #4294967295
 8002bd0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8002bd4:	e7c4      	b.n	8002b60 <__ieee754_rem_pio2+0x80>
 8002bd6:	a386      	add	r3, pc, #536	; (adr r3, 8002df0 <__ieee754_rem_pio2+0x310>)
 8002bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bdc:	f7fd fb16 	bl	800020c <__adddf3>
 8002be0:	a385      	add	r3, pc, #532	; (adr r3, 8002df8 <__ieee754_rem_pio2+0x318>)
 8002be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be6:	4604      	mov	r4, r0
 8002be8:	460d      	mov	r5, r1
 8002bea:	f7fd fb0f 	bl	800020c <__adddf3>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	e9ca 2300 	strd	r2, r3, [sl]
 8002bf6:	4620      	mov	r0, r4
 8002bf8:	4629      	mov	r1, r5
 8002bfa:	f7fd fb05 	bl	8000208 <__aeabi_dsub>
 8002bfe:	a37e      	add	r3, pc, #504	; (adr r3, 8002df8 <__ieee754_rem_pio2+0x318>)
 8002c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c04:	e7e0      	b.n	8002bc8 <__ieee754_rem_pio2+0xe8>
 8002c06:	4b87      	ldr	r3, [pc, #540]	; (8002e24 <__ieee754_rem_pio2+0x344>)
 8002c08:	4598      	cmp	r8, r3
 8002c0a:	f300 80d9 	bgt.w	8002dc0 <__ieee754_rem_pio2+0x2e0>
 8002c0e:	f000 fe49 	bl	80038a4 <fabs>
 8002c12:	ec55 4b10 	vmov	r4, r5, d0
 8002c16:	ee10 0a10 	vmov	r0, s0
 8002c1a:	a379      	add	r3, pc, #484	; (adr r3, 8002e00 <__ieee754_rem_pio2+0x320>)
 8002c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c20:	4629      	mov	r1, r5
 8002c22:	f7fd fca9 	bl	8000578 <__aeabi_dmul>
 8002c26:	4b80      	ldr	r3, [pc, #512]	; (8002e28 <__ieee754_rem_pio2+0x348>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f7fd faef 	bl	800020c <__adddf3>
 8002c2e:	f7fd ff3d 	bl	8000aac <__aeabi_d2iz>
 8002c32:	4683      	mov	fp, r0
 8002c34:	f7fd fc36 	bl	80004a4 <__aeabi_i2d>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	ec43 2b18 	vmov	d8, r2, r3
 8002c40:	a367      	add	r3, pc, #412	; (adr r3, 8002de0 <__ieee754_rem_pio2+0x300>)
 8002c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c46:	f7fd fc97 	bl	8000578 <__aeabi_dmul>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	4620      	mov	r0, r4
 8002c50:	4629      	mov	r1, r5
 8002c52:	f7fd fad9 	bl	8000208 <__aeabi_dsub>
 8002c56:	a364      	add	r3, pc, #400	; (adr r3, 8002de8 <__ieee754_rem_pio2+0x308>)
 8002c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c5c:	4606      	mov	r6, r0
 8002c5e:	460f      	mov	r7, r1
 8002c60:	ec51 0b18 	vmov	r0, r1, d8
 8002c64:	f7fd fc88 	bl	8000578 <__aeabi_dmul>
 8002c68:	f1bb 0f1f 	cmp.w	fp, #31
 8002c6c:	4604      	mov	r4, r0
 8002c6e:	460d      	mov	r5, r1
 8002c70:	dc0d      	bgt.n	8002c8e <__ieee754_rem_pio2+0x1ae>
 8002c72:	4b6e      	ldr	r3, [pc, #440]	; (8002e2c <__ieee754_rem_pio2+0x34c>)
 8002c74:	f10b 32ff 	add.w	r2, fp, #4294967295
 8002c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c7c:	4543      	cmp	r3, r8
 8002c7e:	d006      	beq.n	8002c8e <__ieee754_rem_pio2+0x1ae>
 8002c80:	4622      	mov	r2, r4
 8002c82:	462b      	mov	r3, r5
 8002c84:	4630      	mov	r0, r6
 8002c86:	4639      	mov	r1, r7
 8002c88:	f7fd fabe 	bl	8000208 <__aeabi_dsub>
 8002c8c:	e00f      	b.n	8002cae <__ieee754_rem_pio2+0x1ce>
 8002c8e:	462b      	mov	r3, r5
 8002c90:	4622      	mov	r2, r4
 8002c92:	4630      	mov	r0, r6
 8002c94:	4639      	mov	r1, r7
 8002c96:	f7fd fab7 	bl	8000208 <__aeabi_dsub>
 8002c9a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8002c9e:	9303      	str	r3, [sp, #12]
 8002ca0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8002ca4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8002ca8:	f1b8 0f10 	cmp.w	r8, #16
 8002cac:	dc02      	bgt.n	8002cb4 <__ieee754_rem_pio2+0x1d4>
 8002cae:	e9ca 0100 	strd	r0, r1, [sl]
 8002cb2:	e039      	b.n	8002d28 <__ieee754_rem_pio2+0x248>
 8002cb4:	a34e      	add	r3, pc, #312	; (adr r3, 8002df0 <__ieee754_rem_pio2+0x310>)
 8002cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cba:	ec51 0b18 	vmov	r0, r1, d8
 8002cbe:	f7fd fc5b 	bl	8000578 <__aeabi_dmul>
 8002cc2:	4604      	mov	r4, r0
 8002cc4:	460d      	mov	r5, r1
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	460b      	mov	r3, r1
 8002cca:	4630      	mov	r0, r6
 8002ccc:	4639      	mov	r1, r7
 8002cce:	f7fd fa9b 	bl	8000208 <__aeabi_dsub>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	4680      	mov	r8, r0
 8002cd8:	4689      	mov	r9, r1
 8002cda:	4630      	mov	r0, r6
 8002cdc:	4639      	mov	r1, r7
 8002cde:	f7fd fa93 	bl	8000208 <__aeabi_dsub>
 8002ce2:	4622      	mov	r2, r4
 8002ce4:	462b      	mov	r3, r5
 8002ce6:	f7fd fa8f 	bl	8000208 <__aeabi_dsub>
 8002cea:	a343      	add	r3, pc, #268	; (adr r3, 8002df8 <__ieee754_rem_pio2+0x318>)
 8002cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf0:	4604      	mov	r4, r0
 8002cf2:	460d      	mov	r5, r1
 8002cf4:	ec51 0b18 	vmov	r0, r1, d8
 8002cf8:	f7fd fc3e 	bl	8000578 <__aeabi_dmul>
 8002cfc:	4622      	mov	r2, r4
 8002cfe:	462b      	mov	r3, r5
 8002d00:	f7fd fa82 	bl	8000208 <__aeabi_dsub>
 8002d04:	4602      	mov	r2, r0
 8002d06:	460b      	mov	r3, r1
 8002d08:	4604      	mov	r4, r0
 8002d0a:	460d      	mov	r5, r1
 8002d0c:	4640      	mov	r0, r8
 8002d0e:	4649      	mov	r1, r9
 8002d10:	f7fd fa7a 	bl	8000208 <__aeabi_dsub>
 8002d14:	9a03      	ldr	r2, [sp, #12]
 8002d16:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b31      	cmp	r3, #49	; 0x31
 8002d1e:	dc24      	bgt.n	8002d6a <__ieee754_rem_pio2+0x28a>
 8002d20:	e9ca 0100 	strd	r0, r1, [sl]
 8002d24:	4646      	mov	r6, r8
 8002d26:	464f      	mov	r7, r9
 8002d28:	e9da 8900 	ldrd	r8, r9, [sl]
 8002d2c:	4630      	mov	r0, r6
 8002d2e:	4642      	mov	r2, r8
 8002d30:	464b      	mov	r3, r9
 8002d32:	4639      	mov	r1, r7
 8002d34:	f7fd fa68 	bl	8000208 <__aeabi_dsub>
 8002d38:	462b      	mov	r3, r5
 8002d3a:	4622      	mov	r2, r4
 8002d3c:	f7fd fa64 	bl	8000208 <__aeabi_dsub>
 8002d40:	9b02      	ldr	r3, [sp, #8]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8002d48:	f6bf af0a 	bge.w	8002b60 <__ieee754_rem_pio2+0x80>
 8002d4c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8002d50:	f8ca 3004 	str.w	r3, [sl, #4]
 8002d54:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002d58:	f8ca 8000 	str.w	r8, [sl]
 8002d5c:	f8ca 0008 	str.w	r0, [sl, #8]
 8002d60:	f8ca 300c 	str.w	r3, [sl, #12]
 8002d64:	f1cb 0b00 	rsb	fp, fp, #0
 8002d68:	e6fa      	b.n	8002b60 <__ieee754_rem_pio2+0x80>
 8002d6a:	a327      	add	r3, pc, #156	; (adr r3, 8002e08 <__ieee754_rem_pio2+0x328>)
 8002d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d70:	ec51 0b18 	vmov	r0, r1, d8
 8002d74:	f7fd fc00 	bl	8000578 <__aeabi_dmul>
 8002d78:	4604      	mov	r4, r0
 8002d7a:	460d      	mov	r5, r1
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	460b      	mov	r3, r1
 8002d80:	4640      	mov	r0, r8
 8002d82:	4649      	mov	r1, r9
 8002d84:	f7fd fa40 	bl	8000208 <__aeabi_dsub>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	4606      	mov	r6, r0
 8002d8e:	460f      	mov	r7, r1
 8002d90:	4640      	mov	r0, r8
 8002d92:	4649      	mov	r1, r9
 8002d94:	f7fd fa38 	bl	8000208 <__aeabi_dsub>
 8002d98:	4622      	mov	r2, r4
 8002d9a:	462b      	mov	r3, r5
 8002d9c:	f7fd fa34 	bl	8000208 <__aeabi_dsub>
 8002da0:	a31b      	add	r3, pc, #108	; (adr r3, 8002e10 <__ieee754_rem_pio2+0x330>)
 8002da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da6:	4604      	mov	r4, r0
 8002da8:	460d      	mov	r5, r1
 8002daa:	ec51 0b18 	vmov	r0, r1, d8
 8002dae:	f7fd fbe3 	bl	8000578 <__aeabi_dmul>
 8002db2:	4622      	mov	r2, r4
 8002db4:	462b      	mov	r3, r5
 8002db6:	f7fd fa27 	bl	8000208 <__aeabi_dsub>
 8002dba:	4604      	mov	r4, r0
 8002dbc:	460d      	mov	r5, r1
 8002dbe:	e75f      	b.n	8002c80 <__ieee754_rem_pio2+0x1a0>
 8002dc0:	4b1b      	ldr	r3, [pc, #108]	; (8002e30 <__ieee754_rem_pio2+0x350>)
 8002dc2:	4598      	cmp	r8, r3
 8002dc4:	dd36      	ble.n	8002e34 <__ieee754_rem_pio2+0x354>
 8002dc6:	ee10 2a10 	vmov	r2, s0
 8002dca:	462b      	mov	r3, r5
 8002dcc:	4620      	mov	r0, r4
 8002dce:	4629      	mov	r1, r5
 8002dd0:	f7fd fa1a 	bl	8000208 <__aeabi_dsub>
 8002dd4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8002dd8:	e9ca 0100 	strd	r0, r1, [sl]
 8002ddc:	e694      	b.n	8002b08 <__ieee754_rem_pio2+0x28>
 8002dde:	bf00      	nop
 8002de0:	54400000 	.word	0x54400000
 8002de4:	3ff921fb 	.word	0x3ff921fb
 8002de8:	1a626331 	.word	0x1a626331
 8002dec:	3dd0b461 	.word	0x3dd0b461
 8002df0:	1a600000 	.word	0x1a600000
 8002df4:	3dd0b461 	.word	0x3dd0b461
 8002df8:	2e037073 	.word	0x2e037073
 8002dfc:	3ba3198a 	.word	0x3ba3198a
 8002e00:	6dc9c883 	.word	0x6dc9c883
 8002e04:	3fe45f30 	.word	0x3fe45f30
 8002e08:	2e000000 	.word	0x2e000000
 8002e0c:	3ba3198a 	.word	0x3ba3198a
 8002e10:	252049c1 	.word	0x252049c1
 8002e14:	397b839a 	.word	0x397b839a
 8002e18:	3fe921fb 	.word	0x3fe921fb
 8002e1c:	4002d97b 	.word	0x4002d97b
 8002e20:	3ff921fb 	.word	0x3ff921fb
 8002e24:	413921fb 	.word	0x413921fb
 8002e28:	3fe00000 	.word	0x3fe00000
 8002e2c:	08003bd4 	.word	0x08003bd4
 8002e30:	7fefffff 	.word	0x7fefffff
 8002e34:	ea4f 5428 	mov.w	r4, r8, asr #20
 8002e38:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8002e3c:	ee10 0a10 	vmov	r0, s0
 8002e40:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8002e44:	ee10 6a10 	vmov	r6, s0
 8002e48:	460f      	mov	r7, r1
 8002e4a:	f7fd fe2f 	bl	8000aac <__aeabi_d2iz>
 8002e4e:	f7fd fb29 	bl	80004a4 <__aeabi_i2d>
 8002e52:	4602      	mov	r2, r0
 8002e54:	460b      	mov	r3, r1
 8002e56:	4630      	mov	r0, r6
 8002e58:	4639      	mov	r1, r7
 8002e5a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002e5e:	f7fd f9d3 	bl	8000208 <__aeabi_dsub>
 8002e62:	4b23      	ldr	r3, [pc, #140]	; (8002ef0 <__ieee754_rem_pio2+0x410>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	f7fd fb87 	bl	8000578 <__aeabi_dmul>
 8002e6a:	460f      	mov	r7, r1
 8002e6c:	4606      	mov	r6, r0
 8002e6e:	f7fd fe1d 	bl	8000aac <__aeabi_d2iz>
 8002e72:	f7fd fb17 	bl	80004a4 <__aeabi_i2d>
 8002e76:	4602      	mov	r2, r0
 8002e78:	460b      	mov	r3, r1
 8002e7a:	4630      	mov	r0, r6
 8002e7c:	4639      	mov	r1, r7
 8002e7e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002e82:	f7fd f9c1 	bl	8000208 <__aeabi_dsub>
 8002e86:	4b1a      	ldr	r3, [pc, #104]	; (8002ef0 <__ieee754_rem_pio2+0x410>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f7fd fb75 	bl	8000578 <__aeabi_dmul>
 8002e8e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8002e92:	ad04      	add	r5, sp, #16
 8002e94:	f04f 0803 	mov.w	r8, #3
 8002e98:	46a9      	mov	r9, r5
 8002e9a:	2600      	movs	r6, #0
 8002e9c:	2700      	movs	r7, #0
 8002e9e:	4632      	mov	r2, r6
 8002ea0:	463b      	mov	r3, r7
 8002ea2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8002ea6:	46c3      	mov	fp, r8
 8002ea8:	3d08      	subs	r5, #8
 8002eaa:	f108 38ff 	add.w	r8, r8, #4294967295
 8002eae:	f7fd fdcb 	bl	8000a48 <__aeabi_dcmpeq>
 8002eb2:	2800      	cmp	r0, #0
 8002eb4:	d1f3      	bne.n	8002e9e <__ieee754_rem_pio2+0x3be>
 8002eb6:	4b0f      	ldr	r3, [pc, #60]	; (8002ef4 <__ieee754_rem_pio2+0x414>)
 8002eb8:	9301      	str	r3, [sp, #4]
 8002eba:	2302      	movs	r3, #2
 8002ebc:	9300      	str	r3, [sp, #0]
 8002ebe:	4622      	mov	r2, r4
 8002ec0:	465b      	mov	r3, fp
 8002ec2:	4651      	mov	r1, sl
 8002ec4:	4648      	mov	r0, r9
 8002ec6:	f000 f8df 	bl	8003088 <__kernel_rem_pio2>
 8002eca:	9b02      	ldr	r3, [sp, #8]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	4683      	mov	fp, r0
 8002ed0:	f6bf ae46 	bge.w	8002b60 <__ieee754_rem_pio2+0x80>
 8002ed4:	e9da 2100 	ldrd	r2, r1, [sl]
 8002ed8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002edc:	e9ca 2300 	strd	r2, r3, [sl]
 8002ee0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8002ee4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002ee8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8002eec:	e73a      	b.n	8002d64 <__ieee754_rem_pio2+0x284>
 8002eee:	bf00      	nop
 8002ef0:	41700000 	.word	0x41700000
 8002ef4:	08003c54 	.word	0x08003c54

08002ef8 <__kernel_cos>:
 8002ef8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002efc:	ec57 6b10 	vmov	r6, r7, d0
 8002f00:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8002f04:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8002f08:	ed8d 1b00 	vstr	d1, [sp]
 8002f0c:	da07      	bge.n	8002f1e <__kernel_cos+0x26>
 8002f0e:	ee10 0a10 	vmov	r0, s0
 8002f12:	4639      	mov	r1, r7
 8002f14:	f7fd fdca 	bl	8000aac <__aeabi_d2iz>
 8002f18:	2800      	cmp	r0, #0
 8002f1a:	f000 8088 	beq.w	800302e <__kernel_cos+0x136>
 8002f1e:	4632      	mov	r2, r6
 8002f20:	463b      	mov	r3, r7
 8002f22:	4630      	mov	r0, r6
 8002f24:	4639      	mov	r1, r7
 8002f26:	f7fd fb27 	bl	8000578 <__aeabi_dmul>
 8002f2a:	4b51      	ldr	r3, [pc, #324]	; (8003070 <__kernel_cos+0x178>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	4604      	mov	r4, r0
 8002f30:	460d      	mov	r5, r1
 8002f32:	f7fd fb21 	bl	8000578 <__aeabi_dmul>
 8002f36:	a340      	add	r3, pc, #256	; (adr r3, 8003038 <__kernel_cos+0x140>)
 8002f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f3c:	4682      	mov	sl, r0
 8002f3e:	468b      	mov	fp, r1
 8002f40:	4620      	mov	r0, r4
 8002f42:	4629      	mov	r1, r5
 8002f44:	f7fd fb18 	bl	8000578 <__aeabi_dmul>
 8002f48:	a33d      	add	r3, pc, #244	; (adr r3, 8003040 <__kernel_cos+0x148>)
 8002f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f4e:	f7fd f95d 	bl	800020c <__adddf3>
 8002f52:	4622      	mov	r2, r4
 8002f54:	462b      	mov	r3, r5
 8002f56:	f7fd fb0f 	bl	8000578 <__aeabi_dmul>
 8002f5a:	a33b      	add	r3, pc, #236	; (adr r3, 8003048 <__kernel_cos+0x150>)
 8002f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f60:	f7fd f952 	bl	8000208 <__aeabi_dsub>
 8002f64:	4622      	mov	r2, r4
 8002f66:	462b      	mov	r3, r5
 8002f68:	f7fd fb06 	bl	8000578 <__aeabi_dmul>
 8002f6c:	a338      	add	r3, pc, #224	; (adr r3, 8003050 <__kernel_cos+0x158>)
 8002f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f72:	f7fd f94b 	bl	800020c <__adddf3>
 8002f76:	4622      	mov	r2, r4
 8002f78:	462b      	mov	r3, r5
 8002f7a:	f7fd fafd 	bl	8000578 <__aeabi_dmul>
 8002f7e:	a336      	add	r3, pc, #216	; (adr r3, 8003058 <__kernel_cos+0x160>)
 8002f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f84:	f7fd f940 	bl	8000208 <__aeabi_dsub>
 8002f88:	4622      	mov	r2, r4
 8002f8a:	462b      	mov	r3, r5
 8002f8c:	f7fd faf4 	bl	8000578 <__aeabi_dmul>
 8002f90:	a333      	add	r3, pc, #204	; (adr r3, 8003060 <__kernel_cos+0x168>)
 8002f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f96:	f7fd f939 	bl	800020c <__adddf3>
 8002f9a:	4622      	mov	r2, r4
 8002f9c:	462b      	mov	r3, r5
 8002f9e:	f7fd faeb 	bl	8000578 <__aeabi_dmul>
 8002fa2:	4622      	mov	r2, r4
 8002fa4:	462b      	mov	r3, r5
 8002fa6:	f7fd fae7 	bl	8000578 <__aeabi_dmul>
 8002faa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002fae:	4604      	mov	r4, r0
 8002fb0:	460d      	mov	r5, r1
 8002fb2:	4630      	mov	r0, r6
 8002fb4:	4639      	mov	r1, r7
 8002fb6:	f7fd fadf 	bl	8000578 <__aeabi_dmul>
 8002fba:	460b      	mov	r3, r1
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	4629      	mov	r1, r5
 8002fc0:	4620      	mov	r0, r4
 8002fc2:	f7fd f921 	bl	8000208 <__aeabi_dsub>
 8002fc6:	4b2b      	ldr	r3, [pc, #172]	; (8003074 <__kernel_cos+0x17c>)
 8002fc8:	4598      	cmp	r8, r3
 8002fca:	4606      	mov	r6, r0
 8002fcc:	460f      	mov	r7, r1
 8002fce:	dc10      	bgt.n	8002ff2 <__kernel_cos+0xfa>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	4650      	mov	r0, sl
 8002fd6:	4659      	mov	r1, fp
 8002fd8:	f7fd f916 	bl	8000208 <__aeabi_dsub>
 8002fdc:	460b      	mov	r3, r1
 8002fde:	4926      	ldr	r1, [pc, #152]	; (8003078 <__kernel_cos+0x180>)
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	2000      	movs	r0, #0
 8002fe4:	f7fd f910 	bl	8000208 <__aeabi_dsub>
 8002fe8:	ec41 0b10 	vmov	d0, r0, r1
 8002fec:	b003      	add	sp, #12
 8002fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ff2:	4b22      	ldr	r3, [pc, #136]	; (800307c <__kernel_cos+0x184>)
 8002ff4:	4920      	ldr	r1, [pc, #128]	; (8003078 <__kernel_cos+0x180>)
 8002ff6:	4598      	cmp	r8, r3
 8002ff8:	bfcc      	ite	gt
 8002ffa:	4d21      	ldrgt	r5, [pc, #132]	; (8003080 <__kernel_cos+0x188>)
 8002ffc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8003000:	2400      	movs	r4, #0
 8003002:	4622      	mov	r2, r4
 8003004:	462b      	mov	r3, r5
 8003006:	2000      	movs	r0, #0
 8003008:	f7fd f8fe 	bl	8000208 <__aeabi_dsub>
 800300c:	4622      	mov	r2, r4
 800300e:	4680      	mov	r8, r0
 8003010:	4689      	mov	r9, r1
 8003012:	462b      	mov	r3, r5
 8003014:	4650      	mov	r0, sl
 8003016:	4659      	mov	r1, fp
 8003018:	f7fd f8f6 	bl	8000208 <__aeabi_dsub>
 800301c:	4632      	mov	r2, r6
 800301e:	463b      	mov	r3, r7
 8003020:	f7fd f8f2 	bl	8000208 <__aeabi_dsub>
 8003024:	4602      	mov	r2, r0
 8003026:	460b      	mov	r3, r1
 8003028:	4640      	mov	r0, r8
 800302a:	4649      	mov	r1, r9
 800302c:	e7da      	b.n	8002fe4 <__kernel_cos+0xec>
 800302e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8003068 <__kernel_cos+0x170>
 8003032:	e7db      	b.n	8002fec <__kernel_cos+0xf4>
 8003034:	f3af 8000 	nop.w
 8003038:	be8838d4 	.word	0xbe8838d4
 800303c:	bda8fae9 	.word	0xbda8fae9
 8003040:	bdb4b1c4 	.word	0xbdb4b1c4
 8003044:	3e21ee9e 	.word	0x3e21ee9e
 8003048:	809c52ad 	.word	0x809c52ad
 800304c:	3e927e4f 	.word	0x3e927e4f
 8003050:	19cb1590 	.word	0x19cb1590
 8003054:	3efa01a0 	.word	0x3efa01a0
 8003058:	16c15177 	.word	0x16c15177
 800305c:	3f56c16c 	.word	0x3f56c16c
 8003060:	5555554c 	.word	0x5555554c
 8003064:	3fa55555 	.word	0x3fa55555
 8003068:	00000000 	.word	0x00000000
 800306c:	3ff00000 	.word	0x3ff00000
 8003070:	3fe00000 	.word	0x3fe00000
 8003074:	3fd33332 	.word	0x3fd33332
 8003078:	3ff00000 	.word	0x3ff00000
 800307c:	3fe90000 	.word	0x3fe90000
 8003080:	3fd20000 	.word	0x3fd20000
 8003084:	00000000 	.word	0x00000000

08003088 <__kernel_rem_pio2>:
 8003088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800308c:	ed2d 8b02 	vpush	{d8}
 8003090:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8003094:	f112 0f14 	cmn.w	r2, #20
 8003098:	9308      	str	r3, [sp, #32]
 800309a:	9101      	str	r1, [sp, #4]
 800309c:	4bc4      	ldr	r3, [pc, #784]	; (80033b0 <__kernel_rem_pio2+0x328>)
 800309e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80030a0:	900b      	str	r0, [sp, #44]	; 0x2c
 80030a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80030a6:	9302      	str	r3, [sp, #8]
 80030a8:	9b08      	ldr	r3, [sp, #32]
 80030aa:	f103 33ff 	add.w	r3, r3, #4294967295
 80030ae:	bfa8      	it	ge
 80030b0:	1ed4      	subge	r4, r2, #3
 80030b2:	9306      	str	r3, [sp, #24]
 80030b4:	bfb2      	itee	lt
 80030b6:	2400      	movlt	r4, #0
 80030b8:	2318      	movge	r3, #24
 80030ba:	fb94 f4f3 	sdivge	r4, r4, r3
 80030be:	f06f 0317 	mvn.w	r3, #23
 80030c2:	fb04 3303 	mla	r3, r4, r3, r3
 80030c6:	eb03 0a02 	add.w	sl, r3, r2
 80030ca:	9b02      	ldr	r3, [sp, #8]
 80030cc:	9a06      	ldr	r2, [sp, #24]
 80030ce:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 80033a0 <__kernel_rem_pio2+0x318>
 80030d2:	eb03 0802 	add.w	r8, r3, r2
 80030d6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80030d8:	1aa7      	subs	r7, r4, r2
 80030da:	ae22      	add	r6, sp, #136	; 0x88
 80030dc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80030e0:	2500      	movs	r5, #0
 80030e2:	4545      	cmp	r5, r8
 80030e4:	dd13      	ble.n	800310e <__kernel_rem_pio2+0x86>
 80030e6:	9b08      	ldr	r3, [sp, #32]
 80030e8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 80033a0 <__kernel_rem_pio2+0x318>
 80030ec:	aa22      	add	r2, sp, #136	; 0x88
 80030ee:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80030f2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80030f6:	f04f 0800 	mov.w	r8, #0
 80030fa:	9b02      	ldr	r3, [sp, #8]
 80030fc:	4598      	cmp	r8, r3
 80030fe:	dc2f      	bgt.n	8003160 <__kernel_rem_pio2+0xd8>
 8003100:	ed8d 8b04 	vstr	d8, [sp, #16]
 8003104:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8003108:	462f      	mov	r7, r5
 800310a:	2600      	movs	r6, #0
 800310c:	e01b      	b.n	8003146 <__kernel_rem_pio2+0xbe>
 800310e:	42ef      	cmn	r7, r5
 8003110:	d407      	bmi.n	8003122 <__kernel_rem_pio2+0x9a>
 8003112:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8003116:	f7fd f9c5 	bl	80004a4 <__aeabi_i2d>
 800311a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800311e:	3501      	adds	r5, #1
 8003120:	e7df      	b.n	80030e2 <__kernel_rem_pio2+0x5a>
 8003122:	ec51 0b18 	vmov	r0, r1, d8
 8003126:	e7f8      	b.n	800311a <__kernel_rem_pio2+0x92>
 8003128:	e9d7 2300 	ldrd	r2, r3, [r7]
 800312c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8003130:	f7fd fa22 	bl	8000578 <__aeabi_dmul>
 8003134:	4602      	mov	r2, r0
 8003136:	460b      	mov	r3, r1
 8003138:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800313c:	f7fd f866 	bl	800020c <__adddf3>
 8003140:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003144:	3601      	adds	r6, #1
 8003146:	9b06      	ldr	r3, [sp, #24]
 8003148:	429e      	cmp	r6, r3
 800314a:	f1a7 0708 	sub.w	r7, r7, #8
 800314e:	ddeb      	ble.n	8003128 <__kernel_rem_pio2+0xa0>
 8003150:	ed9d 7b04 	vldr	d7, [sp, #16]
 8003154:	f108 0801 	add.w	r8, r8, #1
 8003158:	ecab 7b02 	vstmia	fp!, {d7}
 800315c:	3508      	adds	r5, #8
 800315e:	e7cc      	b.n	80030fa <__kernel_rem_pio2+0x72>
 8003160:	9b02      	ldr	r3, [sp, #8]
 8003162:	aa0e      	add	r2, sp, #56	; 0x38
 8003164:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003168:	930d      	str	r3, [sp, #52]	; 0x34
 800316a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800316c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003170:	9c02      	ldr	r4, [sp, #8]
 8003172:	930c      	str	r3, [sp, #48]	; 0x30
 8003174:	00e3      	lsls	r3, r4, #3
 8003176:	930a      	str	r3, [sp, #40]	; 0x28
 8003178:	ab9a      	add	r3, sp, #616	; 0x268
 800317a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800317e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8003182:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8003186:	ab72      	add	r3, sp, #456	; 0x1c8
 8003188:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800318c:	46c3      	mov	fp, r8
 800318e:	46a1      	mov	r9, r4
 8003190:	f1b9 0f00 	cmp.w	r9, #0
 8003194:	f1a5 0508 	sub.w	r5, r5, #8
 8003198:	dc77      	bgt.n	800328a <__kernel_rem_pio2+0x202>
 800319a:	ec47 6b10 	vmov	d0, r6, r7
 800319e:	4650      	mov	r0, sl
 80031a0:	f000 fc0a 	bl	80039b8 <scalbn>
 80031a4:	ec57 6b10 	vmov	r6, r7, d0
 80031a8:	2200      	movs	r2, #0
 80031aa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80031ae:	ee10 0a10 	vmov	r0, s0
 80031b2:	4639      	mov	r1, r7
 80031b4:	f7fd f9e0 	bl	8000578 <__aeabi_dmul>
 80031b8:	ec41 0b10 	vmov	d0, r0, r1
 80031bc:	f000 fb7c 	bl	80038b8 <floor>
 80031c0:	4b7c      	ldr	r3, [pc, #496]	; (80033b4 <__kernel_rem_pio2+0x32c>)
 80031c2:	ec51 0b10 	vmov	r0, r1, d0
 80031c6:	2200      	movs	r2, #0
 80031c8:	f7fd f9d6 	bl	8000578 <__aeabi_dmul>
 80031cc:	4602      	mov	r2, r0
 80031ce:	460b      	mov	r3, r1
 80031d0:	4630      	mov	r0, r6
 80031d2:	4639      	mov	r1, r7
 80031d4:	f7fd f818 	bl	8000208 <__aeabi_dsub>
 80031d8:	460f      	mov	r7, r1
 80031da:	4606      	mov	r6, r0
 80031dc:	f7fd fc66 	bl	8000aac <__aeabi_d2iz>
 80031e0:	9004      	str	r0, [sp, #16]
 80031e2:	f7fd f95f 	bl	80004a4 <__aeabi_i2d>
 80031e6:	4602      	mov	r2, r0
 80031e8:	460b      	mov	r3, r1
 80031ea:	4630      	mov	r0, r6
 80031ec:	4639      	mov	r1, r7
 80031ee:	f7fd f80b 	bl	8000208 <__aeabi_dsub>
 80031f2:	f1ba 0f00 	cmp.w	sl, #0
 80031f6:	4606      	mov	r6, r0
 80031f8:	460f      	mov	r7, r1
 80031fa:	dd6d      	ble.n	80032d8 <__kernel_rem_pio2+0x250>
 80031fc:	1e62      	subs	r2, r4, #1
 80031fe:	ab0e      	add	r3, sp, #56	; 0x38
 8003200:	9d04      	ldr	r5, [sp, #16]
 8003202:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003206:	f1ca 0118 	rsb	r1, sl, #24
 800320a:	fa40 f301 	asr.w	r3, r0, r1
 800320e:	441d      	add	r5, r3
 8003210:	408b      	lsls	r3, r1
 8003212:	1ac0      	subs	r0, r0, r3
 8003214:	ab0e      	add	r3, sp, #56	; 0x38
 8003216:	9504      	str	r5, [sp, #16]
 8003218:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800321c:	f1ca 0317 	rsb	r3, sl, #23
 8003220:	fa40 fb03 	asr.w	fp, r0, r3
 8003224:	f1bb 0f00 	cmp.w	fp, #0
 8003228:	dd65      	ble.n	80032f6 <__kernel_rem_pio2+0x26e>
 800322a:	9b04      	ldr	r3, [sp, #16]
 800322c:	2200      	movs	r2, #0
 800322e:	3301      	adds	r3, #1
 8003230:	9304      	str	r3, [sp, #16]
 8003232:	4615      	mov	r5, r2
 8003234:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8003238:	4294      	cmp	r4, r2
 800323a:	f300 809c 	bgt.w	8003376 <__kernel_rem_pio2+0x2ee>
 800323e:	f1ba 0f00 	cmp.w	sl, #0
 8003242:	dd07      	ble.n	8003254 <__kernel_rem_pio2+0x1cc>
 8003244:	f1ba 0f01 	cmp.w	sl, #1
 8003248:	f000 80c0 	beq.w	80033cc <__kernel_rem_pio2+0x344>
 800324c:	f1ba 0f02 	cmp.w	sl, #2
 8003250:	f000 80c6 	beq.w	80033e0 <__kernel_rem_pio2+0x358>
 8003254:	f1bb 0f02 	cmp.w	fp, #2
 8003258:	d14d      	bne.n	80032f6 <__kernel_rem_pio2+0x26e>
 800325a:	4632      	mov	r2, r6
 800325c:	463b      	mov	r3, r7
 800325e:	4956      	ldr	r1, [pc, #344]	; (80033b8 <__kernel_rem_pio2+0x330>)
 8003260:	2000      	movs	r0, #0
 8003262:	f7fc ffd1 	bl	8000208 <__aeabi_dsub>
 8003266:	4606      	mov	r6, r0
 8003268:	460f      	mov	r7, r1
 800326a:	2d00      	cmp	r5, #0
 800326c:	d043      	beq.n	80032f6 <__kernel_rem_pio2+0x26e>
 800326e:	4650      	mov	r0, sl
 8003270:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 80033a8 <__kernel_rem_pio2+0x320>
 8003274:	f000 fba0 	bl	80039b8 <scalbn>
 8003278:	4630      	mov	r0, r6
 800327a:	4639      	mov	r1, r7
 800327c:	ec53 2b10 	vmov	r2, r3, d0
 8003280:	f7fc ffc2 	bl	8000208 <__aeabi_dsub>
 8003284:	4606      	mov	r6, r0
 8003286:	460f      	mov	r7, r1
 8003288:	e035      	b.n	80032f6 <__kernel_rem_pio2+0x26e>
 800328a:	4b4c      	ldr	r3, [pc, #304]	; (80033bc <__kernel_rem_pio2+0x334>)
 800328c:	2200      	movs	r2, #0
 800328e:	4630      	mov	r0, r6
 8003290:	4639      	mov	r1, r7
 8003292:	f7fd f971 	bl	8000578 <__aeabi_dmul>
 8003296:	f7fd fc09 	bl	8000aac <__aeabi_d2iz>
 800329a:	f7fd f903 	bl	80004a4 <__aeabi_i2d>
 800329e:	4602      	mov	r2, r0
 80032a0:	460b      	mov	r3, r1
 80032a2:	ec43 2b18 	vmov	d8, r2, r3
 80032a6:	4b46      	ldr	r3, [pc, #280]	; (80033c0 <__kernel_rem_pio2+0x338>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	f7fd f965 	bl	8000578 <__aeabi_dmul>
 80032ae:	4602      	mov	r2, r0
 80032b0:	460b      	mov	r3, r1
 80032b2:	4630      	mov	r0, r6
 80032b4:	4639      	mov	r1, r7
 80032b6:	f7fc ffa7 	bl	8000208 <__aeabi_dsub>
 80032ba:	f7fd fbf7 	bl	8000aac <__aeabi_d2iz>
 80032be:	e9d5 2300 	ldrd	r2, r3, [r5]
 80032c2:	f84b 0b04 	str.w	r0, [fp], #4
 80032c6:	ec51 0b18 	vmov	r0, r1, d8
 80032ca:	f7fc ff9f 	bl	800020c <__adddf3>
 80032ce:	f109 39ff 	add.w	r9, r9, #4294967295
 80032d2:	4606      	mov	r6, r0
 80032d4:	460f      	mov	r7, r1
 80032d6:	e75b      	b.n	8003190 <__kernel_rem_pio2+0x108>
 80032d8:	d106      	bne.n	80032e8 <__kernel_rem_pio2+0x260>
 80032da:	1e63      	subs	r3, r4, #1
 80032dc:	aa0e      	add	r2, sp, #56	; 0x38
 80032de:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80032e2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 80032e6:	e79d      	b.n	8003224 <__kernel_rem_pio2+0x19c>
 80032e8:	4b36      	ldr	r3, [pc, #216]	; (80033c4 <__kernel_rem_pio2+0x33c>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	f7fd fbca 	bl	8000a84 <__aeabi_dcmpge>
 80032f0:	2800      	cmp	r0, #0
 80032f2:	d13d      	bne.n	8003370 <__kernel_rem_pio2+0x2e8>
 80032f4:	4683      	mov	fp, r0
 80032f6:	2200      	movs	r2, #0
 80032f8:	2300      	movs	r3, #0
 80032fa:	4630      	mov	r0, r6
 80032fc:	4639      	mov	r1, r7
 80032fe:	f7fd fba3 	bl	8000a48 <__aeabi_dcmpeq>
 8003302:	2800      	cmp	r0, #0
 8003304:	f000 80c0 	beq.w	8003488 <__kernel_rem_pio2+0x400>
 8003308:	1e65      	subs	r5, r4, #1
 800330a:	462b      	mov	r3, r5
 800330c:	2200      	movs	r2, #0
 800330e:	9902      	ldr	r1, [sp, #8]
 8003310:	428b      	cmp	r3, r1
 8003312:	da6c      	bge.n	80033ee <__kernel_rem_pio2+0x366>
 8003314:	2a00      	cmp	r2, #0
 8003316:	f000 8089 	beq.w	800342c <__kernel_rem_pio2+0x3a4>
 800331a:	ab0e      	add	r3, sp, #56	; 0x38
 800331c:	f1aa 0a18 	sub.w	sl, sl, #24
 8003320:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8003324:	2b00      	cmp	r3, #0
 8003326:	f000 80ad 	beq.w	8003484 <__kernel_rem_pio2+0x3fc>
 800332a:	4650      	mov	r0, sl
 800332c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 80033a8 <__kernel_rem_pio2+0x320>
 8003330:	f000 fb42 	bl	80039b8 <scalbn>
 8003334:	ab9a      	add	r3, sp, #616	; 0x268
 8003336:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800333a:	ec57 6b10 	vmov	r6, r7, d0
 800333e:	00ec      	lsls	r4, r5, #3
 8003340:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8003344:	46aa      	mov	sl, r5
 8003346:	f1ba 0f00 	cmp.w	sl, #0
 800334a:	f280 80d6 	bge.w	80034fa <__kernel_rem_pio2+0x472>
 800334e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 80033a0 <__kernel_rem_pio2+0x318>
 8003352:	462e      	mov	r6, r5
 8003354:	2e00      	cmp	r6, #0
 8003356:	f2c0 8104 	blt.w	8003562 <__kernel_rem_pio2+0x4da>
 800335a:	ab72      	add	r3, sp, #456	; 0x1c8
 800335c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8003360:	f8df a064 	ldr.w	sl, [pc, #100]	; 80033c8 <__kernel_rem_pio2+0x340>
 8003364:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8003368:	f04f 0800 	mov.w	r8, #0
 800336c:	1baf      	subs	r7, r5, r6
 800336e:	e0ea      	b.n	8003546 <__kernel_rem_pio2+0x4be>
 8003370:	f04f 0b02 	mov.w	fp, #2
 8003374:	e759      	b.n	800322a <__kernel_rem_pio2+0x1a2>
 8003376:	f8d8 3000 	ldr.w	r3, [r8]
 800337a:	b955      	cbnz	r5, 8003392 <__kernel_rem_pio2+0x30a>
 800337c:	b123      	cbz	r3, 8003388 <__kernel_rem_pio2+0x300>
 800337e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8003382:	f8c8 3000 	str.w	r3, [r8]
 8003386:	2301      	movs	r3, #1
 8003388:	3201      	adds	r2, #1
 800338a:	f108 0804 	add.w	r8, r8, #4
 800338e:	461d      	mov	r5, r3
 8003390:	e752      	b.n	8003238 <__kernel_rem_pio2+0x1b0>
 8003392:	1acb      	subs	r3, r1, r3
 8003394:	f8c8 3000 	str.w	r3, [r8]
 8003398:	462b      	mov	r3, r5
 800339a:	e7f5      	b.n	8003388 <__kernel_rem_pio2+0x300>
 800339c:	f3af 8000 	nop.w
	...
 80033ac:	3ff00000 	.word	0x3ff00000
 80033b0:	08003da0 	.word	0x08003da0
 80033b4:	40200000 	.word	0x40200000
 80033b8:	3ff00000 	.word	0x3ff00000
 80033bc:	3e700000 	.word	0x3e700000
 80033c0:	41700000 	.word	0x41700000
 80033c4:	3fe00000 	.word	0x3fe00000
 80033c8:	08003d60 	.word	0x08003d60
 80033cc:	1e62      	subs	r2, r4, #1
 80033ce:	ab0e      	add	r3, sp, #56	; 0x38
 80033d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033d4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80033d8:	a90e      	add	r1, sp, #56	; 0x38
 80033da:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80033de:	e739      	b.n	8003254 <__kernel_rem_pio2+0x1cc>
 80033e0:	1e62      	subs	r2, r4, #1
 80033e2:	ab0e      	add	r3, sp, #56	; 0x38
 80033e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033e8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80033ec:	e7f4      	b.n	80033d8 <__kernel_rem_pio2+0x350>
 80033ee:	a90e      	add	r1, sp, #56	; 0x38
 80033f0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80033f4:	3b01      	subs	r3, #1
 80033f6:	430a      	orrs	r2, r1
 80033f8:	e789      	b.n	800330e <__kernel_rem_pio2+0x286>
 80033fa:	3301      	adds	r3, #1
 80033fc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8003400:	2900      	cmp	r1, #0
 8003402:	d0fa      	beq.n	80033fa <__kernel_rem_pio2+0x372>
 8003404:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003406:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800340a:	446a      	add	r2, sp
 800340c:	3a98      	subs	r2, #152	; 0x98
 800340e:	920a      	str	r2, [sp, #40]	; 0x28
 8003410:	9a08      	ldr	r2, [sp, #32]
 8003412:	18e3      	adds	r3, r4, r3
 8003414:	18a5      	adds	r5, r4, r2
 8003416:	aa22      	add	r2, sp, #136	; 0x88
 8003418:	f104 0801 	add.w	r8, r4, #1
 800341c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8003420:	9304      	str	r3, [sp, #16]
 8003422:	9b04      	ldr	r3, [sp, #16]
 8003424:	4543      	cmp	r3, r8
 8003426:	da04      	bge.n	8003432 <__kernel_rem_pio2+0x3aa>
 8003428:	461c      	mov	r4, r3
 800342a:	e6a3      	b.n	8003174 <__kernel_rem_pio2+0xec>
 800342c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800342e:	2301      	movs	r3, #1
 8003430:	e7e4      	b.n	80033fc <__kernel_rem_pio2+0x374>
 8003432:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003434:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8003438:	f7fd f834 	bl	80004a4 <__aeabi_i2d>
 800343c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8003440:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003442:	46ab      	mov	fp, r5
 8003444:	461c      	mov	r4, r3
 8003446:	f04f 0900 	mov.w	r9, #0
 800344a:	2600      	movs	r6, #0
 800344c:	2700      	movs	r7, #0
 800344e:	9b06      	ldr	r3, [sp, #24]
 8003450:	4599      	cmp	r9, r3
 8003452:	dd06      	ble.n	8003462 <__kernel_rem_pio2+0x3da>
 8003454:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003456:	e8e3 6702 	strd	r6, r7, [r3], #8
 800345a:	f108 0801 	add.w	r8, r8, #1
 800345e:	930a      	str	r3, [sp, #40]	; 0x28
 8003460:	e7df      	b.n	8003422 <__kernel_rem_pio2+0x39a>
 8003462:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8003466:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800346a:	f7fd f885 	bl	8000578 <__aeabi_dmul>
 800346e:	4602      	mov	r2, r0
 8003470:	460b      	mov	r3, r1
 8003472:	4630      	mov	r0, r6
 8003474:	4639      	mov	r1, r7
 8003476:	f7fc fec9 	bl	800020c <__adddf3>
 800347a:	f109 0901 	add.w	r9, r9, #1
 800347e:	4606      	mov	r6, r0
 8003480:	460f      	mov	r7, r1
 8003482:	e7e4      	b.n	800344e <__kernel_rem_pio2+0x3c6>
 8003484:	3d01      	subs	r5, #1
 8003486:	e748      	b.n	800331a <__kernel_rem_pio2+0x292>
 8003488:	ec47 6b10 	vmov	d0, r6, r7
 800348c:	f1ca 0000 	rsb	r0, sl, #0
 8003490:	f000 fa92 	bl	80039b8 <scalbn>
 8003494:	ec57 6b10 	vmov	r6, r7, d0
 8003498:	4ba0      	ldr	r3, [pc, #640]	; (800371c <__kernel_rem_pio2+0x694>)
 800349a:	ee10 0a10 	vmov	r0, s0
 800349e:	2200      	movs	r2, #0
 80034a0:	4639      	mov	r1, r7
 80034a2:	f7fd faef 	bl	8000a84 <__aeabi_dcmpge>
 80034a6:	b1f8      	cbz	r0, 80034e8 <__kernel_rem_pio2+0x460>
 80034a8:	4b9d      	ldr	r3, [pc, #628]	; (8003720 <__kernel_rem_pio2+0x698>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	4630      	mov	r0, r6
 80034ae:	4639      	mov	r1, r7
 80034b0:	f7fd f862 	bl	8000578 <__aeabi_dmul>
 80034b4:	f7fd fafa 	bl	8000aac <__aeabi_d2iz>
 80034b8:	4680      	mov	r8, r0
 80034ba:	f7fc fff3 	bl	80004a4 <__aeabi_i2d>
 80034be:	4b97      	ldr	r3, [pc, #604]	; (800371c <__kernel_rem_pio2+0x694>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	f7fd f859 	bl	8000578 <__aeabi_dmul>
 80034c6:	460b      	mov	r3, r1
 80034c8:	4602      	mov	r2, r0
 80034ca:	4639      	mov	r1, r7
 80034cc:	4630      	mov	r0, r6
 80034ce:	f7fc fe9b 	bl	8000208 <__aeabi_dsub>
 80034d2:	f7fd faeb 	bl	8000aac <__aeabi_d2iz>
 80034d6:	1c65      	adds	r5, r4, #1
 80034d8:	ab0e      	add	r3, sp, #56	; 0x38
 80034da:	f10a 0a18 	add.w	sl, sl, #24
 80034de:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80034e2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80034e6:	e720      	b.n	800332a <__kernel_rem_pio2+0x2a2>
 80034e8:	4630      	mov	r0, r6
 80034ea:	4639      	mov	r1, r7
 80034ec:	f7fd fade 	bl	8000aac <__aeabi_d2iz>
 80034f0:	ab0e      	add	r3, sp, #56	; 0x38
 80034f2:	4625      	mov	r5, r4
 80034f4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80034f8:	e717      	b.n	800332a <__kernel_rem_pio2+0x2a2>
 80034fa:	ab0e      	add	r3, sp, #56	; 0x38
 80034fc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8003500:	f7fc ffd0 	bl	80004a4 <__aeabi_i2d>
 8003504:	4632      	mov	r2, r6
 8003506:	463b      	mov	r3, r7
 8003508:	f7fd f836 	bl	8000578 <__aeabi_dmul>
 800350c:	4b84      	ldr	r3, [pc, #528]	; (8003720 <__kernel_rem_pio2+0x698>)
 800350e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8003512:	2200      	movs	r2, #0
 8003514:	4630      	mov	r0, r6
 8003516:	4639      	mov	r1, r7
 8003518:	f7fd f82e 	bl	8000578 <__aeabi_dmul>
 800351c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003520:	4606      	mov	r6, r0
 8003522:	460f      	mov	r7, r1
 8003524:	e70f      	b.n	8003346 <__kernel_rem_pio2+0x2be>
 8003526:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800352a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800352e:	f7fd f823 	bl	8000578 <__aeabi_dmul>
 8003532:	4602      	mov	r2, r0
 8003534:	460b      	mov	r3, r1
 8003536:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800353a:	f7fc fe67 	bl	800020c <__adddf3>
 800353e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003542:	f108 0801 	add.w	r8, r8, #1
 8003546:	9b02      	ldr	r3, [sp, #8]
 8003548:	4598      	cmp	r8, r3
 800354a:	dc01      	bgt.n	8003550 <__kernel_rem_pio2+0x4c8>
 800354c:	45b8      	cmp	r8, r7
 800354e:	ddea      	ble.n	8003526 <__kernel_rem_pio2+0x49e>
 8003550:	ed9d 7b06 	vldr	d7, [sp, #24]
 8003554:	ab4a      	add	r3, sp, #296	; 0x128
 8003556:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800355a:	ed87 7b00 	vstr	d7, [r7]
 800355e:	3e01      	subs	r6, #1
 8003560:	e6f8      	b.n	8003354 <__kernel_rem_pio2+0x2cc>
 8003562:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8003564:	2b02      	cmp	r3, #2
 8003566:	dc0b      	bgt.n	8003580 <__kernel_rem_pio2+0x4f8>
 8003568:	2b00      	cmp	r3, #0
 800356a:	dc35      	bgt.n	80035d8 <__kernel_rem_pio2+0x550>
 800356c:	d059      	beq.n	8003622 <__kernel_rem_pio2+0x59a>
 800356e:	9b04      	ldr	r3, [sp, #16]
 8003570:	f003 0007 	and.w	r0, r3, #7
 8003574:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8003578:	ecbd 8b02 	vpop	{d8}
 800357c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003580:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8003582:	2b03      	cmp	r3, #3
 8003584:	d1f3      	bne.n	800356e <__kernel_rem_pio2+0x4e6>
 8003586:	ab4a      	add	r3, sp, #296	; 0x128
 8003588:	4423      	add	r3, r4
 800358a:	9306      	str	r3, [sp, #24]
 800358c:	461c      	mov	r4, r3
 800358e:	469a      	mov	sl, r3
 8003590:	9502      	str	r5, [sp, #8]
 8003592:	9b02      	ldr	r3, [sp, #8]
 8003594:	2b00      	cmp	r3, #0
 8003596:	f1aa 0a08 	sub.w	sl, sl, #8
 800359a:	dc6b      	bgt.n	8003674 <__kernel_rem_pio2+0x5ec>
 800359c:	46aa      	mov	sl, r5
 800359e:	f1ba 0f01 	cmp.w	sl, #1
 80035a2:	f1a4 0408 	sub.w	r4, r4, #8
 80035a6:	f300 8085 	bgt.w	80036b4 <__kernel_rem_pio2+0x62c>
 80035aa:	9c06      	ldr	r4, [sp, #24]
 80035ac:	2000      	movs	r0, #0
 80035ae:	3408      	adds	r4, #8
 80035b0:	2100      	movs	r1, #0
 80035b2:	2d01      	cmp	r5, #1
 80035b4:	f300 809d 	bgt.w	80036f2 <__kernel_rem_pio2+0x66a>
 80035b8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80035bc:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 80035c0:	f1bb 0f00 	cmp.w	fp, #0
 80035c4:	f040 809b 	bne.w	80036fe <__kernel_rem_pio2+0x676>
 80035c8:	9b01      	ldr	r3, [sp, #4]
 80035ca:	e9c3 5600 	strd	r5, r6, [r3]
 80035ce:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80035d2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80035d6:	e7ca      	b.n	800356e <__kernel_rem_pio2+0x4e6>
 80035d8:	3408      	adds	r4, #8
 80035da:	ab4a      	add	r3, sp, #296	; 0x128
 80035dc:	441c      	add	r4, r3
 80035de:	462e      	mov	r6, r5
 80035e0:	2000      	movs	r0, #0
 80035e2:	2100      	movs	r1, #0
 80035e4:	2e00      	cmp	r6, #0
 80035e6:	da36      	bge.n	8003656 <__kernel_rem_pio2+0x5ce>
 80035e8:	f1bb 0f00 	cmp.w	fp, #0
 80035ec:	d039      	beq.n	8003662 <__kernel_rem_pio2+0x5da>
 80035ee:	4602      	mov	r2, r0
 80035f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80035f4:	9c01      	ldr	r4, [sp, #4]
 80035f6:	e9c4 2300 	strd	r2, r3, [r4]
 80035fa:	4602      	mov	r2, r0
 80035fc:	460b      	mov	r3, r1
 80035fe:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8003602:	f7fc fe01 	bl	8000208 <__aeabi_dsub>
 8003606:	ae4c      	add	r6, sp, #304	; 0x130
 8003608:	2401      	movs	r4, #1
 800360a:	42a5      	cmp	r5, r4
 800360c:	da2c      	bge.n	8003668 <__kernel_rem_pio2+0x5e0>
 800360e:	f1bb 0f00 	cmp.w	fp, #0
 8003612:	d002      	beq.n	800361a <__kernel_rem_pio2+0x592>
 8003614:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003618:	4619      	mov	r1, r3
 800361a:	9b01      	ldr	r3, [sp, #4]
 800361c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8003620:	e7a5      	b.n	800356e <__kernel_rem_pio2+0x4e6>
 8003622:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8003626:	eb0d 0403 	add.w	r4, sp, r3
 800362a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800362e:	2000      	movs	r0, #0
 8003630:	2100      	movs	r1, #0
 8003632:	2d00      	cmp	r5, #0
 8003634:	da09      	bge.n	800364a <__kernel_rem_pio2+0x5c2>
 8003636:	f1bb 0f00 	cmp.w	fp, #0
 800363a:	d002      	beq.n	8003642 <__kernel_rem_pio2+0x5ba>
 800363c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003640:	4619      	mov	r1, r3
 8003642:	9b01      	ldr	r3, [sp, #4]
 8003644:	e9c3 0100 	strd	r0, r1, [r3]
 8003648:	e791      	b.n	800356e <__kernel_rem_pio2+0x4e6>
 800364a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800364e:	f7fc fddd 	bl	800020c <__adddf3>
 8003652:	3d01      	subs	r5, #1
 8003654:	e7ed      	b.n	8003632 <__kernel_rem_pio2+0x5aa>
 8003656:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800365a:	f7fc fdd7 	bl	800020c <__adddf3>
 800365e:	3e01      	subs	r6, #1
 8003660:	e7c0      	b.n	80035e4 <__kernel_rem_pio2+0x55c>
 8003662:	4602      	mov	r2, r0
 8003664:	460b      	mov	r3, r1
 8003666:	e7c5      	b.n	80035f4 <__kernel_rem_pio2+0x56c>
 8003668:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800366c:	f7fc fdce 	bl	800020c <__adddf3>
 8003670:	3401      	adds	r4, #1
 8003672:	e7ca      	b.n	800360a <__kernel_rem_pio2+0x582>
 8003674:	e9da 8900 	ldrd	r8, r9, [sl]
 8003678:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800367c:	9b02      	ldr	r3, [sp, #8]
 800367e:	3b01      	subs	r3, #1
 8003680:	9302      	str	r3, [sp, #8]
 8003682:	4632      	mov	r2, r6
 8003684:	463b      	mov	r3, r7
 8003686:	4640      	mov	r0, r8
 8003688:	4649      	mov	r1, r9
 800368a:	f7fc fdbf 	bl	800020c <__adddf3>
 800368e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003692:	4602      	mov	r2, r0
 8003694:	460b      	mov	r3, r1
 8003696:	4640      	mov	r0, r8
 8003698:	4649      	mov	r1, r9
 800369a:	f7fc fdb5 	bl	8000208 <__aeabi_dsub>
 800369e:	4632      	mov	r2, r6
 80036a0:	463b      	mov	r3, r7
 80036a2:	f7fc fdb3 	bl	800020c <__adddf3>
 80036a6:	ed9d 7b08 	vldr	d7, [sp, #32]
 80036aa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80036ae:	ed8a 7b00 	vstr	d7, [sl]
 80036b2:	e76e      	b.n	8003592 <__kernel_rem_pio2+0x50a>
 80036b4:	e9d4 8900 	ldrd	r8, r9, [r4]
 80036b8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80036bc:	4640      	mov	r0, r8
 80036be:	4632      	mov	r2, r6
 80036c0:	463b      	mov	r3, r7
 80036c2:	4649      	mov	r1, r9
 80036c4:	f7fc fda2 	bl	800020c <__adddf3>
 80036c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80036cc:	4602      	mov	r2, r0
 80036ce:	460b      	mov	r3, r1
 80036d0:	4640      	mov	r0, r8
 80036d2:	4649      	mov	r1, r9
 80036d4:	f7fc fd98 	bl	8000208 <__aeabi_dsub>
 80036d8:	4632      	mov	r2, r6
 80036da:	463b      	mov	r3, r7
 80036dc:	f7fc fd96 	bl	800020c <__adddf3>
 80036e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80036e4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80036e8:	ed84 7b00 	vstr	d7, [r4]
 80036ec:	f10a 3aff 	add.w	sl, sl, #4294967295
 80036f0:	e755      	b.n	800359e <__kernel_rem_pio2+0x516>
 80036f2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80036f6:	f7fc fd89 	bl	800020c <__adddf3>
 80036fa:	3d01      	subs	r5, #1
 80036fc:	e759      	b.n	80035b2 <__kernel_rem_pio2+0x52a>
 80036fe:	9b01      	ldr	r3, [sp, #4]
 8003700:	9a01      	ldr	r2, [sp, #4]
 8003702:	601d      	str	r5, [r3, #0]
 8003704:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8003708:	605c      	str	r4, [r3, #4]
 800370a:	609f      	str	r7, [r3, #8]
 800370c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8003710:	60d3      	str	r3, [r2, #12]
 8003712:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003716:	6110      	str	r0, [r2, #16]
 8003718:	6153      	str	r3, [r2, #20]
 800371a:	e728      	b.n	800356e <__kernel_rem_pio2+0x4e6>
 800371c:	41700000 	.word	0x41700000
 8003720:	3e700000 	.word	0x3e700000
 8003724:	00000000 	.word	0x00000000

08003728 <__kernel_sin>:
 8003728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800372c:	ed2d 8b04 	vpush	{d8-d9}
 8003730:	eeb0 8a41 	vmov.f32	s16, s2
 8003734:	eef0 8a61 	vmov.f32	s17, s3
 8003738:	ec55 4b10 	vmov	r4, r5, d0
 800373c:	b083      	sub	sp, #12
 800373e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8003742:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8003746:	9001      	str	r0, [sp, #4]
 8003748:	da06      	bge.n	8003758 <__kernel_sin+0x30>
 800374a:	ee10 0a10 	vmov	r0, s0
 800374e:	4629      	mov	r1, r5
 8003750:	f7fd f9ac 	bl	8000aac <__aeabi_d2iz>
 8003754:	2800      	cmp	r0, #0
 8003756:	d051      	beq.n	80037fc <__kernel_sin+0xd4>
 8003758:	4622      	mov	r2, r4
 800375a:	462b      	mov	r3, r5
 800375c:	4620      	mov	r0, r4
 800375e:	4629      	mov	r1, r5
 8003760:	f7fc ff0a 	bl	8000578 <__aeabi_dmul>
 8003764:	4682      	mov	sl, r0
 8003766:	468b      	mov	fp, r1
 8003768:	4602      	mov	r2, r0
 800376a:	460b      	mov	r3, r1
 800376c:	4620      	mov	r0, r4
 800376e:	4629      	mov	r1, r5
 8003770:	f7fc ff02 	bl	8000578 <__aeabi_dmul>
 8003774:	a341      	add	r3, pc, #260	; (adr r3, 800387c <__kernel_sin+0x154>)
 8003776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800377a:	4680      	mov	r8, r0
 800377c:	4689      	mov	r9, r1
 800377e:	4650      	mov	r0, sl
 8003780:	4659      	mov	r1, fp
 8003782:	f7fc fef9 	bl	8000578 <__aeabi_dmul>
 8003786:	a33f      	add	r3, pc, #252	; (adr r3, 8003884 <__kernel_sin+0x15c>)
 8003788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800378c:	f7fc fd3c 	bl	8000208 <__aeabi_dsub>
 8003790:	4652      	mov	r2, sl
 8003792:	465b      	mov	r3, fp
 8003794:	f7fc fef0 	bl	8000578 <__aeabi_dmul>
 8003798:	a33c      	add	r3, pc, #240	; (adr r3, 800388c <__kernel_sin+0x164>)
 800379a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800379e:	f7fc fd35 	bl	800020c <__adddf3>
 80037a2:	4652      	mov	r2, sl
 80037a4:	465b      	mov	r3, fp
 80037a6:	f7fc fee7 	bl	8000578 <__aeabi_dmul>
 80037aa:	a33a      	add	r3, pc, #232	; (adr r3, 8003894 <__kernel_sin+0x16c>)
 80037ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b0:	f7fc fd2a 	bl	8000208 <__aeabi_dsub>
 80037b4:	4652      	mov	r2, sl
 80037b6:	465b      	mov	r3, fp
 80037b8:	f7fc fede 	bl	8000578 <__aeabi_dmul>
 80037bc:	a337      	add	r3, pc, #220	; (adr r3, 800389c <__kernel_sin+0x174>)
 80037be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c2:	f7fc fd23 	bl	800020c <__adddf3>
 80037c6:	9b01      	ldr	r3, [sp, #4]
 80037c8:	4606      	mov	r6, r0
 80037ca:	460f      	mov	r7, r1
 80037cc:	b9eb      	cbnz	r3, 800380a <__kernel_sin+0xe2>
 80037ce:	4602      	mov	r2, r0
 80037d0:	460b      	mov	r3, r1
 80037d2:	4650      	mov	r0, sl
 80037d4:	4659      	mov	r1, fp
 80037d6:	f7fc fecf 	bl	8000578 <__aeabi_dmul>
 80037da:	a325      	add	r3, pc, #148	; (adr r3, 8003870 <__kernel_sin+0x148>)
 80037dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e0:	f7fc fd12 	bl	8000208 <__aeabi_dsub>
 80037e4:	4642      	mov	r2, r8
 80037e6:	464b      	mov	r3, r9
 80037e8:	f7fc fec6 	bl	8000578 <__aeabi_dmul>
 80037ec:	4602      	mov	r2, r0
 80037ee:	460b      	mov	r3, r1
 80037f0:	4620      	mov	r0, r4
 80037f2:	4629      	mov	r1, r5
 80037f4:	f7fc fd0a 	bl	800020c <__adddf3>
 80037f8:	4604      	mov	r4, r0
 80037fa:	460d      	mov	r5, r1
 80037fc:	ec45 4b10 	vmov	d0, r4, r5
 8003800:	b003      	add	sp, #12
 8003802:	ecbd 8b04 	vpop	{d8-d9}
 8003806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800380a:	4b1b      	ldr	r3, [pc, #108]	; (8003878 <__kernel_sin+0x150>)
 800380c:	ec51 0b18 	vmov	r0, r1, d8
 8003810:	2200      	movs	r2, #0
 8003812:	f7fc feb1 	bl	8000578 <__aeabi_dmul>
 8003816:	4632      	mov	r2, r6
 8003818:	ec41 0b19 	vmov	d9, r0, r1
 800381c:	463b      	mov	r3, r7
 800381e:	4640      	mov	r0, r8
 8003820:	4649      	mov	r1, r9
 8003822:	f7fc fea9 	bl	8000578 <__aeabi_dmul>
 8003826:	4602      	mov	r2, r0
 8003828:	460b      	mov	r3, r1
 800382a:	ec51 0b19 	vmov	r0, r1, d9
 800382e:	f7fc fceb 	bl	8000208 <__aeabi_dsub>
 8003832:	4652      	mov	r2, sl
 8003834:	465b      	mov	r3, fp
 8003836:	f7fc fe9f 	bl	8000578 <__aeabi_dmul>
 800383a:	ec53 2b18 	vmov	r2, r3, d8
 800383e:	f7fc fce3 	bl	8000208 <__aeabi_dsub>
 8003842:	a30b      	add	r3, pc, #44	; (adr r3, 8003870 <__kernel_sin+0x148>)
 8003844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003848:	4606      	mov	r6, r0
 800384a:	460f      	mov	r7, r1
 800384c:	4640      	mov	r0, r8
 800384e:	4649      	mov	r1, r9
 8003850:	f7fc fe92 	bl	8000578 <__aeabi_dmul>
 8003854:	4602      	mov	r2, r0
 8003856:	460b      	mov	r3, r1
 8003858:	4630      	mov	r0, r6
 800385a:	4639      	mov	r1, r7
 800385c:	f7fc fcd6 	bl	800020c <__adddf3>
 8003860:	4602      	mov	r2, r0
 8003862:	460b      	mov	r3, r1
 8003864:	4620      	mov	r0, r4
 8003866:	4629      	mov	r1, r5
 8003868:	f7fc fcce 	bl	8000208 <__aeabi_dsub>
 800386c:	e7c4      	b.n	80037f8 <__kernel_sin+0xd0>
 800386e:	bf00      	nop
 8003870:	55555549 	.word	0x55555549
 8003874:	3fc55555 	.word	0x3fc55555
 8003878:	3fe00000 	.word	0x3fe00000
 800387c:	5acfd57c 	.word	0x5acfd57c
 8003880:	3de5d93a 	.word	0x3de5d93a
 8003884:	8a2b9ceb 	.word	0x8a2b9ceb
 8003888:	3e5ae5e6 	.word	0x3e5ae5e6
 800388c:	57b1fe7d 	.word	0x57b1fe7d
 8003890:	3ec71de3 	.word	0x3ec71de3
 8003894:	19c161d5 	.word	0x19c161d5
 8003898:	3f2a01a0 	.word	0x3f2a01a0
 800389c:	1110f8a6 	.word	0x1110f8a6
 80038a0:	3f811111 	.word	0x3f811111

080038a4 <fabs>:
 80038a4:	ec51 0b10 	vmov	r0, r1, d0
 80038a8:	ee10 2a10 	vmov	r2, s0
 80038ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80038b0:	ec43 2b10 	vmov	d0, r2, r3
 80038b4:	4770      	bx	lr
	...

080038b8 <floor>:
 80038b8:	ec51 0b10 	vmov	r0, r1, d0
 80038bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038c0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80038c4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80038c8:	2e13      	cmp	r6, #19
 80038ca:	ee10 5a10 	vmov	r5, s0
 80038ce:	ee10 8a10 	vmov	r8, s0
 80038d2:	460c      	mov	r4, r1
 80038d4:	dc32      	bgt.n	800393c <floor+0x84>
 80038d6:	2e00      	cmp	r6, #0
 80038d8:	da14      	bge.n	8003904 <floor+0x4c>
 80038da:	a333      	add	r3, pc, #204	; (adr r3, 80039a8 <floor+0xf0>)
 80038dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e0:	f7fc fc94 	bl	800020c <__adddf3>
 80038e4:	2200      	movs	r2, #0
 80038e6:	2300      	movs	r3, #0
 80038e8:	f7fd f8d6 	bl	8000a98 <__aeabi_dcmpgt>
 80038ec:	b138      	cbz	r0, 80038fe <floor+0x46>
 80038ee:	2c00      	cmp	r4, #0
 80038f0:	da57      	bge.n	80039a2 <floor+0xea>
 80038f2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80038f6:	431d      	orrs	r5, r3
 80038f8:	d001      	beq.n	80038fe <floor+0x46>
 80038fa:	4c2d      	ldr	r4, [pc, #180]	; (80039b0 <floor+0xf8>)
 80038fc:	2500      	movs	r5, #0
 80038fe:	4621      	mov	r1, r4
 8003900:	4628      	mov	r0, r5
 8003902:	e025      	b.n	8003950 <floor+0x98>
 8003904:	4f2b      	ldr	r7, [pc, #172]	; (80039b4 <floor+0xfc>)
 8003906:	4137      	asrs	r7, r6
 8003908:	ea01 0307 	and.w	r3, r1, r7
 800390c:	4303      	orrs	r3, r0
 800390e:	d01f      	beq.n	8003950 <floor+0x98>
 8003910:	a325      	add	r3, pc, #148	; (adr r3, 80039a8 <floor+0xf0>)
 8003912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003916:	f7fc fc79 	bl	800020c <__adddf3>
 800391a:	2200      	movs	r2, #0
 800391c:	2300      	movs	r3, #0
 800391e:	f7fd f8bb 	bl	8000a98 <__aeabi_dcmpgt>
 8003922:	2800      	cmp	r0, #0
 8003924:	d0eb      	beq.n	80038fe <floor+0x46>
 8003926:	2c00      	cmp	r4, #0
 8003928:	bfbe      	ittt	lt
 800392a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800392e:	fa43 f606 	asrlt.w	r6, r3, r6
 8003932:	19a4      	addlt	r4, r4, r6
 8003934:	ea24 0407 	bic.w	r4, r4, r7
 8003938:	2500      	movs	r5, #0
 800393a:	e7e0      	b.n	80038fe <floor+0x46>
 800393c:	2e33      	cmp	r6, #51	; 0x33
 800393e:	dd0b      	ble.n	8003958 <floor+0xa0>
 8003940:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8003944:	d104      	bne.n	8003950 <floor+0x98>
 8003946:	ee10 2a10 	vmov	r2, s0
 800394a:	460b      	mov	r3, r1
 800394c:	f7fc fc5e 	bl	800020c <__adddf3>
 8003950:	ec41 0b10 	vmov	d0, r0, r1
 8003954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003958:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800395c:	f04f 33ff 	mov.w	r3, #4294967295
 8003960:	fa23 f707 	lsr.w	r7, r3, r7
 8003964:	4207      	tst	r7, r0
 8003966:	d0f3      	beq.n	8003950 <floor+0x98>
 8003968:	a30f      	add	r3, pc, #60	; (adr r3, 80039a8 <floor+0xf0>)
 800396a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396e:	f7fc fc4d 	bl	800020c <__adddf3>
 8003972:	2200      	movs	r2, #0
 8003974:	2300      	movs	r3, #0
 8003976:	f7fd f88f 	bl	8000a98 <__aeabi_dcmpgt>
 800397a:	2800      	cmp	r0, #0
 800397c:	d0bf      	beq.n	80038fe <floor+0x46>
 800397e:	2c00      	cmp	r4, #0
 8003980:	da02      	bge.n	8003988 <floor+0xd0>
 8003982:	2e14      	cmp	r6, #20
 8003984:	d103      	bne.n	800398e <floor+0xd6>
 8003986:	3401      	adds	r4, #1
 8003988:	ea25 0507 	bic.w	r5, r5, r7
 800398c:	e7b7      	b.n	80038fe <floor+0x46>
 800398e:	2301      	movs	r3, #1
 8003990:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8003994:	fa03 f606 	lsl.w	r6, r3, r6
 8003998:	4435      	add	r5, r6
 800399a:	4545      	cmp	r5, r8
 800399c:	bf38      	it	cc
 800399e:	18e4      	addcc	r4, r4, r3
 80039a0:	e7f2      	b.n	8003988 <floor+0xd0>
 80039a2:	2500      	movs	r5, #0
 80039a4:	462c      	mov	r4, r5
 80039a6:	e7aa      	b.n	80038fe <floor+0x46>
 80039a8:	8800759c 	.word	0x8800759c
 80039ac:	7e37e43c 	.word	0x7e37e43c
 80039b0:	bff00000 	.word	0xbff00000
 80039b4:	000fffff 	.word	0x000fffff

080039b8 <scalbn>:
 80039b8:	b570      	push	{r4, r5, r6, lr}
 80039ba:	ec55 4b10 	vmov	r4, r5, d0
 80039be:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80039c2:	4606      	mov	r6, r0
 80039c4:	462b      	mov	r3, r5
 80039c6:	b99a      	cbnz	r2, 80039f0 <scalbn+0x38>
 80039c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80039cc:	4323      	orrs	r3, r4
 80039ce:	d036      	beq.n	8003a3e <scalbn+0x86>
 80039d0:	4b39      	ldr	r3, [pc, #228]	; (8003ab8 <scalbn+0x100>)
 80039d2:	4629      	mov	r1, r5
 80039d4:	ee10 0a10 	vmov	r0, s0
 80039d8:	2200      	movs	r2, #0
 80039da:	f7fc fdcd 	bl	8000578 <__aeabi_dmul>
 80039de:	4b37      	ldr	r3, [pc, #220]	; (8003abc <scalbn+0x104>)
 80039e0:	429e      	cmp	r6, r3
 80039e2:	4604      	mov	r4, r0
 80039e4:	460d      	mov	r5, r1
 80039e6:	da10      	bge.n	8003a0a <scalbn+0x52>
 80039e8:	a32b      	add	r3, pc, #172	; (adr r3, 8003a98 <scalbn+0xe0>)
 80039ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ee:	e03a      	b.n	8003a66 <scalbn+0xae>
 80039f0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80039f4:	428a      	cmp	r2, r1
 80039f6:	d10c      	bne.n	8003a12 <scalbn+0x5a>
 80039f8:	ee10 2a10 	vmov	r2, s0
 80039fc:	4620      	mov	r0, r4
 80039fe:	4629      	mov	r1, r5
 8003a00:	f7fc fc04 	bl	800020c <__adddf3>
 8003a04:	4604      	mov	r4, r0
 8003a06:	460d      	mov	r5, r1
 8003a08:	e019      	b.n	8003a3e <scalbn+0x86>
 8003a0a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8003a0e:	460b      	mov	r3, r1
 8003a10:	3a36      	subs	r2, #54	; 0x36
 8003a12:	4432      	add	r2, r6
 8003a14:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8003a18:	428a      	cmp	r2, r1
 8003a1a:	dd08      	ble.n	8003a2e <scalbn+0x76>
 8003a1c:	2d00      	cmp	r5, #0
 8003a1e:	a120      	add	r1, pc, #128	; (adr r1, 8003aa0 <scalbn+0xe8>)
 8003a20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003a24:	da1c      	bge.n	8003a60 <scalbn+0xa8>
 8003a26:	a120      	add	r1, pc, #128	; (adr r1, 8003aa8 <scalbn+0xf0>)
 8003a28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003a2c:	e018      	b.n	8003a60 <scalbn+0xa8>
 8003a2e:	2a00      	cmp	r2, #0
 8003a30:	dd08      	ble.n	8003a44 <scalbn+0x8c>
 8003a32:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003a36:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003a3a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003a3e:	ec45 4b10 	vmov	d0, r4, r5
 8003a42:	bd70      	pop	{r4, r5, r6, pc}
 8003a44:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8003a48:	da19      	bge.n	8003a7e <scalbn+0xc6>
 8003a4a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8003a4e:	429e      	cmp	r6, r3
 8003a50:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8003a54:	dd0a      	ble.n	8003a6c <scalbn+0xb4>
 8003a56:	a112      	add	r1, pc, #72	; (adr r1, 8003aa0 <scalbn+0xe8>)
 8003a58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1e2      	bne.n	8003a26 <scalbn+0x6e>
 8003a60:	a30f      	add	r3, pc, #60	; (adr r3, 8003aa0 <scalbn+0xe8>)
 8003a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a66:	f7fc fd87 	bl	8000578 <__aeabi_dmul>
 8003a6a:	e7cb      	b.n	8003a04 <scalbn+0x4c>
 8003a6c:	a10a      	add	r1, pc, #40	; (adr r1, 8003a98 <scalbn+0xe0>)
 8003a6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d0b8      	beq.n	80039e8 <scalbn+0x30>
 8003a76:	a10e      	add	r1, pc, #56	; (adr r1, 8003ab0 <scalbn+0xf8>)
 8003a78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003a7c:	e7b4      	b.n	80039e8 <scalbn+0x30>
 8003a7e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003a82:	3236      	adds	r2, #54	; 0x36
 8003a84:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003a88:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8003a8c:	4620      	mov	r0, r4
 8003a8e:	4b0c      	ldr	r3, [pc, #48]	; (8003ac0 <scalbn+0x108>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	e7e8      	b.n	8003a66 <scalbn+0xae>
 8003a94:	f3af 8000 	nop.w
 8003a98:	c2f8f359 	.word	0xc2f8f359
 8003a9c:	01a56e1f 	.word	0x01a56e1f
 8003aa0:	8800759c 	.word	0x8800759c
 8003aa4:	7e37e43c 	.word	0x7e37e43c
 8003aa8:	8800759c 	.word	0x8800759c
 8003aac:	fe37e43c 	.word	0xfe37e43c
 8003ab0:	c2f8f359 	.word	0xc2f8f359
 8003ab4:	81a56e1f 	.word	0x81a56e1f
 8003ab8:	43500000 	.word	0x43500000
 8003abc:	ffff3cb0 	.word	0xffff3cb0
 8003ac0:	3c900000 	.word	0x3c900000

08003ac4 <_init>:
 8003ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ac6:	bf00      	nop
 8003ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aca:	bc08      	pop	{r3}
 8003acc:	469e      	mov	lr, r3
 8003ace:	4770      	bx	lr

08003ad0 <_fini>:
 8003ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ad2:	bf00      	nop
 8003ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ad6:	bc08      	pop	{r3}
 8003ad8:	469e      	mov	lr, r3
 8003ada:	4770      	bx	lr
